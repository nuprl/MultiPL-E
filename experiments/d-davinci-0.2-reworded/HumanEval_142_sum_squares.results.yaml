name: HumanEval_142_sum_squares
language: d
results:
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, v; lst) \n    {\n        if (i %\
    \ 3 == 0) \n        {\n            sum += v * v;\n        } \n        else if\
    \ (i % 4 == 0) \n        {\n            sum += v * v * v;\n        } \n      \
    \  else \n        {\n            sum += v;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e *= e;\n        }\n        else if(i % 4\
    \ == 0)\n        {\n            e *= e * e;\n        }\n        sum += e;\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, v; lst) \n    {\n        if(i %\
    \ 3 == 0) \n        {\n            sum += v * v;\n        }\n        else if(i\
    \ % 4 == 0) \n        {\n            sum += v * v * v;\n        }\n        else\
    \ \n        {\n            sum += v;\n        }\n    }\n    return sum;\n}\n/*\n\
    \"\n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v; lst) \n\
    \    {\n        if(i % 3 == 0) \n        {\n            sum += v * v;\n      \
    \  }\n        else if(i % 4 == 0) \n        {\n            sum += v * v * v;\n\
    \        }\n        else \n        {\n            sum += v;\n        }\n    }\n\
    \    return sum;\n}\n/*\n\"\n    This function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \n    multiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \n    change\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>>\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8xt7eapd.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8xt7eapd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if (i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if (i\
    \ % 4 == 0)\n        {\n            e = e * e * e;\n        }\n        sum +=\
    \ e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, x; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += x * x * x;\n        }\n        else\n\
    \        {\n            sum += x;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i %\
    \ 3 == 0)\n        {\n            sum += e * e;\n        }\n        else if (i\
    \ % 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpohd86f_v.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpohd86f_v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i %\
    \ 3 == 0)\n        {\n            sum += e * e;\n        }\n        else if (i\
    \ % 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e *= e;\n        }\n        else if(i % 4\
    \ == 0)\n        {\n            e *= e * e;\n        }\n        sum += e;\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqyzgkqwr.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqyzgkqwr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(index, item; lst)\n    {\n        if(index\
    \ % 3 == 0)\n        {\n            sum += item * item;\n        }\n        else\
    \ if(index % 4 == 0 && index % 3 != 0)\n        {\n            sum += item * item\
    \ * item;\n        }\n        else\n        {\n            sum += item;\n    \
    \    }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, val; lst)\n    {\n        if(i %\
    \ 3 == 0)\n        {\n            sum += val * val;\n        }\n        else if(i\
    \ % 4 == 0)\n        {\n            sum += val * val * val;\n        }\n     \
    \   else\n        {\n            sum += val;\n        }\n    }\n    return sum;\n\
    }\n/*\n\"\n    This function will take an array of integers. For all entries in\
    \ the array, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n\
    \    \n*/\nlong sum_squares_v2(long[] lst) \n{\n    long sum = 0;\n    foreach(i,\
    \ val; lst)\n    {\n        if(i % 3 == 0)\n        {\n            sum += val\
    \ * val;\n        }\n        else if(i % 4 == 0)\n        {\n            sum +=\
    \ val * val * val;\n        }\n        else\n        {\n            sum += val;\n\
    \        }\n    }\n    return sum;\n}\n/*\n\"\n    This function will take an\
    \ array of integers. For all entries in the array, the function shall square the\
    \ integer entry if its index is a \n    multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n    change the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n    \n \
    \   Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1L\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpa_qo50gd.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa_qo50gd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, val; lst)\n    {\n        if(i %\
    \ 3 == 0)\n        {\n            sum += val * val;\n        }\n        else if(i\
    \ % 4 == 0)\n        {\n            sum += val * val * val;\n        }\n     \
    \   else\n        {\n            sum += val;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            e *= e;\n        }\n        else if(i % 4 == 0)\n\
    \        {\n            e *= e * e;\n        }\n        sum += e;\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if (i %\
    \ 3 == 0) \n        {\n            sum += e * e;\n        }\n        else if (i\
    \ % 4 == 0) \n        {\n            sum += e * e * e;\n        }\n        else\
    \ \n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\
    \"\n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n\
    \    {\n        if (i % 3 == 0) \n        {\n            sum += e * e;\n     \
    \   }\n        else if (i % 4 == 0) \n        {\n            sum += e * e * e;\n\
    \        }\n        else \n        {\n            sum += e;\n        }\n    }\n\
    \    return sum;\n}\n/*\n\"\n    This function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \n    multiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \n    change\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>>\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsfb_gfq0.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfb_gfq0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, item; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += item * item;\n        }\n        else\
    \ if(i % 4 == 0)\n        {\n            sum += item * item * item;\n        }\n\
    \        else\n        {\n            sum += item;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, item; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += item * item;\n        }\n        else\
    \ if(i % 4 == 0)\n        {\n            sum += item * item * item;\n        }\n\
    \        else\n        {\n            sum += item;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref entry; lst)\n    {\n       \
    \ if(i % 3 == 0)\n        {\n            entry = entry * entry;\n        }\n \
    \       else if(i % 4 == 0)\n        {\n            entry = entry * entry * entry;\n\
    \        }\n        sum += entry;\n    }\n    return sum;\n}\n/*\n\"\n    This\
    \ function will take an array of integers. For all entries in the array, the function\
    \ shall square the integer entry if its index is a \n    multiple of 3 and will\
    \ cube the integer entry if its index is a multiple of 4 and not a multiple of\
    \ 3. The function will not \n    change the entries in the array whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares_2(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref entry; lst)\n    {\n       \
    \ if(i % 3 == 0)\n        {\n            entry = entry * entry;\n        }\n \
    \       else if(i % 4 == 0)\n        {\n            entry = entry * entry * entry;\n\
    \        }\n        sum += entry;\n    }\n    return sum;\n}\n/*\n\"\n    This\
    \ function will take an array of integers. For all entries in the array, the function\
    \ shall square the integer entry if its index is a \n    multiple of 3 and will\
    \ cube the integer entry if its index is a multiple of 4 and not a multiple of\
    \ 3. The function will not \n    change the entries in the array whose indexes\
    \ are not a multiple of 3 or 4. The function shall then return the sum of all\
    \ entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n\
    \    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptt9ybhqr.d(67): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptt9ybhqr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += v * v;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += v * v * v;\n        }\n        else\n\
    \        {\n            sum += v;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, item; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += item * item;\n        }\n        else\
    \ if(i % 4 == 0)\n        {\n            sum += item * item * item;\n        }\n\
    \        else\n        {\n            sum += item;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, x; lst)\n    {\n        if (i %\
    \ 3 == 0)\n        {\n            sum += x * x;\n        }\n        else if (i\
    \ % 4 == 0)\n        {\n            sum += x * x * x;\n        }\n        else\n\
    \        {\n            sum += x;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, item; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += item * item;\n        }\n        else\
    \ if(i % 4 == 0)\n        {\n            sum += item * item * item;\n        }\n\
    \        else\n        {\n            sum += item;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, x; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += x * x * x;\n        }\n        else\n\
    \        {\n            sum += x;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            sum += e * e * e;\n        }\n\
    \        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(index, value; lst)\n    {\n       \
    \ if(index % 3 == 0)\n        {\n            sum += value * value;\n        }\n\
    \        else if(index % 4 == 0)\n        {\n            sum += value * value\
    \ * value;\n        }\n        else\n        {\n            sum += value;\n  \
    \      }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpje1e_8w6.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpje1e_8w6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e *= e;\n        }\n        else if(i % 4\
    \ == 0)\n        {\n            e *= e * e;\n        }\n        sum += e;\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6qg4gvjm.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6qg4gvjm.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e*e;\n        }\n        else if(i % 4\
    \ == 0)\n        {\n            sum += e*e*e;\n        }\n        else\n     \
    \   {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\n \
    \   This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n  \
    \  {\n        if(i % 3 == 0)\n        {\n            sum += e*e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e*e*e;\n        }\n\
    \        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt1v2p8fo.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1v2p8fo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, elem; lst)\n    {\n        if (i\
    \ % 3 == 0)\n        {\n            sum += elem * elem;\n        }\n        else\
    \ if (i % 4 == 0)\n        {\n            sum += elem * elem * elem;\n       \
    \ }\n        else\n        {\n            sum += elem;\n        }\n    }\n   \
    \ return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            sum += e * e * e;\n        }\n\
    \        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            sum += e * e * e;\n        }\n\
    \        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n\
    \    \n*/\nlong sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n\
    \        }\n        else if(i % 4 == 0 && i % 3 != 0)\n        {\n           \
    \ sum += e * e * e;\n        }\n        else\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\n/*\n\"\n    This function will take an\
    \ array of integers. For all entries in the array, the function shall square the\
    \ integer entry if its index is a \n    multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n    change the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n    \n \
    \   Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n   \nunittest\n{\n\
    \    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph5g3k33e.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph5g3k33e.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            sum += e * e * e;\n        }\n\
    \        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            sum += e * e * e;\n        }\n\
    \        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, item; lst) \n    {\n        if(i\
    \ % 3 == 0) \n        {\n            sum += item * item;\n        }\n        else\
    \ if(i % 4 == 0) \n        {\n            sum += item * item * item;\n       \
    \ }\n        else \n        {\n            sum += item;\n        }\n    }\n  \
    \  return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref x; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += x * x;\n        }\n        else if(i\
    \ % 4 == 0)\n        {\n            sum += x * x * x;\n        }\n        else\n\
    \        {\n            sum += x;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i %\
    \ 3 == 0) \n        {\n            sum += e * e;\n        }\n        else if(i\
    \ % 4 == 0) \n        {\n            sum += e * e * e;\n        }\n        else\
    \ \n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb0r83v2o.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb0r83v2o.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            sum += e * e * e;\n        }\n\
    \        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n\
    \    \n*/\nlong sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e;\
    \ lst)\n    {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n\
    \        }\n        else if(i % 4 == 0 && i % 3 != 0)\n        {\n           \
    \ sum += e * e * e;\n        }\n        else\n        {\n            sum += e;\n\
    \        }\n    }\n    return sum;\n}\n/*\n\"\n    This function will take an\
    \ array of integers. For all entries in the array, the function shall square the\
    \ integer entry if its index is a \n    multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n    change the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n    \n \
    \   Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n   \nunittest\n{\n\
    \    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxdb4cuzz.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxdb4cuzz.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e*e;\n        }\n        else if(i % 4\
    \ == 0)\n        {\n            sum += e*e*e;\n        }\n        else\n     \
    \   {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if (i %\
    \ 3 == 0) \n        {\n            sum += e * e;\n        } \n        else if\
    \ (i % 4 == 0) \n        {\n            sum += e * e * e;\n        } \n      \
    \  else \n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\n/*\n\"\n    This function will take an array of integers. For all entries in\
    \ the array, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n\
    \    \n*/\nlong sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i,\
    \ e; lst) \n    {\n        if (i % 3 == 0) \n        {\n            sum += e *\
    \ e;\n        } \n        else if (i % 4 == 0) \n        {\n            sum +=\
    \ e * e * e;\n        } \n        else \n        {\n            sum += e;\n  \
    \      }\n    }\n    return sum;\n}\n/*\n\"\n    This function will take an array\
    \ of integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \n    multiple of 3 and will cube the integer entry\
    \ if its index is a multiple of 4 and not a multiple of 3. The function will not\
    \ \n    change the entries in the array whose indexes are not a multiple of 3\
    \ or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n\
    \    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n   \nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwc7_ma7n.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwc7_ma7n.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i %\
    \ 3 == 0)\n            sum += e * e;\n        else if(i % 4 == 0)\n          \
    \  sum += e * e * e;\n        else\n            sum += e;\n    }\n    return sum;\n\
    }\n/*\n\"\n    This function will take an array of integers. For all entries in\
    \ the array, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n\
    \    \n*/\nlong sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i,\
    \ e; lst) \n    {\n        if(i % 3 == 0)\n            sum += e * e;\n       \
    \ else if(i % 4 == 0)\n            sum += e * e * e;\n        else\n         \
    \   sum += e;\n    }\n    return sum;\n}\n/*\n\"\n    This function will take\
    \ an array of integers. For all entries in the array, the function shall square\
    \ the integer entry if its index is a \n    multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n    change the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n    \n \
    \   Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares_3(long[] lst) \nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpae88f85z.d(77): Error: semicolon expected following function\
    \ declaration\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpae88f85z.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            lst[i] = e * e;\n        }\n        else if(i\
    \ % 4 == 0 && i % 3 != 0)\n        {\n            lst[i] = e * e * e;\n      \
    \  }\n        sum += lst[i];\n    }\n    return sum;\n}\nunittest\n{\n    alias\
    \ candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n   \
    \ assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, val; lst)\n    {\n        if(i %\
    \ 3 == 0)\n        {\n            sum += val * val;\n        }\n        else if(i\
    \ % 4 == 0)\n        {\n            sum += val * val * val;\n        }\n     \
    \   else\n        {\n            sum += val;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i %\
    \ 3 == 0) \n        {\n            sum += e * e;\n        }\n        else if(i\
    \ % 4 == 0) \n        {\n            sum += e * e * e;\n        }\n        else\
    \ \n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\
    \"\n    This function will take an array of integers. The function will return\
    \ the sum of all entries in the array whose index is a multiple of 3. \n    \n\
    \    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_multiples_of_3(long[] lst) \n\
    {\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i % 3 == 0) \n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. The function will return the\
    \ sum of all entries in the array whose index is a multiple of 4. \n    \n   \
    \ Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_multiples_of_4(long[] lst) \n\
    {\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i % 4 == 0) \n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. The function will return the\
    \ sum of all entries in the array whose index is a multiple of 5. \n    \n   \
    \ Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\nunittest\n{\n    alias\
    \ candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n   \
    \ assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo88fffa4.d(88): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo88fffa4.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            sum += e * e * e;\n        }\n\
    \        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e*e;\n        }\n        else if(i % 4\
    \ == 0)\n        {\n            sum += e*e*e;\n        }\n        else\n     \
    \   {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\n \
    \   This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n  \
    \  {\n        if(i % 3 == 0)\n        {\n            sum += e*e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e*e*e;\n        }\n\
    \        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpr_srbfut.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr_srbfut.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if (i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if (i\
    \ % 4 == 0)\n        {\n            e = e * e * e;\n        }\n        sum +=\
    \ e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref x; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            x = x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            x = x * x * x;\n        }\n        sum += x;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i %\
    \ 3 == 0)\n        {\n            sum += e * e;\n        }\n        else if (i\
    \ % 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpid18lpkr.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpid18lpkr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, val; lst)\n    {\n        if(i %\
    \ 3 == 0)\n        {\n            sum += val * val;\n        }\n        else if(i\
    \ % 4 == 0)\n        {\n            sum += val * val * val;\n        }\n     \
    \   else\n        {\n            sum += val;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if (i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if (i\
    \ % 4 == 0)\n        {\n            e = e * e * e;\n        }\n        sum +=\
    \ e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, item; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += item * item;\n        }\n        else\
    \ if(i % 4 == 0)\n        {\n            sum += item * item * item;\n        }\n\
    \        else\n        {\n            sum += item;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if (i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if (i\
    \ % 4 == 0)\n        {\n            e = e * e * e;\n        }\n        sum +=\
    \ e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_ax2be3v.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_ax2be3v.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, x; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += x * x * x;\n        }\n        else\n\
    \        {\n            sum += x;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst) \n    {\n        if\
    \ (i % 3 == 0) \n        {\n            e = e * e;\n        }\n        else if\
    \ (i % 4 == 0) \n        {\n            e = e * e * e;\n        }\n        sum\
    \ += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i %\
    \ 3 == 0) \n        {\n            sum += e * e;\n        }\n        else if(i\
    \ % 4 == 0) \n        {\n            sum += e * e * e;\n        }\n        else\
    \ \n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\
    \"\n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n\
    \    {\n        if(i % 3 == 0) \n        {\n            sum += e * e;\n      \
    \  }\n        else if(i % 4 == 0) \n        {\n            sum += e * e * e;\n\
    \        }\n        else \n        {\n            sum += e;\n        }\n    }\n\
    \    return sum;\n}\n/*\n\"\n    This function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \n    multiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \n    change\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>>\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe8zr910k.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe8zr910k.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i %\
    \ 3 == 0)\n        {\n            sum += e * e;\n        }\n        else if (i\
    \ % 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if (i %\
    \ 3 == 0) \n        {\n            sum += e * e;\n        } \n        else if\
    \ (i % 4 == 0) \n        {\n            sum += e * e * e;\n        } \n      \
    \  else \n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += v * v;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += v * v * v;\n        }\n        else\n\
    \        {\n            sum += v;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, v; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += v * v;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += v * v * v;\n     \
    \   }\n        else\n        {\n            sum += v;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsxoper83.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsxoper83.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            e = e * e;\n        }\n        else if(i % 4 ==\
    \ 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n       \
    \ sum += e;\n    }\n    return sum;\n}\n/*\n\"\n    This function will take an\
    \ array of integers. For all entries in the array, the function shall square the\
    \ integer entry if its index is a \n    multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n    change the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n    \n \
    \   Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares_2(long[] lst) \n{\n\
    \    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3 == 0)\n  \
    \      {\n            e = e * e;\n        }\n        else if(i % 4 == 0 && i %\
    \ 3 != 0)\n        {\n            e = e * e * e;\n        }\n        sum += e;\n\
    \    }\n    return sum;\n}\n/*\n\"\n    This function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \n    multiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \n    change\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmponp45wjv.d(67): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmponp45wjv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if (i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if (i\
    \ % 4 == 0)\n        {\n            e = e * e * e;\n        }\n        sum +=\
    \ e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, val; lst)\n    {\n        if(i %\
    \ 3 == 0)\n        {\n            sum += val * val;\n        }\n        else if(i\
    \ % 4 == 0)\n        {\n            sum += val * val * val;\n        }\n     \
    \   else\n        {\n            sum += val;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, val; lst)\n    {\n        if(i %\
    \ 3 == 0)\n        {\n            sum += val * val;\n        }\n        else if(i\
    \ % 4 == 0)\n        {\n            sum += val * val * val;\n        }\n     \
    \   else\n        {\n            sum += val;\n        }\n    }\n    return sum;\n\
    }\n/*\n\"\n    This function will take an array of integers and an integer. The\
    \ function will return the sum of all entries in the array that are \n    greater\
    \ than the integer.\n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_greater(long[]\
    \ lst, long n) \n{\n    long sum = 0;\n    foreach(val; lst)\n    {\n        if(val\
    \ > n)\n        {\n            sum += val;\n        }\n    }\n    return sum;\n\
    }\n/*\n\"\n    This function will take an array of integers and an integer. The\
    \ function will return the sum of all entries in the array that are \n    less\
    \ than the integer.\n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>>\
    \ lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_less(long[]\
    \ lst, long n) \n{\n    long sum = 0;\n    foreach(val; lst)\n    {\n        if(val\
    \ < n)\n        {\n            sum += val;\n        }\n    }\n    return sum;\n\
    }\n/*\n\"\n    This function will take an array of integers and an integer. The\
    \ function will return the sum of all entries in the array that are \n    equal\
    \ to the integer.\n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>>\
    \ lst\n    []\n    >>> l\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpncn8pmvi.d(90): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpncn8pmvi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref x; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            x = x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            x = x * x * x;\n        }\n        sum += x;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst) \n    {\n        if(i\
    \ % 3 == 0) \n        {\n            e *= e;\n        }\n        else if(i % 4\
    \ == 0) \n        {\n            e *= e * e;\n        }\n        sum += e;\n \
    \   }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e *= e;\n        }\n        else if(i % 4\
    \ == 0)\n        {\n            e *= e * e;\n        }\n        sum += e;\n  \
    \  }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref x; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            x = x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            x = x * x * x;\n        }\n        sum += x;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if (i %\
    \ 3 == 0)\n        {\n            sum += e * e;\n        }\n        else if (i\
    \ % 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, val; lst)\n    {\n        if(i %\
    \ 3 == 0)\n        {\n            sum += val * val;\n        }\n        else if(i\
    \ % 4 == 0)\n        {\n            sum += val * val * val;\n        }\n     \
    \   else\n        {\n            sum += val;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, elem; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += elem * elem;\n        }\n        else\
    \ if(i % 4 == 0)\n        {\n            sum += elem * elem * elem;\n        }\n\
    \        else\n        {\n            sum += elem;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e*e;\n        }\n        else if(i % 4\
    \ == 0)\n        {\n            sum += e*e*e;\n        }\n        else\n     \
    \   {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw3zmhev3.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3zmhev3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            e = e * e;\n        }\n        else if(i % 4 ==\
    \ 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n       \
    \ sum += e;\n    }\n    return sum;\n}\n/*\n\"\n    This function will take an\
    \ array of integers. For all entries in the array, the function shall square the\
    \ integer entry if its index is a \n    multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n    change the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n    \n \
    \   Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares_2(long[] lst) \n{\n\
    \    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3 == 0)\n  \
    \      {\n            e = e * e;\n        }\n        else if(i % 4 == 0 && i %\
    \ 3 != 0)\n        {\n            e = e * e * e;\n        }\n        sum += e;\n\
    \    }\n    return sum;\n}\n/*\n\"\n    This function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \n    multiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \n    change\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppu5r5dho.d(67): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppu5r5dho.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref x; lst)\n    {\n        if (i\
    \ % 3 == 0)\n        {\n            x = x * x;\n        }\n        else if (i\
    \ % 4 == 0)\n        {\n            x = x * x * x;\n        }\n        sum +=\
    \ x;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i %\
    \ 3 == 0) \n        {\n            sum += e * e;\n        }\n        else if(i\
    \ % 4 == 0) \n        {\n            sum += e * e * e;\n        }\n        else\
    \ \n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{ \n    long sum = 0;\n    foreach(i, ref elem; lst)\n    {\n       \
    \ if(i % 3 == 0)\n        {\n            elem = elem * elem;\n        }\n    \
    \    else if(i % 4 == 0)\n        {\n            elem = elem * elem * elem;\n\
    \        }\n        sum += elem;\n    }\n    return sum;\n}\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, val; lst)\n    {\n        if(i %\
    \ 3 == 0)\n        {\n            sum += val * val;\n        }\n        else if(i\
    \ % 4 == 0)\n        {\n            sum += val * val * val;\n        }\n     \
    \   else\n        {\n            sum += val;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += e * e;\n        }\n        else if(i\
    \ % 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, item; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += item * item;\n        }\n        else\
    \ if(i % 4 == 0)\n        {\n            sum += item * item * item;\n        }\n\
    \        else\n        {\n            sum += item;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, val; lst) \n    {\n        if (i\
    \ % 3 == 0) \n        {\n            sum += val * val;\n        }\n        else\
    \ if (i % 4 == 0) \n        {\n            sum += val * val * val;\n        }\n\
    \        else \n        {\n            sum += val;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpykka6zz6.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpykka6zz6.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(index, value; lst)\n    {\n       \
    \ if(index % 3 == 0)\n        {\n            sum += value * value;\n        }\n\
    \        else if(index % 4 == 0)\n        {\n            sum += value * value\
    \ * value;\n        }\n        else\n        {\n            sum += value;\n  \
    \      }\n    }\n    return sum;\n}\n/*\n\"\n    This function will take an array\
    \ of integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \n    multiple of 3 and will cube the integer entry\
    \ if its index is a multiple of 4 and not a multiple of 3. The function will not\
    \ \n    change the entries in the array whose indexes are not a multiple of 3\
    \ or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n\
    \    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L,\
    \ 2L, -1L, -5L]\n    \n*/\nlong sum_squares_2(long[] lst) \n{\n    long sum =\
    \ 0;\n    foreach(index, value; lst)\n    {\n        if(index % 3 == 0)\n    \
    \    {\n            sum += value * value;\n        }\n        else if(index %\
    \ 4 == 0)\n        {\n            sum += value * value * value;\n        }\n \
    \       else\n        {\n            sum += value;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp4fm7e3m.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp4fm7e3m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref elem; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += elem * elem;\n        }\n        else\
    \ if(i % 4 == 0)\n        {\n            sum += elem * elem * elem;\n        }\n\
    \        else\n        {\n            sum += elem;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, x; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += x * x * x;\n        }\n        else\n\
    \        {\n            sum += x;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i %\
    \ 3 == 0) \n        {\n            sum += e * e;\n        }\n        else if(i\
    \ % 4 == 0) \n        {\n            sum += e * e * e;\n        }\n        else\
    \ \n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += e * e;\n        }\n        else if(i\
    \ % 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n\
    \    {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n       \
    \ }\n        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n \
    \       }\n        else\n        {\n            sum += e;\n        }\n    }\n\
    \    return sum;\n}\n/*\n\"\n    This function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \n    multiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \n    change\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1\nunittest\n{\n  \
    \  alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbqbpbuf5.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbqbpbuf5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref x; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            x = x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            x = x * x * x;\n        }\n        sum += x;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, x; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += x * x * x;\n        }\n        else\n\
    \        {\n            sum += x;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, val; lst)\n    {\n        if(i %\
    \ 3 == 0)\n        {\n            sum += val * val;\n        }\n        else if(i\
    \ % 4 == 0)\n        {\n            sum += val * val * val;\n        }\n     \
    \   else\n        {\n            sum += val;\n        }\n    }\n    return sum;\n\
    }\n/*\n\"\n    This function will take an array of integers. For all entries in\
    \ the array, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n\
    \    \n*/\nlong sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i,\
    \ val; lst)\n    {\n        if(i % 3 == 0)\n        {\n            sum += val\
    \ * val;\n        }\n        else if(i % 4 == 0)\n        {\n            sum +=\
    \ val * val * val;\n        }\n        else\n        {\n            sum += val;\n\
    \        }\n    }\n    return sum;\n}\n/*\n\"\n    This function will take an\
    \ array of integers. For all entries in the array, the function shall square the\
    \ integer entry if its index is a \n    multiple of 3 and will cube the integer\
    \ entry if its index is a multiple of 4 and not a multiple of 3. The function\
    \ will not \n    change the entries in the array whose indexes are not a multiple\
    \ of 3 or 4. The function shall then return the sum of all entries. \n    \n \
    \   Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n\
    \    [-1L,\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkal8ywdi.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkal8ywdi.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e*e;\n        }\n        else if(i % 4\
    \ == 0)\n        {\n            sum += e*e*e;\n        }\n        else\n     \
    \   {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(index, value; lst)\n    {\n       \
    \ if(index % 3 == 0)\n        {\n            sum += value * value;\n        }\n\
    \        else if(index % 4 == 0)\n        {\n            sum += value * value\
    \ * value;\n        }\n        else\n        {\n            sum += value;\n  \
    \      }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i %\
    \ 3 == 0) \n        {\n            sum += e * e;\n        }\n        else if(i\
    \ % 4 == 0) \n        {\n            sum += e * e * e;\n        }\n        else\
    \ \n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, item; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += item * item;\n        }\n        else\
    \ if(i % 4 == 0)\n        {\n            sum += item * item * item;\n        }\n\
    \        else\n        {\n            sum += item;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoqu0y2_3.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoqu0y2_3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx_rmri2h.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx_rmri2h.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst) \n    {\n        if(i\
    \ % 3 == 0) \n        {\n            e = e * e;\n        }\n        else if(i\
    \ % 4 == 0) \n        {\n            e = e * e * e;\n        }\n        sum +=\
    \ e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref x; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            x = x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            x = x * x * x;\n        }\n        sum += x;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst) \n    {\n        if\
    \ (i % 3 == 0) \n        {\n            sum += e * e;\n        }\n        else\
    \ if (i % 4 == 0) \n        {\n            sum += e * e * e;\n        }\n    \
    \    else \n        {\n            sum += e;\n        }\n    }\n    return sum;\n\
    }\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, item; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += item * item;\n        }\n        else\
    \ if(i % 4 == 0)\n        {\n            sum += item * item * item;\n        }\n\
    \        else\n        {\n            sum += item;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsnliqxr2.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsnliqxr2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref x; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            x = x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            x = x * x * x;\n        }\n        sum += x;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst) \n    {\n        if\
    \ (i % 3 == 0) \n        {\n            e = e * e;\n        }\n        else if\
    \ (i % 4 == 0) \n        {\n            e = e * e * e;\n        }\n        sum\
    \ += e;\n    }\n    return sum;\n}\n/*\n\"\n    This function will take an array\
    \ of integers. For all entries in the array, the function shall square the integer\
    \ entry if its index is a \n    multiple of 3 and will cube the integer entry\
    \ if its index is a multiple of 4 and not a multiple of 3. The function will not\
    \ \n    change the entries in the array whose indexes are not a multiple of 3\
    \ or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n\
    \    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L,\
    \ 2L, -1L, -5L]\n    \n*/\nlong sum_squares_2(long[] lst) \n{\n    long sum =\
    \ 0;\n    foreach(i, ref e; lst) \n    {\n        if (i % 3 == 0) \n        {\n\
    \            e = e * e;\n        }\n        else if (i % 4 == 0) \n        {\n\
    \            e = e * e * e;\n        }\n        sum += e;\n    }\n    return sum;\n\
    }\n/*\n\"\n    This function will take an array of integers. For all entries in\
    \ the array, the function shall square the integer entry if its index is a \n\
    \    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6fla7i21.d(67): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6fla7i21.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i,e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += e * e;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += e * e * e;\n     \
    \   }\n        else\n        {\n            sum += e;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp80km979x.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp80km979x.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            e = e * e;\n        }\n        else if(i % 4 ==\
    \ 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n       \
    \ sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\
    \n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, item; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += item * item;\n        }\n        else\
    \ if(i % 4 == 0)\n        {\n            sum += item * item * item;\n        }\n\
    \        else\n        {\n            sum += item;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref x; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            x = x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            x = x * x * x;\n        }\n        sum += x;\n\
    \    }\n    return sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n\
    \    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L])\
    \ == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L, 1L, 1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n   \
    \ assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, x; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += x * x;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += x * x * x;\n        }\n        else\n\
    \        {\n            sum += x;\n        }\n    }\n    return sum;\n}\n/*\n\"\
    \n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, x; lst)\n \
    \   {\n        if(i % 3 == 0)\n        {\n            sum += x * x;\n        }\n\
    \        else if(i % 4 == 0)\n        {\n            sum += x * x * x;\n     \
    \   }\n        else\n        {\n            sum += x;\n        }\n    }\n    return\
    \ sum;\n}\n/*\n\"\n    This function will take an array of integers. For all entries\
    \ in the array, the function shall square the integer entry if its index is a\
    \ \n    multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n    change the entries\
    \ in the array whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n   \
    \ [1L, 2L, 3L]\n    >>> lst\n    []\n    >>> lst\n    [-1L,\nunittest\n{\n   \
    \ alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n\
    \    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n\
    \    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L])\
    \ == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpslfo6ou2.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpslfo6ou2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, v; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += v * v;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += v * v * v;\n        }\n        else\n\
    \        {\n            sum += v;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, item; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            sum += item * item;\n        }\n        else\
    \ if(i % 4 == 0)\n        {\n            sum += item * item * item;\n        }\n\
    \        else\n        {\n            sum += item;\n        }\n    }\n    return\
    \ sum;\n}\nunittest\n{\n    alias candidate = sum_squares;\n\n    assert(candidate([1L,\
    \ 2L, 3L]) == 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, ref e; lst)\n    {\n        if(i\
    \ % 3 == 0)\n        {\n            e = e * e;\n        }\n        else if(i %\
    \ 4 == 0 && i % 3 != 0)\n        {\n            e = e * e * e;\n        }\n  \
    \      sum += e;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst)\n    {\n        if(i % 3\
    \ == 0)\n        {\n            sum += e * e;\n        }\n        else if(i %\
    \ 4 == 0)\n        {\n            sum += e * e * e;\n        }\n        else\n\
    \        {\n            sum += e;\n        }\n    }\n    return sum;\n}\nunittest\n\
    {\n    alias candidate = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) ==\
    \ 6L);\n    assert(candidate([1L, 4L, 9L]) == 14L);\n    assert(candidate([])\
    \ == 0L);\n    assert(candidate([1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n\
    \    assert(candidate([-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n\
    \    assert(candidate([0L]) == 0L);\n    assert(candidate([-1L, -5L, 2L, -1L,\
    \ -5L]) == -126L);\n    assert(candidate([-56L, -99L, 1L, 0L, -2L]) == 3030L);\n\
    \    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L,\
    \ -9L, -2L, 36L, 36L, 26L, -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) ==\
    \ -14196L);\n    assert(candidate([-1L, -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L,\
    \ -12L, -5L, 14L, -14L, 6L, 13L, 11L, 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.typecons;\nimport std.math;\n/*\n\"\n    This function will\
    \ take an array of integers. For all entries in the array, the function shall\
    \ square the integer entry if its index is a \n    multiple of 3 and will cube\
    \ the integer entry if its index is a multiple of 4 and not a multiple of 3. The\
    \ function will not \n    change the entries in the array whose indexes are not\
    \ a multiple of 3 or 4. The function shall then return the sum of all entries.\
    \ \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n    >>> lst\n    []\n\
    \    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong sum_squares(long[]\
    \ lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n    {\n        if(i %\
    \ 3 == 0) \n        {\n            sum += e * e;\n        }\n        else if(i\
    \ % 4 == 0) \n        {\n            sum += e * e * e;\n        }\n        else\
    \ \n        {\n            sum += e;\n        }\n    }\n    return sum;\n}\n/*\n\
    \"\n    This function will take an array of integers. For all entries in the array,\
    \ the function shall square the integer entry if its index is a \n    multiple\
    \ of 3 and will cube the integer entry if its index is a multiple of 4 and not\
    \ a multiple of 3. The function will not \n    change the entries in the array\
    \ whose indexes are not a multiple of 3 or 4. The function shall then return the\
    \ sum of all entries. \n    \n    Examples:\n    >>> lst\n    [1L, 2L, 3L]\n \
    \   >>> lst\n    []\n    >>> lst\n    [-1L, -5L, 2L, -1L, -5L]\n    \n*/\nlong\
    \ sum_squares_2(long[] lst) \n{\n    long sum = 0;\n    foreach(i, e; lst) \n\
    \    {\n        if(i % 3 == 0) \n        {\n            sum += e * e;\n      \
    \  }\n        else if(i % 4 == 0) \n        {\n            sum += e * e * e;\n\
    \        }\n        else \n        {\n            sum += e;\n        }\n    }\n\
    \    return sum;\n}\n/*\n\"\n    This function will take an array of integers.\
    \ For all entries in the array, the function shall square the integer entry if\
    \ its index is a \n    multiple of 3 and will cube the integer entry if its index\
    \ is a multiple of 4 and not a multiple of 3. The function will not \n    change\
    \ the entries in the array whose indexes are not a multiple of 3 or 4. The function\
    \ shall then return the sum of all entries. \n    \n    Examples:\n    >>> lst\n\
    \    [1L, 2L, 3L]\n    >>> lst\n    []\n    >>>\nunittest\n{\n    alias candidate\
    \ = sum_squares;\n\n    assert(candidate([1L, 2L, 3L]) == 6L);\n    assert(candidate([1L,\
    \ 4L, 9L]) == 14L);\n    assert(candidate([]) == 0L);\n    assert(candidate([1L,\
    \ 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L]) == 9L);\n    assert(candidate([-1L, -1L, -1L,\
    \ -1L, -1L, -1L, -1L, -1L, -1L]) == -3L);\n    assert(candidate([0L]) == 0L);\n\
    \    assert(candidate([-1L, -5L, 2L, -1L, -5L]) == -126L);\n    assert(candidate([-56L,\
    \ -99L, 1L, 0L, -2L]) == 3030L);\n    assert(candidate([-1L, 0L, 0L, 0L, 0L, 0L,\
    \ 0L, 0L, -1L]) == 0L);\n    assert(candidate([-16L, -9L, -2L, 36L, 36L, 26L,\
    \ -20L, 25L, -40L, 20L, -4L, 12L, -26L, 35L, 37L]) == -14196L);\n    assert(candidate([-1L,\
    \ -3L, 17L, -1L, -15L, 13L, -1L, 14L, -14L, -12L, -5L, 14L, -14L, 6L, 13L, 11L,\
    \ 16L, 16L, 4L, 10L]) == -1448L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1me1hrde.d(73): Error: unterminated /* */ comment\\nFailed: [\"\
    dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1me1hrde.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
