name: HumanEval_104_unique_digits
language: d
results:
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpszlc5wwy.d(20): Error: no property `to` for type `long`\\n/tmp/tmpszlc5wwy.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpszlc5wwy.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpszlc5wwy.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszlc5wwy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpub7se8v1.d(20): Error: no property `to` for type `long`\\n/tmp/tmpub7se8v1.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpub7se8v1.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpub7se8v1.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpub7se8v1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[x.length];\n    int count = 0;\n    for (int i = 0;\
    \ i < x.length; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n         \
    \   res[count] = x[i];\n            count++;\n        }\n    }\n    long[] res2\
    \ = new long[count];\n    for (int i = 0; i < count; i++)\n    {\n        res2[i]\
    \ = res[i];\n    }\n    return res2;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc6hdol8o.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284f5]\\n??:? void tmpc6hdol8o.__unittest_L34_C1()\
    \ [0x428012]\\n??:? void tmpc6hdol8o.__modtest() [0x428278]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c5af]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b442]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306cd]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b7c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430659]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b419]\\n??:? runModuleUnitTests [0x42c385]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289b8]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42893f]\\n??:? _d_run_main [0x4288aa]\\n??:? main [0x42828b]\\\
    n??:? __libc_start_main [0xbf5fd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5_3svk2_.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5_3svk2_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x1,y,z;\n    long[] a,b,c,d,e,f,g,h,i1,j1,k1,l1,m1,n1,o1,p1,q1,r1,s1,t1,u1,v1,w1,x2,y1,z1;\n\
    \    a = new long[x.length];\n    b = new long[x.length];\n    c = new long[x.length];\n\
    \    d = new long[x.length];\n    e = new long[x.length];\n    f = new long[x.length];\n\
    \    g = new long[x.length];\n    h = new long[x.length];\n    i1 = new long[x.length];\n\
    \    j1 = new long[x.length];\n    k1 = new long[x.length];\n    l1 = new long[x.length];\n\
    \    m1 = new long[x.length];\n    n1 = new long[x.length];\n    o1 = new long[x.length];\n\
    \    p1 = new long[x.length];\n    q1 = new long[x.length];\n    r1 = new long[x.length];\n\
    \    s1 = new long[x.length];\n    t1 = new long[x.length];\n    u1 = new long[x.length];\n\
    \    v1 = new long[x.length];\n    w1 = new long[x.length];\n    x2 = new long[x.length];\n\
    \    y1 = new long[x.length];\n    z1 = new long[x.length];\n    for(i=0;i<x.length;i++)\n\
    \    {\n        a[i] = x[i]%10;\n        b[i] = x[i]/10;\n        c[i] = b[i]%10;\n\
    \        d[i] = b[i]/10;\n        e[i] = d[i]%10;\n        f\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6y5k6nky.d(53): Error: found `unittest` when expecting `;` following\
    \ statement\\n/tmp/tmp6y5k6nky.d(62): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmp6y5k6nky.d(62): Error: found `End\
    \ of File` when expecting `}` following compound statement\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6y5k6nky.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph66s3z8h.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph66s3z8h.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0 && i.to!string.count(\"0\") == 0)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpysztfgbb.d(20): Error: no property `to` for type `long`\\n/tmp/tmpysztfgbb.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpysztfgbb.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpysztfgbb.d(20): Error: no property `to`\
    \ for type `long`\\n/tmp/tmpysztfgbb.d(20): Error: no property `to` for type `long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpysztfgbb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmvd38w2u.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmvd38w2u.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y = new long[x.length];\n    int j = 0;\n    for (int i = 0; i < x.length;\
    \ i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n            y[j] = x[i];\n\
    \            j++;\n        }\n    }\n    y = y[0..j];\n    sort(y);\n    return\
    \ y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpighs7kem.d(28): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpighs7kem.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length > 1)\n        {\n            foreach(char\
    \ c; i.toString)\n            {\n                if(c.toString.toInt % 2 == 0)\n\
    \                {\n                    break;\n                }\n          \
    \      else\n                {\n                    result[count] = i;\n     \
    \               count++;\n                }\n            }\n        }\n      \
    \  else\n        {\n            result[count] = i;\n            count++;\n   \
    \     }\n    }\n    return result[0..count].sort;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzyvxk_gx.d(21): Error: no property `toString` for type `long`\\\
    n/tmp/tmpzyvxk_gx.d(23): Error: no property `toString` for type `long`\\n/tmp/tmpzyvxk_gx.d(42):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpzyvxk_gx.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int bb = 0;\n    int cc\
    \ = 0;\n    int dd = 0;\n    int ee = 0;\n    int ff = 0;\n    int gg = 0;\n \
    \   int hh = 0;\n    int ii = 0;\n    int jj = 0;\n    int kk = 0;\n    int ll\
    \ = 0;\n    int mm = 0;\n    int nn = 0;\n    int oo = 0;\n    int pp = 0;\n \
    \   int qq = 0;\n    int rr = 0;\n    int ss = 0;\n    int tt = 0;\n    int uu\
    \ = 0;\n    int vv = 0;\n    int ww = 0;\n    int yy = 0;\n    int zz = 0;\n \
    \   int aaa = 0;\n    int bbb = 0;\n    int ccc = 0;\n    int ddd = 0;\n    int\
    \ eee = 0;\n    int fff = 0;\n    int ggg = 0;\n    int hhh = 0;\n    int iii\
    \ = 0;\n    int jjj = 0;\n    int kkk = 0;\n    int lll = 0;\n    int mmm = 0;\n\
    \    int nnn = 0;\n    int ooo = 0;\n    int ppp = 0;\n    int qqq = 0;\n    int\
    \ rrr = 0;\n    int sss = 0;\n    int ttt = 0;\n    int uuu = 0;\n    int vvv\
    \ = 0;\n    int www = 0;\n    int yyy = 0;\n    int zzz = 0;\n\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeo83yscr.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeo83yscr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    int[] even = new int[n];\n    int[] odd = new int[n];\n\
    \    int[] even_count = new int[n];\n    int[] odd_count = new int[n];\n    int\
    \ even_index = 0;\n    int odd_index = 0;\n    for (int i = 0; i < n; i++)\n \
    \   {\n        int num = x[i];\n        int count = 0;\n        while (num > 0)\n\
    \        {\n            int digit = num % 10;\n            if (digit % 2 == 0)\n\
    \            {\n                count++;\n            }\n            num /= 10;\n\
    \        }\n        if (count == 0)\n        {\n            odd[odd_index] = x[i];\n\
    \            odd_count[odd_index] = count;\n            odd_index++;\n       \
    \ }\n        else\n        {\n            even[even_index] = x[i];\n         \
    \   even_count[even_index] = count;\n            even_index++;\n        }\n  \
    \  }\n    long[] result = new long[odd_index];\n    for (int i = 0; i < odd_index;\
    \ i++)\n    {\n        result[i] = odd[i];\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6skzna36.d(17): Error: cannot implicitly convert expression `x.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp6skzna36.d(26): Error: cannot implicitly\
    \ convert expression `x[cast(ulong)i]` of type `long` to `int`\\n/tmp/tmp6skzna36.d(39):\
    \ Error: cannot implicitly convert expression `x[cast(ulong)i]` of type `long`\
    \ to `int`\\n/tmp/tmp6skzna36.d(45): Error: cannot implicitly convert expression\
    \ `x[cast(ulong)i]` of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp6skzna36.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjjiiab6k.d(20): Error: no property `to` for type `long`\\n/tmp/tmpjjiiab6k.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpjjiiab6k.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpjjiiab6k.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjjiiab6k.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpp7gh1p68.d(20): Error: no property `to` for type `long`\\n/tmp/tmpp7gh1p68.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpp7gh1p68.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpp7gh1p68.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp7gh1p68.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0zxsturb.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmp0zxsturb.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmp0zxsturb.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xe8f13554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpcvk6hv2a.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpcvk6hv2a.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpcvk6hv2a.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x66295554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpma8h3v_1.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpma8h3v_1.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpma8h3v_1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpunu4r75r.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpunu4r75r.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpunu4r75r.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpulz3khy3.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpulz3khy3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    for (int i =\
    \ 0; i < x.length; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n      \
    \      result[count] = x[i];\n            count++;\n        }\n    }\n    long[]\
    \ result2 = new long[count];\n    for (int i = 0; i < count; i++)\n    {\n   \
    \     result2[i] = result[i];\n    }\n    sort(result2);\n    return result2;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpff12dcxm.d(32): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpff12dcxm.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf_2tih6z.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_2tih6z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjqm13xfs.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqm13xfs.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4jagpxkp.d(20): Error: undefined identifier `isEven`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4jagpxkp.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ e; x)\n    {\n        if(e % 2 != 0)\n        {\n            result[count] =\
    \ e;\n            count++;\n        }\n    }\n    result = result[0..count];\n\
    \    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyxms9ger.d(28): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyxms9ger.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j, k, l;\n    long[] y = new long[x.length];\n    int[] z = new int[x.length];\n\
    \    for (i = 0; i < x.length; i++)\n    {\n        j = 0;\n        while (x[i]\
    \ > 0)\n        {\n            k = (int)x[i] % 10;\n            if (k % 2 == 0)\n\
    \            {\n                j = 1;\n                break;\n            }\n\
    \            x[i] = x[i] / 10;\n        }\n        if (j == 0)\n        {\n  \
    \          y[i] = x[i];\n            z[i] = 1;\n        }\n    }\n    long[] a\
    \ = new long[x.length];\n    for (i = 0, j = 0; i < x.length; i++)\n    {\n  \
    \      if (z[i] == 1)\n        {\n            a[j] = y[i];\n            j++;\n\
    \        }\n    }\n    for (i = 0; i < j; i++)\n    {\n        for (k = i + 1;\
    \ k < j; k++)\n        {\n            if (a[i] > a[k])\n            {\n      \
    \          l = a[i];\n                a[i] = a[k];\n                a[k] = l;\n\
    \            }\n        }\n    }\n    return a;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwznspxbb.d(25): Error: C style cast illegal, use `cast(int)x[i]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwznspxbb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7yme1gun.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp7yme1gun.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp7yme1gun.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x1fbb2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn0xvszx7.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428435]\\n??:? void tmpn0xvszx7.__unittest_L27_C1()\
    \ [0x427f52]\\n??:? void tmpn0xvszx7.__modtest() [0x4281b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bc9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43067d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc75]\\n??:? runModuleUnitTests [0x42cbe1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428884]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42880b]\\n??:? _d_run_main [0x428776]\\n??:? main [0x4281cb]\\\
    n??:? __libc_start_main [0x982eb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit && c.to!int % 2 == 0)\n         \
    \       {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgrbjthxy.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpgrbjthxy.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpgrbjthxy.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgrbjthxy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long n; x)\n    {\n        if(n % 2 == 0)\n  \
    \      {\n            result ~= n;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpks0bqvzn.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428435]\\n??:? void tmpks0bqvzn.__unittest_L27_C1()\
    \ [0x427f52]\\n??:? void tmpks0bqvzn.__modtest() [0x4281b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bc9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43067d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc75]\\n??:? runModuleUnitTests [0x42cbe1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428884]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42880b]\\n??:? _d_run_main [0x428776]\\n??:? main [0x4281cb]\\\
    n??:? __libc_start_main [0xd6306554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y;\n    y = new long[x.length];\n    int i = 0;\n    foreach(long num;\
    \ x)\n    {\n        if(num % 2 != 0)\n        {\n            y[i] = num;\n  \
    \          i++;\n        }\n    }\n    y = y[0..i];\n    y.sort;\n    return y;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuww5r7v_.d(29): Error: no property `sort` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuww5r7v_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl8zs0khc.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpl8zs0khc.d(20): Error: no property `toString` for type `long`\\n/tmp/tmpl8zs0khc.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmpl8zs0khc.d(20): Error:\
    \ no property `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpl8zs0khc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(num; x)\n    {\n        if(num.to!string.find(\"\
    2\") == -1 && num.to!string.find(\"4\") == -1 && num.to!string.find(\"6\") ==\
    \ -1 && num.to!string.find(\"8\") == -1)\n        {\n            result ~= num;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwoyrxksr.d(20): Error: no property `to` for type `long`\\n/tmp/tmpwoyrxksr.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpwoyrxksr.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpwoyrxksr.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwoyrxksr.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(a => a.toString().all!(b => b.toString().toLong() % 2 !=\
    \ 0)).sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcbuawua0.d(17): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcbuawua0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp21hu1mpn.d(20): Error: no property `to` for type `long`\\n/tmp/tmp21hu1mpn.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp21hu1mpn.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmp21hu1mpn.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp21hu1mpn.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // your code here\n    long[] result = new long[x.length];\n    int count\
    \ = 0;\n    for (int i = 0; i < x.length; i++)\n    {\n        if (x[i] % 2 !=\
    \ 0)\n        {\n            result[count] = x[i];\n            count++;\n   \
    \     }\n    }\n    result = result[0..count];\n    sort(result);\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0mc8xwcc.d(29): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0mc8xwcc.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ num; x)\n    {\n        bool isEven = false;\n        while(num > 0)\n     \
    \   {\n            if(num % 2 == 0)\n            {\n                isEven = true;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if(!isEven)\n        {\n            result[count] = num;\n            count++;\n\
    \        }\n    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp51ebzpsb.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42849d]\\n??:? void tmp51ebzpsb.__unittest_L39_C1()\
    \ [0x427fba]\\n??:? void tmp51ebzpsb.__modtest() [0x428220]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c557]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430675]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b24]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430601]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c1]\\n??:? runModuleUnitTests [0x42c32d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428960]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288e7]\\n??:? _d_run_main [0x428852]\\n??:? main [0x428233]\\\
    n??:? __libc_start_main [0x5cf1e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        bool isUnique = true;\n\
    \        foreach(j; i.to!string)\n        {\n            if(j.to!int % 2 == 0)\n\
    \            {\n                isUnique = false;\n                break;\n  \
    \          }\n        }\n        if(isUnique)\n        {\n            result ~=\
    \ i;\n        }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcl7wj1ox.d(21): Error: no property `to` for type `long`\\n/tmp/tmpcl7wj1ox.d(31):\
    \ Error: cannot append type `long` to type `void[]`\\n/tmp/tmpcl7wj1ox.d(34):\
    \ Error: no property `sort` for type `void[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcl7wj1ox.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl_rnuv_b.d(20): Error: undefined identifier `isEven`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl_rnuv_b.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqfkuo5ww.d(20): Error: undefined identifier `isEven`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfkuo5ww.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.find(\"\
    2\") == -1 && i.to!string.find(\"4\") == -1 && i.to!string.find(\"6\") == -1 &&\
    \ i.to!string.find(\"8\") == -1)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3n8pniu3.d(20): Error: no property `to` for type `long`\\n/tmp/tmp3n8pniu3.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp3n8pniu3.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmp3n8pniu3.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3n8pniu3.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return sort(result);\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu9h49n0f.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpu9h49n0f.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu9h49n0f.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsgigs_c2.d(20): Error: no property `to` for type `long`\\n/tmp/tmpsgigs_c2.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpsgigs_c2.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpsgigs_c2.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsgigs_c2.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    for (int i = 0; i < x.length; i++)\n   \
    \ {\n        if (x[i] % 2 != 0)\n        {\n            result ~= x[i];\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_giygv37.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428465]\\n??:? void tmp_giygv37.__unittest_L27_C1()\
    \ [0x427f82]\\n??:? void tmp_giygv37.__modtest() [0x4281e8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42cf0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4308e9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430d98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430875]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bd75]\\n??:? runModuleUnitTests [0x42cce1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428928]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288af]\\n??:? _d_run_main [0x42881a]\\n??:? main [0x4281fb]\\\
    n??:? __libc_start_main [0x63dc0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even = [0, 2, 4, 6, 8];\n    long[] result = [];\n    foreach(long i;\
    \ x)\n    {\n        bool hasEven = false;\n        foreach(int j; even)\n   \
    \     {\n            if(i.toString.contains(j.toString))\n            {\n    \
    \            hasEven = true;\n                break;\n            }\n        }\n\
    \        if(!hasEven)\n        {\n            result ~= i;\n        }\n    }\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2r6irg_w.d(24): Error: no property `toString` for type `long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2r6irg_w.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y;\n    int i, j;\n    int count = 0;\n    foreach(long num; x)\n \
    \   {\n        if(num % 2 != 0)\n        {\n            count++;\n        }\n\
    \    }\n    y = new long[count];\n    j = 0;\n    foreach(long num; x)\n    {\n\
    \        if(num % 2 != 0)\n        {\n            y[j] = num;\n            j++;\n\
    \        }\n    }\n    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7ela2180.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284b5]\\n??:? void tmp7ela2180.__unittest_L39_C1()\
    \ [0x427fd2]\\n??:? void tmp7ela2180.__modtest() [0x428238]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c56f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b402]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43068d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b3c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430619]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3d9]\\n??:? runModuleUnitTests [0x42c345]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428978]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288ff]\\n??:? _d_run_main [0x42886a]\\n??:? main [0x42824b]\\\
    n??:? __libc_start_main [0xf9f70554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long n; x)\n    {\n        if(n.to!string.count!(\"\
    2\") == 0 && n.to!string.count!(\"4\") == 0 && n.to!string.count!(\"6\") == 0\
    \ && n.to!string.count!(\"8\") == 0)\n        {\n            result ~= n;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxe2guj42.d(20): Error: no property `to` for type `long`\\n/tmp/tmpxe2guj42.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpxe2guj42.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpxe2guj42.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxe2guj42.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    long[] res = new long[n];\n    int k = 0;\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        int num = x[i];\n        bool is_unique\
    \ = true;\n        while (num > 0)\n        {\n            int digit = num % 10;\n\
    \            if (digit % 2 == 0)\n            {\n                is_unique = false;\n\
    \                break;\n            }\n            num /= 10;\n        }\n  \
    \      if (is_unique)\n        {\n            res[k] = x[i];\n            k++;\n\
    \        }\n    }\n    return res[0..k];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4bylzd1_.d(17): Error: cannot implicitly convert expression `x.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp4bylzd1_.d(22): Error: cannot implicitly\
    \ convert expression `x[cast(ulong)i]` of type `long` to `int`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4bylzd1_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(item; x)\n    {\n        if(!isEven(item))\n \
    \       {\n            result ~= item;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbvie6bz1.d(20): Error: undefined identifier `isEven`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbvie6bz1.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(num; x)\n    {\n        if(num < 10)\n  \
    \      {\n            result ~= num;\n        }\n        else\n        {\n   \
    \         bool is_even = false;\n            while(num > 0)\n            {\n \
    \               if(num % 2 == 0)\n                {\n                    is_even\
    \ = true;\n                    break;\n                }\n                num\
    \ /= 10;\n            }\n            if(!is_even)\n            {\n           \
    \     result ~= num;\n            }\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp31r0b748.d(48): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284b5]\\n??:? void tmp31r0b748.__unittest_L44_C1()\
    \ [0x427fce]\\n??:? void tmp31r0b748.__modtest() [0x428234]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce8b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd1e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430771]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c20]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4306fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcf5]\\n??:? runModuleUnitTests [0x42cc61]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428904]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42888b]\\n??:? _d_run_main [0x4287f6]\\n??:? main [0x428247]\\\
    n??:? __libc_start_main [0x372c4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpziqfgpuz.d(20): Error: no property `to` for type `long`\\n/tmp/tmpziqfgpuz.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpziqfgpuz.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpziqfgpuz.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpziqfgpuz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long num; x)\n    {\n        if(num\
    \ % 2 != 0)\n        {\n            res ~= num;\n        }\n    }\n    return\
    \ res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9h1znnik.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp9h1znnik.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp9h1znnik.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x6d250554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp02kyckyx.d(20): Error: no property `to` for type `long`\\n/tmp/tmp02kyckyx.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp02kyckyx.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmp02kyckyx.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp02kyckyx.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi0tt8g70.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi0tt8g70.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpszfakfmf.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpszfakfmf.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    int count = 0;\n    int[] arr = new int[n];\n    for(int\
    \ i = 0; i < n; i++)\n    {\n        int num = x[i];\n        int flag = 0;\n\
    \        while(num != 0)\n        {\n            int rem = num % 10;\n       \
    \     if(rem % 2 == 0)\n            {\n                flag = 1;\n           \
    \     break;\n            }\n            num = num / 10;\n        }\n        if(flag\
    \ == 0)\n        {\n            arr[count] = x[i];\n            count++;\n   \
    \     }\n    }\n    long[] res = new long[count];\n    for(int i = 0; i < count;\
    \ i++)\n    {\n        res[i] = arr[i];\n    }\n    sort(res);\n    return res;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_qswe6z5.d(17): Error: cannot implicitly convert expression `x.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp_qswe6z5.d(22): Error: cannot implicitly\
    \ convert expression `x[cast(ulong)i]` of type `long` to `int`\\n/tmp/tmp_qswe6z5.d(36):\
    \ Error: cannot implicitly convert expression `x[cast(ulong)i]` of type `long`\
    \ to `int`\\n/tmp/tmp_qswe6z5.d(45): Error: undefined identifier `sort`, did you\
    \ mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"\
    /tmp/tmp_qswe6z5.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 == 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_oqbqdfc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428435]\\n??:? void tmp_oqbqdfc.__unittest_L27_C1()\
    \ [0x427f52]\\n??:? void tmp_oqbqdfc.__modtest() [0x4281b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bc9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43067d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc75]\\n??:? runModuleUnitTests [0x42cbe1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428884]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42880b]\\n??:? _d_run_main [0x428776]\\n??:? main [0x4281cb]\\\
    n??:? __libc_start_main [0x1dd51554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] evenDigits = {0, 2, 4, 6, 8};\n    int[] oddDigits = {1, 3, 5, 7, 9};\n\
    \    int[] digits;\n    int[] uniqueDigits;\n    int[] uniqueDigitsSorted;\n \
    \   int[] uniqueDigitsSortedNoEven;\n    int[] uniqueDigitsSortedNoEvenLong;\n\
    \    int[] uniqueDigitsSortedNoEvenLongSorted;\n    int[] uniqueDigitsSortedNoEvenLongSortedLong;\n\
    \    int[] uniqueDigitsSortedNoEvenLongSortedLongSorted;\n    int[] uniqueDigitsSortedNoEvenLongSortedLongSortedLong;\n\
    \    int[] uniqueDigitsSortedNoEvenLongSortedLongSortedLongSorted;\n    int[]\
    \ uniqueDigitsSortedNoEvenLongSortedLongSortedLongSortedLong;\n    int[] uniqueDigitsSortedNoEvenLongSortedLongSortedLongSortedLongSorted;\n\
    \    int[] uniqueDigitsSortedNoEvenLongSortedLongSortedLongSortedLongSortedLong;\n\
    \    int[] uniqueDigitsSortedNoEvenLongSortedLongSortedLongSortedLongSortedLongSorted;\n\
    \    int[] uniqueDigitsSortedNoEvenLongSortedLongSortedLongSortedLongSortedLongSortedLong;\n\
    \    int[] uniqueDigitsSortedNoEvenLongSortedLongSortedLongSortedLongSortedLongSortedLongSorted;\n\
    \    int[] uniqueDigitsSortedNoEvenLongSortedLongSortedLongSortedLongSortedLongSortedLongSortedLong;\n\
    \    int[] uniqueDigitsSortedNoEvenLongSortedLongSortedLongSortedLongSortedLongSortedLongSortedLongSorted;\n\
    \    int[] uniqueDigitsSortedNoEvenLongSortedLongSortedLongSortedLongSortedLongSortedLongSortedLongSortedLong;\n\
    \    int[] uniqueDigitsSortedNoEvenLongSortedLongSortedLongSortedLongSortedLongSortedLongSortedLongSortedLongSorted;\n\
    \    int[] uniqueDigitsSortedNoEvenLongSortedLongSortedLongSortedLongSortedLongSortedLongSortedLongSortedLongSortedLong;\n\
    \    int[] uniqueDigits\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgblxokav.d(41): Error: semicolon expected, not `unittest`\\n/tmp/tmpgblxokav.d(41):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpgblxokav.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(num; x)\n    {\n        if(num % 2 == 0)\n   \
    \     {\n            result ~= num;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpejq1pmaj.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428435]\\n??:? void tmpejq1pmaj.__unittest_L27_C1()\
    \ [0x427f52]\\n??:? void tmpejq1pmaj.__modtest() [0x4281b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bc9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43067d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc75]\\n??:? runModuleUnitTests [0x42cbe1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428884]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42880b]\\n??:? _d_run_main [0x428776]\\n??:? main [0x4281cb]\\\
    n??:? __libc_start_main [0x52270554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ foreach(char c; i.toString)\n            {\n                if(c.toString.toInt\
    \ % 2 == 0)\n                {\n                    break;\n                }\n\
    \                else\n                {\n                    result[count] =\
    \ i;\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy0i7kur5.d(21): Error: no property `toString` for type `long`\\\
    n/tmp/tmpy0i7kur5.d(28): Error: no property `toString` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy0i7kur5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[x.length];\n    int count = 0;\n    foreach(long i;\
    \ x)\n    {\n        if(i.toString().length == 1)\n        {\n            res[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ foreach(char c; i.toString())\n            {\n                if(c.toString().toInt()\
    \ % 2 == 0)\n                {\n                    break;\n                }\n\
    \                else\n                {\n                    res[count] = i;\n\
    \                    count++;\n                }\n            }\n        }\n \
    \   }\n    return res[0..count];\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqrl7eg3t.d(21): Error: no property `toString` for type `long`\\\
    n/tmp/tmpqrl7eg3t.d(28): Error: no property `toString` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqrl7eg3t.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \            res ~= i;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppcfh9gvt.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcfh9gvt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto even_digits = [](long n) {\n        while (n > 0) {\n            if (n\
    \ % 2 == 0)\n                return true;\n            n /= 10;\n        }\n \
    \       return false;\n    };\n    auto res = x.filter!(a => !even_digits(a));\n\
    \    res.sort;\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppetb9kuk.d(17): Error: found `n` when expecting `.` following\
    \ long\\n/tmp/tmppetb9kuk.d(17): Error: found `)` when expecting identifier following\
    \ `long`.\\n/tmp/tmppetb9kuk.d(17): Error: found `{` when expecting `,`\\n/tmp/tmppetb9kuk.d(18):\
    \ Error: expression expected, not `while`\\n/tmp/tmppetb9kuk.d(18): Error: found\
    \ `{` when expecting `,`\\n/tmp/tmppetb9kuk.d(19): Error: expression expected,\
    \ not `if`\\n/tmp/tmppetb9kuk.d(20): Error: found `return` when expecting `,`\\\
    n/tmp/tmppetb9kuk.d(20): Error: found `;` when expecting `,`\\n/tmp/tmppetb9kuk.d(21):\
    \ Error: found `;` when expecting `,`\\n/tmp/tmppetb9kuk.d(22): Error: expression\
    \ expected, not `}`\\n/tmp/tmppetb9kuk.d(23): Error: found `return` when expecting\
    \ `,`\\n/tmp/tmppetb9kuk.d(23): Error: found `;` when expecting `,`\\n/tmp/tmppetb9kuk.d(24):\
    \ Error: expression expected, not `}`\\n/tmp/tmppetb9kuk.d(24): Error: found `;`\
    \ when expecting `,`\\n/tmp/tmppetb9kuk.d(25): Error: expression expected, not\
    \ `auto`\\n/tmp/tmppetb9kuk.d(25): Error: found `res` when expecting `,`\\n/tmp/tmppetb9kuk.d(25):\
    \ Error: expression expected, not `=`\\n/tmp/tmppetb9kuk.d(25): Error: found `x`\
    \ when expecting `,`\\n/tmp/tmppetb9kuk.d(25): Error: found `;` when expecting\
    \ `,`\\n/tmp/tmppetb9kuk.d(26): Error: found `;` when expecting `,`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppetb9kuk.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps7efh596.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmps7efh596.d(20): Error: no property `toString` for type `long`\\n/tmp/tmps7efh596.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmps7efh596.d(20): Error:\
    \ no property `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmps7efh596.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] evenDigits = [0, 2, 4, 6, 8];\n    long[] result = [];\n    foreach(long\
    \ num; x) {\n        bool hasEvenDigit = false;\n        foreach(int digit; evenDigits)\
    \ {\n            if(num.toString.contains(digit.toString)) {\n               \
    \ hasEvenDigit = true;\n                break;\n            }\n        }\n   \
    \     if(!hasEvenDigit) {\n            result ~= num;\n        }\n    }\n    return\
    \ result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphdhbfxnz.d(22): Error: no property `toString` for type `long`\\\
    n/tmp/tmphdhbfxnz.d(31): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphdhbfxnz.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long num; x)\n    {\n        if(num.to!string.count(\"\
    2\") == 0 && num.to!string.count(\"4\") == 0 && num.to!string.count(\"6\") ==\
    \ 0 && num.to!string.count(\"8\") == 0)\n        {\n            result ~= num;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2li1_ke1.d(20): Error: no property `to` for type `long`\\n/tmp/tmp2li1_ke1.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp2li1_ke1.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmp2li1_ke1.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2li1_ke1.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    for (int i =\
    \ 0; i < x.length; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n      \
    \      result[count] = x[i];\n            count++;\n        }\n    }\n    result\
    \ = result[0..count];\n    sort(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1e3pca8d.d(28): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1e3pca8d.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(i; x)\n    {\n        bool isUnique\
    \ = true;\n        foreach(j; i.toString)\n        {\n            if(j.to!int\
    \ % 2 == 0)\n            {\n                isUnique = false;\n              \
    \  break;\n            }\n        }\n        if(isUnique)\n        {\n       \
    \     result ~= i;\n        }\n    }\n    return result.sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd1tsmx8n.d(21): Error: no property `toString` for type `long`\\\
    n/tmp/tmpd1tsmx8n.d(34): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd1tsmx8n.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit)\n                {\n           \
    \         if(c.to!int % 2 == 0)\n                    {\n                     \
    \   is_unique = false;\n                        break;\n                    }\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpggwuzh2i.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpggwuzh2i.d(27): Error: no property `toString` for type `long`\\n/tmp/tmpggwuzh2i.d(44):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpggwuzh2i.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpgls5ygag.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgls5ygag.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    for (int i =\
    \ 0; i < x.length; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n      \
    \      result[count] = x[i];\n            count++;\n        }\n    }\n    long[]\
    \ finalResult = new long[count];\n    for (int i = 0; i < count; i++)\n    {\n\
    \        finalResult[i] = result[i];\n    }\n    sort(finalResult);\n    return\
    \ finalResult;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpazd337em.d(32): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpazd337em.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ foreach(char c; i.toString)\n            {\n                if(c.toString.toInt\
    \ % 2 == 0)\n                {\n                    break;\n                }\n\
    \                else\n                {\n                    result[count] =\
    \ i;\n                    count++;\n                }\n            }\n       \
    \ }\n    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbuequzc9.d(21): Error: no property `toString` for type `long`\\\
    n/tmp/tmpbuequzc9.d(28): Error: no property `toString` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbuequzc9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpccpewo5a.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpccpewo5a.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long num; x)\n    {\n        if(num.to!string.count!(\"\
    2\") == 0 && num.to!string.count!(\"4\") == 0 && num.to!string.count!(\"6\") ==\
    \ 0 && num.to!string.count!(\"8\") == 0)\n        {\n            result ~= num;\n\
    \        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoe8t6y7u.d(20): Error: no property `to` for type `long`\\n/tmp/tmpoe8t6y7u.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpoe8t6y7u.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpoe8t6y7u.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoe8t6y7u.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqk7lh77y.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqk7lh77y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] y = new long[x.length];\n    int j = 0;\n    for (int i = 0; i < x.length;\
    \ i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n            y[j] = x[i];\n\
    \            j++;\n        }\n    }\n    return y;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqu2qufrp.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42846d]\\n??:? void tmpqu2qufrp.__unittest_L29_C1()\
    \ [0x427f8a]\\n??:? void tmpqu2qufrp.__modtest() [0x4281f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c527]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430645]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b391]\\n??:? runModuleUnitTests [0x42c2fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x428203]\\\
    n??:? __libc_start_main [0x839dd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long num; x)\n    {\n        if(num.to!string.count!(\"\
    2\") == 0 &&\n           num.to!string.count!(\"4\") == 0 &&\n           num.to!string.count!(\"\
    6\") == 0 &&\n           num.to!string.count!(\"8\") == 0)\n        {\n      \
    \      result ~= num;\n        }\n    }\n    return result.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpchrdzapk.d(20): Error: no property `to` for type `long`\\n/tmp/tmpchrdzapk.d(21):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpchrdzapk.d(22): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpchrdzapk.d(23): Error: no property `to`\
    \ for type `long`\\n/tmp/tmpchrdzapk.d(28): Error: no property `sort` for type\
    \ `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpchrdzapk.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    int count = 0;\n    foreach(long i; x)\n    {\n      \
    \  if(!hasEvenDigit(i))\n        {\n            count++;\n        }\n    }\n \
    \   result = new long[count];\n    int j = 0;\n    foreach(long i; x)\n    {\n\
    \        if(!hasEvenDigit(i))\n        {\n            result[j] = i;\n       \
    \     j++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpscs5fzjo.d(21): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpscs5fzjo.d(30): Error: undefined identifier `hasEvenDigit`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpscs5fzjo.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzwu_kgpf.d(20): Error: undefined identifier `isEven`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzwu_kgpf.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit && c.to!int % 2 == 0)\n         \
    \       {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_fh6xowg.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp_fh6xowg.d(27): Error: no property `toString` for type `long`\\n/tmp/tmp_fh6xowg.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_fh6xowg.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9jj3huog.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jj3huog.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpja_4a2w_.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpja_4a2w_.d(22): Error: cannot append type `long` to type `void[]`\\n/tmp/tmpja_4a2w_.d(25):\
    \ Error: no property `sort` for type `void[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpja_4a2w_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc2dsgj5w.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpc2dsgj5w.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpc2dsgj5w.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x47318554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptm48szc4.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptm48szc4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int j = 0;\n    for (int i = 0; i\
    \ < x.length; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n           \
    \ result[j] = x[i];\n            j++;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpc7muxavy.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42846d]\\n??:? void tmpc7muxavy.__unittest_L29_C1()\
    \ [0x427f8a]\\n??:? void tmpc7muxavy.__modtest() [0x4281f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c527]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430645]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b391]\\n??:? runModuleUnitTests [0x42c2fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x428203]\\\
    n??:? __libc_start_main [0x17521554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    long[] res = new long[n];\n    int j = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        if (x[i] % 2 != 0) {\n            res[j]\
    \ = x[i];\n            j++;\n        }\n    }\n    return res[0..j];\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplikl2730.d(17): Error: cannot implicitly convert expression `x.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmplikl2730.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp0ktvauha.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp0ktvauha.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp0ktvauha.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x101a7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long num; x)\n    {\n        if(!hasEvenDigit(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5oywtuc4.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5oywtuc4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb080i3sl.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb080i3sl.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even = [0, 2, 4, 6, 8];\n    int[] odd = [1, 3, 5, 7, 9];\n    int[]\
    \ digits = [];\n    int[] result = [];\n    foreach(long i; x)\n    {\n      \
    \  digits = [];\n        while(i != 0)\n        {\n            digits ~= i % 10;\n\
    \            i /= 10;\n        }\n        if(digits.any!(a => even.any(b => a\
    \ == b)))\n            continue;\n        result ~= x[$-1];\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprmoqdbic.d(29): Error: no property `any` for type `int[]`\\n/tmp/tmprmoqdbic.d(31):\
    \ Error: cannot append type `long` to type `int[]`\\n/tmp/tmprmoqdbic.d(33): Error:\
    \ cannot implicitly convert expression `result` of type `int[]` to `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprmoqdbic.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ foreach(char c; i.toString)\n            {\n                if(c == '0' || c\
    \ == '2' || c == '4' || c == '6' || c == '8')\n                {\n           \
    \         break;\n                }\n                else if(c == i.toString[$-1])\n\
    \                {\n                    result[count] = i;\n                 \
    \   count++;\n                }\n            }\n        }\n    }\n    return result[0..count];\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmylfb4xu.d(21): Error: no property `toString` for type `long`\\\
    n/tmp/tmpmylfb4xu.d(28): Error: no property `toString` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmylfb4xu.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp91qgozzd.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp91qgozzd.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp91qgozzd.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x4039d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2z23a15n.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2z23a15n.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   // your code here\n    long[] result = new long[0];\n    foreach(long i; x)\n\
    \    {\n        if(!hasEvenDigit(i))\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpigh0d8qk.d(21): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpigh0d8qk.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsmq_6gjh.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpsmq_6gjh.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmq_6gjh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz7vj1981.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz7vj1981.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn_x_uf_x.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpn_x_uf_x.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpn_x_uf_x.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x11927554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even_digits = [0, 2, 4, 6, 8];\n    long[] result = [];\n    foreach(long\
    \ num; x)\n    {\n        bool is_unique = true;\n        foreach(int digit; even_digits)\n\
    \        {\n            if(num.to!string.count(to!string(digit)))\n          \
    \  {\n                is_unique = false;\n                break;\n           \
    \ }\n        }\n        if(is_unique)\n        {\n            result ~= num;\n\
    \        }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo5y5lf8m.d(24): Error: no property `to` for type `long`\\n/tmp/tmpo5y5lf8m.d(35):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpo5y5lf8m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   return x.filter!(a => a.toString().all!(b => b % 2 != 0)).sort();\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp58dgguw9.d(17): Error: no property `filter` for type `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp58dgguw9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_blb8zvr.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_blb8zvr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[x.length];\n    int j = 0;\n    for (int i = 0; i <\
    \ x.length; i++)\n    {\n        if (x[i] < 10)\n        {\n            res[j]\
    \ = x[i];\n            j++;\n        }\n        else\n        {\n            long\
    \ temp = x[i];\n            bool flag = true;\n            while (temp > 0)\n\
    \            {\n                if (temp % 2 == 0)\n                {\n      \
    \              flag = false;\n                    break;\n                }\n\
    \                temp /= 10;\n            }\n            if (flag)\n         \
    \   {\n                res[j] = x[i];\n                j++;\n            }\n \
    \       }\n    }\n    long[] res1 = new long[j];\n    for (int i = 0; i < j; i++)\n\
    \    {\n        res1[i] = res[i];\n    }\n    return res1;\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmihgkdnp.d(57): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4285b5]\\n??:? void tmpmihgkdnp.__unittest_L53_C1()\
    \ [0x4280d2]\\n??:? void tmpmihgkdnp.__modtest() [0x428338]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c66f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b502]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43078d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430c3c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430719]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b4d9]\\n??:? runModuleUnitTests [0x42c445]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a78]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289ff]\\n??:? _d_run_main [0x42896a]\\n??:? main [0x42834b]\\\
    n??:? __libc_start_main [0x794f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[x.length];\n    int count = 0;\n    foreach(long i;\
    \ x)\n    {\n        if(i < 10)\n        {\n            res[count] = i;\n    \
    \        count++;\n        }\n        else\n        {\n            int flag =\
    \ 0;\n            while(i > 0)\n            {\n                if(i % 2 == 0)\n\
    \                {\n                    flag = 1;\n                    break;\n\
    \                }\n                i /= 10;\n            }\n            if(flag\
    \ == 0)\n            {\n                res[count] = i;\n                count++;\n\
    \            }\n        }\n    }\n    return res[0..count];\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdk8y47gg.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4284dd]\\n??:? void tmpdk8y47gg.__unittest_L47_C1()\
    \ [0x427ffa]\\n??:? void tmpdk8y47gg.__modtest() [0x428260]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c597]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b42a]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306b5]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b64]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430641]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b401]\\n??:? runModuleUnitTests [0x42c36d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4289a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428927]\\n??:? _d_run_main [0x428892]\\n??:? main [0x428273]\\\
    n??:? __libc_start_main [0xa69a4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpudohz7wx.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpudohz7wx.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpudohz7wx.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x556bb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0vt3v78t.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmp0vt3v78t.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vt3v78t.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpftexdgt0.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpftexdgt0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even = new int[10];\n    even[0] = 1;\n    even[2] = 1;\n    even[4]\
    \ = 1;\n    even[6] = 1;\n    even[8] = 1;\n    int[] odd = new int[10];\n   \
    \ odd[1] = 1;\n    odd[3] = 1;\n    odd[5] = 1;\n    odd[7] = 1;\n    odd[9] =\
    \ 1;\n    int[] temp;\n    long[] res = new long[x.length];\n    int count = 0;\n\
    \    for (int i = 0; i < x.length; i++)\n    {\n        temp = even;\n       \
    \ while (x[i] > 0)\n        {\n            if (temp[(int)(x[i] % 10)] == 1)\n\
    \            {\n                break;\n            }\n            temp = odd;\n\
    \            x[i] /= 10;\n        }\n        if (x[i] == 0)\n        {\n     \
    \       res[count] = x[i];\n            count++;\n        }\n    }\n    long[]\
    \ res2 = new long[count];\n    for (int i = 0; i < count; i++)\n    {\n      \
    \  res2[i] = res[i];\n    }\n    return res2;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4x9a62ai.d(37): Error: C style cast illegal, use `cast(int)(x[i]\
    \ % 10)`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4x9a62ai.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbvhttlsg.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpbvhttlsg.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpbvhttlsg.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xc0e50554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i.toString.length == 1)\n        {\n            result[count]\
    \ = i;\n            count++;\n        }\n        else\n        {\n           \
    \ foreach(char c; i.toString)\n            {\n                if(c == '0' || c\
    \ == '2' || c == '4' || c == '6' || c == '8')\n                {\n           \
    \         break;\n                }\n                else if(c == i.toString[$-1])\n\
    \                {\n                    result[count] = i;\n                 \
    \   count++;\n                }\n            }\n        }\n    }\n    return result[0..count];\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo0u13_n_.d(21): Error: no property `toString` for type `long`\\\
    n/tmp/tmpo0u13_n_.d(28): Error: no property `toString` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0u13_n_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8yr1v3ex.d(20): Error: no property `to` for type `long`\\n/tmp/tmp8yr1v3ex.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp8yr1v3ex.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmp8yr1v3ex.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8yr1v3ex.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] evens = {0, 2, 4, 6, 8};\n    int[] odds = {1, 3, 5, 7, 9};\n    int[]\
    \ digits = new int[10];\n    int[] result = new int[x.length];\n    int count\
    \ = 0;\n    foreach(int i; x)\n    {\n        int temp = i;\n        while(temp\
    \ > 0)\n        {\n            int digit = temp % 10;\n            temp /= 10;\n\
    \            digits[digit]++;\n        }\n        bool isUnique = true;\n    \
    \    foreach(int j; evens)\n        {\n            if(digits[j] > 0)\n       \
    \     {\n                isUnique = false;\n                break;\n         \
    \   }\n        }\n        if(isUnique)\n        {\n            result[count] =\
    \ i;\n            count++;\n        }\n        foreach(int j; digits)\n      \
    \  {\n            j = 0;\n        }\n    }\n    return result[0..count];\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxtvt3wu4.d(17): Error: a struct is not a valid initializer for\
    \ a `int[]`\\n/tmp/tmpxtvt3wu4.d(18): Error: a struct is not a valid initializer\
    \ for a `int[]`\\n/tmp/tmpxtvt3wu4.d(22): Error: cannot implicitly convert expression\
    \ `__r16[__key17]` of type `long` to `int`\\n/tmp/tmpxtvt3wu4.d(50): Error: cannot\
    \ implicitly convert expression `result[0..cast(ulong)count]` of type `int[]`\
    \ to `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxtvt3wu4.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpobe8a1k9.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpobe8a1k9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    long[] result = new long[n];\n    int j = 0;\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        long num = x[i];\n        bool hasEven\
    \ = false;\n        while (num > 0)\n        {\n            long digit = num %\
    \ 10;\n            if (digit % 2 == 0)\n            {\n                hasEven\
    \ = true;\n                break;\n            }\n            num /= 10;\n   \
    \     }\n        if (!hasEven)\n        {\n            result[j] = x[i];\n   \
    \         j++;\n        }\n    }\n    return result[0..j];\n}\nunittest\n{\n \
    \   alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9qvvaej2.d(17): Error: cannot implicitly convert expression `x.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmp9qvvaej2.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpku2_95gr.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpku2_95gr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    for (int i =\
    \ 0; i < x.length; i++)\n    {\n        if (x[i] < 10)\n        {\n          \
    \  result[count] = x[i];\n            count++;\n        }\n        else\n    \
    \    {\n            int temp = x[i];\n            bool flag = true;\n        \
    \    while (temp > 0)\n            {\n                if (temp % 2 == 0)\n   \
    \             {\n                    flag = false;\n                    break;\n\
    \                }\n                temp /= 10;\n            }\n            if\
    \ (flag)\n            {\n                result[count] = x[i];\n             \
    \   count++;\n            }\n        }\n    }\n    result = result[0..count];\n\
    \    sort(result);\n    return result;\n}\nunittest\n{\n    alias candidate =\
    \ unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n\
    \    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmps8ruyw_r.d(28): Error: cannot implicitly convert expression `x[cast(ulong)i]`\
    \ of type `long` to `int`\\n/tmp/tmps8ruyw_r.d(47): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmps8ruyw_r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    long[] res = new long[n];\n    int j = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        if (!hasEvenDigit(x[i])) {\n            res[j]\
    \ = x[i];\n            j++;\n        }\n    }\n    return res[0..j];\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp300nu64c.d(17): Error: cannot implicitly convert expression `x.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp300nu64c.d(21): Error: undefined identifier\
    \ `hasEvenDigit`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp300nu64c.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjix1sy_v.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjix1sy_v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4xu0sa8f.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp4xu0sa8f.d(20): Error: no property `toString` for type `long`\\n/tmp/tmp4xu0sa8f.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmp4xu0sa8f.d(20): Error:\
    \ no property `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp4xu0sa8f.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return sort(result);\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqp1497ea.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpqp1497ea.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqp1497ea.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuko01i7r.d(20): Error: no property `to` for type `long`\\n/tmp/tmpuko01i7r.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpuko01i7r.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpuko01i7r.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuko01i7r.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy_3enmbw.d(20): Error: no property `to` for type `long`\\n/tmp/tmpy_3enmbw.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpy_3enmbw.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpy_3enmbw.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy_3enmbw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpisdssy_z.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpisdssy_z.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpisdssy_z.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xdca62554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    int[] a = new int[n];\n    int[] b = new int[n];\n\
    \    int k = 0;\n    for (int i = 0; i < n; i++)\n    {\n        int m = x[i];\n\
    \        int flag = 0;\n        while (m > 0)\n        {\n            int r =\
    \ m % 10;\n            if (r % 2 == 0)\n            {\n                flag =\
    \ 1;\n                break;\n            }\n            m = m / 10;\n       \
    \ }\n        if (flag == 0)\n        {\n            a[k] = x[i];\n           \
    \ k++;\n        }\n    }\n    for (int i = 0; i < k; i++)\n    {\n        b[i]\
    \ = a[i];\n    }\n    sort(b);\n    return b;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcf_phxdr.d(17): Error: cannot implicitly convert expression `x.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpcf_phxdr.d(23): Error: cannot implicitly\
    \ convert expression `x[cast(ulong)i]` of type `long` to `int`\\n/tmp/tmpcf_phxdr.d(37):\
    \ Error: cannot implicitly convert expression `x[cast(ulong)i]` of type `long`\
    \ to `int`\\n/tmp/tmpcf_phxdr.d(45): Error: undefined identifier `sort`, did you\
    \ mean function `sqrt`?\\n/tmp/tmpcf_phxdr.d(46): Error: cannot implicitly convert\
    \ expression `b` of type `int[]` to `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpcf_phxdr.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzxwcgcbq.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzxwcgcbq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpq6t_0k81.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpq6t_0k81.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpq6t_0k81.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0xd670554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    for (int i =\
    \ 0; i < x.length; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n      \
    \      result[count] = x[i];\n            count++;\n        }\n    }\n    result\
    \ = result[0..count];\n    sort(result);\n    return result;\n}\nunittest\n{\n\
    \    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvvr5u13p.d(28): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvvr5u13p.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] evenDigits = [0, 2, 4, 6, 8];\n    int[] oddDigits = [1, 3, 5, 7, 9];\n\
    \    int[] digits = [];\n    int[] uniqueDigits = [];\n    foreach(int i; x)\n\
    \    {\n        int num = i;\n        while(num > 0)\n        {\n            digits\
    \ ~= num % 10;\n            num /= 10;\n        }\n        bool hasEvenDigit =\
    \ false;\n        foreach(int j; digits)\n        {\n            if(evenDigits.canFind(j))\n\
    \            {\n                hasEvenDigit = true;\n                break;\n\
    \            }\n        }\n        if(!hasEvenDigit)\n        {\n            uniqueDigits\
    \ ~= i;\n        }\n        digits = [];\n    }\n    return sort(uniqueDigits);\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplad6ktl_.d(21): Error: cannot implicitly convert expression `__r16[__key17]`\
    \ of type `long` to `int`\\n/tmp/tmplad6ktl_.d(32): Error: no property `canFind`\
    \ for type `int[]`\\n/tmp/tmplad6ktl_.d(44): Error: undefined identifier `sort`,\
    \ did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmplad6ktl_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 &&\n           i.to!string.count!(\"4\") == 0 &&\n           i.to!string.count!(\"\
    6\") == 0 &&\n           i.to!string.count!(\"8\") == 0)\n        {\n        \
    \    res ~= i;\n        }\n    }\n    return res.sort;\n}\nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpf9z45kbp.d(20): Error: no property `to` for type `long`\\n/tmp/tmpf9z45kbp.d(21):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpf9z45kbp.d(22): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpf9z45kbp.d(23): Error: no property `to`\
    \ for type `long`\\n/tmp/tmpf9z45kbp.d(28): Error: no property `sort` for type\
    \ `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf9z45kbp.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpilzud2fh.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpilzud2fh.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpilzud2fh.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprhw8svl7.d(20): Error: undefined identifier `isEven`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprhw8svl7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i = 0;\n    int j = 0;\n    int k = 0;\n    int l = 0;\n    int m = 0;\n\
    \    int n = 0;\n    int o = 0;\n    int p = 0;\n    int q = 0;\n    int r = 0;\n\
    \    int s = 0;\n    int t = 0;\n    int u = 0;\n    int v = 0;\n    int w = 0;\n\
    \    int y = 0;\n    int z = 0;\n    int aa = 0;\n    int ab = 0;\n    int ac\
    \ = 0;\n    int ad = 0;\n    int ae = 0;\n    int af = 0;\n    int ag = 0;\n \
    \   int ah = 0;\n    int ai = 0;\n    int aj = 0;\n    int ak = 0;\n    int al\
    \ = 0;\n    int am = 0;\n    int an = 0;\n    int ao = 0;\n    int ap = 0;\n \
    \   int aq = 0;\n    int ar = 0;\n    int as = 0;\n    int at = 0;\n    int au\
    \ = 0;\n    int av = 0;\n    int aw = 0;\n    int ax = 0;\n    int ay = 0;\n \
    \   int az = 0;\n    int ba = 0;\n    int bb = 0;\n    int bc = 0;\n    int bd\
    \ = 0;\n    int be = 0;\n    int bf = 0;\n    int bg = 0;\n    int bh = 0;\n \
    \   int bi = 0;\n    int bj = 0;\n    int bk = 0;\n    int bl = 0;\n    int bm\
    \ = 0;\n    int bn = 0;\n    int bo = 0;\n    int bp = 0;\n    int bq = 0;\n \
    \   int br = 0;\n    int bs = 0;\n    int bt = 0;\n    int bu = 0;\n    int bv\
    \ = 0;\n    int bw = 0;\n    int bx = 0;\n    int by = 0;\n    int bz = 0;\n \
    \   int ca\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxxymhz05.d(87): Error: semicolon expected, not `unittest`\\n/tmp/tmpxxymhz05.d(87):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpxxymhz05.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyiy8liyv.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpyiy8liyv.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpyiy8liyv.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x37563554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmi4rggmo.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpmi4rggmo.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpmi4rggmo.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xd6157554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 && i.to!string.count!(\"4\") == 0 &&\n            i.to!string.count!(\"\
    6\") == 0 && i.to!string.count!(\"8\") == 0)\n        {\n            result ~=\
    \ i;\n        }\n    }\n    return result.sort;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd1vs9yyd.d(20): Error: no property `to` for type `long`\\n/tmp/tmpd1vs9yyd.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpd1vs9yyd.d(21): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpd1vs9yyd.d(21): Error: no property `to`\
    \ for type `long`\\n/tmp/tmpd1vs9yyd.d(26): Error: no property `sort` for type\
    \ `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd1vs9yyd.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long num; x)\n    {\n        if(!hasEvenDigit(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe1y7as5q.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe1y7as5q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.length.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkjdvyym7.d(20): Error: no property `to` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkjdvyym7.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res;\n    foreach(i; x)\n    {\n        if(i.to!string.count!(\"2\"\
    ) == 0 && i.to!string.count!(\"4\") == 0 && i.to!string.count!(\"6\") == 0 &&\
    \ i.to!string.count!(\"8\") == 0 && i.to!string.count!(\"0\") == 0)\n        {\n\
    \            res ~= i;\n        }\n    }\n    return res.sort;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpz1wa467u.d(20): Error: no property `to` for type `long`\\n/tmp/tmpz1wa467u.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpz1wa467u.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpz1wa467u.d(20): Error: no property `to`\
    \ for type `long`\\n/tmp/tmpz1wa467u.d(20): Error: no property `to` for type `long`\\\
    n/tmp/tmpz1wa467u.d(25): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz1wa467u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.find(\"\
    2\") == -1 && i.to!string.find(\"4\") == -1 && i.to!string.find(\"6\") == -1 &&\
    \ i.to!string.find(\"8\") == -1 && i.to!string.find(\"0\") == -1)\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpangylgyj.d(20): Error: no property `to` for type `long`\\n/tmp/tmpangylgyj.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpangylgyj.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpangylgyj.d(20): Error: no property `to`\
    \ for type `long`\\n/tmp/tmpangylgyj.d(20): Error: no property `to` for type `long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpangylgyj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplamgqx70.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplamgqx70.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j;\n    int n = x.length;\n    int[] even = new int[n];\n    for (i\
    \ = 0; i < n; i++)\n    {\n        int num = x[i];\n        while (num > 0)\n\
    \        {\n            int digit = num % 10;\n            if (digit % 2 == 0)\n\
    \            {\n                even[i] = 1;\n                break;\n       \
    \     }\n            num /= 10;\n        }\n    }\n    int[] res = new int[n];\n\
    \    int k = 0;\n    for (i = 0; i < n; i++)\n    {\n        if (even[i] == 0)\n\
    \        {\n            res[k] = x[i];\n            k++;\n        }\n    }\n \
    \   long[] result = new long[k];\n    for (i = 0; i < k; i++)\n    {\n       \
    \ result[i] = res[i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpuh20_wa0.d(18): Error: cannot implicitly convert expression `x.length`\
    \ of type `ulong` to `int`\\n/tmp/tmpuh20_wa0.d(22): Error: cannot implicitly\
    \ convert expression `x[cast(ulong)i]` of type `long` to `int`\\n/tmp/tmpuh20_wa0.d(40):\
    \ Error: cannot implicitly convert expression `x[cast(ulong)i]` of type `long`\
    \ to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuh20_wa0.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjo5q0vn8.d(20): Error: no property `to` for type `long`\\n/tmp/tmpjo5q0vn8.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpjo5q0vn8.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpjo5q0vn8.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjo5q0vn8.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpozu8oj5r.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpozu8oj5r.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpozu8oj5r.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xaee48554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!isEven(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7o6q8d4c.d(20): Error: undefined identifier `isEven`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7o6q8d4c.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpi472oc43.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi472oc43.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(i; x)\n    {\n        if(!hasEvenDigit(i))\n \
    \       {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqsfcfmtb.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqsfcfmtb.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(num; x)\n    {\n        if(num % 2 != 0)\n   \
    \     {\n            result ~= num;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgo8eouh6.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428435]\\n??:? void tmpgo8eouh6.__unittest_L27_C1()\
    \ [0x427f52]\\n??:? void tmpgo8eouh6.__modtest() [0x4281b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bc9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43067d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc75]\\n??:? runModuleUnitTests [0x42cbe1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428884]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42880b]\\n??:? _d_run_main [0x428776]\\n??:? main [0x4281cb]\\\
    n??:? __libc_start_main [0x23567554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i % 2 != 0)\n        {\n            result[count] =\
    \ i;\n            count++;\n        }\n    }\n    return result[0..count];\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvfughjr5.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42846d]\\n??:? void tmpvfughjr5.__unittest_L29_C1()\
    \ [0x427f86]\\n??:? void tmpvfughjr5.__modtest() [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c527]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430645]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b391]\\n??:? runModuleUnitTests [0x42c2fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0x71111554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    int i;\n    int j;\n    int k;\n    int l;\n    int m;\n\
    \    int n;\n    int o;\n    int p;\n    int q;\n    int r;\n    int s;\n    int\
    \ t;\n    int u;\n    int v;\n    int w;\n    int x1;\n    int y;\n    int z;\n\
    \    int aa;\n    int ab;\n    int ac;\n    int ad;\n    int ae;\n    int af;\n\
    \    int ag;\n    int ah;\n    int ai;\n    int aj;\n    int ak;\n    int al;\n\
    \    int am;\n    int an;\n    int ao;\n    int ap;\n    int aq;\n    int ar;\n\
    \    int as;\n    int at;\n    int au;\n    int av;\n    int aw;\n    int ax;\n\
    \    int ay;\n    int az;\n    int ba;\n    int bb;\n    int bc;\n    int bd;\n\
    \    int be;\n    int bf;\n    int bg;\n    int bh;\n    int bi;\n    int bj;\n\
    \    int bk;\n    int bl;\n    int bm;\n    int bn;\n    int bo;\n    int bp;\n\
    \    int bq;\n    int br;\n    int bs;\n    int bt;\n    int bu;\n    int bv;\n\
    \    int bw;\n    int bx;\n    int by;\n    int bz;\n    int ca;\n    int cb;\n\
    \    int cc;\n    int cd;\n    int ce;\n    int cf;\n    int cg;\n    int ch;\n\
    \    int ci;\n    int cj;\n    int ck;\n    int cl;\n    int cm;\n    int cn;\n\
    \    int co;\n    int cp;\n    int cq;\n    int cr;\n    int cs;\n    int ct;\n\
    \    int cu;\n    int cv;\n    int cw;\n    int cx;\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp08hirutu.d(112): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp08hirutu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int len = x.length;\n    long[] result = new long[len];\n    int count = 0;\n\
    \    for (int i = 0; i < len; i++)\n    {\n        if (x[i] % 2 != 0)\n      \
    \  {\n            result[count] = x[i];\n            count++;\n        }\n   \
    \ }\n    result = result[0..count];\n    sort(result);\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1ptuqttk.d(17): Error: cannot implicitly convert expression `x.length`\
    \ of type `ulong` to `int`\\n/tmp/tmp1ptuqttk.d(29): Error: undefined identifier\
    \ `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmp1ptuqttk.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 && i.to!string.count!(\"4\") == 0 && i.to!string.count!(\"6\") == 0\
    \ && i.to!string.count!(\"8\") == 0 && i.to!string.count!(\"0\") == 0)\n     \
    \   {\n            result ~= i;\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvm8318p_.d(20): Error: no property `to` for type `long`\\n/tmp/tmpvm8318p_.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpvm8318p_.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpvm8318p_.d(20): Error: no property `to`\
    \ for type `long`\\n/tmp/tmpvm8318p_.d(20): Error: no property `to` for type `long`\\\
    n/tmp/tmpvm8318p_.d(22): Error: cannot append type `long` to type `void[]`\\n/tmp/tmpvm8318p_.d(25):\
    \ Error: no property `sort` for type `void[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpvm8318p_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto result = [];\n    foreach(i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\") || i.to!string.canFind(\"0\"))\n        {\n            continue;\n      \
    \  }\n        else\n        {\n            result ~= i;\n        }\n    }\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9_uwstdq.d(20): Error: no property `to` for type `long`\\n/tmp/tmp9_uwstdq.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp9_uwstdq.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmp9_uwstdq.d(20): Error: no property `to`\
    \ for type `long`\\n/tmp/tmp9_uwstdq.d(20): Error: no property `to` for type `long`\\\
    n/tmp/tmp9_uwstdq.d(26): Error: cannot append type `long` to type `void[]`\\n/tmp/tmp9_uwstdq.d(29):\
    \ Error: cannot implicitly convert expression `result` of type `void[]` to `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_uwstdq.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp6z1wg1h1.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6z1wg1h1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even = [0, 2, 4, 6, 8];\n    long[] result = [];\n    foreach(num; x)\n\
    \    {\n        bool isEven = false;\n        foreach(digit; num.toString())\n\
    \        {\n            if(even.canFind(digit.to!int))\n            {\n      \
    \          isEven = true;\n                break;\n            }\n        }\n\
    \        if(!isEven)\n        {\n            result ~= num;\n        }\n    }\n\
    \    return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2gwl3i0x.d(22): Error: no property `toString` for type `long`\\\
    n/tmp/tmp2gwl3i0x.d(35): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2gwl3i0x.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] evenDigits = {0, 2, 4, 6, 8};\n    int[] oddDigits = {1, 3, 5, 7, 9};\n\
    \    int[] digits;\n    int[] digits2;\n    int[] digits3;\n    int[] digits4;\n\
    \    int[] digits5;\n    int[] digits6;\n    int[] digits7;\n    int[] digits8;\n\
    \    int[] digits9;\n    int[] digits10;\n    int[] digits11;\n    int[] digits12;\n\
    \    int[] digits13;\n    int[] digits14;\n    int[] digits15;\n    int[] digits16;\n\
    \    int[] digits17;\n    int[] digits18;\n    int[] digits19;\n    int[] digits20;\n\
    \    int[] digits21;\n    int[] digits22;\n    int[] digits23;\n    int[] digits24;\n\
    \    int[] digits25;\n    int[] digits26;\n    int[] digits27;\n    int[] digits28;\n\
    \    int[] digits29;\n    int[] digits30;\n    int[] digits31;\n    int[] digits32;\n\
    \    int[] digits33;\n    int[] digits34;\n    int[] digits35;\n    int[] digits36;\n\
    \    int[] digits37;\n    int[] digits38;\n    int[] digits39;\n    int[] digits40;\n\
    \    int[] digits41;\n    int[] digits42;\n    int[] digits43;\n    int[] digits44;\n\
    \    int[] digits45;\n    int[] digits46;\n    int[] digits47;\n    int[] digits48;\n\
    \    int[] digits49;\n    int[] digits50;\n    int[] digits51;\n    int[] digits52;\n\
    \    int[] digits53;\n    int[] digits54;\n    int[] digits55;\n    int[] digits56;\n\
    \    int[] digits57;\n    int[] digits58;\n    int[] digits59;\n    int[] digits60;\n\
    \    int[] digits61;\n    int[] digits62;\n    int[] digits63;\n    int[] digits64;\n\
    \    int[] digits65;\n    int[] digits66;\n    int[] digits67;\n    int[]\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkekcu2yn.d(87): Error: no identifier for declarator `int[]`\\\
    n/tmp/tmpkekcu2yn.d(87): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkekcu2yn.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            res ~= i;\n        }\n    }\n    return res;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpshwpzcvr.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpshwpzcvr.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprfovq156.d(20): Error: no property `to` for type `long`\\n/tmp/tmprfovq156.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmprfovq156.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmprfovq156.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprfovq156.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5fg8s1cl.d(20): Error: no property `to` for type `long`\\n/tmp/tmp5fg8s1cl.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp5fg8s1cl.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmp5fg8s1cl.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5fg8s1cl.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdwlez0ql.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdwlez0ql.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even = {0, 2, 4, 6, 8};\n    int[] odd = {1, 3, 5, 7, 9};\n    int[]\
    \ digits = new int[10];\n    int[] result = new int[x.length];\n    int count\
    \ = 0;\n    foreach(int i; x)\n    {\n        int temp = i;\n        while(temp\
    \ > 0)\n        {\n            int digit = temp % 10;\n            digits[digit]++;\n\
    \            temp /= 10;\n        }\n        bool flag = true;\n        foreach(int\
    \ j; even)\n        {\n            if(digits[j] > 0)\n            {\n        \
    \        flag = false;\n                break;\n            }\n        }\n   \
    \     if(flag)\n        {\n            result[count] = i;\n            count++;\n\
    \        }\n        foreach(int j; digits)\n        {\n            j = 0;\n  \
    \      }\n    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph7i_kj85.d(17): Error: a struct is not a valid initializer for\
    \ a `int[]`\\n/tmp/tmph7i_kj85.d(18): Error: a struct is not a valid initializer\
    \ for a `int[]`\\n/tmp/tmph7i_kj85.d(22): Error: cannot implicitly convert expression\
    \ `__r16[__key17]` of type `long` to `int`\\n/tmp/tmph7i_kj85.d(50): Error: cannot\
    \ implicitly convert expression `result[0..cast(ulong)count]` of type `int[]`\
    \ to `long[]`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph7i_kj85.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdodyrq8_.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpdodyrq8_.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdodyrq8_.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsmf369yw.d(20): Error: no property `to` for type `long`\\n/tmp/tmpsmf369yw.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpsmf369yw.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpsmf369yw.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmf369yw.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpl4mhu7vf.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmpl4mhu7vf.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl4mhu7vf.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i,j,k,l;\n    long[] y;\n    y.length = x.length;\n    for(i=0;i<x.length;i++)\n\
    \    {\n        for(j=0;j<x.length;j++)\n        {\n            if(x[i]%10==0\
    \ || x[i]%10==2 || x[i]%10==4 || x[i]%10==6 || x[i]%10==8)\n            {\n  \
    \              y[i] = 0;\n                break;\n            }\n            else\n\
    \            {\n                y[i] = x[i];\n            }\n        }\n    }\n\
    \    return y;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_znsqnin.d(41): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42857d]\\n??:? void tmp_znsqnin.__unittest_L37_C1()\
    \ [0x428096]\\n??:? void tmp_znsqnin.__modtest() [0x4282fc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42d6ab]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42c53e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43197d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x431e2c]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x431909]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42c515]\\n??:? runModuleUnitTests [0x42d481]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428a40]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4289c7]\\n??:? _d_run_main [0x428932]\\n??:? main [0x42830f]\\\
    n??:? __libc_start_main [0xbcb35554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpp4v0jvcc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428445]\\n??:? void tmpp4v0jvcc.__unittest_L27_C1()\
    \ [0x427f5e]\\n??:? void tmpp4v0jvcc.__modtest() [0x4281c4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce1b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bcae]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430701]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430bb0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43068d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc85]\\n??:? runModuleUnitTests [0x42cbf1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428894]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42881b]\\n??:? _d_run_main [0x428786]\\n??:? main [0x4281d7]\\\
    n??:? __libc_start_main [0x80058554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp40u9n2dj.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp40u9n2dj.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeddh_nwu.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeddh_nwu.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9_ajruw4.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_ajruw4.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.digits.all!(a\
    \ => a % 2 != 0))\n        {\n            result ~= i;\n        }\n    }\n   \
    \ return result.sort;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp19rvwnfw.d(20): Error: no property `digits` for type `long`\\\
    n/tmp/tmp19rvwnfw.d(25): Error: no property `sort` for type `long[]`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp19rvwnfw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, y, z;\n    long[] a = new\
    \ long[x.length];\n    long[] b = new long[x.length];\n    long[] c = new long[x.length];\n\
    \    long[] d = new long[x.length];\n    long[] e = new long[x.length];\n    long[]\
    \ f = new long[x.length];\n    long[] g = new long[x.length];\n    long[] h =\
    \ new long[x.length];\n    long[] ii = new long[x.length];\n    long[] jj = new\
    \ long[x.length];\n    long[] kk = new long[x.length];\n    long[] ll = new long[x.length];\n\
    \    long[] mm = new long[x.length];\n    long[] nn = new long[x.length];\n  \
    \  long[] oo = new long[x.length];\n    long[] pp = new long[x.length];\n    long[]\
    \ qq = new long[x.length];\n    long[] rr = new long[x.length];\n    long[] ss\
    \ = new long[x.length];\n    long[] tt = new long[x.length];\n    long[] uu =\
    \ new long[x.length];\n    long[] vv = new long[x.length];\n    long[] ww = new\
    \ long[x.length];\n    long[] yy = new long[x.length];\n    long[] zz = new long[x.length];\n\
    \    for (i = 0; i < x.length; i++)\n    {\n        if (x[i] % 10 == 0)\n    \
    \    {\n            a[i] = x[i];\n        }\n        else\n        {\n       \
    \     a[i] = 0;\n        }\n    }\n    for (j = 0; j < x.length; j++)\n    {\n\
    \        if (x[j] % 10 == 2)\n        {\n            b[j] = x[j];\n        }\n\
    \        else\n        {\n            b[j] = 0;\n       \nunittest\n{\n    alias\
    \ candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) ==\
    \ [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n \
    \   assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L,\
    \ 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdaegh5fv.d(64): Error: found `unittest` instead of statement\\\
    n/tmp/tmpdaegh5fv.d(73): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpdaegh5fv.d(73): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpdaegh5fv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = [];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwit_13t1.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwit_13t1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj_v67kye.d(20): Error: no property `to` for type `long`\\n/tmp/tmpj_v67kye.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpj_v67kye.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpj_v67kye.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj_v67kye.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int count = 0;\n    int[] arr = new int[x.length];\n    for (int i = 0; i\
    \ < x.length; i++)\n    {\n        int num = x[i];\n        int digit = 0;\n \
    \       while (num > 0)\n        {\n            digit = num % 10;\n          \
    \  if (digit % 2 == 0)\n            {\n                break;\n            }\n\
    \            num /= 10;\n        }\n        if (num == 0)\n        {\n       \
    \     arr[count] = x[i];\n            count++;\n        }\n    }\n    long[] result\
    \ = new long[count];\n    for (int i = 0; i < count; i++)\n    {\n        result[i]\
    \ = arr[i];\n    }\n    sort(result);\n    return result;\n}\nunittest\n{\n  \
    \  alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpoo1ly_vj.d(21): Error: cannot implicitly convert expression `x[cast(ulong)i]`\
    \ of type `long` to `int`\\n/tmp/tmpoo1ly_vj.d(34): Error: cannot implicitly convert\
    \ expression `x[cast(ulong)i]` of type `long` to `int`\\n/tmp/tmpoo1ly_vj.d(43):\
    \ Error: undefined identifier `sort`, did you mean function `sqrt`?\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoo1ly_vj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcpik0j8q.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpcpik0j8q.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 && i.to!string.count!(\"4\") == 0 && i.to!string.count!(\"6\") == 0\
    \ && i.to!string.count!(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ncncisz.d(20): Error: no property `to` for type `long`\\n/tmp/tmp2ncncisz.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp2ncncisz.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmp2ncncisz.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2ncncisz.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   auto even = [](long n) { return n % 2 == 0; };\n    auto has_even_digit =\
    \ [even](long n) {\n        while (n > 0) {\n            if (even(n % 10))\n \
    \               return true;\n            n /= 10;\n        }\n        return\
    \ false;\n    };\n    auto result = x.filter!(n => !has_even_digit(n)).sort;\n\
    \    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcigsxlc1.d(17): Error: found `n` when expecting `.` following\
    \ long\\n/tmp/tmpcigsxlc1.d(17): Error: found `)` when expecting identifier following\
    \ `long`.\\n/tmp/tmpcigsxlc1.d(17): Error: found `{` when expecting `,`\\n/tmp/tmpcigsxlc1.d(17):\
    \ Error: expression expected, not `return`\\n/tmp/tmpcigsxlc1.d(17): Error: found\
    \ `n` when expecting `,`\\n/tmp/tmpcigsxlc1.d(17): Error: expression expected,\
    \ not `%`\\n/tmp/tmpcigsxlc1.d(17): Error: found `2` when expecting `,`\\n/tmp/tmpcigsxlc1.d(17):\
    \ Error: expression expected, not `==`\\n/tmp/tmpcigsxlc1.d(17): Error: found\
    \ `0` when expecting `,`\\n/tmp/tmpcigsxlc1.d(17): Error: expression expected,\
    \ not `;`\\n/tmp/tmpcigsxlc1.d(17): Error: found `}` when expecting `,`\\n/tmp/tmpcigsxlc1.d(17):\
    \ Error: expression expected, not `;`\\n/tmp/tmpcigsxlc1.d(18): Error: found `auto`\
    \ when expecting `,`\\n/tmp/tmpcigsxlc1.d(18): Error: found `n` when expecting\
    \ `.` following long\\n/tmp/tmpcigsxlc1.d(18): Error: found `)` when expecting\
    \ identifier following `long`.\\n/tmp/tmpcigsxlc1.d(18): Error: found `{` when\
    \ expecting `,`\\n/tmp/tmpcigsxlc1.d(19): Error: expression expected, not `while`\\\
    n/tmp/tmpcigsxlc1.d(19): Error: found `{` when expecting `,`\\n/tmp/tmpcigsxlc1.d(20):\
    \ Error: expression expected, not `if`\\n/tmp/tmpcigsxlc1.d(21): Error: found\
    \ `return` when expecting `,`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcigsxlc1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpce80i1v4.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmpce80i1v4.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmpce80i1v4.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xff02d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmploc8ep93.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmploc8ep93.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmploc8ep93.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0xf5202554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[x.length];\n    int count = 0;\n    foreach(long i;\
    \ x)\n    {\n        if(i % 2 != 0)\n        {\n            res[count] = i;\n\
    \            count++;\n        }\n    }\n    res = res[0..count];\n    sort(res);\n\
    \    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n   \
    \ assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpmhy9t6fo.d(28): Error: undefined identifier `sort`, did you mean\
    \ function `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhy9t6fo.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnn3xj1po.d(20): Error: no property `to` for type `long`\\n/tmp/tmpnn3xj1po.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpnn3xj1po.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpnn3xj1po.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnn3xj1po.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count!(\"\
    2\") == 0 && i.to!string.count!(\"4\") == 0 && i.to!string.count!(\"6\") == 0\
    \ && i.to!string.count!(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpe0mpyyky.d(20): Error: no property `to` for type `long`\\n/tmp/tmpe0mpyyky.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpe0mpyyky.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpe0mpyyky.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe0mpyyky.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int j = 0;\n    for (int i = 0; i\
    \ < x.length; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n           \
    \ result[j] = x[i];\n            j++;\n        }\n    }\n    return result[0..j];\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmposmkbl0s.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42848d]\\n??:? void tmposmkbl0s.__unittest_L29_C1()\
    \ [0x427fa6]\\n??:? void tmposmkbl0s.__modtest() [0x42820c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c547]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3da]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430665]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b14]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305f1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3b1]\\n??:? runModuleUnitTests [0x42c31d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428950]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288d7]\\n??:? _d_run_main [0x428842]\\n??:? main [0x42821f]\\\
    n??:? __libc_start_main [0x9f8bb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int[] even = [0, 2, 4, 6, 8];\n    int[] odd = [1, 3, 5, 7, 9];\n    int[]\
    \ nums = [];\n    foreach(i; x)\n    {\n        int[] temp = [];\n        while(i\
    \ > 0)\n        {\n            temp ~= i % 10;\n            i /= 10;\n       \
    \ }\n        bool hasEven = false;\n        foreach(j; temp)\n        {\n    \
    \        if(even.count(j) > 0)\n            {\n                hasEven = true;\n\
    \                break;\n            }\n        }\n        if(!hasEven)\n    \
    \    {\n            nums ~= i;\n        }\n    }\n    return nums;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpslxqntz0.d(31): Error: no property `count` for type `int[]`\\\
    n/tmp/tmpslxqntz0.d(39): Error: cannot append type `long` to type `int[]`\\n/tmp/tmpslxqntz0.d(42):\
    \ Error: cannot implicitly convert expression `nums` of type `int[]` to `long[]`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpslxqntz0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[x.length];\n    int count = 0;\n    foreach(long i;\
    \ x)\n    {\n        if(!hasEvenDigit(i))\n        {\n            res[count] =\
    \ i;\n            count++;\n        }\n    }\n    return res[0..count];\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsfyvk0cp.d(21): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsfyvk0cp.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0)\n        {\n            result ~= i;\n  \
    \      }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpw4r5zqzc.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpw4r5zqzc.d(20): Error: no property `toString` for type `long`\\n/tmp/tmpw4r5zqzc.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmpw4r5zqzc.d(20): Error:\
    \ no property `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpw4r5zqzc.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,y,z;\n    long[] a;\n    int[] b;\n    a\
    \ = new long[x.length];\n    b = new int[x.length];\n    for(i=0;i<x.length;i++)\n\
    \    {\n        b[i]=0;\n    }\n    for(i=0;i<x.length;i++)\n    {\n        for(j=0;j<x.length;j++)\n\
    \        {\n            if(x[i]%10==0 || x[i]%10==2 || x[i]%10==4 || x[i]%10==6\
    \ || x[i]%10==8)\n            {\n                b[i]=1;\n                break;\n\
    \            }\n            x[i]=x[i]/10;\n        }\n    }\n    for(i=0;i<x.length;i++)\n\
    \    {\n        if(b[i]==0)\n        {\n            a[i]=x[i];\n        }\n  \
    \  }\n    for(i=0;i<x.length;i++)\n    {\n        for(j=i+1;j<x.length;j++)\n\
    \        {\n            if(a[i]>a[j])\n            {\n                k=a[i];\n\
    \                a[i]=a[j];\n                a[j]=k;\n            }\n        }\n\
    \    }\n    return a;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n\
    \    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkjk4lj1c.d(51): Error: cannot implicitly convert expression `a[cast(ulong)i]`\
    \ of type `long` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\",\
    \ \"/tmp/tmpkjk4lj1c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            result ~= i;\n        }\n        else\n      \
    \  {\n            bool is_unique = true;\n            foreach(char c; i.toString())\n\
    \            {\n                if(c.isDigit && c.toDigit % 2 == 0)\n        \
    \        {\n                    is_unique = false;\n                    break;\n\
    \                }\n            }\n            if(is_unique)\n            {\n\
    \                result ~= i;\n            }\n        }\n    }\n    return result.sort();\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_5sh0bth.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp_5sh0bth.d(27): Error: no property `toString` for type `long`\\n/tmp/tmp_5sh0bth.d(41):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_5sh0bth.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   int n = x.length;\n    long[] res = new long[n];\n    int j = 0;\n    for\
    \ (int i = 0; i < n; i++)\n    {\n        if (x[i] % 2 != 0)\n        {\n    \
    \        res[j] = x[i];\n            j++;\n        }\n    }\n    return res[0..j];\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpcvdsn5zv.d(17): Error: cannot implicitly convert expression `x.length`\
    \ of type `ulong` to `int`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\"\
    , \"/tmp/tmpcvdsn5zv.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result;\n    foreach(long i; x)\n    {\n        if(i % 2 != 0)\n  \
    \      {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5zws_dpy.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428435]\\n??:? void tmp5zws_dpy.__unittest_L27_C1()\
    \ [0x427f52]\\n??:? void tmp5zws_dpy.__modtest() [0x4281b8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bc9e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x4306f1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430ba0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x43067d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bc75]\\n??:? runModuleUnitTests [0x42cbe1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428884]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42880b]\\n??:? _d_run_main [0x428776]\\n??:? main [0x4281cb]\\\
    n??:? __libc_start_main [0x72a92554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().count(\"\
    2\") == 0 && i.toString().count(\"4\") == 0 && i.toString().count(\"6\") == 0\
    \ && i.toString().count(\"8\") == 0)\n        {\n            res ~= i;\n     \
    \   }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpop57dn2u.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmpop57dn2u.d(20): Error: no property `toString` for type `long`\\n/tmp/tmpop57dn2u.d(20):\
    \ Error: no property `toString` for type `long`\\n/tmp/tmpop57dn2u.d(20): Error:\
    \ no property `toString` for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"\
    -v\", \"-o-\", \"/tmp/tmpop57dn2u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        bool isUnique = true;\n        while(i > 0)\n        {\n\
    \            if(i % 2 == 0)\n            {\n                isUnique = false;\n\
    \                break;\n            }\n            i /= 10;\n        }\n    \
    \    if(isUnique)\n        {\n            result[count] = i;\n            count++;\n\
    \        }\n    }\n    return result[0..count];\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpk6uji3_r.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42849d]\\n??:? void tmpk6uji3_r.__unittest_L39_C1()\
    \ [0x427fba]\\n??:? void tmpk6uji3_r.__modtest() [0x428220]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c557]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ea]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430675]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430b24]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430601]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b3c1]\\n??:? runModuleUnitTests [0x42c32d]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428960]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288e7]\\n??:? _d_run_main [0x428852]\\n??:? main [0x428233]\\\
    n??:? __libc_start_main [0xf466e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp97gzjcmy.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp97gzjcmy.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp20rq0s0g.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp20rq0s0g.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp20rq0s0g.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x402ec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[x.length];\n    int count = 0;\n    foreach(long\
    \ i; x)\n    {\n        if(i % 2 != 0)\n        {\n            result[count] =\
    \ i;\n            count++;\n        }\n    }\n    return result[0..count];\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2irll1xp.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42846d]\\n??:? void tmp2irll1xp.__unittest_L29_C1()\
    \ [0x427f86]\\n??:? void tmp2irll1xp.__modtest() [0x4281ec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c527]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b3ba]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430645]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430af4]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4305d1]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b391]\\n??:? runModuleUnitTests [0x42c2fd]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428930]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4288b7]\\n??:? _d_run_main [0x428822]\\n??:? main [0x4281ff]\\\
    n??:? __libc_start_main [0x55152554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    sort(result);\n  \
    \  return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n  \
    \  assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmprqimntfe.d(20): Error: undefined identifier `hasEvenDigit`\\\
    n/tmp/tmprqimntfe.d(25): Error: undefined identifier `sort`, did you mean function\
    \ `sqrt`?\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqimntfe.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.count(\"\
    2\") == 0 && i.to!string.count(\"4\") == 0 && i.to!string.count(\"6\") == 0 &&\
    \ i.to!string.count(\"8\") == 0)\n        {\n            result ~= i;\n      \
    \  }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2qb8kyyy.d(20): Error: no property `to` for type `long`\\n/tmp/tmp2qb8kyyy.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmp2qb8kyyy.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmp2qb8kyyy.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2qb8kyyy.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[x.length];\n    int count = 0;\n    foreach(long num;\
    \ x)\n    {\n        if(num.toString().length == 1)\n        {\n            res[count]\
    \ = num;\n            count++;\n        }\n        else\n        {\n         \
    \   bool even = false;\n            foreach(char c; num.toString())\n        \
    \    {\n                if(c.to!int() % 2 == 0)\n                {\n         \
    \           even = true;\n                    break;\n                }\n    \
    \        }\n            if(!even)\n            {\n                res[count] =\
    \ num;\n                count++;\n            }\n        }\n    }\n    res = res[0..count];\n\
    \    res.sort;\n    return res;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\
    \n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L,\
    \ 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L])\
    \ == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp4l0aziid.d(21): Error: no property `toString` for type `long`\\\
    n/tmp/tmp4l0aziid.d(29): Error: no property `toString` for type `long`\\n/tmp/tmp4l0aziid.d(45):\
    \ Error: no property `sort` for type `long[]`\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp4l0aziid.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] res = new long[0];\n    foreach(long i; x)\n    {\n        if(i.toString().length\
    \ == 1)\n        {\n            res ~= i;\n        }\n        else\n        {\n\
    \            bool even = false;\n            foreach(char c; i.toString())\n \
    \           {\n                if(c.to!int() % 2 == 0)\n                {\n  \
    \                  even = true;\n                    break;\n                }\n\
    \            }\n            if(!even)\n            {\n                res ~= i;\n\
    \            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate\
    \ = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L, 1L]) == [1L, 15L,\
    \ 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) == []);\n    assert(candidate([12345L,\
    \ 2033L, 111L, 151L]) == [111L, 151L]);\n    assert(candidate([135L, 103L, 31L])\
    \ == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8as9bg9u.d(20): Error: no property `toString` for type `long`\\\
    n/tmp/tmp8as9bg9u.d(27): Error: no property `toString` for type `long`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8as9bg9u.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i.to!string.canFind(\"\
    2\") || i.to!string.canFind(\"4\") || i.to!string.canFind(\"6\") || i.to!string.canFind(\"\
    8\"))\n        {\n            continue;\n        }\n        else\n        {\n\
    \            result ~= i;\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = unique_digits;\n\n    assert(candidate([15L, 33L, 1422L,\
    \ 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L, 10L]) ==\
    \ []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpm465a_ae.d(20): Error: no property `to` for type `long`\\n/tmp/tmpm465a_ae.d(20):\
    \ Error: no property `to` for type `long`\\n/tmp/tmpm465a_ae.d(20): Error: no\
    \ property `to` for type `long`\\n/tmp/tmpm465a_ae.d(20): Error: no property `to`\
    \ for type `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm465a_ae.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1hi8jpfo.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1hi8jpfo.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long num; x)\n    {\n        if(!hasEvenDigit(num))\n\
    \        {\n            result ~= num;\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt3029bou.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt3029bou.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(!hasEvenDigit(i))\n\
    \        {\n            result ~= i;\n        }\n    }\n    return result;\n}\n\
    unittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjnkmqf_e.d(20): Error: undefined identifier `hasEvenDigit`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjnkmqf_e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\nGiven an array of positive integers x. return a\
    \ sorted array of all \n    elements that hasn't any even digit.\n\n    Note:\
    \ Returned array should be sorted in increasing order.\n    \n    For example:\n\
    \    >>> unique_digits([15L, 33L, 1422L, 1L])\n    [1L, 15L, 33L]\n    >>> unique_digits([152L,\
    \ 323L, 1422L, 10L])\n    []\n    \n*/\nlong[] unique_digits(long[] x) \n{\n \
    \   long[] result = new long[0];\n    foreach(long i; x)\n    {\n        if(i\
    \ % 2 != 0)\n        {\n            result ~= i;\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = unique_digits;\n\n    assert(candidate([15L,\
    \ 33L, 1422L, 1L]) == [1L, 15L, 33L]);\n    assert(candidate([152L, 323L, 1422L,\
    \ 10L]) == []);\n    assert(candidate([12345L, 2033L, 111L, 151L]) == [111L, 151L]);\n\
    \    assert(candidate([135L, 103L, 31L]) == [31L, 135L]);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp59eyp7o5.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42843d]\\n??:? void tmp59eyp7o5.__unittest_L27_C1()\
    \ [0x427f5a]\\n??:? void tmp59eyp7o5.__modtest() [0x4281c0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ce6f]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42bd02]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x43084d]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430cfc]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4307d9]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42bcd9]\\n??:? runModuleUnitTests [0x42cc45]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42888c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428813]\\n??:? _d_run_main [0x42877e]\\n??:? main [0x4281d3]\\\
    n??:? __libc_start_main [0x6008f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
