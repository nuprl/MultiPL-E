name: HumanEval_12_longest
language: d
prompt: "import std.typecons;\nimport std.math;\n/*\n Out of array of strings, return\
  \ the longest one. Return the first one in case of multiple\n    strings of the\
  \ same length. Return null in case the input array is empty.\n    >>> longest([])\n\
  \    None\n    >>> longest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> longest([\"\
  a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    \n*/\nNullable!(string) longest(string[]\
  \ strings) \n"
tests: "unittest\n{\n    alias candidate = longest;\n\n{\n        auto result = candidate([]);\n\
  \        assert(result.isNull);\n}\n\n{\n        auto result = candidate([\"x\"\
  , \"y\", \"z\"]);\n        assert(!result.isNull && result.get == \"x\");\n}\n\n\
  {\n        auto result = candidate([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\"\
  , \"abc\"]);\n        assert(!result.isNull && result.get == \"zzzz\");\n}\n\n}\n\
  void main(){}"
completions: ["{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n\
    \    {\n        if(result is null || s.length > result.get.length)\n        {\n\
    \            result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(str; strings)\n    {\n        if(result.isNull ||\
    \ str.length > result.get.length)\n        {\n            result = str;\n    \
    \    }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if (longest is null || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) result = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(result is null || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n\
    \        if(result is null || s.length > result.get.length)\n        {\n     \
    \       result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if(result is\
    \ null || s.length > result.get.length)\n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull ||\
    \ s.length > longest.get.length) \n        {\n            longest = s;\n     \
    \   }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if (result is null || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    Nullable!(string) longest = strings[0];\n    foreach (string s; strings)\n\
    \    {\n        if (s.length > longest.length)\n            longest = s;\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings) \n    {\n        if (longest is null || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest is null || s.length > longest.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || longest.get.length < s.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if (longest.isNull || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    if\
    \ (strings.length == 0)\n        return null;\n    Nullable!(string) longest =\
    \ strings[0];\n    foreach (string s; strings)\n    {\n        if (s.length >\
    \ longest.length)\n            longest = s;\n    }\n    return longest;\n}\n/*\n\
    \    Out of array of strings, return the shortest one. Return the first one in\
    \ case of multiple\n    strings of the same length. Return null in case the input\
    \ array is empty.\n    >>> shortest([])\n    None\n    >>> shortest([\"a\", \"\
    b\", \"c\"])\n    \"a\"\n    >>> shortest([\"a\", \"bb\", \"ccc\"])\n    \"a\"\
    \n*/\nNullable!(string) shortest(string[] strings) \n{\n    if (strings.length\
    \ == 0)\n        return null;\n    Nullable!(string) shortest = strings[0];\n\
    \    foreach (string s; strings)\n    {\n        if (s.length < shortest.length)\n\
    \            shortest = s;\n    }\n    return shortest;\n}\n/*\n    Out of array\
    \ of strings, return the one with the most vowels. Return the first one in case\
    \ of multiple\n    strings with the same number of vowels. Return null in case\
    \ the input array is empty.\n    >>> mostVowels([])\n    None\n    >>> mostVowels([\"\
    a\", \"b\", \"c\"])\n    \"a\"\n    >>> mostVowels([\"a\", \"bb\", \"ccc\"])\n\
    \    \"bb\"\n*/\nNullable!(string) mostVowels(string[] strings) \n{\n    if (strings.length\
    \ == 0)\n        return null;\n    Nullable!(string) mostVowels = strings[0];\n\
    \    foreach (string s; strings)\n    {\n        if (countVowels(s) > countVowels(mostVowels))\n\
    \            mostVowels = s;\n    }\n    return mostVowels;\n}\n/*\n    Out of\
    \ array of strings, return the one with the most consonants. Return the first\
    \ one in case of multiple\n    strings with the same number of consonants. Return\
    \ null in case the input", "{\n    Nullable!(string) result = null;\n    foreach(string\
    \ s; strings) \n    {\n        if (s.length > result.length) \n        {\n   \
    \         result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if (result is\
    \ null || s.length > result.get.length)\n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}\n/*\n    Out of array of strings, return\
    \ the shortest one. Return the first one in case of multiple\n    strings of the\
    \ same length. Return null in case the input array is empty.\n    >>> shortest([])\n\
    \    None\n    >>> shortest([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> shortest([\"\
    a\", \"bb\", \"ccc\"])\n    \"a\"\n*/\nNullable!(string) shortest(string[] strings)\
    \ \n{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n\
    \    {\n        if (result is null || s.length < result.get.length)\n        {\n\
    \            result = s;\n        }\n    }\n    return result;\n}\n/*\n    Out\
    \ of array of strings, return the one with the most vowels. Return the first one\
    \ in case of multiple\n    strings with the same number of vowels. Return null\
    \ in case the input array is empty.\n    >>> mostVowels([])\n    None\n    >>>\
    \ mostVowels([\"a\", \"b\", \"c\"])\n    \"a\"\n    >>> mostVowels([\"a\", \"\
    bb\", \"ccc\"])\n    \"bb\"\n*/\nNullable!(string) mostVowels(string[] strings)\
    \ \n{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n\
    \    {\n        if (result is null || countVowels(s) > countVowels(result.get))\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}\n\
    /*\n    Out of array of strings, return the one with the least vowels. Return\
    \ the first one in case of multiple\n    strings with the same number of vowels.\
    \ Return null in case the input array is empty.\n    >>> leastVowels([])\n   \
    \ None\n    >>> leastVowels([\"a\",", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings) \n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length) \n        {\n            longest = s;\n        }\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n    foreach(str;\
    \ strings)\n    {\n        if(result.isNull || str.length > result.get.length)\n\
    \        {\n            result = str;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if(longest.isNull || s.length > longest.get.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n  \
    \      if (result is null || s.length > result.get.length)\n        {\n      \
    \      result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n  \
    \      return null;\n    string longest = strings[0];\n    foreach (string s;\
    \ strings)\n    {\n        if (s.length > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings) \n    {\n        if(longest.isNull || longest.get.length\
    \ < s.length) \n        {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if(result is\
    \ null || s.length > result.get.length)\n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull || longest.get.length\
    \ < s.length)\n        {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if (longest.isNull || longest.get.length < s.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest is null ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || longest.get.length\
    \ < s.length)\n        {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) result = null;\n    foreach(string s;\
    \ strings)\n    {\n        if(result is null || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if (longest is null || s.length > longest.length) \n        {\n \
    \           longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}\n/*\n    Return the longest string in the\
    \ array.\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\"])\n    \"dddd\"\n    >>> longest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\"])\n    \"eeeee\"\n    >>> longest([\"a\", \"bb\"\
    , \"ccc\", \"dddd\", \"eeeee\", \"ffffff\"])\n    \"ffffff\"\n*/\nstring longest(string[]\
    \ strings) \n{\n    string longest = \"\";\n    foreach(string s; strings)\n \
    \   {\n        if(s.length > longest.length)\n        {\n            longest =\
    \ s;\n        }\n    }\n    return longest;\n}\n/*\n    Return the longest string\
    \ in the array.\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    >>>\
    \ longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n    \"dddd\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"])\n    \"eeeee\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffffff\"])\n    \"ffffff\"\n*/\n\
    string longest(string[] strings) \n{\n    string longest = \"\";\n    foreach(string\
    \ s; strings)\n    {\n        if(s.length > longest.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}\n/*\n    Return\
    \ the longest string in the array.\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n\
    \    \"ccc\"\n    >>> longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n    \"dddd\"\
    \n", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\
    \ \n    {\n        if(longest.isNull || s.length > longest.get.length) \n    \
    \    {\n            longest = s;\n        }\n    }\n    return longest;\n}", "{\n\
    \    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest is null || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) result = null;\n    foreach(string\
    \ s; strings)\n    {\n        if (result is null || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || longest.get.length < s.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(s.length > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(s.length > longest.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest is null ||\
    \ s.length > longest.length)\n        {\n            longest = s;\n        }\n\
    \    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n        return\
    \ null;\n    Nullable!(string) longest = strings[0];\n    foreach (string s; strings)\n\
    \    {\n        if (s.length > longest.length)\n            longest = s;\n   \
    \ }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ str; strings) \n    {\n        if(longest.isNull || str.length > longest.get.length)\
    \ \n        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest.isNull || s.length > longest.get.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if(result is\
    \ null || s.length > result.get.length)\n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) result =\
    \ null;\n    foreach(string s; strings) \n    {\n        if (result is null ||\
    \ s.length > result.get.length) \n        {\n            result = s;\n       \
    \ }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest is null || s.length\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    else\n    {\n        string longest = strings[0];\n        foreach (string\
    \ s; strings)\n        {\n            if (s.length > longest.length)\n       \
    \         longest = s;\n        }\n        return longest;\n    }\n}", "{\n  \
    \  Nullable!(string) longest = null;\n    foreach(string s; strings) \n    {\n\
    \        if(longest.isNull || s.length > longest.get.length) \n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}\n/*\n    Return\
    \ the sum of all elements in the input array.\n    >>> sum([])\n    0\n    >>>\
    \ sum([1, 2, 3])\n    6\n    >>> sum([-1, 1])\n    0\n*/", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if (result is\
    \ null || s.length > result.length)\n        {\n            result = s;\n    \
    \    }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if (longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    Nullable!(string) longest = strings[0];\n    foreach (string s; strings)\n\
    \    {\n        if (s.length > longest.length)\n            longest = s;\n   \
    \ }\n    return longest;\n}", "{\n    if (strings.length == 0)\n        return\
    \ null;\n    else\n    {\n        auto longest = strings[0];\n        for (size_t\
    \ i = 1; i < strings.length; i++)\n        {\n            if (strings[i].length\
    \ > longest.length)\n                longest = strings[i];\n        }\n      \
    \  return longest;\n    }\n}", "{\n    Nullable!(string) result = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(result.isNull || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if(result is\
    \ null || s.length > result.get.length)\n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}", "{\n    if (strings.length == 0)\n\
    \        return null;\n    Nullable!(string) longest = strings[0];\n    foreach\
    \ (string s; strings)\n    {\n        if (s.length > longest.length)\n       \
    \     longest = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings) \n    {\n        if(longest is null || s.length\
    \ > longest.length) \n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || longest.get.length < s.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if (longest.isNull || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if(result is null || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}\n/*\n    Return the longest string from the input array.\n\
    \    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n    >>> longest([\"a\"\
    , \"bb\", \"ccc\", \"dddd\"])\n    \"dddd\"\n    >>> longest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeee\"])\n    \"eeeee\"\n    >>> longest([\"a\", \"bb\", \"\
    ccc\", \"dddd\", \"eeeee\", \"ffffff\"])\n    \"ffffff\"\n*/\nstring longest(string[]\
    \ strings) \n{\n    string result = \"\";\n    foreach(string s; strings)\n  \
    \  {\n        if(s.length > result.length)\n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}\n/*\n    Return the longest string from\
    \ the input array.\n    >>> longest([\"a\", \"bb\", \"ccc\"])\n    \"ccc\"\n \
    \   >>> longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n    \"dddd\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\"])\n    \"eeeee\"\n    >>> longest([\"\
    a\", \"bb\", \"ccc\", \"dddd\", \"eeeee\", \"ffffff\"])\n    \"ffffff\"\n*/\n\
    string longest(string[] strings) \n{\n    string result = \"\";\n    foreach(string\
    \ s; strings)\n    {\n        if(s.length > result.length)\n        {\n      \
    \      result = s;\n        }\n    }\n    return result;\n}\n/*\n    Return the\
    \ longest string from the input array.\n    >>> longest([\"a\", \"bb\", \"ccc\"\
    ])\n    \"ccc\"\n    >>> longest([\"a\", \"bb\", \"ccc\", \"dddd\"])\n    \"dddd\"",
  "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n\
    \        if(result is null || s.length > result.get.length)\n        {\n     \
    \       result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if (result.isNull || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) result = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(result is null || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest is null || s.length > longest.length)\n        {\n       \
    \     longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings) \n    {\n        if (result is null || s.length\
    \ > result.get.length) \n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    else\n    {\n        auto longest = strings[0];\n        foreach (s; strings)\n\
    \            if (s.length > longest.length)\n                longest = s;\n  \
    \      return longest;\n    }\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(longest.isNull || longest.get.length\
    \ < s.length)\n        {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) result = null;\n    foreach(string s;\
    \ strings)\n    {\n        if(result is null || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n\
    \        if (result is null || s.length > result.get.length)\n        {\n    \
    \        result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.get.length)\n        {\n            longest = s;\n\
    \        }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(longest is null ||\
    \ s.length > longest.get.length)\n        {\n            longest = s;\n      \
    \  }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if (result is null || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n\
    \        if (s.length > result.length)\n        {\n            result = s;\n \
    \       }\n    }\n    return result;\n}", "{\n    if (strings.length == 0)\n \
    \       return null;\n    else\n    {\n        Nullable!(string) longest = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if(result is\
    \ null || s.length > result.get.length)\n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}", "{\n    if (strings.length == 0)\n\
    \        return null;\n    auto longest = strings[0];\n    foreach (string s;\
    \ strings)\n    {\n        if (s.length > longest.length)\n            longest\
    \ = s;\n    }\n    return longest;\n}\n/*\n    Given a string, return a new string\
    \ with the reversed order of characters.\n    >>> reverse(\"hello\")\n    \"olleh\"\
    \n    >>> reverse(\"\")\n    \"\"\n*/\nstring reverse(string s) \n{\n    string\
    \ result;\n    foreach (char c; s)\n        result = c ~ result;\n    return result;\n\
    }\n/*\n    Given a string, return a new string where the first and last chars\
    \ have been exchanged.\n    >>> front_back(\"code\")\n    \"eodc\"\n    >>> front_back(\"\
    a\")\n    \"a\"\n    >>> front_back(\"ab\")\n    \"ba\"\n*/\nstring front_back(string\
    \ s) \n{\n    if (s.length <= 1)\n        return s;\n    return s[$-1 .. $] ~\
    \ s[1 .. $-2] ~ s[0 .. 1];\n}\n/*\n    Given a string, return a new string where\
    \ the first and last chars have been exchanged.\n    >>> front_back(\"code\")\n\
    \    \"eodc\"\n    >>> front_back(\"a\")\n    \"a\"\n    >>> front_back(\"ab\"\
    )\n    \"ba\"\n*/\nstring front_back(string s) \n{\n    if (s.length <= 1)\n \
    \       return s;\n    return s[$-1 .. $] ~ s[1 .. $-2] ~ s[0 .. 1];\n}\n/*\n\
    \    Given a string, return a new string where the first and last chars have been\
    \ exchanged.\n    >>> front_back(\"code\")\n    \"eodc\"\n    >>> front_back(\"\
    a\")\n    \"a\"\n    >>> front_back(\"ab\")\n    \"ba\"\n*/\nstring front_back(string\
    \ s) \n{\n    if (s.length <= 1)\n        return s;\n    return s[$-1 .. $] ~\
    \ s[1 .. $-", "{\n    Nullable!(string) longest = null;\n    foreach(string s;\
    \ strings)\n    {\n        if (longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if (longest.isNull || s.length > longest.get.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n  \
    \      if (result is null || s.length > result.length)\n        {\n          \
    \  result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(s.length\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    else\n    {\n        auto longest = strings[0];\n        foreach (string\
    \ s; strings)\n        {\n            if (s.length > longest.length)\n       \
    \         longest = s;\n        }\n        return longest;\n    }\n}", "{\n  \
    \  if (strings.length == 0)\n        return null;\n    auto result = strings[0];\n\
    \    foreach (string s; strings)\n    {\n        if (s.length > result.length)\n\
    \            result = s;\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.length)\n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings) \n    {\n        if(result is null || s.length\
    \ > result.get.length) \n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}\n/*\n    >>> longest([\"a\", \"bb\", \"ccc\", \"dd\"])\n\
    \    \"ccc\"\n*/", "{\n    Nullable!(string) result = null;\n    foreach(string\
    \ s; strings)\n    {\n        if (result is null || s.length > result.get.length)\n\
    \        {\n            result = s;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest is\
    \ null || s.length > longest.length)\n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull || longest.get.length\
    \ < s.length)\n        {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest is null || s.length > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if (longest.isNull || s.length > longest.get.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || longest.get.length < s.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if(result is\
    \ null || s.length > result.get.length)\n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) result =\
    \ null;\n    foreach(string s; strings) \n    {\n        if (result is null ||\
    \ s.length > result.get.length) \n        {\n            result = s;\n       \
    \ }\n    }\n    return result;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    else\n    {\n      \
    \  auto longest = strings[0];\n        foreach (string s; strings)\n        {\n\
    \            if (s.length > longest.length)\n                longest = s;\n  \
    \      }\n        return longest;\n    }\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(s.length > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    else\n    {\n      \
    \  auto longest = strings[0];\n        foreach (string s; strings)\n        {\n\
    \            if (s.length > longest.length)\n                longest = s;\n  \
    \      }\n        return longest;\n    }\n}", "{\n    Nullable!(string) result\
    \ = null;\n    foreach(string s; strings)\n    {\n        if(result is null ||\
    \ s.length > result.get.length)\n        {\n            result = s;\n        }\n\
    \    }\n    return result;\n}", "{\n    Nullable!(string) result = null;\n   \
    \ foreach(string s; strings) \n    {\n        if (result is null || s.length >\
    \ result.get.length) \n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) result = null;\n    foreach(str;\
    \ strings)\n    {\n        if (result is null || str.length > result.length)\n\
    \        {\n            result = str;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest.isNull || s.length > longest.get.length)\n        {\n    \
    \        longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if(result.isNull || s.length >\
    \ result.get.length)\n        {\n            result = s;\n        }\n    }\n \
    \   return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(s.length > longest.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    else\n    {\n        auto longest = strings[0];\n\
    \        foreach (string s; strings)\n        {\n            if (s.length > longest.length)\n\
    \                longest = s;\n        }\n        return longest;\n    }\n}",
  "{\n    if (strings.length == 0)\n        return null;\n    else\n    {\n      \
    \  string longest = strings[0];\n        foreach (string s; strings)\n       \
    \ {\n            if (s.length > longest.length)\n                longest = s;\n\
    \        }\n        return longest;\n    }\n}\n/*\n    Return the sum of all elements\
    \ in the input array.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([])\n    0\n\
    */", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest.isNull || s.length > longest.get.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ if (strings.length == 0)\n        return null;\n    else\n    {\n        auto\
    \ result = strings[0];\n        foreach (string s; strings)\n        {\n     \
    \       if (s.length > result.length)\n                result = s;\n        }\n\
    \        return result;\n    }\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings) \n    {\n        if(s.length > result.length)\
    \ \n        {\n            result = s;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(string) longest;\n    foreach(str; strings)\n    {\n   \
    \     if(longest.isNull || longest.get.length < str.length)\n            longest\
    \ = str;\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n  \
    \      if(longest.isNull || longest.get.length < str.length)\n        {\n    \
    \        longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(str; strings)\n    {\n        if(result.isNull ||\
    \ str.length > result.get.length)\n        {\n            result = str;\n    \
    \    }\n    }\n    return result;\n}", "{\n    if (strings.length == 0)\n    \
    \    return null;\n    else\n    {\n        auto max = strings[0];\n        foreach\
    \ (string s; strings)\n        {\n            if (s.length > max.length)\n   \
    \             max = s;\n        }\n        return max;\n    }\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if(result is\
    \ null || s.length > result.get.length)\n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(str; strings)\n    {\n        if(longest.isNull || str.length\
    \ > longest.get.length)\n        {\n            longest = str;\n        }\n  \
    \  }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n    foreach(str;\
    \ strings)\n    {\n        if(result is null || str.length > result.length)\n\
    \        {\n            result = str;\n        }\n    }\n    return result;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest is null || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    if (strings.length == 0)\n  \
    \      return null;\n    Nullable!(string) longest = strings[0];\n    foreach\
    \ (string s; strings)\n    {\n        if (s.length > longest.length)\n       \
    \     longest = s;\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(str; strings)\n    {\n        if(str.length > longest.length)\n\
    \        {\n            longest = str;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest.isNull || s.length > longest.get.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || s.length > longest.get.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings) \n    {\n        if(result is\
    \ null || s.length > result.get.length) \n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) result =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(result is null || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n  \
    \      if(longest.isNull || longest.get.length < str.length)\n        {\n    \
    \        longest = str;\n        }\n    }\n    return longest;\n}", "{\n    if\
    \ (strings.length == 0)\n        return null;\n    else\n    {\n        auto longest\
    \ = strings[0];\n        foreach (string s; strings)\n        {\n            if\
    \ (s.length > longest.length)\n                longest = s;\n        }\n     \
    \   return longest;\n    }\n}", "{\n    Nullable!(string) longest = null;\n  \
    \  foreach(string s; strings)\n    {\n        if(longest is null || s.length >\
    \ longest.length)\n        {\n            longest = s;\n        }\n    }\n   \
    \ return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings) \n    {\n        if (longest.isNull || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n   \
    \ {\n        if(longest.isNull || str.length > longest.get.length)\n        {\n\
    \            longest = str;\n        }\n    }\n    return longest;\n}", "{\n \
    \   Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if (longest.isNull || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if (longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest is null || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n\
    \        if(result is null || s.length > result.get.length)\n        {\n     \
    \       result = s;\n        }\n    }\n    return result;\n}", "{\n    if (strings.length\
    \ == 0)\n        return null;\n    Nullable!(string) result = strings[0];\n  \
    \  foreach (string s; strings)\n    {\n        if (s.length > result.length)\n\
    \            result = s;\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || longest.get.length < s.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if (longest is null || s.length\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings) \n    {\n        if (longest is null || s.length > longest.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n\
    \    {\n        if(longest is null || longest.length < s.length)\n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings) \n    {\n\
    \        if (longest.isNull || s.length > longest.get.length) \n        {\n  \
    \          longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if(result is\
    \ null || s.length > result.get.length)\n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) result =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(result is null || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings) \n    {\n        if (longest.isNull || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n\
    \    {\n        if(result is null || s.length > result.length)\n        {\n  \
    \          result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if(result is\
    \ null || s.length > result.get.length)\n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest is null ||\
    \ s.length > longest.length)\n        {\n            longest = s;\n        }\n\
    \    }\n    return longest;\n}", "{\n    Nullable!(string) longest;\n    foreach(str;\
    \ strings)\n    {\n        if(longest.isNull || str.length > longest.get.length)\n\
    \            longest = str;\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(s.length\
    \ > longest.length)\n        {\n            longest = s;\n        }\n    }\n \
    \   return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings) \n    {\n        if (longest is null || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n\
    \    {\n        if(result is null || s.length > result.get.length)\n        {\n\
    \            result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings) \n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length) \n        {\n            longest = s;\n  \
    \      }\n    }\n    return longest;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull || s.length\
    \ > longest.get.length)\n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest.isNull || s.length > longest.get.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings) \n   \
    \ {\n        if(longest.isNull || s.length > longest.get.length) \n        {\n\
    \            longest = s;\n        }\n    }\n    return longest;\n}", "{\n   \
    \ Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n \
    \       if(longest.isNull || longest.get.length < s.length)\n        {\n     \
    \       longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if(result is null || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings)\n    {\n        if(longest is null || s.length > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) result = null;\n    foreach(string s; strings) \n    {\n\
    \        if (result is null || s.length > result.length) \n        {\n       \
    \     result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if(result is\
    \ null || s.length > result.get.length)\n        {\n            result = s;\n\
    \        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest =\
    \ null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull || longest.get.length\
    \ < s.length)\n        {\n            longest = s;\n        }\n    }\n    return\
    \ longest;\n}", "{\n    Nullable!(string) longest;\n    foreach(str; strings)\
    \ \n    {\n        if(longest.isNull || str.length > longest.get.length) \n  \
    \      {\n            longest = str;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest is null || s.length > longest.length)\n        {\n       \
    \     longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings)\n    {\n        if (result is\
    \ null || s.length > result.length)\n        {\n            result = s;\n    \
    \    }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest = null;\n\
    \    foreach(string s; strings)\n    {\n        if(s.length > longest.length)\n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(string s; strings)\n    {\n\
    \        if(longest is null || s.length > longest.get.length)\n        {\n   \
    \         longest = s;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ result = null;\n    foreach(string s; strings) \n    {\n        if (result is\
    \ null || s.length > result.length) \n        {\n            result = s;\n   \
    \     }\n    }\n    return result;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if (result is null || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    if (strings.length == 0)\n        return null;\n\
    \    else\n    {\n        string longest = strings[0];\n        foreach (string\
    \ s; strings)\n        {\n            if (s.length > longest.length)\n       \
    \         longest = s;\n        }\n        return longest;\n    }\n}", "{\n  \
    \  Nullable!(string) result = null;\n    foreach(string s; strings)\n    {\n \
    \       if(result is null || s.length > result.get.length)\n        {\n      \
    \      result = s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings)\n    {\n        if(result is null || s.length\
    \ > result.get.length)\n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings) \n    {\n        if(s.length > longest.getOrElse(\"\").length) \n\
    \        {\n            longest = s;\n        }\n    }\n    return longest;\n}",
  "{\n    Nullable!(string) longest = null;\n    foreach(str; strings)\n    {\n  \
    \      if(longest.isNull || str.length > longest.get.length)\n        {\n    \
    \        longest = str;\n        }\n    }\n    return longest;\n}", "{\n    Nullable!(string)\
    \ longest = null;\n    foreach(string s; strings)\n    {\n        if(longest.isNull\
    \ || s.length > longest.get.length)\n        {\n            longest = s;\n   \
    \     }\n    }\n    return longest;\n}", "{\n    Nullable!(string) result = null;\n\
    \    foreach(string s; strings) \n    {\n        if(result is null || s.length\
    \ > result.get.length) \n        {\n            result = s;\n        }\n    }\n\
    \    return result;\n}", "{\n    Nullable!(string) result = null;\n    foreach(string\
    \ s; strings) \n    {\n        if(result is null || s.length > result.get.length)\
    \ \n        {\n            result = s;\n        }\n    }\n    return result;\n\
    }", "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n\
    \    {\n        if(s.length > result.length)\n        {\n            result =\
    \ s;\n        }\n    }\n    return result;\n}", "{\n    Nullable!(string) longest\
    \ = null;\n    foreach(s; strings) \n    {\n        if (longest is null || s.length\
    \ > longest.length) \n        {\n            longest = s;\n        }\n    }\n\
    \    return longest;\n}", "{\n    Nullable!(string) longest = null;\n    foreach(string\
    \ s; strings) \n    {\n        if (longest.isNull || s.length > longest.get.length)\
    \ \n        {\n            longest = s;\n        }\n    }\n    return longest;\n\
    }", "{\n    Nullable!(string) result = null;\n    foreach(string s; strings)\n\
    \    {\n        if(result.isNull || s.length > result.get.length)\n        {\n\
    \            result = s;\n        }\n    }\n    return result;\n}"]
stop_tokens:
- "\n\n"
- "\nvoid"
- "\nbool"
- "\nint"
