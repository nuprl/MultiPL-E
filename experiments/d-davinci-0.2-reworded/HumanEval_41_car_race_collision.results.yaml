name: HumanEval_41_car_race_collision
language: d
results:
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long collision = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                collision++;\n            }\n        }\n    }\n    return\
    \ collision;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n  \
    \  assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp30jqziqp.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp30jqziqp.__unittest_L34_C1()\
    \ [0x427e3c]\\n??:? void tmp30jqziqp.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x54a4e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i < j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsafczu_d.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpsafczu_d.__unittest_L30_C1()\
    \ [0x427a90]\\n??:? void tmpsafczu_d.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0x63ab0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2d_9d3jf.d(87): Error: semicolon expected, not `unittest`\\n/tmp/tmp2d_9d3jf.d(87):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp2d_9d3jf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    float x[n], y[n];\n    float x1[n], y1[n];\n  \
    \  float x2[n], y2[n];\n    float x3[n], y3[n];\n    float x4[n], y4[n];\n   \
    \ float x5[n], y5[n];\n    float x6[n], y6[n];\n    float x7[n], y7[n];\n    float\
    \ x8[n], y8[n];\n    float x9[n], y9[n];\n    float x10[n], y10[n];\n    float\
    \ x11[n], y11[n];\n    float x12[n], y12[n];\n    float x13[n], y13[n];\n    float\
    \ x14[n], y14[n];\n    float x15[n], y15[n];\n    float x16[n], y16[n];\n    float\
    \ x17[n], y17[n];\n    float x18[n], y18[n];\n    float x19[n], y19[n];\n    float\
    \ x20[n], y20[n];\n    float x21[n], y21[n];\n    float x22[n], y22[n];\n    float\
    \ x23[n], y23[n];\n    float x24[n], y24[n];\n    float x25[n], y25[n];\n    float\
    \ x26[n], y26[n];\n    float x27[n], y27[n];\n    float x28[n], y28[n];\n    float\
    \ x29[n], y29[n];\n    float x30[n], y30[n];\n    float x31[n], y31[n];\n    float\
    \ x32[n], y32[n];\n    float x33[n], y33[n];\n    float x34[n], y34[n];\n    float\
    \ x35[n], y35[n];\n    float x36[n], y36[n];\n    float x37[n], y37[n];\n   \n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8jxr8o3h.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[n] x`\\n/tmp/tmp8jxr8o3h.d(19): Error: multiple declarations must\
    \ have the same type, not `float[n]` and `float[n]`\\n/tmp/tmp8jxr8o3h.d(19):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] y`\\n/tmp/tmp8jxr8o3h.d(20):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] x1`\\n/tmp/tmp8jxr8o3h.d(20):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmp8jxr8o3h.d(20): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] y1`\\n/tmp/tmp8jxr8o3h.d(21): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] x2`\\n/tmp/tmp8jxr8o3h.d(21): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmp8jxr8o3h.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] y2`\\n/tmp/tmp8jxr8o3h.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] x3`\\n/tmp/tmp8jxr8o3h.d(22):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmp8jxr8o3h.d(22): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] y3`\\n/tmp/tmp8jxr8o3h.d(23): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] x4`\\n/tmp/tmp8jxr8o3h.d(23): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmp8jxr8o3h.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] y4`\\n/tmp/tmp8jxr8o3h.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] x5`\\n/tmp/tmp8jxr8o3h.d(24):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmp8jxr8o3h.d(24): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] y5`\\n/tmp/tmp8jxr8o3h.d(25): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] x6`\\n/tmp/tmp8jxr8o3h.d(25): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmp8jx"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long m = n;\n    long count = 0;\n    for (i = 0; i < n; i++) {\n  \
    \      for (j = 0; j < n; j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            for (k = 0; k < m; k++) {\n                for (l\
    \ = 0; l < m; l++) {\n                    if (k == l) {\n                    \
    \    continue;\n                    }\n                    if (i == k && j ==\
    \ l) {\n                        continue;\n                    }\n           \
    \         if (i == l && j == k) {\n                        continue;\n       \
    \             }\n                    if (abs(i - j) == abs(k - l)) {\n       \
    \                 count++;\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1so095th.d(49): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ea5]\\n??:? void tmp1so095th.__unittest_L45_C1()\
    \ [0x427b74]\\n??:? void tmp1so095th.__modtest() [0x427c24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bbcb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa5e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42aa35]\\n??:? runModuleUnitTests [0x42b9a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42827b]\\n??:? _d_run_main [0x4281e6]\\n??:? main [0x427c37]\\\
    n??:? __libc_start_main [0x9a6ad554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long count = 0;\n    float x, y;\n    float x1, y1;\n    float x2, y2;\n\
    \    float x3, y3;\n    float x4, y4;\n    float x5, y5;\n    float x6, y6;\n\
    \    float x7, y7;\n    float x8, y8;\n    float x9, y9;\n    float x10, y10;\n\
    \    float x11, y11;\n    float x12, y12;\n    float x13, y13;\n    float x14,\
    \ y14;\n    float x15, y15;\n    float x16, y16;\n    float x17, y17;\n    float\
    \ x18, y18;\n    float x19, y19;\n    float x20, y20;\n    float x21, y21;\n \
    \   float x22, y22;\n    float x23, y23;\n    float x24, y24;\n    float x25,\
    \ y25;\n    float x26, y26;\n    float x27, y27;\n    float x28, y28;\n    float\
    \ x29, y29;\n    float x30, y30;\n    float x31, y31;\n    float x32, y32;\n \
    \   float x33, y33;\n    float x34, y34;\n    float x35, y35;\n    float x36,\
    \ y36;\n    float x37, y37;\n    float x38, y38;\n    float x39, y39;\n    float\
    \ x40, y40;\n    float x41, y41;\n    float x42, y42;\n    float x43, y43;\n \
    \   float x44, y44;\n    float x45, y45;\n    float x46, y46;\n    float x47,\
    \ y47;\n    float x48, y48;\n    float x49, y49;\n    float x50, y50;\n    float\
    \ x51, y51;\n    float x52, y52;\n    float x53, y53;\n    float x54, y54\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3x7ki3uo.d(74): Error: semicolon expected, not `unittest`\\n/tmp/tmp3x7ki3uo.d(74):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3x7ki3uo.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    long temp;\n    long[] left_to_right;\n    long[]\
    \ right_to_left;\n    count = 0;\n    left_to_right = new long[n];\n    right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = i + 1; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ > left_to_right[j]) \n            {\n                temp = left_to_right[i];\n\
    \                left_to_right[i] = left_to_right[j];\n                left_to_right[j]\
    \ = temp;\n            }\n            if (right_to_left[i] > right_to_left[j])\
    \ \n            {\n                temp = right_to_left[i];\n                right_to_left[i]\
    \ = right_to_left[j];\n                right_to_left[j] = temp;\n            }\n\
    \        }\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j\
    \ < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2j1v9n4z.d(65): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42836d]\\n??:? void tmp2j1v9n4z.__unittest_L61_C1()\
    \ [0x428058]\\n??:? void tmp2j1v9n4z.__modtest() [0x4280f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c36b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430489]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430938]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430415]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1d5]\\n??:? runModuleUnitTests [0x42c141]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428830]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287b7]\\n??:? _d_run_main [0x428722]\\n??:? main [0x428103]\\\
    n??:? __libc_start_main [0x856da554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg5fgxu49.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg5fgxu49.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i < j) {\n                count\
    \ = count + 1;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpde412io_.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpde412io_.__unittest_L30_C1()\
    \ [0x427a98]\\n??:? void tmpde412io_.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0xedd0a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2i28uwil.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2i28uwil.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    for (i = 0; i < n; i++) {\n        left[i] = i;\n\
    \        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = 0; j < n; j++) {\n            if (left[i] == right[j]) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpul1bha95.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpul1bha95.__unittest_L35_C1()\
    \ [0x427e3c]\\n??:? void tmpul1bha95.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xd4639554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    float x, y, z;\n    float a, b, c;\n    float d;\n    float e;\n    float\
    \ f;\n    float g;\n    float h;\n    float i;\n    float j;\n    float k;\n \
    \   float l;\n    float m;\n    float n;\n    float o;\n    float p;\n    float\
    \ q;\n    float r;\n    float s;\n    float t;\n    float u;\n    float v;\n \
    \   float w;\n    float x;\n    float y;\n    float z;\n    float aa;\n    float\
    \ bb;\n    float cc;\n    float dd;\n    float ee;\n    float ff;\n    float gg;\n\
    \    float hh;\n    float ii;\n    float jj;\n    float kk;\n    float ll;\n \
    \   float mm;\n    float nn;\n    float oo;\n    float pp;\n    float qq;\n  \
    \  float rr;\n    float ss;\n    float tt;\n    float uu;\n    float vv;\n   \
    \ float ww;\n    float xx;\n    float yy;\n    float zz;\n    float aaa;\n   \
    \ float bbb;\n    float ccc;\n    float ddd;\n    float eee;\n    float fff;\n\
    \    float ggg;\n    float hhh;\n    float iii;\n    float jjj;\n    float kkk;\n\
    \    float lll;\n    float mmm;\n    float nnn;\n    float ooo;\n    float ppp;\n\
    \    float qqq;\n    float rrr;\n    float sss;\n    float ttt;\n    float uuu;\n\
    \    float vvv;\n    float www;\n    float xxx;\n    float yyy;\n    float zzz;\n\
    \    float aaaa;\n    float bbbb;\n    float cccc;\n    float dddd;\n    float\
    \ eeee;\n    float ffff;\n    float gggg;\n    float hhhh;\n    float iiii;\n\
    \    float jjjj;\n\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7wf3yqv0.d(106): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7wf3yqv0.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long left_to_right_cars = n;\n    long right_to_left_cars = n;\n \
    \   long left_to_right_car_speed = 1;\n    long right_to_left_car_speed = 1;\n\
    \    long left_to_right_car_position = 0;\n    long right_to_left_car_position\
    \ = 0;\n    long left_to_right_car_position_next = 0;\n    long right_to_left_car_position_next\
    \ = 0;\n    long left_to_right_car_position_prev = 0;\n    long right_to_left_car_position_prev\
    \ = 0;\n    long left_to_right_car_position_prev_prev = 0;\n    long right_to_left_car_position_prev_prev\
    \ = 0;\n    long left_to_right_car_position_prev_prev_prev = 0;\n    long right_to_left_car_position_prev_prev_prev\
    \ = 0;\n    long left_to_right_car_position_prev_prev_prev_prev = 0;\n    long\
    \ right_to_left_car_position_prev_prev_prev_prev = 0;\n    long left_to_right_car_position_prev_prev_prev_prev_prev\
    \ = 0;\n    long right_to_left_car_position_prev_prev_prev_prev_prev = 0;\n  \
    \  long left_to_right_car_position_prev_prev_prev_prev_prev_prev = 0;\n    long\
    \ right_to_left_car_position_prev_prev_prev_prev_prev_prev = 0;\n    long left_to_right_car_position_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    long right_to_left_car_position_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    long left_to_right_car_position_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0;\n    long right_to_left_car_position_prev_prev_prev_prev_prev_prev_prev_prev\
    \ = 0\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0cqgilz3.d(42): Error: semicolon expected, not `unittest`\\n/tmp/tmp0cqgilz3.d(42):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0cqgilz3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    while (i < n) {\n        long j = 0;\n        while\
    \ (j < n) {\n            if (i == j) {\n                j = j + 1;\n         \
    \   } else {\n                collisions = collisions + 1;\n                j\
    \ = j + 1;\n            }\n        }\n        i = i + 1;\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpy19bpojj.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dbd]\\n??:? void tmpy19bpojj.__unittest_L33_C1()\
    \ [0x427aa4]\\n??:? void tmpy19bpojj.__modtest() [0x427b3c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bae3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a976]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb09]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a94d]\\n??:? runModuleUnitTests [0x42b8b9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42820c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428193]\\n??:? _d_run_main [0x4280fe]\\n??:? main [0x427b4f]\\\
    n??:? __libc_start_main [0x1e0dc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmptmp6k4u8.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmptmp6k4u8.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptmp6k4u8.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsv51cq45.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpsv51cq45.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsv51cq45.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp81n1en0j.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp81n1en0j.__unittest_L30_C1()\
    \ [0x427a8c]\\n??:? void tmp81n1en0j.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0xe9b13554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphqh3mhso.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmphqh3mhso.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmphqh3mhso.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xc73ec554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                collisions++;\n      \
    \      }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa3f1ox2r.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpa3f1ox2r.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmpa3f1ox2r.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x929c8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long left_to_right_cars[n];\n    long right_to_left_cars[n];\n   \
    \ long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m =\
    \ 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n   \
    \ long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w =\
    \ 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n  \
    \  long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long\
    \ ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj =\
    \ 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n\
    \    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long\
    \ ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww =\
    \ 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n\
    \    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n\
    \    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n\
    \    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n\
    \    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n\
    \    long rrr = 0;\n    long sss = 0;\n    long ttt\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpt8l00q4r.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] left_to_right_cars`\\n/tmp/tmpt8l00q4r.d(19): Deprecation: instead\
    \ of C-style syntax, use D-style syntax `long[n] right_to_left_cars`\\n/tmp/tmpt8l00q4r.d(83):\
    \ Error: semicolon expected, not `unittest`\\n/tmp/tmpt8l00q4r.d(83): Error: found\
    \ `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpt8l00q4r.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ count;\n    float x, y, z;\n    float[] a = new float[n];\n    float[] b = new\
    \ float[n];\n    float[] c = new float[n];\n    float[] d = new float[n];\n  \
    \  float[] e = new float[n];\n    float[] f = new float[n];\n    float[] g = new\
    \ float[n];\n    float[] h = new float[n];\n    float[] i = new float[n];\n  \
    \  float[] j = new float[n];\n    float[] k = new float[n];\n    float[] l = new\
    \ float[n];\n    float[] m = new float[n];\n    float[] n = new float[n];\n  \
    \  float[] o = new float[n];\n    float[] p = new float[n];\n    float[] q = new\
    \ float[n];\n    float[] r = new float[n];\n    float[] s = new float[n];\n  \
    \  float[] t = new float[n];\n    float[] u = new float[n];\n    float[] v = new\
    \ float[n];\n    float[] w = new float[n];\n    float[] x = new float[n];\n  \
    \  float[] y = new float[n];\n    float[] z = new float[n];\n    float[] aa =\
    \ new float[n];\n    float[] bb = new float[n];\n    float[] cc = new float[n];\n\
    \    float[] dd = new float[n];\n    float[] ee = new float[n];\n    float[] ff\
    \ = new float[n];\n    float[] gg = new float[n];\n    float[] hh = new float[n];\n\
    \    float[] ii = new float[n];\n    float[] jj = new float[n];\n    float[] kk\
    \ = new float[n];\n    float[] ll = new float[n];\n    float[] mm = new float[n];\n\
    \    float[] nn = new float[n];\n    float[] oo = new float[n];\n    float[] pp\
    \ = new float[n];\n    float[] qq = new float[n];\n    float[] rr =\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8jwnj1w5.d(63): Error: expression expected, not `unittest`\\\
    n/tmp/tmp8jwnj1w5.d(64): Error: semicolon expected, not `{`\\n/tmp/tmp8jwnj1w5.d(73):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8jwnj1w5.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_ed0ncza.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp_ed0ncza.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmp_ed0ncza.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x30445554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    count = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j <\
    \ n; j++) \n        {\n            if (i < j) \n            {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2849pud2.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp2849pud2.__unittest_L31_C1()\
    \ [0x427a90]\\n??:? void tmp2849pud2.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0x6c212554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ count = 0;\n    float[] left_to_right = new float[n];\n    float[] right_to_left\
    \ = new float[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = i;\n    }\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpgzkcztcs.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x4282dd]\\n??:? void tmpgzkcztcs.__unittest_L33_C1()\
    \ [0x427fc4]\\n??:? void tmpgzkcztcs.__modtest() [0x42805c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c443]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b2d6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430561]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430a10]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4304ed]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b2ad]\\n??:? runModuleUnitTests [0x42c219]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4287a0]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428727]\\n??:? _d_run_main [0x428692]\\n??:? main [0x42806f]\\\
    n??:? __libc_start_main [0xacd09554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpsy2w2jdr.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpsy2w2jdr.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpsy2w2jdr.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x49b53554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i < j) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp16yl3tjq.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp16yl3tjq.__unittest_L30_C1()\
    \ [0x427a90]\\n??:? void tmp16yl3tjq.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0x9352a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0;\
    \ j < n; j++) {\n            if (i == j) {\n                continue;\n      \
    \      }\n            for (k = 0; k < n; k++) {\n                if (k == i ||\
    \ k == j) {\n                    continue;\n                }\n              \
    \  if (i < j && j < k) {\n                    collisions++;\n                }\n\
    \            }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmppw186w1w.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427de5]\\n??:? void tmppw186w1w.__unittest_L36_C1()\
    \ [0x427ad0]\\n??:? void tmppw186w1w.__modtest() [0x427b68]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb0b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a99e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb31]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a975]\\n??:? runModuleUnitTests [0x42b8e1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428234]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281bb]\\n??:? _d_run_main [0x428126]\\n??:? main [0x427b7b]\\\
    n??:? __libc_start_main [0x1a54d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) \n  \
    \  {\n        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n \
    \           {\n                count = count + 1;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmphfd0ir1y.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmphfd0ir1y.__unittest_L33_C1()\
    \ [0x427a98]\\n??:? void tmphfd0ir1y.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0xc4d92554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long aa = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n\
    \    long ae = 0;\n    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long\
    \ ai = 0;\n    long aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am =\
    \ 0;\n    long an = 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n\
    \    long ar = 0;\n    long as = 0;\n    long at = 0;\n    long au = 0;\n    long\
    \ av = 0;\n    long aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az =\
    \ 0;\n    long ba = 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n\
    \    long be = 0;\n    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long\
    \ bi = 0;\n    long bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm =\
    \ 0;\n    long bn = 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n\
    \    long br = 0;\n    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long\
    \ bv = 0;\n    long bw = 0;\n    long bx = 0;\n    long by =\nunittest\n{\n  \
    \  alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmply5hgemd.d(87): Error: expression expected, not `unittest`\\\
    n/tmp/tmply5hgemd.d(88): Error: semicolon expected, not `{`\\n/tmp/tmply5hgemd.d(97):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmply5hgemd.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmphgfivr7i.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphgfivr7i.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8eh2qkgx.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp8eh2qkgx.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmp8eh2qkgx.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x7b3df554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2_j7npfc.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp2_j7npfc.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmp2_j7npfc.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x9b0c2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_dt0heps.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp_dt0heps.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp_dt0heps.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x4ee51554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                collisions++;\n            }\n\
    \        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps2p311s7.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmps2p311s7.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmps2p311s7.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xb003554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n*(n-1)/2;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1mqu0gxc.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp1mqu0gxc.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp1mqu0gxc.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x75f0a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    return\
    \ collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n \
    \   assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmpcw4_eh.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpmpcw4_eh.__unittest_L34_C1()\
    \ [0x427e3c]\\n??:? void tmpmpcw4_eh.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xcc663554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    count = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j <\
    \ n; j++) \n        {\n            if (i < j) \n            {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpw9wpmxlo.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpw9wpmxlo.__unittest_L31_C1()\
    \ [0x427a90]\\n??:? void tmpw9wpmxlo.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0xfeb69554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n*(n-1)/2;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpszv645_t.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpszv645_t.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpszv645_t.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x4a226554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n        for\
    \ (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n             \
    \   for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n\
    \                        for (o = 0; o < n; o++) {\n                         \
    \   for (p = 0; p < n; p++) {\n                                for (q = 0; q <\
    \ n; q++) {\n                                    for (r = 0; r < n; r++) {\n \
    \                                       for (s = 0; s < n; s++) {\n          \
    \                                  for (t = 0; t < n; t++) {\n               \
    \                                 for (u = 0; u < n; u++) {\n                \
    \                                    for (v = 0; v < n; v++) {\n             \
    \                                           for (w = 0; w < n; w++) {\n      \
    \                                                      for (x = 0; x < n; x++)\
    \ {\n                                                                for (y =\
    \ 0; y < n; y++) {\n                                                         \
    \           for (z = 0; z < n; z++) {\n                                      \
    \                                  for (a = 0; a < n; a++) {\n               \
    \                                                             for (b = 0; b <\
    \ n; b++) {\n                                                                \
    \                for (c = 0; c < n; c++) {\n                                 \
    \                                                   for (d = 0; d < n; d++) {\n\
    \                                                                            \
    \            for (e = 0; e < n; e++) {\n                                     \
    \                                                       for (f = 0; f < n; f++)\
    \ {\n                                                                        \
    \                        for (g = 0; g < n; g++) {\n                         \
    \                                                                           for\
    \ (h = 0; h < n; h++) {\n                                                    \
    \                                                    result = result + 1;\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmplf8okgqm.d(47): Error: found `unittest` instead of statement\\\
    n/tmp/tmplf8okgqm.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmplf8okgqm.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmplf8okgqm.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmplf8okgqm.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmplf8okgqm.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmplf8okgqm.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmplf8okgqm.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmplf8okgqm.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmplf8okgqm.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmplf8okgqm.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmplf8okgqm.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmplf8okgqm.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmplf8okgqm.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmplf8okgqm.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmplf8okgqm.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmplf8okgqm.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmplf8okgqm.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmplf8okgqm.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmplf8okgqm.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplf8okgqm.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_kg3ygv5.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmp_kg3ygv5.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_kg3ygv5.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9glgw0qw.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp9glgw0qw.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp9glgw0qw.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x7f6a5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long count;\n    long[] a;\n    long[] b;\n    long[]\
    \ c;\n    long[] d;\n    long[] e;\n    long[] f;\n    long[] g;\n    long[] h;\n\
    \    long[] i1;\n    long[] j1;\n    long[] k1;\n    long[] l;\n    long[] m;\n\
    \    long[] n1;\n    long[] o;\n    long[] p;\n    long[] q;\n    long[] r;\n\
    \    long[] s;\n    long[] t;\n    long[] u;\n    long[] v;\n    long[] w;\n \
    \   long[] x;\n    long[] y;\n    long[] z;\n    long[] aa;\n    long[] bb;\n\
    \    long[] cc;\n    long[] dd;\n    long[] ee;\n    long[] ff;\n    long[] gg;\n\
    \    long[] hh;\n    long[] ii;\n    long[] jj;\n    long[] kk;\n    long[] ll;\n\
    \    long[] mm;\n    long[] nn;\n    long[] oo;\n    long[] pp;\n    long[] qq;\n\
    \    long[] rr;\n    long[] ss;\n    long[] tt;\n    long[] uu;\n    long[] vv;\n\
    \    long[] ww;\n    long[] xx;\n    long[] yy;\n    long[] zz;\n    long[] aaa;\n\
    \    long[] bbb;\n    long[] ccc;\n    long[] ddd;\n    long[] eee;\n    long[]\
    \ fff;\n    long[] ggg;\n    long[] hhh;\n    long[] iii;\n    long[] jjj;\n \
    \   long[] kkk;\n    long[] lll;\n    long[] mmm;\n    long[] nnn;\n    long[]\
    \ ooo;\n    long[] ppp;\n    long[] qqq;\n    long[] rrr;\n    long[] sss;\n \
    \   long[] ttt;\n    long[] uuu;\n    long[] vvv;\n    long[]\nunittest\n{\n \
    \   alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd7058i1j.d(96): Error: no identifier for declarator `long[]`\\\
    n/tmp/tmpd7058i1j.d(96): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd7058i1j.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a,b,c,d,e,f,g,h;\n    long ans;\n    ans = 0;\n    for (i = 0; i < n;\
    \ i++) {\n        for (j = 0; j < n; j++) {\n            if (i < j) {\n      \
    \          ans = ans + 1;\n            }\n        }\n    }\n    return ans;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2_xj_i69.d(17): Error: variable `n` is shadowing variable `tmp2_xj_i69.car_race_collision.n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2_xj_i69.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ collisions;\n    float x[n], y[n], z[n];\n    float a[n], b[n], c[n];\n    float\
    \ t[n];\n    collisions = 0;\n    for (i = 0; i < n; i++) {\n        x[i] = random();\n\
    \        y[i] = random();\n        z[i] = random();\n        a[i] = random();\n\
    \        b[i] = random();\n        c[i] = random();\n        t[i] = random();\n\
    \    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (t[i] < t[j]) {\n                k = i;\n                i = j;\n\
    \                j = k;\n            }\n            if (x[i] - x[j] < 0) {\n \
    \               collisions++;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpqhyt66q1.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[n] x`\\n/tmp/tmpqhyt66q1.d(18): Error: multiple declarations must\
    \ have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpqhyt66q1.d(18):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] y`\\n/tmp/tmpqhyt66q1.d(18):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpqhyt66q1.d(18): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] z`\\n/tmp/tmpqhyt66q1.d(19): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] a`\\n/tmp/tmpqhyt66q1.d(19): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpqhyt66q1.d(19):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] b`\\n/tmp/tmpqhyt66q1.d(19):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpqhyt66q1.d(19): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] c`\\n/tmp/tmpqhyt66q1.d(20): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] t`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmpqhyt66q1.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n \
    \   long A, B, C, D, E, F, G, H;\n    long I, J, K, L, M, N, O, P;\n    long Q,\
    \ R, S, T, U, V, W, X;\n    long Y, Z;\n    long AA, BB, CC, DD, EE, FF, GG, HH;\n\
    \    long II, JJ, KK, LL, MM, NN, OO, PP;\n    long QQ, RR, SS, TT, UU, VV, WW,\
    \ XX;\n    long YY, ZZ;\n    long AAA, BBB, CCC, DDD, EEE, FFF, GGG, HHH;\n  \
    \  long III, JJJ, KKK, LLL, MMM, NNN, OOO, PPP;\n    long QQQ, RRR, SSS, TTT,\
    \ UUU, VVV, WWW, XXX;\n    long YYY, ZZZ;\n    long AAAA, BBBB, CCCC, DDDD, EEEE,\
    \ FFFF, GGGG, HHHH;\n    long IIII, JJJJ, KKKK, LLLL, MMMM, NNNN, OOOO, PPPP;\n\
    \    long QQQQ, RRRR, SSSS, TTTT, UUUU, VVVV, WWWW, XXXX;\n    long YYYY, ZZZZ;\n\
    \    long AAAAA, BBBBB, CCCCC, DDDDD, EEEEE, FFFFF, GGGGG, HHHHH;\n    long IIIII,\
    \ JJJJJ, KKKKK, LLLLL, MMMMM, NNNNN, OOOOO, PPPPP;\n    long QQQQQ, RRRRR, SSSSS,\
    \ TTTTT, UUUUU, VVVVV, WWWWW, XXXXX;\n    long YYYYY, ZZZZZ;\n    long AAAAAA,\
    \ BBBBBB,\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph99qf3ms.d(40): Error: no identifier for declarator `long`\\\
    n/tmp/tmph99qf3ms.d(40): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmph99qf3ms.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4x_mr5lb.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp4x_mr5lb.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp4x_mr5lb.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x39efa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            for (k = 0; k < n; k++) {\n                for (l = 0;\
    \ l < n; l++) {\n                    for (m = 0; m < n; m++) {\n             \
    \           for (o = 0; o < n; o++) {\n                            for (p = 0;\
    \ p < n; p++) {\n                                for (q = 0; q < n; q++) {\n \
    \                                   for (r = 0; r < n; r++) {\n              \
    \                          for (s = 0; s < n; s++) {\n                       \
    \                     for (t = 0; t < n; t++) {\n                            \
    \                    for (u = 0; u < n; u++) {\n                             \
    \                       for (v = 0; v < n; v++) {\n                          \
    \                              for (w = 0; w < n; w++) {\n                   \
    \                                         for (x = 0; x < n; x++) {\n        \
    \                                                        for (y = 0; y < n; y++)\
    \ {\n                                                                    for (z\
    \ = 0; z < n; z++) {\n                                                       \
    \                 for (a = 0; a < n; a++) {\n                                \
    \                                            for (b = 0; b < n; b++) {\n     \
    \                                                                           for\
    \ (c = 0; c < n; c++) {\n                                                    \
    \                                for (d = 0; d < n; d++) {\n                 \
    \                                                                       for (e\
    \ = 0; e < n; e++) {\n                                                       \
    \                                     for (f = 0; f < n; f++) {\n            \
    \                                                                            \
    \        for (g = 0; g < n; g++) {\n                                         \
    \                                                           for (h = 0; h < n;\
    \ h++) {\n                                                                   \
    \                                     result++;\n                            \
    \                                                                        }\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpssprnh2i.d(47): Error: found `unittest` instead of statement\\\
    n/tmp/tmpssprnh2i.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpssprnh2i.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpssprnh2i.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpssprnh2i.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpssprnh2i.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpssprnh2i.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpssprnh2i.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpssprnh2i.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpssprnh2i.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpssprnh2i.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpssprnh2i.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpssprnh2i.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpssprnh2i.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpssprnh2i.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpssprnh2i.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpssprnh2i.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpssprnh2i.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpssprnh2i.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpssprnh2i.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpssprnh2i.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    for (i = 0; i < n; i++)\n    {\n  \
    \      for (j = 0; j < n; j++)\n        {\n            count++;\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    for (i = 0; i < n; i++) {\n    \
    \    for (j = 0; j < n; j++) {\n            if (i < j) {\n                result++;\n\
    \            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpatae5l_y.d(33): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpatae5l_y.__unittest_L29_C1()\
    \ [0x427a8c]\\n??:? void tmpatae5l_y.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x51fd4554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n    long count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i;\n        b[i] = n - i;\n\
    \    }\n    for (i = 0; i < n; i++) {\n        c[i] = a[i];\n        d[i] = b[i];\n\
    \    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (c[i] == d[j]) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpx7ibtd_c.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmpx7ibtd_c.d(19): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] b`\\n/tmp/tmpx7ibtd_c.d(20): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] c`\\n/tmp/tmpx7ibtd_c.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] d`\\n/tmp/tmpx7ibtd_c.d(18):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmpx7ibtd_c.d(19):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmpx7ibtd_c.d(20):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmpx7ibtd_c.d(21):\
    \ Error: variable `n` cannot be read at compile time\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpx7ibtd_c.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) \n  \
    \  {\n        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n \
    \           {\n                count = count + 1;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxe3fclpc.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpxe3fclpc.__unittest_L33_C1()\
    \ [0x427a98]\\n??:? void tmpxe3fclpc.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0x78151554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwzc9z985.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpwzc9z985.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwzc9z985.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a,b,c,d,e,f,g,h;\n    long result;\n    long* left_to_right;\n    long*\
    \ right_to_left;\n    long* left_to_right_sorted;\n    long* right_to_left_sorted;\n\
    \    long* left_to_right_sorted_index;\n    long* right_to_left_sorted_index;\n\
    \    long* left_to_right_sorted_index_sorted;\n    long* right_to_left_sorted_index_sorted;\n\
    \    long* left_to_right_sorted_index_sorted_index;\n    long* right_to_left_sorted_index_sorted_index;\n\
    \    long* left_to_right_sorted_index_sorted_index_sorted;\n    long* right_to_left_sorted_index_sorted_index_sorted;\n\
    \    long* left_to_right_sorted_index_sorted_index_sorted_index;\n    long* right_to_left_sorted_index_sorted_index_sorted_index;\n\
    \    long* left_to_right_sorted_index_sorted_index_sorted_index_sorted;\n    long*\
    \ right_to_left_sorted_index_sorted_index_sorted_index_sorted;\n    long* left_to_right_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long* right_to_left_sorted_index_sorted_index_sorted_index_sorted_index;\n\
    \    long* left_to_right_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long* right_to_left_sorted_index_sorted_index_sorted_index_sorted_index_sorted;\n\
    \    long* left_to_right_sorted_index_sorted_index\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpax8pbg28.d(41): Error: semicolon expected, not `unittest`\\n/tmp/tmpax8pbg28.d(41):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpax8pbg28.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n) {\n        while (j\
    \ < n) {\n            if (i == j) {\n                collisions++;\n         \
    \   }\n            j++;\n        }\n        i++;\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr4fl7wse.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d95]\\n??:? void tmpr4fl7wse.__unittest_L31_C1()\
    \ [0x427a80]\\n??:? void tmpr4fl7wse.__modtest() [0x427b18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42babb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a94e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a925]\\n??:? runModuleUnitTests [0x42b891]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42816b]\\n??:? _d_run_main [0x4280d6]\\n??:? main [0x427b2b]\\\
    n??:? __libc_start_main [0x2f416554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n\
    \            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n \
    \   alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_w5ve3i2.d(29): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp_w5ve3i2.__unittest_L25_C1()\
    \ [0x427a84]\\n??:? void tmp_w5ve3i2.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x800e5554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp3_3pc87t.d(87): Error: semicolon expected, not `unittest`\\n/tmp/tmp3_3pc87t.d(87):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp3_3pc87t.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long* left_to_right = new long[n];\n    long* right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpngceeepo.d(19): Error: cannot implicitly convert expression `new\
    \ long[](cast(ulong)n)` of type `long[]` to `long*`\\n/tmp/tmpngceeepo.d(20):\
    \ Error: cannot implicitly convert expression `new long[](cast(ulong)n)` of type\
    \ `long[]` to `long*`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpngceeepo.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    if (n < 1)\n\
    \        return 0;\n    return n * (n - 1) / 2;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5tzx38gb.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d6d]\\n??:? void tmp5tzx38gb.__unittest_L21_C1()\
    \ [0x427a54]\\n??:? void tmp5tzx38gb.__modtest() [0x427aec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a926]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fab9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff68]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8fd]\\n??:? runModuleUnitTests [0x42b869]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428143]\\n??:? _d_run_main [0x4280ae]\\n??:? main [0x427aff]\\\
    n??:? __libc_start_main [0x9ac02554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n \
    \   long e[n];\n    long f[n];\n    long g[n];\n    long h[n];\n    long i[n];\n\
    \    long j[n];\n    long k[n];\n    long l[n];\n    long m[n];\n    long n[n];\n\
    \    long o[n];\n    long p[n];\n    long q[n];\n    long r[n];\n    long s[n];\n\
    \    long t[n];\n    long u[n];\n    long v[n];\n    long w[n];\n    long x[n];\n\
    \    long y[n];\n    long z[n];\n    long aa[n];\n    long ab[n];\n    long ac[n];\n\
    \    long ad[n];\n    long ae[n];\n    long af[n];\n    long ag[n];\n    long\
    \ ah[n];\n    long ai[n];\n    long aj[n];\n    long ak[n];\n    long al[n];\n\
    \    long am[n];\n    long an[n];\n    long ao[n];\n    long ap[n];\n    long\
    \ aq[n];\n    long ar[n];\n    long as[n];\n    long at[n];\n    long au[n];\n\
    \    long av[n];\n    long aw[n];\n    long ax[n];\n    long ay[n];\n    long\
    \ az[n];\n    long ba[n];\n    long bb[n];\n    long bc[n];\n    long bd[n];\n\
    \    long be[n];\n    long bf[n];\n    long bg[n];\n    long bh[n];\n    long\
    \ bi[n];\n    long bj[n];\n    long bk[n];\n    long bl[n];\n    long bm[n];\n\
    \    long bn[n];\n    long bo[n];\n    long bp[n];\n    long\nunittest\n{\n  \
    \  alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_51n_zmy.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmp_51n_zmy.d(19): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] b`\\n/tmp/tmp_51n_zmy.d(20): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] c`\\n/tmp/tmp_51n_zmy.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] d`\\n/tmp/tmp_51n_zmy.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] e`\\n/tmp/tmp_51n_zmy.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] f`\\n/tmp/tmp_51n_zmy.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] g`\\n/tmp/tmp_51n_zmy.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] h`\\n/tmp/tmp_51n_zmy.d(26):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] i`\\n/tmp/tmp_51n_zmy.d(27):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] j`\\n/tmp/tmp_51n_zmy.d(28):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] k`\\n/tmp/tmp_51n_zmy.d(29):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] l`\\n/tmp/tmp_51n_zmy.d(30):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] m`\\n/tmp/tmp_51n_zmy.d(31):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] n`\\n/tmp/tmp_51n_zmy.d(32):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] o`\\n/tmp/tmp_51n_zmy.d(33):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] p`\\n/tmp/tmp_51n_zmy.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] q`\\n/tmp/tmp_51n_zmy.d(35):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] r`\\n/tmp/tmp_51n_zmy.d(36):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] s`\\n/tmp/tmp_51n_zmy.d(37):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] t`\\n/tmp/tmp_51n_zmy.d(38):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] u`\\n/tmp/tmp_51n_zmy.d(39):\
    \ Deprec"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long collision = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                collision++;\n            }\n        }\n    }\n    return collision;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpye8jjoc6.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpye8jjoc6.__unittest_L39_C1()\
    \ [0x427e3c]\\n??:? void tmpye8jjoc6.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x57f7f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n     \
    \   for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n       \
    \         for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++)\
    \ {\n                        for (n = 0; n < n; n++) {\n                     \
    \       for (o = 0; o < n; o++) {\n                                for (p = 0;\
    \ p < n; p++) {\n                                    for (q = 0; q < n; q++) {\n\
    \                                        for (r = 0; r < n; r++) {\n         \
    \                                   for (s = 0; s < n; s++) {\n              \
    \                                  for (t = 0; t < n; t++) {\n               \
    \                                     for (u = 0; u < n; u++) {\n            \
    \                                            for (v = 0; v < n; v++) {\n     \
    \                                                       for (w = 0; w < n; w++)\
    \ {\n                                                                for (x =\
    \ 0; x < n; x++) {\n                                                         \
    \           for (y = 0; y < n; y++) {\n                                      \
    \                                  for (z = 0; z < n; z++) {\n               \
    \                                                             for (a = 0; a <\
    \ n; a++) {\n                                                                \
    \                for (b = 0; b < n; b++) {\n                                 \
    \                                                   for (c = 0; c < n; c++) {\n\
    \                                                                            \
    \            for (d = 0; d < n; d++) {\n                                     \
    \                                                       for (e = 0; e < n; e++)\
    \ {\n                                                                        \
    \                        for (f = 0; f < n; f++) {\n                         \
    \                                                                           for\
    \ (g = 0; g < n; g++) {\n                                                    \
    \                                                    for (h =\nunittest\n{\n \
    \   alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpd2gw9_9w.d(47): Error: expression expected, not `unittest`\\\
    n/tmp/tmpd2gw9_9w.d(48): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmpd2gw9_9w.d(49): Error: expression expected, not `alias`\\n/tmp/tmpd2gw9_9w.d(49):\
    \ Error: found `candidate` when expecting `;` following `for` condition\\n/tmp/tmpd2gw9_9w.d(49):\
    \ Error: expression expected, not `=`\\n/tmp/tmpd2gw9_9w.d(49): Error: found `car_race_collision`\
    \ when expecting `)`\\n/tmp/tmpd2gw9_9w.d(49): Error: use `{ }` for an empty statement,\
    \ not `;`\\n/tmp/tmpd2gw9_9w.d(57): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmpd2gw9_9w.d(57): Error: found `End\
    \ of File` when expecting `}` following compound statement\\n/tmp/tmpd2gw9_9w.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpd2gw9_9w.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpd2gw9_9w.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpd2gw9_9w.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpd2gw9_9w.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpd2gw9_9w.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpd2gw9_9w.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpd2gw9_9w.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpd2gw9_9w.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpd2gw9_9w.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpd2gw9_9w.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpd2gw9_9w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;\n\
    \    long a,b,c,d,e,f,g,h;\n    long res;\n    res = 0;\n    for (i = 0; i < n;\
    \ i++) {\n        for (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++)\
    \ {\n                for (l = 0; l < n; l++) {\n                    for (m = 0;\
    \ m < n; m++) {\n                        for (n = 0; n < n; n++) {\n         \
    \                   for (o = 0; o < n; o++) {\n                              \
    \  for (p = 0; p < n; p++) {\n                                    for (q = 0;\
    \ q < n; q++) {\n                                        for (r = 0; r < n; r++)\
    \ {\n                                            for (s = 0; s < n; s++) {\n \
    \                                               for (t = 0; t < n; t++) {\n  \
    \                                                  for (u = 0; u < n; u++) {\n\
    \                                                        for (v = 0; v < n; v++)\
    \ {\n                                                            for (w = 0; w\
    \ < n; w++) {\n                                                              \
    \  for (x = 0; x < n; x++) {\n                                               \
    \                     for (y = 0; y < n; y++) {\n                            \
    \                                            for (z = 0; z < n; z++) {\n     \
    \                                                                       for (a\
    \ = 0; a < n; a++) {\n                                                       \
    \                         for (b = 0; b < n; b++) {\n                        \
    \                                                            for (c = 0; c < n;\
    \ c++) {\n                                                                   \
    \                     for (d = 0; d < n; d++) {\n                            \
    \                                                                for (e = 0; e\
    \ < n; e++) {\n                                                              \
    \                                  for (f = 0; f < n; f++) {\n               \
    \                                                                            \
    \         for (g = 0; g < n; g++) {\n                                        \
    \                                                                for (h =\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp96r32fw0.d(47): Error: expression expected, not `unittest`\\\
    n/tmp/tmp96r32fw0.d(48): Error: found `{` when expecting `;` following statement\\\
    n/tmp/tmp96r32fw0.d(49): Error: expression expected, not `alias`\\n/tmp/tmp96r32fw0.d(49):\
    \ Error: found `candidate` when expecting `;` following `for` condition\\n/tmp/tmp96r32fw0.d(49):\
    \ Error: expression expected, not `=`\\n/tmp/tmp96r32fw0.d(49): Error: found `car_race_collision`\
    \ when expecting `)`\\n/tmp/tmp96r32fw0.d(49): Error: use `{ }` for an empty statement,\
    \ not `;`\\n/tmp/tmp96r32fw0.d(57): Error: found `End of File` when expecting\
    \ `}` following compound statement\\n/tmp/tmp96r32fw0.d(57): Error: found `End\
    \ of File` when expecting `}` following compound statement\\n/tmp/tmp96r32fw0.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp96r32fw0.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp96r32fw0.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp96r32fw0.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp96r32fw0.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp96r32fw0.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp96r32fw0.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp96r32fw0.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp96r32fw0.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp96r32fw0.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp96r32fw0.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp96r32fw0.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long collisions = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i] = n - i -\
    \ 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n\
    \            if (left_to_right[i] == right_to_left[j]) {\n                collisions++;\n\
    \            }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6ruv9mfb.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp6ruv9mfb.__unittest_L36_C1()\
    \ [0x427e3c]\\n??:? void tmp6ruv9mfb.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x38843554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n \
    \   // \n    // \n    // \n    // \n    // \n    // \n    // \n    // \n    //\
    \ \n    // \n    // \n    // \n    // \n    // \n    // \n   \nunittest\n{\n \
    \   alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbhiteis_.d(145): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbhiteis_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyg5xf_ix.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpyg5xf_ix.__unittest_L34_C1()\
    \ [0x427e3c]\\n??:? void tmpyg5xf_ix.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x776c0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) \n  \
    \  {\n        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n \
    \           {\n                count = count + 1;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpoj31woaa.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpoj31woaa.__unittest_L33_C1()\
    \ [0x427a98]\\n??:? void tmpoj31woaa.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0xeed41554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpsrgj476a.d(87): Error: semicolon expected, not `unittest`\\n/tmp/tmpsrgj476a.d(87):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpsrgj476a.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n) {\n        while (j\
    \ < n) {\n            if (i == j) {\n                collisions++;\n         \
    \   }\n            j++;\n        }\n        i++;\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp95tb9dup.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d95]\\n??:? void tmp95tb9dup.__unittest_L31_C1()\
    \ [0x427a80]\\n??:? void tmp95tb9dup.__modtest() [0x427b18]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42babb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a94e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff90]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa6d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a925]\\n??:? runModuleUnitTests [0x42b891]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281e4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42816b]\\n??:? _d_run_main [0x4280d6]\\n??:? main [0x427b2b]\\\
    n??:? __libc_start_main [0xaac1a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3csnok11.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp3csnok11.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp3csnok11.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xb1b10554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    while (i < n && j < n) \n    {\n  \
    \      if (i == j) \n        {\n            count++;\n            i++;\n     \
    \       j++;\n        } \n        else if (i < j) \n        {\n            i++;\n\
    \        } \n        else \n        {\n            j++;\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmqlvks8z.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpmqlvks8z.__unittest_L39_C1()\
    \ [0x427a90]\\n??:? void tmpmqlvks8z.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0x8cf2c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpo_xar9ik.d(87): Error: semicolon expected, not `unittest`\\n/tmp/tmpo_xar9ik.d(87):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpo_xar9ik.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ count;\n    float x1, x2, y1, y2, m1, m2, c1, c2;\n    count = 0;\n    for (i\
    \ = 0; i < n; i++) {\n        x1 = random(0, 100);\n        y1 = random(0, 100);\n\
    \        m1 = random(-1, 1);\n        c1 = y1 - m1 * x1;\n        for (j = 0;\
    \ j < n; j++) {\n            x2 = random(0, 100);\n            y2 = random(0,\
    \ 100);\n            m2 = random(-1, 1);\n            c2 = y2 - m2 * x2;\n   \
    \         if (m1 == m2) {\n                if (c1 == c2) {\n                 \
    \   count++;\n                }\n            } else {\n                k = (c2\
    \ - c1) / (m1 - m2);\n                if (k > 0 && k < 100) {\n              \
    \      count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpyef5sl3y.d(21): Error: undefined identifier `random`\\n/tmp/tmpyef5sl3y.d(22):\
    \ Error: undefined identifier `random`\\n/tmp/tmpyef5sl3y.d(23): Error: undefined\
    \ identifier `random`\\n/tmp/tmpyef5sl3y.d(26): Error: undefined identifier `random`\\\
    n/tmp/tmpyef5sl3y.d(27): Error: undefined identifier `random`\\n/tmp/tmpyef5sl3y.d(28):\
    \ Error: undefined identifier `random`\\n/tmp/tmpyef5sl3y.d(35): Error: cannot\
    \ implicitly convert expression `(c2 - c1) / (m1 - m2)` of type `float` to `long`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyef5sl3y.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long result = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0;\
    \ j < n; j++) {\n            for (k = 0; k < n; k++) {\n                for (l\
    \ = 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n        \
    \                for (n = 0; n < n; n++) {\n                            for (o\
    \ = 0; o < n; o++) {\n                                for (p = 0; p < n; p++)\
    \ {\n                                    for (q = 0; q < n; q++) {\n         \
    \                               for (r = 0; r < n; r++) {\n                  \
    \                          for (s = 0; s < n; s++) {\n                       \
    \                         for (t = 0; t < n; t++) {\n                        \
    \                            for (u = 0; u < n; u++) {\n                     \
    \                                   for (v = 0; v < n; v++) {\n              \
    \                                              for (w = 0; w < n; w++) {\n   \
    \                                                             for (x = 0; x <\
    \ n; x++) {\n                                                                \
    \    for (y = 0; y < n; y++) {\n                                             \
    \                           for (z = 0; z < n; z++) {\n                      \
    \                                                      for (a = 0; a < n; a++)\
    \ {\n                                                                        \
    \        for (b = 0; b < n; b++) {\n                                         \
    \                                           for (c = 0; c < n; c++) {\n      \
    \                                                                            \
    \      for (d = 0; d < n; d++) {\n                                           \
    \                                                 for (e = 0; e < n; e++) {\n\
    \                                                                            \
    \                    for (f = 0; f < n; f++) {\n                             \
    \                                                                       for (g\
    \ = 0; g < n; g++) {\n                                                       \
    \                                                 for (h = 0; h <\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpettk6o7n.d(46): Error: expression expected, not `unittest`\\\
    n/tmp/tmpettk6o7n.d(47): Error: found `{` when expecting `;` following `for` condition\\\
    n/tmp/tmpettk6o7n.d(48): Error: expression expected, not `alias`\\n/tmp/tmpettk6o7n.d(48):\
    \ Error: found `candidate` when expecting `)`\\n/tmp/tmpettk6o7n.d(48): Error:\
    \ found `=` instead of statement\\n/tmp/tmpettk6o7n.d(56): Error: found `End of\
    \ File` when expecting `}` following compound statement\\n/tmp/tmpettk6o7n.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpettk6o7n.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpettk6o7n.d(56): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpettk6o7n.d(56): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpettk6o7n.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpettk6o7n.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpettk6o7n.d(56): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpettk6o7n.d(56): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpettk6o7n.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpettk6o7n.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpettk6o7n.d(56): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpettk6o7n.d(56): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpettk6o7n.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpettk6o7n.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpettk6o7n.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long collisions = 0;\n    long[] left_to_right_cars = new long[n];\n\
    \    long[] right_to_left_cars = new long[n];\n    for (i = 0; i < n; i++) \n\
    \    {\n        left_to_right_cars[i] = i;\n        right_to_left_cars[i] = n\
    \ - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j\
    \ < n; j++) \n        {\n            if (left_to_right_cars[i] == right_to_left_cars[j])\
    \ \n            {\n                collisions++;\n                for (k = j;\
    \ k < n - 1; k++) \n                {\n                    right_to_left_cars[k]\
    \ = right_to_left_cars[k + 1];\n                }\n                for (l = i;\
    \ l < n - 1; l++) \n                {\n                    left_to_right_cars[l]\
    \ = left_to_right_cars[l + 1];\n                }\n                n--;\n    \
    \            break;\n            }\n        }\n    }\n    return collisions;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbz_06lxa.d(52): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42823d]\\n??:? void tmpbz_06lxa.__unittest_L48_C1()\
    \ [0x427f28]\\n??:? void tmpbz_06lxa.__modtest() [0x427fc0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430359]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430808]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428700]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428687]\\n??:? _d_run_main [0x4285f2]\\n??:? main [0x427fd3]\\\
    n??:? __libc_start_main [0xea930554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left[i] =\
    \ i;\n        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n   \
    \ {\n        for (j = 0; j < n; j++) \n        {\n            if (left[i] == right[j])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvz1cqtoy.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpvz1cqtoy.__unittest_L39_C1()\
    \ [0x427e3c]\\n??:? void tmpvz1cqtoy.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xc57a1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3kb7i3x2.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp3kb7i3x2.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmp3kb7i3x2.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0xdc5dd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe5npw6hb.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpe5npw6hb.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmpe5npw6hb.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xeb917554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpdr4n9o0e.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdr4n9o0e.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left[i] =\
    \ i;\n        right[i] = n - i - 1;\n    }\n    i = 0;\n    j = 0;\n    while\
    \ (i < n && j < n) \n    {\n        if (left[i] < right[j]) \n        {\n    \
    \        count += j;\n            i++;\n        }\n        else \n        {\n\
    \            j++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7djdu_h8.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42814d]\\n??:? void tmp7djdu_h8.__unittest_L43_C1()\
    \ [0x427e34]\\n??:? void tmp7djdu_h8.__modtest() [0x427ecc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c14b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afde]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430269]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430718]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301f5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afb5]\\n??:? runModuleUnitTests [0x42bf21]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428610]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428597]\\n??:? _d_run_main [0x428502]\\n??:? main [0x427edf]\\\
    n??:? __libc_start_main [0x22fb0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ count = 0;\n    for (i = 0; i < n; i++)\n    {\n        for (j = 0; j < n; j++)\n\
    \        {\n            for (k = 0; k < n; k++)\n            {\n             \
    \   if (i < j && j < k)\n                {\n                    count++;\n   \
    \             }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpg5mxc5h5.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmpg5mxc5h5.__unittest_L33_C1()\
    \ [0x427aac]\\n??:? void tmpg5mxc5h5.__modtest() [0x427b44]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b57]\\\
    n??:? __libc_start_main [0xa0f3e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6pfg_azz.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp6pfg_azz.__unittest_L39_C1()\
    \ [0x427e3c]\\n??:? void tmp6pfg_azz.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x21540554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i < j) {\n                count\
    \ = count + 1;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp6u6xx7sr.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmp6u6xx7sr.__unittest_L30_C1()\
    \ [0x427a98]\\n??:? void tmp6u6xx7sr.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0xe9c5f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n \
    \       if (i < j) \n        {\n            count += j - i;\n            i++;\n\
    \        } \n        else \n        {\n            j++;\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpz8cy0suc.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpz8cy0suc.__unittest_L34_C1()\
    \ [0x427a84]\\n??:? void tmpz8cy0suc.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xe5244554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long aa, bb, cc, dd, ee, ff,\
    \ gg, hh, ii, jj, kk, ll, mm, nn, oo, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy,\
    \ zz;\n    long aaa, bbb, ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk, lll, mmm,\
    \ nnn, ooo, ppp, qqq, rrr, sss, ttt, uuu, vvv, www, xxx, yyy, zzz;\n    long aaaa,\
    \ bbbb, cccc, dddd, eeee, ffff, gggg, hhhh, iiii, jjjj, kkkk, llll, mmmm, nnnn,\
    \ oooo, pppp, qqqq, rrrr, ssss, tttt, uuuu, vvvv, wwww, xxxx, yyyy, zzzz;\n  \
    \  long aaaaa, bbbbb, ccccc, ddddd, eeeee, fffff, ggggg, hhhhh, iiiii, jjjjj,\
    \ kkkkk, lllll, mmmmm, nnnnn, ooooo, ppppp, qqqqq, rrrrr, sssss, ttttt, uuuuu,\
    \ vvvvv, wwwww, xxxxx, yyyyy, zzzzz;\n    long aaaaaa, bbbbbb, cccccc, dddddd,\
    \ eeeeee, ffffff, gggggg, hhhhhh, iiiiii, jjjjjj, kkkkkk, llllll, mmmmmm, nnnnnn,\
    \ oooooo, pppppp, qqqqqq, rrrrrr, ssssss, tttttt, uuuuuu, vvvvvv, wwwwww, xxxxxx,\
    \ yyyyyy, zzzzzz;\n    long\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjh_t4eqw.d(24): Error: no identifier for declarator `long`\\\
    n/tmp/tmpjh_t4eqw.d(24): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjh_t4eqw.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff =\
    \ 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n\
    \    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long\
    \ oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss =\
    \ 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n\
    \    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n   \
    \ long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n   \
    \ long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n   \
    \ long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n   \
    \ long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n   \
    \ long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n   \
    \ long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n   \nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpwtdacj16.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwtdacj16.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long count = 0;\n    float x[n], y[n];\n    float x1[n], y1[n];\n  \
    \  float a[n], b[n];\n    float c[n], d[n];\n    float e[n], f[n];\n    float\
    \ g[n], h[n];\n    float m[n], p[n];\n    float q[n], r[n];\n    float s[n], t[n];\n\
    \    float u[n], v[n];\n    float w[n], z[n];\n    float a1[n], b1[n];\n    float\
    \ c1[n], d1[n];\n    float e1[n], f1[n];\n    float g1[n], h1[n];\n    float m1[n],\
    \ p1[n];\n    float q1[n], r1[n];\n    float s1[n], t1[n];\n    float u1[n], v1[n];\n\
    \    float w1[n], z1[n];\n    float a2[n], b2[n];\n    float c2[n], d2[n];\n \
    \   float e2[n], f2[n];\n    float g2[n], h2[n];\n    float m2[n], p2[n];\n  \
    \  float q2[n], r2[n];\n    float s2[n], t2[n];\n    float u2[n], v2[n];\n   \
    \ float w2[n], z2[n];\n    float a3[n], b3[n];\n    float c3[n], d3[n];\n    float\
    \ e3[n], f3[n];\n    float g3[n], h3[n];\n    float m3[n], p3[n];\n    float q3[n],\
    \ r3[n];\n    float s3[n], t3[n];\n    float u3[n], v3[n];\n    float w3[n], z3[n];\n\
    \    float a4[n], b4[n];\n    float c4\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpq7_6vddw.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `float[n] x`\\n/tmp/tmpq7_6vddw.d(19): Error: multiple declarations must\
    \ have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpq7_6vddw.d(19):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] y`\\n/tmp/tmpq7_6vddw.d(20):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] x1`\\n/tmp/tmpq7_6vddw.d(20):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpq7_6vddw.d(20): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] y1`\\n/tmp/tmpq7_6vddw.d(21): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] a`\\n/tmp/tmpq7_6vddw.d(21): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpq7_6vddw.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] b`\\n/tmp/tmpq7_6vddw.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] c`\\n/tmp/tmpq7_6vddw.d(22):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpq7_6vddw.d(22): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] d`\\n/tmp/tmpq7_6vddw.d(23): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] e`\\n/tmp/tmpq7_6vddw.d(23): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpq7_6vddw.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] f`\\n/tmp/tmpq7_6vddw.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `float[n] g`\\n/tmp/tmpq7_6vddw.d(24):\
    \ Error: multiple declarations must have the same type, not `float[n]` and `float[n]`\\\
    n/tmp/tmpq7_6vddw.d(24): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `float[n] h`\\n/tmp/tmpq7_6vddw.d(25): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `float[n] m`\\n/tmp/tmpq7_6vddw.d(25): Error: multiple declarations\
    \ must have the same type, not `float[n]` and `float[n]`\\n/tmp/tmpq7_6vddw.d(2"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy0vjv1vd.d(87): Error: semicolon expected, not `unittest`\\n/tmp/tmpy0vjv1vd.d(87):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpy0vjv1vd.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long[] a = new long[n];\n    long[] b = new long[n];\n    long[] c =\
    \ new long[n];\n    long[] d = new long[n];\n    long[] e = new long[n];\n   \
    \ long[] f = new long[n];\n    long[] g = new long[n];\n    long[] h = new long[n];\n\
    \    long[] i1 = new long[n];\n    long[] j1 = new long[n];\n    long[] k1 = new\
    \ long[n];\n    long[] l1 = new long[n];\n    long[] m = new long[n];\n    long[]\
    \ n1 = new long[n];\n    long[] o = new long[n];\n    long[] p = new long[n];\n\
    \    long[] q = new long[n];\n    long[] r = new long[n];\n    long[] s = new\
    \ long[n];\n    long[] t = new long[n];\n    long[] u = new long[n];\n    long[]\
    \ v = new long[n];\n    long[] w = new long[n];\n    long[] x = new long[n];\n\
    \    long[] y = new long[n];\n    long[] z = new long[n];\n    long[] aa = new\
    \ long[n];\n    long[] bb = new long[n];\n    long[] cc = new long[n];\n    long[]\
    \ dd = new long[n];\n    long[] ee = new long[n];\n    long[] ff = new long[n];\n\
    \    long[] gg = new long[n];\n    long[] hh = new long[n];\n    long[] ii = new\
    \ long[n];\n    long[] jj = new long[n];\n    long[] kk = new long[n];\n    long[]\
    \ ll = new long[n];\n    long[] mm = new long[n];\n    long[] nn = new long[n];\n\
    \    long[] oo = new long[n];\n    long[] pp = new long[n];\n    long[] qq = new\
    \ long[n];\n    long[] rr = new long[n\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp9z__22ni.d(62): Error: found `unittest` when expecting `]`\\\
    n/tmp/tmp9z__22ni.d(63): Error: semicolon expected, not `{`\\n/tmp/tmp9z__22ni.d(72):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9z__22ni.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n        for\
    \ (j = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n             \
    \   for (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n\
    \                        for (o = 0; o < n; o++) {\n                         \
    \   for (p = 0; p < n; p++) {\n                                for (q = 0; q <\
    \ n; q++) {\n                                    for (r = 0; r < n; r++) {\n \
    \                                       for (s = 0; s < n; s++) {\n          \
    \                                  for (t = 0; t < n; t++) {\n               \
    \                                 for (u = 0; u < n; u++) {\n                \
    \                                    for (v = 0; v < n; v++) {\n             \
    \                                           for (w = 0; w < n; w++) {\n      \
    \                                                      for (x = 0; x < n; x++)\
    \ {\n                                                                for (y =\
    \ 0; y < n; y++) {\n                                                         \
    \           for (z = 0; z < n; z++) {\n                                      \
    \                                  for (a = 0; a < n; a++) {\n               \
    \                                                             for (b = 0; b <\
    \ n; b++) {\n                                                                \
    \                for (c = 0; c < n; c++) {\n                                 \
    \                                                   for (d = 0; d < n; d++) {\n\
    \                                                                            \
    \            for (e = 0; e < n; e++) {\n                                     \
    \                                                       for (f = 0; f < n; f++)\
    \ {\n                                                                        \
    \                        for (g = 0; g < n; g++) {\n                         \
    \                                                                           for\
    \ (h = 0; h < n; h++) {\n                                                    \
    \                                                    result++;\n             \
    \                                   \nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpucfnw4bj.d(48): Error: found `unittest` instead of statement\\\
    n/tmp/tmpucfnw4bj.d(58): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpucfnw4bj.d(58): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpucfnw4bj.d(58): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpucfnw4bj.d(58):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpucfnw4bj.d(58): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpucfnw4bj.d(58): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpucfnw4bj.d(58): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpucfnw4bj.d(58):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpucfnw4bj.d(58): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpucfnw4bj.d(58): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpucfnw4bj.d(58): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpucfnw4bj.d(58):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpucfnw4bj.d(58): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpucfnw4bj.d(58): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpucfnw4bj.d(58): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmpucfnw4bj.d(58):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmpucfnw4bj.d(58): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmpucfnw4bj.d(58): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmpucfnw4bj.d(58): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpucfnw4bj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n \
    \   long e[n];\n    long f[n];\n    long g[n];\n    long h[n];\n    long i[n];\n\
    \    long j[n];\n    long k[n];\n    long l[n];\n    long m[n];\n    long n[n];\n\
    \    long o[n];\n    long p[n];\n    long q[n];\n    long r[n];\n    long s[n];\n\
    \    long t[n];\n    long u[n];\n    long v[n];\n    long w[n];\n    long x[n];\n\
    \    long y[n];\n    long z[n];\n    long aa[n];\n    long ab[n];\n    long ac[n];\n\
    \    long ad[n];\n    long ae[n];\n    long af[n];\n    long ag[n];\n    long\
    \ ah[n];\n    long ai[n];\n    long aj[n];\n    long ak[n];\n    long al[n];\n\
    \    long am[n];\n    long an[n];\n    long ao[n];\n    long ap[n];\n    long\
    \ aq[n];\n    long ar[n];\n    long as[n];\n    long at[n];\n    long au[n];\n\
    \    long av[n];\n    long aw[n];\n    long ax[n];\n    long ay[n];\n    long\
    \ az[n];\n    long ba[n];\n    long bb[n];\n    long bc[n];\n    long bd[n];\n\
    \    long be[n];\n    long bf[n];\n    long bg[n];\n    long bh[n];\n    long\
    \ bi[n];\n    long bj[n];\n    long bk[n];\n    long bl[n];\n    long bm[n];\n\
    \    long bn[n];\n    long bo[n];\n    long bp[n];\n    long\nunittest\n{\n  \
    \  alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxamf13kv.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmpxamf13kv.d(19): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] b`\\n/tmp/tmpxamf13kv.d(20): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] c`\\n/tmp/tmpxamf13kv.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] d`\\n/tmp/tmpxamf13kv.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] e`\\n/tmp/tmpxamf13kv.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] f`\\n/tmp/tmpxamf13kv.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] g`\\n/tmp/tmpxamf13kv.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] h`\\n/tmp/tmpxamf13kv.d(26):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] i`\\n/tmp/tmpxamf13kv.d(27):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] j`\\n/tmp/tmpxamf13kv.d(28):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] k`\\n/tmp/tmpxamf13kv.d(29):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] l`\\n/tmp/tmpxamf13kv.d(30):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] m`\\n/tmp/tmpxamf13kv.d(31):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] n`\\n/tmp/tmpxamf13kv.d(32):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] o`\\n/tmp/tmpxamf13kv.d(33):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] p`\\n/tmp/tmpxamf13kv.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] q`\\n/tmp/tmpxamf13kv.d(35):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] r`\\n/tmp/tmpxamf13kv.d(36):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] s`\\n/tmp/tmpxamf13kv.d(37):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] t`\\n/tmp/tmpxamf13kv.d(38):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] u`\\n/tmp/tmpxamf13kv.d(39):\
    \ Deprec"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left[i] =\
    \ i;\n        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n   \
    \ {\n        for (j = 0; j < n; j++) \n        {\n            if (left[i] == right[j])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpghjgfm02.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpghjgfm02.__unittest_L39_C1()\
    \ [0x427e3c]\\n??:? void tmpghjgfm02.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x815ea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k,l;\n\
    \    long count = 0;\n    long a[n];\n    long b[n];\n    for(i=0;i<n;i++)\n \
    \   {\n        a[i] = i;\n        b[i] = i;\n    }\n    for(i=0;i<n;i++)\n   \
    \ {\n        for(j=0;j<n;j++)\n        {\n            if(a[i] == b[j])\n     \
    \       {\n                count = count + 1;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmph6ykr71b.d(19): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmph6ykr71b.d(20): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] b`\\n/tmp/tmph6ykr71b.d(19): Error: variable\
    \ `n` cannot be read at compile time\\n/tmp/tmph6ykr71b.d(20): Error: variable\
    \ `n` cannot be read at compile time\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmph6ykr71b.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n\
    \    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long af;\n    long\
    \ ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n\
    \    long am;\n    long an;\n    long ao;\n    long ap;\n    long aq;\n    long\
    \ ar;\n    long as;\n    long at;\n    long au;\n    long av;\n    long aw;\n\
    \    long ax;\n    long ay;\n    long az;\n    long ba;\n    long bb;\n    long\
    \ bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n\
    \    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long\
    \ bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n\
    \    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long\
    \ by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n\
    \    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long\
    \ cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n\
    \    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long ct;\n    long\
    \ cu;\n    long cv;\n    long cw;\n    long cx;\n    long cy;\n   \nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxjzxyjyt.d(113): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxjzxyjyt.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpat7wh5wb.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpat7wh5wb.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpat7wh5wb.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xbfc2f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpbaq088l6.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpbaq088l6.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbaq088l6.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long left_to_right_cars = n;\n    long right_to_left_cars = n;\n \
    \   while (left_to_right_cars > 0 && right_to_left_cars > 0) {\n        if (left_to_right_cars\
    \ > right_to_left_cars) {\n            collisions += right_to_left_cars;\n   \
    \         left_to_right_cars -= right_to_left_cars;\n            right_to_left_cars\
    \ = 0;\n        } else {\n            collisions += left_to_right_cars;\n    \
    \        right_to_left_cars -= left_to_right_cars;\n            left_to_right_cars\
    \ = 0;\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf0srmijq.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpf0srmijq.__unittest_L33_C1()\
    \ [0x427a8c]\\n??:? void tmpf0srmijq.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x4829d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long collision = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                collision++;\n            }\n        }\n    }\n    return collision;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7bj51ybm.d(17): Error: variable `n` is shadowing variable `tmp7bj51ybm.car_race_collision.n`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7bj51ybm.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpqw9yxkb8.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpqw9yxkb8.__unittest_L30_C1()\
    \ [0x427a8c]\\n??:? void tmpqw9yxkb8.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x660f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpnpfay35r.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpnpfay35r.__unittest_L30_C1()\
    \ [0x427a8c]\\n??:? void tmpnpfay35r.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x9cf7f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ count;\n    float x, y, z;\n    float[] a = new float[n];\n    float[] b = new\
    \ float[n];\n    float[] c = new float[n];\n    float[] d = new float[n];\n  \
    \  float[] e = new float[n];\n    float[] f = new float[n];\n    float[] g = new\
    \ float[n];\n    float[] h = new float[n];\n    float[] i1 = new float[n];\n \
    \   float[] j1 = new float[n];\n    float[] k1 = new float[n];\n    float[] l\
    \ = new float[n];\n    float[] m = new float[n];\n    float[] n1 = new float[n];\n\
    \    float[] o = new float[n];\n    float[] p = new float[n];\n    float[] q =\
    \ new float[n];\n    float[] r = new float[n];\n    float[] s = new float[n];\n\
    \    float[] t = new float[n];\n    float[] u = new float[n];\n    float[] v =\
    \ new float[n];\n    float[] w = new float[n];\n    float[] x1 = new float[n];\n\
    \    float[] y1 = new float[n];\n    float[] z1 = new float[n];\n    float[] aa\
    \ = new float[n];\n    float[] bb = new float[n];\n    float[] cc = new float[n];\n\
    \    float[] dd = new float[n];\n    float[] ee = new float[n];\n    float[] ff\
    \ = new float[n];\n    float[] gg = new float[n];\n    float[] hh = new float[n];\n\
    \    float[] ii = new float[n];\n    float[] jj = new float[n];\n    float[] kk\
    \ = new float[n];\n    float[] ll = new float[n];\n    float[] mm = new float[n];\n\
    \    float[] nn = new float[n];\n    float[] oo = new float[n];\n    float[] pp\
    \ = new float[n];\n    float[] qq = new float[n];\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpjnz9j85v.d(62): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjnz9j85v.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j <\
    \ n; j++) \n        {\n            if (i < j) \n            {\n              \
    \  result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbt6z9avu.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpbt6z9avu.__unittest_L30_C1()\
    \ [0x427a84]\\n??:? void tmpbt6z9avu.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xd56e0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j < n;\
    \ j++) \n        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpksiiq20u.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpksiiq20u.__unittest_L30_C1()\
    \ [0x427a84]\\n??:? void tmpksiiq20u.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x4205e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpy8u0r364.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpy8u0r364.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy8u0r364.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n*(n-1)/2;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmemi97l3.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpmemi97l3.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpmemi97l3.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xe5215554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long cnt = 0;\n    long[] a = new long[n];\n    long[] b = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        a[i] = i;\n        b[i] = n - i\
    \ - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n;\
    \ j++) \n        {\n            if (a[i] > b[j]) \n            {\n           \
    \     cnt++;\n            }\n        }\n    }\n    return cnt;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfjxpsjnh.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpfjxpsjnh.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmpfjxpsjnh.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x79a23554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long count = 0;\n    float x, y;\n    float x1, y1;\n    float x2, y2;\n\
    \    float x3, y3;\n    float x4, y4;\n    float x5, y5;\n    float x6, y6;\n\
    \    float x7, y7;\n    float x8, y8;\n    float x9, y9;\n    float x10, y10;\n\
    \    float x11, y11;\n    float x12, y12;\n    float x13, y13;\n    float x14,\
    \ y14;\n    float x15, y15;\n    float x16, y16;\n    float x17, y17;\n    float\
    \ x18, y18;\n    float x19, y19;\n    float x20, y20;\n    float x21, y21;\n \
    \   float x22, y22;\n    float x23, y23;\n    float x24, y24;\n    float x25,\
    \ y25;\n    float x26, y26;\n    float x27, y27;\n    float x28, y28;\n    float\
    \ x29, y29;\n    float x30, y30;\n    float x31, y31;\n    float x32, y32;\n \
    \   float x33, y33;\n    float x34, y34;\n    float x35, y35;\n    float x36,\
    \ y36;\n    float x37, y37;\n    float x38, y38;\n    float x39, y39;\n    float\
    \ x40, y40;\n    float x41, y41;\n    float x42, y42;\n    float x43, y43;\n \
    \   float x44, y44;\n    float x45, y45;\n    float x46, y46;\n    float x47,\
    \ y47;\n    float x48, y48;\n    float x49, y49;\n    float x50, y50;\n    float\
    \ x51, y51;\n    float x52, y52;\n    float x53, y53;\n    float x54, y54\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpb9qkkhqp.d(74): Error: semicolon expected, not `unittest`\\n/tmp/tmpb9qkkhqp.d(74):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpb9qkkhqp.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) {\n     \
    \   if (i == j) {\n            collisions++;\n            i++;\n            j++;\n\
    \        } else if (i < j) {\n            i++;\n        } else {\n           \
    \ j++;\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmph3zkrit8.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmph3zkrit8.__unittest_L33_C1()\
    \ [0x427a90]\\n??:? void tmph3zkrit8.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0xe3d2b554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long result = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            for (k = 0; k < n; k++) {\n                for (l = 0;\
    \ l < n; l++) {\n                    for (m = 0; m < n; m++) {\n             \
    \           for (o = 0; o < n; o++) {\n                            for (p = 0;\
    \ p < n; p++) {\n                                for (q = 0; q < n; q++) {\n \
    \                                   for (r = 0; r < n; r++) {\n              \
    \                          for (s = 0; s < n; s++) {\n                       \
    \                     for (t = 0; t < n; t++) {\n                            \
    \                    for (u = 0; u < n; u++) {\n                             \
    \                       for (v = 0; v < n; v++) {\n                          \
    \                              for (w = 0; w < n; w++) {\n                   \
    \                                         for (x = 0; x < n; x++) {\n        \
    \                                                        for (y = 0; y < n; y++)\
    \ {\n                                                                    for (z\
    \ = 0; z < n; z++) {\n                                                       \
    \                 for (a = 0; a < n; a++) {\n                                \
    \                                            for (b = 0; b < n; b++) {\n     \
    \                                                                           for\
    \ (c = 0; c < n; c++) {\n                                                    \
    \                                for (d = 0; d < n; d++) {\n                 \
    \                                                                       for (e\
    \ = 0; e < n; e++) {\n                                                       \
    \                                     for (f = 0; f < n; f++) {\n            \
    \                                                                            \
    \        for (g = 0; g < n; g++) {\n                                         \
    \                                                           for (h = 0; h < n;\
    \ h++) {\n                                                                   \
    \                                     result++;\n                            \
    \                                                                        }\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7jbtd839.d(47): Error: found `unittest` instead of statement\\\
    n/tmp/tmp7jbtd839.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp7jbtd839.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp7jbtd839.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp7jbtd839.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp7jbtd839.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp7jbtd839.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp7jbtd839.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp7jbtd839.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp7jbtd839.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp7jbtd839.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp7jbtd839.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp7jbtd839.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp7jbtd839.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp7jbtd839.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp7jbtd839.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp7jbtd839.d(57):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp7jbtd839.d(57): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp7jbtd839.d(57): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp7jbtd839.d(57): Error:\
    \ found `End of File` when expecting `}` following compound statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7jbtd839.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpvbzw38u9.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpvbzw38u9.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvbzw38u9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long collision = 0;\n    for (i = 0; i < n; i++) {\n        for (j =\
    \ 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n                for\
    \ (l = 0; l < n; l++) {\n                    if (i == j || k == l) {\n       \
    \                 continue;\n                    }\n                    if (i\
    \ == k && j == l) {\n                        continue;\n                    }\n\
    \                    if (i < j && k > l) {\n                        collision++;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return collision;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp60zphs_x.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e0d]\\n??:? void tmp60zphs_x.__unittest_L38_C1()\
    \ [0x427af4]\\n??:? void tmp60zphs_x.__modtest() [0x427b8c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb33]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a9c6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb59]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430008]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fae5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a99d]\\n??:? runModuleUnitTests [0x42b909]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42825c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281e3]\\n??:? _d_run_main [0x42814e]\\n??:? main [0x427b9f]\\\
    n??:? __libc_start_main [0x6f53e554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    while (i < n) {\n        j = 0;\n \
    \       while (j < n) {\n            if (i == j) {\n                j = j + 1;\n\
    \                continue;\n            }\n            if (i < j) {\n        \
    \        count = count + 1;\n            }\n            j = j + 1;\n        }\n\
    \        i = i + 1;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmplk_3ober.d(40): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dcd]\\n??:? void tmplk_3ober.__unittest_L36_C1()\
    \ [0x427ab4]\\n??:? void tmplk_3ober.__modtest() [0x427b4c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baf3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a986]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb19]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42faa5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a95d]\\n??:? runModuleUnitTests [0x42b8c9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42821c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281a3]\\n??:? _d_run_main [0x42810e]\\n??:? main [0x427b5f]\\\
    n??:? __libc_start_main [0x61632554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long result;\n    long[] left_to_right_cars;\n    long[] right_to_left_cars;\n\
    \    long[] collisions;\n    long num_collisions;\n    long num_left_to_right_cars;\n\
    \    long num_right_to_left_cars;\n    long num_cars;\n    long num_cars_per_direction;\n\
    \    long num_cars_per_direction_minus_one;\n    long num_cars_per_direction_minus_two;\n\
    \    long num_cars_per_direction_minus_three;\n    long num_cars_per_direction_minus_four;\n\
    \    long num_cars_per_direction_minus_five;\n    long num_cars_per_direction_minus_six;\n\
    \    long num_cars_per_direction_minus_seven;\n    long num_cars_per_direction_minus_eight;\n\
    \    long num_cars_per_direction_minus_nine;\n    long num_cars_per_direction_minus_ten;\n\
    \    long num_cars_per_direction_minus_eleven;\n    long num_cars_per_direction_minus_twelve;\n\
    \    long num_cars_per_direction_minus_thirteen;\n    long num_cars_per_direction_minus_fourteen;\n\
    \    long num_cars_per_direction_minus_fifteen;\n    long num_cars_per_direction_minus_sixteen;\n\
    \    long num_cars_per_direction_minus_seventeen;\n    long num_cars_per_direction_minus_eighteen;\n\
    \    long num_cars_per_direction_minus_nineteen;\n    long num_cars_per_direction_minus_twenty;\n\
    \    long num_cars_per_direction_minus_twenty_one;\n    long num_cars_per_direction_minus_twenty_two;\n\
    \    long num_cars_per_direction_minus_twenty_three;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmppum3uu_d.d(51): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppum3uu_d.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long count = 0;\n    long[] left = new long[n];\n    long[] right =\
    \ new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left[i] = i;\n  \
    \      right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n   \
    \     for (j = 0; j < n; j++) \n        {\n            if (left[i] == right[j])\
    \ \n            {\n                count++;\n                for (k = j; k < n\
    \ - 1; k++) \n                {\n                    right[k] = right[k + 1];\n\
    \                }\n                for (l = i; l < n - 1; l++) \n           \
    \     {\n                    left[l] = left[l + 1];\n                }\n     \
    \           break;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpj61aw9uc.d(51): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42823d]\\n??:? void tmpj61aw9uc.__unittest_L47_C1()\
    \ [0x427f24]\\n??:? void tmpj61aw9uc.__modtest() [0x427fbc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c23b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b0ce]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430359]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430808]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4302e5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b0a5]\\n??:? runModuleUnitTests [0x42c011]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428700]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428687]\\n??:? _d_run_main [0x4285f2]\\n??:? main [0x427fcf]\\\
    n??:? __libc_start_main [0xbb60c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long *left = new long[n];\n    long *right = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        left[i] = i;\n        right[i] = n - i\
    \ - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            if (left[i] == right[j]) {\n                count++;\n      \
    \      }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpxpz9m0rg.d(19): Error: cannot implicitly convert expression `new\
    \ long[](cast(ulong)n)` of type `long[]` to `long*`\\n/tmp/tmpxpz9m0rg.d(20):\
    \ Error: cannot implicitly convert expression `new long[](cast(ulong)n)` of type\
    \ `long[]` to `long*`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxpz9m0rg.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long aa, bb, cc, dd, ee, ff,\
    \ gg, hh, ii, jj, kk, ll, mm, nn, oo, pp, qq, rr, ss, tt, uu, vv, ww, xx, yy,\
    \ zz;\n    long aaa, bbb, ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk, lll, mmm,\
    \ nnn, ooo, ppp, qqq, rrr, sss, ttt, uuu, vvv, www, xxx, yyy, zzz;\n    long aaaa,\
    \ bbbb, cccc, dddd, eeee, ffff, gggg, hhhh, iiii, jjjj, kkkk, llll, mmmm, nnnn,\
    \ oooo, pppp, qqqq, rrrr, ssss, tttt, uuuu, vvvv, wwww, xxxx, yyyy, zzzz;\n  \
    \  long aaaaa, bbbbb, ccccc, ddddd, eeeee, fffff, ggggg, hhhhh, iiiii, jjjjj,\
    \ kkkkk, lllll, mmmmm, nnnnn, ooooo, ppppp, qqqqq, rrrrr, sssss, ttttt, uuuuu,\
    \ vvvvv, wwwww, xxxxx, yyyyy, zzzzz;\n    long aaaaaa, bbbbbb, cccccc, dddddd,\
    \ eeeeee, ffffff, gggggg, hhhhhh, iiiiii, jjjjjj, kkkkkk, llllll, mmmmmm, nnnnnn,\
    \ oooooo, pppppp, qqqqqq, rrrrrr, ssssss, tttttt, uuuuuu, vvvvvv, wwwwww, xxxxxx,\
    \ yyyyyy, zzzzzz;\n    long\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnb0jpg1f.d(24): Error: no identifier for declarator `long`\\\
    n/tmp/tmpnb0jpg1f.d(24): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnb0jpg1f.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = i + 1; j < n; j++)\
    \ \n        {\n            count++;\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp20jisudk.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp20jisudk.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmp20jisudk.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xdf419554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptg1y1760.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmptg1y1760.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmptg1y1760.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0xc79eb554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (i < j) \n        {\n            collisions += j - i;\n          \
    \  i++;\n        } \n        else \n        {\n            j++;\n        }\n \
    \   }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpn6186ikc.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpn6186ikc.__unittest_L34_C1()\
    \ [0x427a84]\\n??:? void tmpn6186ikc.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xb4654554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long collisions = 0;\n    long* left_to_right = new long[n];\n    long*\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                collisions++;\n      \
    \          for (k = j; k < n - 1; k++) \n                {\n                 \
    \   right_to_left[k] = right_to_left[k + 1];\n                }\n            \
    \    for (l = i; l < n - 1; l++) \n                {\n                    left_to_right[l]\
    \ = left_to_right[l + 1];\n                }\n                break;\n       \
    \     }\n        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7e3nhc3b.d(19): Error: cannot implicitly convert expression `new\
    \ long[](cast(ulong)n)` of type `long[]` to `long*`\\n/tmp/tmp7e3nhc3b.d(20):\
    \ Error: cannot implicitly convert expression `new long[](cast(ulong)n)` of type\
    \ `long[]` to `long*`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7e3nhc3b.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwl9dqt_y.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpwl9dqt_y.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpwl9dqt_y.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xa6984554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left[i] =\
    \ i;\n        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n   \
    \ {\n        for (j = 0; j < n; j++) \n        {\n            if (left[i] == right[j])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpa9mmy2f1.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpa9mmy2f1.__unittest_L39_C1()\
    \ [0x427e3c]\\n??:? void tmpa9mmy2f1.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x44e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    float x1, x2, y1, y2;\n    count = 0;\n    for (i = 0; i < n; i++) {\n  \
    \      x1 = random(0, 100);\n        y1 = random(0, 100);\n        for (j = 0;\
    \ j < n; j++) {\n            x2 = random(0, 100);\n            y2 = random(0,\
    \ 100);\n            if (x1 < x2 && y1 < y2) {\n                count++;\n   \
    \         }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpg42bgks1.d(21): Error: undefined identifier `random`\\n/tmp/tmpg42bgks1.d(22):\
    \ Error: undefined identifier `random`\\n/tmp/tmpg42bgks1.d(24): Error: undefined\
    \ identifier `random`\\n/tmp/tmpg42bgks1.d(25): Error: undefined identifier `random`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpg42bgks1.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long count = 0;\n    long[] left = new long[n];\n    long[] right =\
    \ new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left[i] = i;\n  \
    \      right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n   \
    \     for (j = 0; j < n; j++) \n        {\n            if (left[i] > right[j])\
    \ \n            {\n                count++;\n            }\n        }\n    }\n\
    \    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpr2xtgwpl.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpr2xtgwpl.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmpr2xtgwpl.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xf17ed554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (i < j) \n        {\n            collisions += j - i;\n          \
    \  i++;\n        } \n        else \n        {\n            j++;\n        }\n \
    \   }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpeam9katx.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpeam9katx.__unittest_L34_C1()\
    \ [0x427a84]\\n??:? void tmpeam9katx.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xb4aae554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long qq =\
    \ 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n\
    \    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long\
    \ zz = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n\
    \    long mmm = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n\
    \    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n\
    \    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n\
    \    long aaaa = 0;\n    long bbbb = 0;\n    long cccc = 0;\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp1tp0r80z.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tp0r80z.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n*(n-1)/2;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp610lxete.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp610lxete.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp610lxete.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x661fa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) {\n       \
    \ if (i == j) {\n            count++;\n            i++;\n            j++;\n  \
    \      } else if (i < j) {\n            i++;\n        } else {\n            j++;\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5odsbsy5.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp5odsbsy5.__unittest_L33_C1()\
    \ [0x427a90]\\n??:? void tmp5odsbsy5.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0x931ef554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long count=0;\n    for(i=0;i<n;i++)\n    {\n        for(j=0;j<n;j++)\n  \
    \      {\n            if(i<j)\n            {\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp9opki9bd.d(35): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp9opki9bd.__unittest_L31_C1()\
    \ [0x427a8c]\\n??:? void tmp9opki9bd.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x27913554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) {\n     \
    \   if (i < j) {\n            collisions += j - i;\n            i++;\n       \
    \ } else {\n            j++;\n        }\n    }\n    return collisions;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjdsg6hba.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpjdsg6hba.__unittest_L30_C1()\
    \ [0x427a84]\\n??:? void tmpjdsg6hba.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x6a820554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff =\
    \ 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n\
    \    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long\
    \ qq = 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu =\
    \ 0;\n    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n\
    \    long zz = 0;\n    long aaa = 0;\n    long bbb = 0;\n    long ccc = 0;\n \
    \   long ddd = 0;\n    long eee = 0;\n    long fff = 0;\n    long ggg = 0;\n \
    \   long hhh = 0;\n    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n \
    \   long lll = 0;\n    long mmm = 0;\n    long ppp = 0;\n    long qqq = 0;\n \
    \   long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n \
    \   long vvv = 0;\n    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n \
    \   long zzz = 0;\n    long aaaa = 0;\n    long bbbb = 0;\n\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp102j1re8.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp102j1re8.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long collisions;\n    long[] left_to_right;\n   \
    \ long[] right_to_left;\n    long temp;\n    long temp2;\n    collisions = 0;\n\
    \    left_to_right = new long[n];\n    right_to_left = new long[n];\n    for (i\
    \ = 0; i < n; i++) {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = i + 1;\
    \ j < n; j++) {\n            if (left_to_right[i] > left_to_right[j]) {\n    \
    \            temp = left_to_right[i];\n                left_to_right[i] = left_to_right[j];\n\
    \                left_to_right[j] = temp;\n            }\n            if (right_to_left[i]\
    \ > right_to_left[j]) {\n                temp2 = right_to_left[i];\n         \
    \       right_to_left[i] = right_to_left[j];\n                right_to_left[j]\
    \ = temp2;\n            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    return\
    \ collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n \
    \   assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpwu_xulnf.d(59): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42836d]\\n??:? void tmpwu_xulnf.__unittest_L55_C1()\
    \ [0x428058]\\n??:? void tmpwu_xulnf.__modtest() [0x4280f0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c36b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42b1fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430489]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430938]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430415]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42b1d5]\\n??:? runModuleUnitTests [0x42c141]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428830]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4287b7]\\n??:? _d_run_main [0x428722]\\n??:? main [0x428103]\\\
    n??:? __libc_start_main [0x262c1554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long collisions;\n    long[] left_to_right;\n   \
    \ long[] right_to_left;\n    left_to_right = new long[n];\n    right_to_left =\
    \ new long[n];\n    collisions = 0;\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    return\
    \ collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n \
    \   assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjiplko7v.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42816d]\\n??:? void tmpjiplko7v.__unittest_L39_C1()\
    \ [0x427e54]\\n??:? void tmpjiplko7v.__modtest() [0x427eec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c16b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42affe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430289]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430738]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430215]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afd5]\\n??:? runModuleUnitTests [0x42bf41]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428630]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285b7]\\n??:? _d_run_main [0x428522]\\n??:? main [0x427eff]\\\
    n??:? __libc_start_main [0xb64c8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long sum = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j\
    \ < n; j++) {\n            for (k = 0; k < n; k++) {\n                for (l =\
    \ 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n          \
    \              for (n = 0; n < n; n++) {\n                            for (o =\
    \ 0; o < n; o++) {\n                                for (p = 0; p < n; p++) {\n\
    \                                    for (q = 0; q < n; q++) {\n             \
    \                           for (r = 0; r < n; r++) {\n                      \
    \                      for (s = 0; s < n; s++) {\n                           \
    \                     for (t = 0; t < n; t++) {\n                            \
    \                        for (u = 0; u < n; u++) {\n                         \
    \                               for (v = 0; v < n; v++) {\n                  \
    \                                          for (w = 0; w < n; w++) {\n       \
    \                                                         for (x = 0; x < n; x++)\
    \ {\n                                                                    for (y\
    \ = 0; y < n; y++) {\n                                                       \
    \                 for (z = 0; z < n; z++) {\n                                \
    \                                            for (a = 0; a < n; a++) {\n     \
    \                                                                           for\
    \ (b = 0; b < n; b++) {\n                                                    \
    \                                for (c = 0; c < n; c++) {\n                 \
    \                                                                       for (d\
    \ = 0; d < n; d++) {\n                                                       \
    \                                     for (e = 0; e < n; e++) {\n            \
    \                                                                            \
    \        for (f = 0; f < n; f++) {\n                                         \
    \                                                           for (g = 0; g < n;\
    \ g++) {\n                                                                   \
    \                                     for (h = 0; h <\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp82gj7tmb.d(46): Error: expression expected, not `unittest`\\\
    n/tmp/tmp82gj7tmb.d(47): Error: found `{` when expecting `;` following `for` condition\\\
    n/tmp/tmp82gj7tmb.d(48): Error: expression expected, not `alias`\\n/tmp/tmp82gj7tmb.d(48):\
    \ Error: found `candidate` when expecting `)`\\n/tmp/tmp82gj7tmb.d(48): Error:\
    \ found `=` instead of statement\\n/tmp/tmp82gj7tmb.d(56): Error: found `End of\
    \ File` when expecting `}` following compound statement\\n/tmp/tmp82gj7tmb.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp82gj7tmb.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp82gj7tmb.d(56): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp82gj7tmb.d(56): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp82gj7tmb.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp82gj7tmb.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp82gj7tmb.d(56): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp82gj7tmb.d(56): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp82gj7tmb.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp82gj7tmb.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp82gj7tmb.d(56): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp82gj7tmb.d(56): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp82gj7tmb.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp82gj7tmb.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp82gj7tmb.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n \
    \       if (i < j) \n        {\n            count += j - i;\n            i++;\n\
    \        } \n        else \n        {\n            j++;\n        }\n    }\n  \
    \  return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n\
    \    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp7_ekwlhl.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp7_ekwlhl.__unittest_L34_C1()\
    \ [0x427a84]\\n??:? void tmp7_ekwlhl.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x822f6554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n1, n2, n3, n4, n5, n6, n7, n8, n9, n10, n11, n12, n13, n14, n15, n16,\
    \ n17, n18, n19, n20, n21, n22, n23, n24, n25, n26, n27, n28, n29, n30, n31, n32,\
    \ n33, n34, n35, n36, n37, n38, n39, n40, n41, n42, n43, n44, n45, n46, n47, n48,\
    \ n49, n50, n51, n52, n53, n54, n55, n56, n57, n58, n59, n60, n61, n62, n63, n64,\
    \ n65, n66, n67, n68, n69, n70, n71, n72, n73, n74, n75, n76, n77, n78, n79, n80,\
    \ n81, n82, n83, n84, n85, n86, n87, n88, n89, n90, n91, n92, n93, n94, n95, n96,\
    \ n97, n98, n99, n100, n101, n102, n103, n104, n105, n106, n107, n108, n109, n110,\
    \ n111, n112, n113, n114, n115, n116, n117, n118, n119, n120, n121, n122, n123,\
    \ n124, n125, n126, n127, n128, n129, n130, n131, n132, n133, n134, n135, n136,\
    \ n137, n138, n139, n140, n141, n142, n143, n144, n145, n146, n147, n148, n149,\
    \ n150, n151, n152, n153, n154, n155, n156, n157, n158, n159, n160, n161, n162,\
    \ n163, n164, n165, n166\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_m6rx78u.d(18): Error: semicolon expected, not `unittest`\\n/tmp/tmp_m6rx78u.d(18):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp_m6rx78u.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i,j,k;\n\
    \    long count = 0;\n    long[] a = new long[n];\n    long[] b = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        a[i] = i;\n        b[i] = n - i - 1;\n\
    \    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (a[i] > b[j]) {\n                count++;\n            }\n      \
    \  }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpvhodwv06.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpvhodwv06.__unittest_L34_C1()\
    \ [0x427e3c]\\n??:? void tmpvhodwv06.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xe4ea0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpk86un28m.d(87): Error: semicolon expected, not `unittest`\\n/tmp/tmpk86un28m.d(87):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpk86un28m.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long ab = 0;\n    long ac = 0;\n    long ad = 0;\n    long ae = 0;\n\
    \    long af = 0;\n    long ag = 0;\n    long ah = 0;\n    long ai = 0;\n    long\
    \ aj = 0;\n    long ak = 0;\n    long al = 0;\n    long am = 0;\n    long an =\
    \ 0;\n    long ao = 0;\n    long ap = 0;\n    long aq = 0;\n    long ar = 0;\n\
    \    long as = 0;\n    long at = 0;\n    long au = 0;\n    long av = 0;\n    long\
    \ aw = 0;\n    long ax = 0;\n    long ay = 0;\n    long az = 0;\n    long ba =\
    \ 0;\n    long bb = 0;\n    long bc = 0;\n    long bd = 0;\n    long be = 0;\n\
    \    long bf = 0;\n    long bg = 0;\n    long bh = 0;\n    long bi = 0;\n    long\
    \ bj = 0;\n    long bk = 0;\n    long bl = 0;\n    long bm = 0;\n    long bn =\
    \ 0;\n    long bo = 0;\n    long bp = 0;\n    long bq = 0;\n    long br = 0;\n\
    \    long bs = 0;\n    long bt = 0;\n    long bu = 0;\n    long bv = 0;\n    long\
    \ bw = 0;\n    long bx = 0;\n    long by = 0;\n    long bz\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpci5jxvxt.d(87): Error: semicolon expected, not `unittest`\\n/tmp/tmpci5jxvxt.d(87):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmpci5jxvxt.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    for (i = 0; i < n; i++)\n    {\n \
    \       for (j = 0; j < n; j++)\n        {\n            count++;\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: b''
  exit_code: 0
  status: OK
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) {\n        for (long j = 0; j < n; j++)\
    \ {\n            if (i < j) {\n                result++;\n            }\n    \
    \    }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_37k3lb5.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp_37k3lb5.__unittest_L27_C1()\
    \ [0x427a84]\\n??:? void tmp_37k3lb5.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0x4f28c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = n - 1;\n    while (i < n && j >= 0) \n \
    \   {\n        if (i == j) \n        {\n            collisions += 1;\n       \
    \     i += 1;\n            j -= 1;\n        } \n        else if (i < j) \n   \
    \     {\n            collisions += j - i;\n            i += 1;\n        } \n \
    \       else \n        {\n            collisions += i - j;\n            j -= 1;\n\
    \        }\n    }\n    return collisions;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx6eufqmv.d(45): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmpx6eufqmv.__unittest_L41_C1()\
    \ [0x427aac]\\n??:? void tmpx6eufqmv.__modtest() [0x427b44]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b57]\\\
    n??:? __libc_start_main [0xaf9e2554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n \
    \   long e[n];\n    long f[n];\n    long g[n];\n    long h[n];\n    long i[n];\n\
    \    long j[n];\n    long k[n];\n    long l[n];\n    long m[n];\n    long n[n];\n\
    \    long o[n];\n    long p[n];\n    long q[n];\n    long r[n];\n    long s[n];\n\
    \    long t[n];\n    long u[n];\n    long v[n];\n    long w[n];\n    long x[n];\n\
    \    long y[n];\n    long z[n];\n    long aa[n];\n    long ab[n];\n    long ac[n];\n\
    \    long ad[n];\n    long ae[n];\n    long af[n];\n    long ag[n];\n    long\
    \ ah[n];\n    long ai[n];\n    long aj[n];\n    long ak[n];\n    long al[n];\n\
    \    long am[n];\n    long an[n];\n    long ao[n];\n    long ap[n];\n    long\
    \ aq[n];\n    long ar[n];\n    long as[n];\n    long at[n];\n    long au[n];\n\
    \    long av[n];\n    long aw[n];\n    long ax[n];\n    long ay[n];\n    long\
    \ az[n];\n    long ba[n];\n    long bb[n];\n    long bc[n];\n    long bd[n];\n\
    \    long be[n];\n    long bf[n];\n    long bg[n];\n    long bh[n];\n    long\
    \ bi[n];\n    long bj[n];\n    long bk[n];\n    long bl[n];\n    long bm[n];\n\
    \    long bn[n];\n    long bo[n];\n    long bp[n];\n    long\nunittest\n{\n  \
    \  alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzq5lwikz.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmpzq5lwikz.d(19): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] b`\\n/tmp/tmpzq5lwikz.d(20): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] c`\\n/tmp/tmpzq5lwikz.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] d`\\n/tmp/tmpzq5lwikz.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] e`\\n/tmp/tmpzq5lwikz.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] f`\\n/tmp/tmpzq5lwikz.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] g`\\n/tmp/tmpzq5lwikz.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] h`\\n/tmp/tmpzq5lwikz.d(26):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] i`\\n/tmp/tmpzq5lwikz.d(27):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] j`\\n/tmp/tmpzq5lwikz.d(28):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] k`\\n/tmp/tmpzq5lwikz.d(29):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] l`\\n/tmp/tmpzq5lwikz.d(30):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] m`\\n/tmp/tmpzq5lwikz.d(31):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] n`\\n/tmp/tmpzq5lwikz.d(32):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] o`\\n/tmp/tmpzq5lwikz.d(33):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] p`\\n/tmp/tmpzq5lwikz.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] q`\\n/tmp/tmpzq5lwikz.d(35):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] r`\\n/tmp/tmpzq5lwikz.d(36):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] s`\\n/tmp/tmpzq5lwikz.d(37):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] t`\\n/tmp/tmpzq5lwikz.d(38):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] u`\\n/tmp/tmpzq5lwikz.d(39):\
    \ Deprec"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpxudj8jxr.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpxudj8jxr.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpxudj8jxr.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x5a1c8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long count = 0;\n    long[] left = new long[n];\n    long[] right =\
    \ new long[n];\n    for (i = 0; i < n; i++) {\n        left[i] = i;\n        right[i]\
    \ = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n        for (j = 0; j <\
    \ n; j++) {\n            if (left[i] > right[j]) {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_91pqatm.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp_91pqatm.__unittest_L34_C1()\
    \ [0x427e3c]\\n??:? void tmp_91pqatm.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xf05fe554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpjegf4cdq.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpjegf4cdq.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpjegf4cdq.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xad1f8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpkdvtoaul.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpkdvtoaul.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkdvtoaul.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    for (i = 0; i < n; i++) {\n        left[i] = i;\n\
    \        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = 0; j < n; j++) {\n            if (left[i] == right[j]) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpx_xrgdpc.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpx_xrgdpc.__unittest_L35_C1()\
    \ [0x427e3c]\\n??:? void tmpx_xrgdpc.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x9b236554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long a[n], b[n];\n    long c[n];\n    for (i = 0; i < n; i++)\
    \ {\n        a[i] = i;\n        b[i] = n - i;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (a[i] == b[j]) {\n    \
    \            c[i] = a[i];\n            }\n        }\n    }\n    return c;\n}\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpj__s4bwr.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmpj__s4bwr.d(18): Error: multiple declarations must\
    \ have the same type, not `long[n]` and `long[n]`\\n/tmp/tmpj__s4bwr.d(18): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] b`\\n/tmp/tmpj__s4bwr.d(19):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] c`\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj__s4bwr.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long x[n], y[n];\n    long count = 0;\n    for (i = 0; i < n; i++) {\n  \
    \      x[i] = i;\n        y[i] = i;\n    }\n    for (i = 0; i < n; i++) {\n  \
    \      for (j = 0; j < n; j++) {\n            if (x[i] > y[j]) {\n           \
    \     count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpteljkivf.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] x`\\n/tmp/tmpteljkivf.d(18): Error: multiple declarations must\
    \ have the same type, not `long[n]` and `long[n]`\\n/tmp/tmpteljkivf.d(18): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] y`\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpteljkivf.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i == j) {\n               \
    \ count = count + 1;\n            }\n        }\n    }\n    return count;\n}\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpf7z3ea7f.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpf7z3ea7f.__unittest_L30_C1()\
    \ [0x427a98]\\n??:? void tmpf7z3ea7f.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0x54287554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long collisions = 0;\n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n                for\
    \ (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n     \
    \                   for (n = 0; n < n; n++) {\n                            for\
    \ (o = 0; o < n; o++) {\n                                for (p = 0; p < n; p++)\
    \ {\n                                    for (q = 0; q < n; q++) {\n         \
    \                               for (r = 0; r < n; r++) {\n                  \
    \                          for (s = 0; s < n; s++) {\n                       \
    \                         for (t = 0; t < n; t++) {\n                        \
    \                            for (u = 0; u < n; u++) {\n                     \
    \                                   for (v = 0; v < n; v++) {\n              \
    \                                              for (w = 0; w < n; w++) {\n   \
    \                                                             for (x = 0; x <\
    \ n; x++) {\n                                                                \
    \    for (y = 0; y < n; y++) {\n                                             \
    \                           for (z = 0; z < n; z++) {\n                      \
    \                                                      for (a = 0; a < n; a++)\
    \ {\n                                                                        \
    \        for (b = 0; b < n; b++) {\n                                         \
    \                                           for (c = 0; c < n; c++) {\n      \
    \                                                                            \
    \      for (d = 0; d < n; d++) {\n                                           \
    \                                                 for (e = 0; e < n; e++) {\n\
    \                                                                            \
    \                    for (f = 0; f < n; f++) {\n                             \
    \                                                                       for (g\
    \ = 0; g < n; g++) {\n                                                       \
    \                                                 for (h = 0; h <\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp_95kzrss.d(46): Error: expression expected, not `unittest`\\\
    n/tmp/tmp_95kzrss.d(47): Error: found `{` when expecting `;` following `for` condition\\\
    n/tmp/tmp_95kzrss.d(48): Error: expression expected, not `alias`\\n/tmp/tmp_95kzrss.d(48):\
    \ Error: found `candidate` when expecting `)`\\n/tmp/tmp_95kzrss.d(48): Error:\
    \ found `=` instead of statement\\n/tmp/tmp_95kzrss.d(56): Error: found `End of\
    \ File` when expecting `}` following compound statement\\n/tmp/tmp_95kzrss.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp_95kzrss.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp_95kzrss.d(56): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp_95kzrss.d(56): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp_95kzrss.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp_95kzrss.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp_95kzrss.d(56): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp_95kzrss.d(56): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp_95kzrss.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp_95kzrss.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\n/tmp/tmp_95kzrss.d(56): Error: found `End of File` when\
    \ expecting `}` following compound statement\\n/tmp/tmp_95kzrss.d(56): Error:\
    \ found `End of File` when expecting `}` following compound statement\\n/tmp/tmp_95kzrss.d(56):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    n/tmp/tmp_95kzrss.d(56): Error: found `End of File` when expecting `}` following\
    \ compound statement\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_95kzrss.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g, h;\n\
    \    long A, B, C, D, E, F, G, H;\n    long I, J, K, L, M, N, O, P, Q, R, S, T,\
    \ U, V, W, X, Y, Z;\n    long AA, BB, CC, DD, EE, FF, GG, HH;\n    long II, JJ,\
    \ KK, LL, MM, NN, OO, PP, QQ, RR, SS, TT, UU, VV, WW, XX, YY, ZZ;\n    long AAA,\
    \ BBB, CCC, DDD, EEE, FFF, GGG, HHH;\n    long III, JJJ, KKK, LLL, MMM, NNN, OOO,\
    \ PPP, QQQ, RRR, SSS, TTT, UUU, VVV, WWW, XXX, YYY, ZZZ;\n    long AAAA, BBBB,\
    \ CCCC, DDDD, EEEE, FFFF, GGGG, HHHH;\n    long IIII, JJJJ, KKKK, LLLL, MMMM,\
    \ NNNN, OOOO, PPPP, QQQQ, RRRR, SSSS, TTTT, UUUU, VVVV, WWWW, XXXX, YYYY, ZZZZ;\n\
    \    long AAAAA, BBBBB, CCCCC, DDDDD, EEEEE, FFFFF, GGGGG, HHHHH;\n    long IIIII,\
    \ JJJJJ, KKKKK, LLLLL, MMMMM, NNNNN, OOOOO, PPPPP, QQQQQ, RRRRR, SSSSS, TTTTT,\
    \ UUUUU, VVVVV, WWWWW, XXXXX, YYYYY, ZZZZZ;\n    long AAAAAA, BBBBBB, CCCCCC,\
    \ DDDDDD, EEEEEE, FFFFFF, GGGGGG, HHHHHH;\n    long\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpzrzd8gaj.d(31): Error: no identifier for declarator `long`\\\
    n/tmp/tmpzrzd8gaj.d(31): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzrzd8gaj.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp8uuxu0ij.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmp8uuxu0ij.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8uuxu0ij.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n\
    \        {\n            if (i < j) \n            {\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbvo6mwf1.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpbvo6mwf1.__unittest_L30_C1()\
    \ [0x427a8c]\\n??:? void tmpbvo6mwf1.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0xefd1a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    while (i < n) \n    {\n        long j = 0;\n    \
    \    while (j < n) \n        {\n            if (i != j) \n            {\n    \
    \            result = result + 1;\n            }\n            j = j + 1;\n   \
    \     }\n        i = i + 1;\n    }\n    return result;\n}\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp5urbf3ri.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmp5urbf3ri.__unittest_L34_C1()\
    \ [0x427a98]\\n??:? void tmp5urbf3ri.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0x8c9c554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn =\
    \ 0;\n    long oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n\
    \    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long\
    \ ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa\
    \ = 0;\n    long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee\
    \ = 0;\n    long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii\
    \ = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm\
    \ = 0;\n    long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq\
    \ = 0;\n    long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long uuu\
    \ = 0;\n    long vvv = 0;\n    long www = 0;\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc2whaaq3.d(84): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2whaaq3.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long collisions = 0;\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    for (i = 0; i <\
    \ n; i++) \n    {\n        left_to_right[i] = i;\n        right_to_left[i] = n\
    \ - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j\
    \ < n; j++) \n        {\n            if (left_to_right[i] == right_to_left[j])\
    \ \n            {\n                collisions++;\n            }\n        }\n \
    \   }\n    return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpe070jh10.d(44): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpe070jh10.__unittest_L40_C1()\
    \ [0x427e3c]\\n??:? void tmpe070jh10.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xe70f3554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) {\n \
    \       for (j = 0; j < n; j++) {\n            if (i < j) {\n                count\
    \ = count + 1;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpyuzuibe5.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpyuzuibe5.__unittest_L30_C1()\
    \ [0x427a98]\\n??:? void tmpyuzuibe5.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0x74e91554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmper0sr8k_.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmper0sr8k_.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmper0sr8k_.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xeeaa0554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    float[] x = new float[n];\n    float[] y = new float[n];\n\
    \    float[] a = new float[n];\n    float[] b = new float[n];\n    float[] c =\
    \ new float[n];\n    float[] d = new float[n];\n    float[] e = new float[n];\n\
    \    float[] f = new float[n];\n    float[] g = new float[n];\n    float[] h =\
    \ new float[n];\n    float[] i1 = new float[n];\n    float[] j1 = new float[n];\n\
    \    float[] k1 = new float[n];\n    float[] l = new float[n];\n    float[] m\
    \ = new float[n];\n    float[] n1 = new float[n];\n    float[] o = new float[n];\n\
    \    float[] p = new float[n];\n    float[] q = new float[n];\n    float[] r =\
    \ new float[n];\n    float[] s = new float[n];\n    float[] t = new float[n];\n\
    \    float[] u = new float[n];\n    float[] v = new float[n];\n    float[] w =\
    \ new float[n];\n    float[] x1 = new float[n];\n    float[] y1 = new float[n];\n\
    \    float[] z = new float[n];\n    float[] aa = new float[n];\n    float[] bb\
    \ = new float[n];\n    float[] cc = new float[n];\n    float[] dd = new float[n];\n\
    \    float[] ee = new float[n];\n    float[] ff = new float[n];\n    float[] gg\
    \ = new float[n];\n    float[] hh = new float[n];\n    float[] ii = new float[n];\n\
    \    float[] jj = new float[n];\n    float[] kk = new float[n];\n    float[] ll\
    \ = new float[n];\n    float[] mm = new float[n];\n    float[] nn = new float[n];\n\
    \    float[] oo = new float[n];\n    float[] pp =\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpv3iq2lp9.d(63): Error: expression expected, not `unittest`\\\
    n/tmp/tmpv3iq2lp9.d(64): Error: semicolon expected, not `{`\\n/tmp/tmpv3iq2lp9.d(73):\
    \ Error: found `End of File` when expecting `}` following compound statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpv3iq2lp9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpc6gaw1y9.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpc6gaw1y9.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc6gaw1y9.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                result++;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp2ar6upee.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp2ar6upee.__unittest_L39_C1()\
    \ [0x427e3c]\\n??:? void tmp2ar6upee.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x6ed89554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long num_collisions\
    \ = 0;\n    // TODO: Implement this function\n    return num_collisions;\n}\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpi8mscxy5.d(25): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d45]\\n??:? void tmpi8mscxy5.__unittest_L21_C1()\
    \ [0x427a30]\\n??:? void tmpi8mscxy5.__modtest() [0x427ac8]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba6b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a8fe]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fa91]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff40]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa1d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8d5]\\n??:? runModuleUnitTests [0x42b841]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428194]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42811b]\\n??:? _d_run_main [0x428086]\\n??:? main [0x427adb]\\\
    n??:? __libc_start_main [0x67b92554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    long[] car_position = new long[n];\n    long[]\
    \ car_speed = new long[n];\n    long[] car_direction = new long[n];\n    long[]\
    \ car_position_2 = new long[n];\n    long[] car_speed_2 = new long[n];\n    long[]\
    \ car_direction_2 = new long[n];\n    for (i = 0; i < n; i++) {\n        car_position[i]\
    \ = random(1, 1000000);\n        car_speed[i] = random(1, 1000000);\n        car_direction[i]\
    \ = random(0, 1);\n        car_position_2[i] = random(1, 1000000);\n        car_speed_2[i]\
    \ = random(1, 1000000);\n        car_direction_2[i] = random(0, 1);\n    }\n \
    \   for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n           \
    \ if (car_direction[i] == 0 && car_direction_2[j] == 1) {\n                if\
    \ (car_position[i] < car_position_2[j]) {\n                    k = (car_position_2[j]\
    \ - car_position[i]) / (car_speed[i] + car_speed_2[j]);\n                    if\
    \ (k * (car_speed[i] + car_speed_2[j]) == (car_position_2[j] - car_position[i]))\
    \ {\n                        collisions++;\n                    }\n          \
    \      }\n            }\n        }\n    }\n    return collisions;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2ey2fmv_.d(26): Error: undefined identifier `random`\\n/tmp/tmp2ey2fmv_.d(27):\
    \ Error: undefined identifier `random`\\n/tmp/tmp2ey2fmv_.d(28): Error: undefined\
    \ identifier `random`\\n/tmp/tmp2ey2fmv_.d(29): Error: undefined identifier `random`\\\
    n/tmp/tmp2ey2fmv_.d(30): Error: undefined identifier `random`\\n/tmp/tmp2ey2fmv_.d(31):\
    \ Error: undefined identifier `random`\\nFailed: [\"dmd\", \"-unittest\", \"-v\"\
    , \"-o-\", \"/tmp/tmp2ey2fmv_.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long result;\n    float x, y;\n    float[] left_to_right_cars;\n    float[]\
    \ right_to_left_cars;\n    float[] left_to_right_cars_speed;\n    float[] right_to_left_cars_speed;\n\
    \    float[] left_to_right_cars_position;\n    float[] right_to_left_cars_position;\n\
    \    float[] left_to_right_cars_time;\n    float[] right_to_left_cars_time;\n\
    \    float[] left_to_right_cars_time_to_collision;\n    float[] right_to_left_cars_time_to_collision;\n\
    \    float[] left_to_right_cars_collision_position;\n    float[] right_to_left_cars_collision_position;\n\
    \    float[] left_to_right_cars_collision_time;\n    float[] right_to_left_cars_collision_time;\n\
    \    float[] left_to_right_cars_collision_time_to_collision;\n    float[] right_to_left_cars_collision_time_to_collision;\n\
    \    float[] left_to_right_cars_collision_speed;\n    float[] right_to_left_cars_collision_speed;\n\
    \    float[] left_to_right_cars_collision_position_x;\n    float[] right_to_left_cars_collision_position_x;\n\
    \    float[] left_to_right_cars_collision_position_y;\n    float[] right_to_left_cars_collision_position_y;\n\
    \    float[] left_to_right_cars_collision_time_x;\n    float[] right_to_left_cars_collision_time_x;\n\
    \    float[] left_to_right_cars_collision_time_y;\n    float[] right_to_left_cars_collision_time_y;\n\
    \    float[] left_to_right_cars_collision_time_to_collision_x;\n    float[] right_to_left_cars_collision_time_to_collision\n\
    unittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp00t235rb.d(48): Error: semicolon expected, not `unittest`\\n/tmp/tmp00t235rb.d(48):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp00t235rb.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l;\n    long count = 0;\n    long[] left_to_right = new long[n];\n    long[]\
    \ right_to_left = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ {\n        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpiiesi736.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpiiesi736.__unittest_L34_C1()\
    \ [0x427e3c]\\n??:? void tmpiiesi736.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xfd1e8554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpokg9k5fe.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpokg9k5fe.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpokg9k5fe.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, result;\n    result = 0;\n    for (i = 0; i < n; i++) {\n        for (j\
    \ = 0; j < n; j++) {\n            for (k = 0; k < n; k++) {\n                for\
    \ (l = 0; l < n; l++) {\n                    for (m = 0; m < n; m++) {\n     \
    \                   if (i == j) {\n                            continue;\n   \
    \                     }\n                        if (k == l) {\n             \
    \               continue;\n                        }\n                       \
    \ if (m == i) {\n                            continue;\n                     \
    \   }\n                        if (m == j) {\n                            continue;\n\
    \                        }\n                        if (m == k) {\n          \
    \                  continue;\n                        }\n                    \
    \    if (m == l) {\n                            continue;\n                  \
    \      }\n                        if (i < j) {\n                            if\
    \ (k < l) {\n                                if (m < i) {\n                  \
    \                  if (m < k) {\n                                        result\
    \ = result + 1;\n                                    }\n                     \
    \           }\n                            }\n                        }\n    \
    \                }\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3503kpgh.d(62): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427e6d]\\n??:? void tmp3503kpgh.__unittest_L58_C1()\
    \ [0x427b54]\\n??:? void tmp3503kpgh.__modtest() [0x427bec]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb93]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42aa26]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fbb9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a9fd]\\n??:? runModuleUnitTests [0x42b969]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4282bc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428243]\\n??:? _d_run_main [0x4281ae]\\n??:? main [0x427bff]\\\
    n??:? __libc_start_main [0x403554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8vnr9m5b.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmp8vnr9m5b.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmp8vnr9m5b.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0x89b42554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    for (long i = 0; i < n; i++) \n    {\n        for (long j = 0; j <\
    \ n; j++) \n        {\n            if (i < j) \n            {\n              \
    \  result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmamz2e1x.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmpmamz2e1x.__unittest_L30_C1()\
    \ [0x427a84]\\n??:? void tmpmamz2e1x.__modtest() [0x427b1c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b2f]\\\
    n??:? __libc_start_main [0xd4bed554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long result\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    for (i = 0; i < n; i++) \n    {\n\
    \        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n      \
    \      {\n                result++;\n            }\n        }\n    }\n    return\
    \ result;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8x68yqix.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp8x68yqix.__unittest_L32_C1()\
    \ [0x427a8c]\\n??:? void tmp8x68yqix.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x7ee34554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) \n    {\n        left_to_right[i]\
    \ = i;\n        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++)\
    \ \n    {\n        for (j = 0; j < n; j++) \n        {\n            if (left_to_right[i]\
    \ == right_to_left[j]) \n            {\n                count++;\n           \
    \ }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpezfx6jvk.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpezfx6jvk.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmpezfx6jvk.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x84724554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r\
    \ = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n \
    \   long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2wj0pxrg.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmp2wj0pxrg.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2wj0pxrg.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long count;\n    count = 0;\n    for (i = 0; i < n; i++) \n  \
    \  {\n        for (j = 0; j < n; j++) \n        {\n            if (i < j) \n \
    \           {\n                count = count + 1;\n            }\n        }\n\
    \    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpfq32vhfx.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dad]\\n??:? void tmpfq32vhfx.__unittest_L33_C1()\
    \ [0x427a98]\\n??:? void tmpfq32vhfx.__modtest() [0x427b30]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bad3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a966]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa85]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a93d]\\n??:? runModuleUnitTests [0x42b8a9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281fc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428183]\\n??:? _d_run_main [0x4280ee]\\n??:? main [0x427b43]\\\
    n??:? __libc_start_main [0x2e5bd554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n;\n    long a[n], b[n];\n    long c[n], d[n];\n    long e[n], f[n];\n\
    \    long g[n], h[n];\n    long x[n], y[n];\n    long z[n], w[n];\n    long p[n],\
    \ q[n];\n    long r[n], s[n];\n    long t[n], u[n];\n    long v[n], o[n];\n  \
    \  long collisions = 0;\n    for (i = 0; i < n; i++) {\n        a[i] = i;\n  \
    \      b[i] = i;\n        c[i] = i;\n        d[i] = i;\n        e[i] = i;\n  \
    \      f[i] = i;\n        g[i] = i;\n        h[i] = i;\n        x[i] = i;\n  \
    \      y[i] = i;\n        z[i] = i;\n        w[i] = i;\n        p[i] = i;\n  \
    \      q[i] = i;\n        r[i] = i;\n        s[i] = i;\n        t[i] = i;\n  \
    \      u[i] = i;\n        v[i] = i;\n        o[i] = i;\n    }\n    for (j = 0;\
    \ j < n; j++) {\n        for (k = 0; k < n; k++) {\n            if (a[j] > b[k])\
    \ {\n                collisions++;\n            }\n        }\n    }\n    for (l\
    \ = 0; l < n; l++) {\n        for (m = 0; m < n; m++) {\n            if (c[l]\
    \ > d[m]) {\n                collisions++;\n            }\n        }\n    }\n\
    \    for (l = 0; l < n; l++) {\n        for (m = 0; m < n; m++) {\n          \
    \  if (e[l] > f[m]) {\n                collisions++;\n            }\n        }\n\
    \    }\n    for (l = 0; l\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpezmpdjd2.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmpezmpdjd2.d(18): Error: multiple declarations must\
    \ have the same type, not `long[n]` and `long[n]`\\n/tmp/tmpezmpdjd2.d(18): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] b`\\n/tmp/tmpezmpdjd2.d(19):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] c`\\n/tmp/tmpezmpdjd2.d(19):\
    \ Error: multiple declarations must have the same type, not `long[n]` and `long[n]`\\\
    n/tmp/tmpezmpdjd2.d(19): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] d`\\n/tmp/tmpezmpdjd2.d(20): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `long[n] e`\\n/tmp/tmpezmpdjd2.d(20): Error: multiple declarations\
    \ must have the same type, not `long[n]` and `long[n]`\\n/tmp/tmpezmpdjd2.d(20):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] f`\\n/tmp/tmpezmpdjd2.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] g`\\n/tmp/tmpezmpdjd2.d(21):\
    \ Error: multiple declarations must have the same type, not `long[n]` and `long[n]`\\\
    n/tmp/tmpezmpdjd2.d(21): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] h`\\n/tmp/tmpezmpdjd2.d(22): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `long[n] x`\\n/tmp/tmpezmpdjd2.d(22): Error: multiple declarations\
    \ must have the same type, not `long[n]` and `long[n]`\\n/tmp/tmpezmpdjd2.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] y`\\n/tmp/tmpezmpdjd2.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] z`\\n/tmp/tmpezmpdjd2.d(23):\
    \ Error: multiple declarations must have the same type, not `long[n]` and `long[n]`\\\
    n/tmp/tmpezmpdjd2.d(23): Deprecation: instead of C-style syntax, use D-style syntax\
    \ `long[n] w`\\n/tmp/tmpezmpdjd2.d(24): Deprecation: instead of C-style syntax,\
    \ use D-style syntax `long[n] p`\\n/tmp/tmpezmpdjd2.d(24): Error: multiple declarations\
    \ must have the same type, not `long[n]` and `long[n]`\\n/tmp/tmpezmpdjd2.d(24):\
    \ Deprecation: instead of C"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    return n * (n\
    \ - 1) / 2;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\n   \
    \ assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpbzzbvyjy.d(23): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d5d]\\n??:? void tmpbzzbvyjy.__unittest_L19_C1()\
    \ [0x427a44]\\n??:? void tmpbzzbvyjy.__modtest() [0x427adc]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42ba83]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a916]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faa9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff58]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa35]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a8ed]\\n??:? runModuleUnitTests [0x42b859]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ac]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428133]\\n??:? _d_run_main [0x42809e]\\n??:? main [0x427aef]\\\
    n??:? __libc_start_main [0xb0c1f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left = new\
    \ long[n];\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n\
    \    long m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa = 0;\n    long\
    \ bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n    long ff =\
    \ 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long jj = 0;\n\
    \    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long nn = 0;\n    long\
    \ oo = 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss =\
    \ 0;\n    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n\
    \    long xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n   \
    \ long bbb = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n   \
    \ long fff = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n   \
    \ long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n   \
    \ long nnn = 0;\n    long ooo = 0;\n    long ppp = 0;\n    long qqq = 0;\n   \
    \ long rrr = 0;\n    long sss = 0;\n    long ttt = 0;\n    long\nunittest\n{\n\
    \    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp26wt89u_.d(83): Error: no identifier for declarator `long`\\\
    n/tmp/tmp26wt89u_.d(83): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp26wt89u_.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b\
    \ = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n \
    \   long g = 0;\n    long h = 0;\n    long ii = 0;\n    long jj = 0;\n    long\
    \ kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long pp = 0;\n    long qq =\
    \ 0;\n    long rr = 0;\n    long ss = 0;\n    long tt = 0;\n    long uu = 0;\n\
    \    long vv = 0;\n    long ww = 0;\n    long xx = 0;\n    long yy = 0;\n    long\
    \ zz = 0;\n    long aa = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd =\
    \ 0;\n    long ee = 0;\n    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n\
    \    long iii = 0;\n    long jjj = 0;\n    long kkk = 0;\n    long lll = 0;\n\
    \    long mmm = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n\
    \    long sss = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n\
    \    long www = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long zzz = 0;\n\
    \    long aaaa = 0;\n    long bbbb = 0;\n    long cccc = 0;\nunittest\n{\n   \
    \ alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp472r59d9.d(85): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp472r59d9.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long count;\n    long[] left_to_right;\n    long[]\
    \ right_to_left;\n    long[] left_to_right_sorted;\n    long[] right_to_left_sorted;\n\
    \    count = 0;\n    left_to_right = new long[n];\n    right_to_left = new long[n];\n\
    \    left_to_right_sorted = new long[n];\n    right_to_left_sorted = new long[n];\n\
    \    for (i = 0; i < n; i++) {\n        left_to_right[i] = random(0, 100000000);\n\
    \        right_to_left[i] = random(0, 100000000);\n    }\n    for (i = 0; i <\
    \ n; i++) {\n        left_to_right_sorted[i] = left_to_right[i];\n        right_to_left_sorted[i]\
    \ = right_to_left[i];\n    }\n    sort(left_to_right_sorted);\n    sort(right_to_left_sorted);\n\
    \    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n          \
    \  if (left_to_right_sorted[i] == left_to_right[j]) {\n                for (k\
    \ = 0; k < n; k++) {\n                    if (right_to_left_sorted[k] == right_to_left[j])\
    \ {\n                        count = count + 1;\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp2szpa2cy.d(31): Error: undefined identifier `random`\\n/tmp/tmp2szpa2cy.d(32):\
    \ Error: undefined identifier `random`\\n/tmp/tmp2szpa2cy.d(38): Error: undefined\
    \ identifier `sort`, did you mean function `sqrt`?\\n/tmp/tmp2szpa2cy.d(39): Error:\
    \ undefined identifier `sort`, did you mean function `sqrt`?\\nFailed: [\"dmd\"\
    , \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2szpa2cy.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long[] left_to_right = new long[n];\n\
    \    long[] right_to_left = new long[n];\n    for (i = 0; i < n; i++) \n    {\n\
    \        left_to_right[i] = i;\n        right_to_left[i] = n - i - 1;\n    }\n\
    \    for (i = 0; i < n; i++) \n    {\n        for (j = 0; j < n; j++) \n     \
    \   {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpra0dkcof.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmpra0dkcof.__unittest_L39_C1()\
    \ [0x427e3c]\\n??:? void tmpra0dkcof.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x3577f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long[] left_to_right\
    \ = new long[n];\n    long[] right_to_left = new long[n];\n    long i = 0;\n \
    \   while (i < n) \n    {\n        left_to_right[i] = i;\n        right_to_left[i]\
    \ = n - i - 1;\n        i = i + 1;\n    }\n    long collisions = 0;\n    i = 0;\n\
    \    while (i < n) \n    {\n        long j = 0;\n        while (j < n) \n    \
    \    {\n            if (left_to_right[i] == right_to_left[j]) \n            {\n\
    \                collisions = collisions + 1;\n            }\n            j =\
    \ j + 1;\n        }\n        i = i + 1;\n    }\n    return collisions;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp_mru6d1d.d(47): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x42815d]\\n??:? void tmp_mru6d1d.__unittest_L43_C1()\
    \ [0x427e48]\\n??:? void tmp_mru6d1d.__modtest() [0x427ee0]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c15b]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afee]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430279]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430728]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x430205]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afc5]\\n??:? runModuleUnitTests [0x42bf31]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428620]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4285a7]\\n??:? _d_run_main [0x428512]\\n??:? main [0x427ef3]\\\
    n??:? __libc_start_main [0x1ee19554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long* left = new long[n];\n    long* right = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        left[i] = i;\n        right[i] =\
    \ n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left[i] == right[j]) \n           \
    \ {\n                count++;\n                for (k = j; k < n - 1; k++) \n\
    \                {\n                    right[k] = right[k + 1];\n           \
    \     }\n                n--;\n                break;\n            }\n       \
    \ }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpeng7vk8y.d(19): Error: cannot implicitly convert expression `new\
    \ long[](cast(ulong)n)` of type `long[]` to `long*`\\n/tmp/tmpeng7vk8y.d(20):\
    \ Error: cannot implicitly convert expression `new long[](cast(ulong)n)` of type\
    \ `long[]` to `long*`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeng7vk8y.d\"\
    , \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long collisions\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    while (i < n && j < n) \n    {\n\
    \        if (i < j) \n        {\n            collisions++;\n            i++;\n\
    \        } \n        else \n        {\n            j++;\n        }\n    }\n  \
    \  return collisions;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpdmis9uq9.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d8d]\\n??:? void tmpdmis9uq9.__unittest_L34_C1()\
    \ [0x427a74]\\n??:? void tmpdmis9uq9.__modtest() [0x427b0c]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bab3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a946]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fad9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff88]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa65]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a91d]\\n??:? runModuleUnitTests [0x42b889]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281dc]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428163]\\n??:? _d_run_main [0x4280ce]\\n??:? main [0x427b1f]\\\
    n??:? __libc_start_main [0x19cb7554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            for (k = 0; k < n; k++) {\n                if (i == j &&\
    \ j == k) {\n                    count++;\n                }\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp1krw8kfe.d(34): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427dc5]\\n??:? void tmp1krw8kfe.__unittest_L30_C1()\
    \ [0x427aac]\\n??:? void tmp1krw8kfe.__modtest() [0x427b44]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42baeb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a97e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb11]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a955]\\n??:? runModuleUnitTests [0x42b8c1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428214]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42819b]\\n??:? _d_run_main [0x428106]\\n??:? main [0x427b57]\\\
    n??:? __libc_start_main [0x96653554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    while (i < n) \n    {\n        while\
    \ (j < n) \n        {\n            if (i == j) \n            {\n             \
    \   j++;\n                continue;\n            }\n            if (i > j) \n\
    \            {\n                count++;\n            }\n            j++;\n  \
    \      }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmptr5a1y2u.d(43): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmptr5a1y2u.__unittest_L39_C1()\
    \ [0x427a90]\\n??:? void tmptr5a1y2u.__modtest() [0x427b28]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b3b]\\\
    n??:? __libc_start_main [0x99c77554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i;\n  \
    \  long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n\
    \    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n\
    \    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long aa;\n\
    \    long ab;\n    long ac;\n    long ad;\n    long ae;\n    long af;\n    long\
    \ ag;\n    long ah;\n    long ai;\n    long aj;\n    long ak;\n    long al;\n\
    \    long am;\n    long an;\n    long ao;\n    long ap;\n    long aq;\n    long\
    \ ar;\n    long as;\n    long at;\n    long au;\n    long av;\n    long aw;\n\
    \    long ax;\n    long ay;\n    long az;\n    long ba;\n    long bb;\n    long\
    \ bc;\n    long bd;\n    long be;\n    long bf;\n    long bg;\n    long bh;\n\
    \    long bi;\n    long bj;\n    long bk;\n    long bl;\n    long bm;\n    long\
    \ bn;\n    long bo;\n    long bp;\n    long bq;\n    long br;\n    long bs;\n\
    \    long bt;\n    long bu;\n    long bv;\n    long bw;\n    long bx;\n    long\
    \ by;\n    long bz;\n    long ca;\n    long cb;\n    long cc;\n    long cd;\n\
    \    long ce;\n    long cf;\n    long cg;\n    long ch;\n    long ci;\n    long\
    \ cj;\n    long ck;\n    long cl;\n    long cm;\n    long cn;\n    long co;\n\
    \    long cp;\n    long cq;\n    long cr;\n    long cs;\n    long ct;\n    long\
    \ cu;\n    long cv;\n    long cw;\n    long cx;\n    long cy;\n   \nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpnr42gmg_.d(113): Error: found `unittest` instead of statement\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnr42gmg_.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long collisions = 0;\n    float[] left_to_right_cars = new float[n];\n  \
    \  float[] right_to_left_cars = new float[n];\n    float[] left_to_right_cars_copy\
    \ = new float[n];\n    float[] right_to_left_cars_copy = new float[n];\n    float[]\
    \ left_to_right_cars_copy_copy = new float[n];\n    float[] right_to_left_cars_copy_copy\
    \ = new float[n];\n    float[] left_to_right_cars_copy_copy_copy = new float[n];\n\
    \    float[] right_to_left_cars_copy_copy_copy = new float[n];\n    float[] left_to_right_cars_copy_copy_copy_copy\
    \ = new float[n];\n    float[] right_to_left_cars_copy_copy_copy_copy = new float[n];\n\
    \    float[] left_to_right_cars_copy_copy_copy_copy_copy = new float[n];\n   \
    \ float[] right_to_left_cars_copy_copy_copy_copy_copy = new float[n];\n    float[]\
    \ left_to_right_cars_copy_copy_copy_copy_copy_copy = new float[n];\n    float[]\
    \ right_to_left_cars_copy_copy_copy_copy_copy_copy = new float[n];\n    float[]\
    \ left_to_right_cars_copy_copy_copy_copy_copy_copy_copy = new float[n];\n    float[]\
    \ right_to_left_cars_copy_copy_copy_copy_copy_copy_copy = new float[n];\n    float[]\
    \ left_to_right_cars_copy_copy_copy_copy_copy_copy_copy_copy = new float[n];\n\
    \    float[] right_to_left_cars_copy_copy_copy_copy_copy_copy_copy_copy = new\
    \ float[n];\n    float[] left_to_right_cars_copy_copy_copy_copy_copy_copy_copy_copy_copy\
    \ = new float[n];\n    float[] right_to_left\nunittest\n{\n    alias candidate\
    \ = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp0nvea34w.d(39): Error: semicolon expected, not `unittest`\\n/tmp/tmp0nvea34w.d(39):\
    \ Error: found `unittest` instead of statement\\nFailed: [\"dmd\", \"-unittest\"\
    , \"-v\", \"-o-\", \"/tmp/tmp0nvea34w.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++)\
    \ {\n            if (i - j == 0) {\n                count++;\n            }\n\
    \        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp4qu80pio.d(32): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427d9d]\\n??:? void tmp4qu80pio.__unittest_L28_C1()\
    \ [0x427a88]\\n??:? void tmp4qu80pio.__modtest() [0x427b20]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bac3]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a956]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fae9]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff98]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa75]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a92d]\\n??:? runModuleUnitTests [0x42b899]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281ec]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x428173]\\n??:? _d_run_main [0x4280de]\\n??:? main [0x427b33]\\\
    n??:? __libc_start_main [0xa685554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpmcj_vgbn.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmpmcj_vgbn.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmpmcj_vgbn.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x600bc554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long a[n];\n    long b[n];\n    long c[n];\n    long d[n];\n    long e[n];\n\
    \    long f[n];\n    long g[n];\n    long h[n];\n    long i1[n];\n    long j1[n];\n\
    \    long k1[n];\n    long l[n];\n    long m[n];\n    long n1[n];\n    long o[n];\n\
    \    long p[n];\n    long q[n];\n    long r[n];\n    long s[n];\n    long t[n];\n\
    \    long u[n];\n    long v[n];\n    long w[n];\n    long x[n];\n    long y[n];\n\
    \    long z[n];\n    long aa[n];\n    long bb[n];\n    long cc[n];\n    long dd[n];\n\
    \    long ee[n];\n    long ff[n];\n    long gg[n];\n    long hh[n];\n    long\
    \ ii[n];\n    long jj[n];\n    long kk[n];\n    long ll[n];\n    long mm[n];\n\
    \    long nn[n];\n    long oo[n];\n    long pp[n];\n    long qq[n];\n    long\
    \ rr[n];\n    long ss[n];\n    long tt[n];\n    long uu[n];\n    long vv[n];\n\
    \    long ww[n];\n    long xx[n];\n    long yy[n];\n    long zz[n];\n    long\
    \ aaa[n];\n    long bbb[n];\n    long ccc[n];\n    long ddd[n];\n    long eee[n];\n\
    \    long fff[n];\n    long ggg[n];\n    long hhh[n];\n    long iii[n];\n    long\
    \ jjj[n];\n    long kkk[n];\n    long lll[n];\n    long mmm[n];\n    long nnn[n];\n\
    \    long ooo\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpiopvdobu.d(18): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmpiopvdobu.d(19): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] b`\\n/tmp/tmpiopvdobu.d(20): Deprecation:\
    \ instead of C-style syntax, use D-style syntax `long[n] c`\\n/tmp/tmpiopvdobu.d(21):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] d`\\n/tmp/tmpiopvdobu.d(22):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] e`\\n/tmp/tmpiopvdobu.d(23):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] f`\\n/tmp/tmpiopvdobu.d(24):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] g`\\n/tmp/tmpiopvdobu.d(25):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] h`\\n/tmp/tmpiopvdobu.d(26):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] i1`\\n/tmp/tmpiopvdobu.d(27):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] j1`\\n/tmp/tmpiopvdobu.d(28):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] k1`\\n/tmp/tmpiopvdobu.d(29):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] l`\\n/tmp/tmpiopvdobu.d(30):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] m`\\n/tmp/tmpiopvdobu.d(31):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] n1`\\n/tmp/tmpiopvdobu.d(32):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] o`\\n/tmp/tmpiopvdobu.d(33):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] p`\\n/tmp/tmpiopvdobu.d(34):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] q`\\n/tmp/tmpiopvdobu.d(35):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] r`\\n/tmp/tmpiopvdobu.d(36):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] s`\\n/tmp/tmpiopvdobu.d(37):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] t`\\n/tmp/tmpiopvdobu.d(38):\
    \ Deprecation: instead of C-style syntax, use D-style syntax `long[n] u`\\n/tmp/tmpiopvdobu.d(39):\
    \ De"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmpu4nl8nd2.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmpu4nl8nd2.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu4nl8nd2.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k,\
    \ l, m, n, o, p, q, r, s, t, u, v, w, x, y, z;\n    long a, b, c, d, e, f, g,\
    \ h;\n    long result;\n    long a[n];\n    long b[n];\n    result = 0;\n    for\
    \ (i = 0; i < n; i++) {\n        a[i] = i;\n        b[i] = i;\n    }\n    for\
    \ (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (a[i]\
    \ == b[j]) {\n                result = result + 1;\n            }\n        }\n\
    \    }\n    return result;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp62l_8db3.d(20): Deprecation: instead of C-style syntax, use D-style\
    \ syntax `long[n] a`\\n/tmp/tmp62l_8db3.d(21): Deprecation: instead of C-style\
    \ syntax, use D-style syntax `long[n] b`\\n/tmp/tmp62l_8db3.d(17): Error: variable\
    \ `n` is shadowing variable `tmp62l_8db3.car_race_collision.n`\\n/tmp/tmp62l_8db3.d(20):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmp62l_8db3.d(20):\
    \ Error: declaration `tmp62l_8db3.car_race_collision.a` is already defined\\n/tmp/tmp62l_8db3.d(21):\
    \ Error: variable `n` cannot be read at compile time\\n/tmp/tmp62l_8db3.d(21):\
    \ Error: declaration `tmp62l_8db3.car_race_collision.b` is already defined\\n/tmp/tmp62l_8db3.d(24):\
    \ Error: only one index allowed to index `long`\\n/tmp/tmp62l_8db3.d(25): Error:\
    \ only one index allowed to index `long`\\n/tmp/tmp62l_8db3.d(29): Error: only\
    \ one index allowed to index `long`\\n/tmp/tmp62l_8db3.d(29): Error: only one\
    \ index allowed to index `long`\\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"\
    -o-\", \"/tmp/tmp62l_8db3.d\", \"-I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n;\
    \ j++) {\n            for (k = 0; k < n; k++) {\n                if (i == j ||\
    \ j == k || i == k) {\n                    continue;\n                }\n    \
    \            if (i < j && j < k) {\n                    count++;\n           \
    \     }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n\
    \    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmpro27qb4h.d(37): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427ddd]\\n??:? void tmpro27qb4h.__unittest_L33_C1()\
    \ [0x427ac8]\\n??:? void tmpro27qb4h.__modtest() [0x427b60]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bb03]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a996]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42fb29]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a96d]\\n??:? runModuleUnitTests [0x42b8d9]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x42822c]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x4281b3]\\n??:? _d_run_main [0x42811e]\\n??:? main [0x427b73]\\\
    n??:? __libc_start_main [0x52f7a554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count;\n\
    \    float x1, x2, y1, y2;\n    count = 0;\n    for (i = 0; i < n; i++) {\n  \
    \      x1 = random();\n        y1 = random();\n        for (j = 0; j < n; j++)\
    \ {\n            x2 = random();\n            y2 = random();\n            if (x1\
    \ > x2 && y1 < y2) {\n                count++;\n            }\n        }\n   \
    \ }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp7xmfas5o.d(21): Error: undefined identifier `random`\\n/tmp/tmp7xmfas5o.d(22):\
    \ Error: undefined identifier `random`\\n/tmp/tmp7xmfas5o.d(24): Error: undefined\
    \ identifier `random`\\n/tmp/tmp7xmfas5o.d(25): Error: undefined identifier `random`\\\
    nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7xmfas5o.d\", \"\
    -I/tmp\"]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long count =\
    \ 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n   \
    \ long m = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long aa\
    \ = 0;\n    long bb = 0;\n    long cc = 0;\n    long dd = 0;\n    long ee = 0;\n\
    \    long ff = 0;\n    long gg = 0;\n    long hh = 0;\n    long ii = 0;\n    long\
    \ jj = 0;\n    long kk = 0;\n    long ll = 0;\n    long mm = 0;\n    long oo =\
    \ 0;\n    long pp = 0;\n    long qq = 0;\n    long rr = 0;\n    long ss = 0;\n\
    \    long tt = 0;\n    long uu = 0;\n    long vv = 0;\n    long ww = 0;\n    long\
    \ xx = 0;\n    long yy = 0;\n    long zz = 0;\n    long aaa = 0;\n    long bbb\
    \ = 0;\n    long ccc = 0;\n    long ddd = 0;\n    long eee = 0;\n    long fff\
    \ = 0;\n    long ggg = 0;\n    long hhh = 0;\n    long iii = 0;\n    long jjj\
    \ = 0;\n    long kkk = 0;\n    long lll = 0;\n    long mmm = 0;\n    long ooo\
    \ = 0;\n    long ppp = 0;\n    long qqq = 0;\n    long rrr = 0;\n    long sss\
    \ = 0;\n    long ttt = 0;\n    long uuu = 0;\n    long vvv = 0;\n    long www\
    \ = 0;\n    long xxx = 0;\n    long yyy = 0;\n    long\nunittest\n{\n    alias\
    \ candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n    assert(candidate(3L)\
    \ == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L) == 64L);\n\
    \    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'/tmp/tmp5mk2lm94.d(85): Error: no identifier for declarator `long`\\\
    n/tmp/tmp5mk2lm94.d(85): Error: found `unittest` instead of statement\\nFailed:\
    \ [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5mk2lm94.d\", \"-I/tmp\"\
    ]\\n'"
  exit_code: 1
  status: SyntaxError
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long result = 0;\n    long[] left_to_right = new long[n];\n    long[] right_to_left\
    \ = new long[n];\n    for (i = 0; i < n; i++) {\n        left_to_right[i] = i;\n\
    \        right_to_left[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n\
    \        for (j = 0; j < n; j++) {\n            if (left_to_right[i] == right_to_left[j])\
    \ {\n                result++;\n            }\n        }\n    }\n    return result;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmps9rstmvq.d(38): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmps9rstmvq.__unittest_L34_C1()\
    \ [0x427e3c]\\n??:? void tmps9rstmvq.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x68f5d554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    long[] left = new long[n];\n    long[]\
    \ right = new long[n];\n    for (i = 0; i < n; i++) {\n        left[i] = i;\n\
    \        right[i] = n - i - 1;\n    }\n    for (i = 0; i < n; i++) {\n       \
    \ for (j = 0; j < n; j++) {\n            if (left[i] == right[j]) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n\
    {\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L) == 4L);\n\
    \    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n    assert(candidate(8L)\
    \ == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp3qds44lv.d(39): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmp3qds44lv.__unittest_L35_C1()\
    \ [0x427e3c]\\n??:? void tmp3qds44lv.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0x1664f554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, count\
    \ = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n   \
    \         if (i < j) {\n                count++;\n            }\n        }\n \
    \   }\n    return count;\n}\nunittest\n{\n    alias candidate = car_race_collision;\n\
    \n    assert(candidate(2L) == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L)\
    \ == 16L);\n    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n\
    }\nvoid main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp8dvlznie.d(31): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp8dvlznie.__unittest_L27_C1()\
    \ [0x427a8c]\\n??:? void tmp8dvlznie.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x248aa554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i, j, k;\n\
    \    long count = 0;\n    long[] left = new long[n];\n    long[] right = new long[n];\n\
    \    for (i = 0; i < n; i++) \n    {\n        left[i] = i;\n        right[i] =\
    \ n - i - 1;\n    }\n    for (i = 0; i < n; i++) \n    {\n        for (j = 0;\
    \ j < n; j++) \n        {\n            if (left[i] < right[j]) \n            {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmprphrxpzc.d(42): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x428155]\\n??:? void tmprphrxpzc.__unittest_L38_C1()\
    \ [0x427e3c]\\n??:? void tmprphrxpzc.__modtest() [0x427ed4]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42c153]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42afe6]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x430271]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x430720]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x4301fd]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42afbd]\\n??:? runModuleUnitTests [0x42bf29]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x428618]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42859f]\\n??:? _d_run_main [0x42850a]\\n??:? main [0x427ee7]\\\
    n??:? __libc_start_main [0xbfdea554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
- program: "import std.math;\n/*\n\n    Imagine a road that's a perfectly straight\
    \ infinitely long line.\n    n cars are driving left to right;  simultaneously,\
    \ a different set of n cars\n    are driving right to left.   The two sets of\
    \ cars start out being very far from\n    each other.  All cars move in the same\
    \ speed.  Two cars are said to collide\n    when a car that's moving left to right\
    \ hits a car that's moving right to left.\n    However, the cars are infinitely\
    \ sturdy and strong; as a result, they continue moving\n    in their trajectory\
    \ as if they did not collide.\n\n    This function outputs the number of such\
    \ collisions.\n    \n*/\nlong car_race_collision(long n) \n{\n    long i = 0;\n\
    \    long j = 0;\n    long count = 0;\n    for (i = 0; i < n; i++)\n    {\n  \
    \      for (j = 0; j < n; j++)\n        {\n            if (i == j)\n         \
    \   {\n                count++;\n            }\n        }\n    }\n    return count;\n\
    }\nunittest\n{\n    alias candidate = car_race_collision;\n\n    assert(candidate(2L)\
    \ == 4L);\n    assert(candidate(3L) == 9L);\n    assert(candidate(4L) == 16L);\n\
    \    assert(candidate(8L) == 64L);\n    assert(candidate(10L) == 100L);\n}\nvoid\
    \ main(){}"
  stdout: b''
  stderr: "b'core.exception.AssertError@/tmp/tmp834qce_8.d(36): unittest failure\\\
    n----------------\\n??:? _d_unittestp [0x427da5]\\n??:? void tmp834qce_8.__unittest_L32_C1()\
    \ [0x427a8c]\\n??:? void tmp834qce_8.__modtest() [0x427b24]\\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*)\
    \ [0x42bacb]\\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*))\
    \ [0x42a95e]\\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref\
    \ rt.sections_elf_shared.DSO) [0x42faf1]\\n??:? int rt.sections_elf_shared.DSO.opApply(scope\
    \ int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffa0]\\n??:? int rt.minfo.moduleinfos_apply(scope\
    \ int delegate(immutable(object.ModuleInfo*))) [0x42fa7d]\\n??:? int object.ModuleInfo.opApply(scope\
    \ int delegate(object.ModuleInfo*)) [0x42a935]\\n??:? runModuleUnitTests [0x42b8a1]\\\
    n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll()\
    \ [0x4281f4]\\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope\
    \ void delegate()) [0x42817b]\\n??:? _d_run_main [0x4280e6]\\n??:? main [0x427b37]\\\
    n??:? __libc_start_main [0x9f146554]\\n1/1 unittests FAILED\\n'"
  exit_code: 1
  status: Exception
