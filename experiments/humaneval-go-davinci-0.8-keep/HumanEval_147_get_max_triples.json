{
  "name": "HumanEval_147_get_max_triples",
  "language": "go_test.go",
  "prompt": "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You are given a positive integer n. You have to create an integer array a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// Input: n = 5\n// Output: 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n",
  "tests": "func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "completions": [
    "    sum := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    fmt.Println(i, j, k)\n                    sum += 1\n                }\n            }\n        }\n    }\n    return sum\n}\n",
    "    // Write your code here\n    res := 0\n    if n < 3 {\n        return res\n    }\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    res++\n                }\n            }\n        }\n    }\n    return res\n}\n",
    "    count := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if ((i*i - i + 1) + (j*j - j + 1) + (k*k - k + 1)) % 3 == 0 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    var sum int\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n                sum += 1\n            }\n        }\n    }\n    return sum\n}\n",
    "    var res int\n    if n < 3 {\n        return res\n    }\n    var sum int\n    for i := 1; i < n - 1; i++ {\n        sum = i * i - i + 1\n        for j := i + 1; j < n; j++ {\n            sum += j * j - j + 1\n            if sum % 3 == 0 {\n                res++\n            }\n        }\n    }\n    return res\n}\n",
    "    if n < 3 {\n        return 0\n    }\n    cnt := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    cnt++\n                }\n            }\n        }\n    }\n    return cnt\n}\n",
    "    var count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n                }\n            }\n        }\n    }\n    return count\n}\n",
    "    if n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i - 1] = i * i - i + 1\n    }\n    res := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res++\n                }\n            }\n        }\n    }\n    return res\n}\n",
    "    ret := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            k := n - (i + j)\n            // fmt.Println(i, j, k)\n            if k > j && (i + j + k) % 3 == 0 {\n                ret++\n            }\n        }\n    }\n    return ret\n}\n",
    "    mod := make([]int, 3)\n    for i := 1; i <= n; i++ {\n        mod[((i * i - i + 1) % 3)]++\n    }\n    return mod[0] * mod[0] * mod[0] + mod[1] * mod[1] * mod[2] * 2 + mod[2] * mod[2] * mod[2]\n}\n",
    "    return (n - 2) * (n - 1) / 2\n}\n",
    "    if n < 3 {\n        return 0\n    }\n    var dp [][]int\n    for i := 0; i < 3; i++ {\n        dp = append(dp, make([]int, n))\n    }\n    for i := 2; i < n; i++ {\n        for j := 0; j < 3; j++ {\n            dp[j][i] = dp[j][i - 1]\n        }\n        v := (i + 1) * (i + 1) - i - 1\n        v2 := v % 3\n        dp[v2][i]++\n    }\n    var res int\n    for i := 2; i < n; i++ {\n        for j := 0; j < 3; j++ {\n            res += dp[j][i] * dp[(3 - j) % 3][i - 1]\n        }\n    }\n    return res\n}\n",
    "    if n < 3 {\n        return 0\n    }\n    // todo\n    return 0\n}\n",
    "    if n < 3 {\n        return 0\n    }\n    res := 0\n    // \u5982\u679cn\u4e3a\u5076\u6570\uff0c\u5219a\u7684\u957f\u5ea6\u4e3a\u5947\u6570\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e3a21.\n    // \u5982\u679cn\u4e3a\u5947\u6570\uff0c\u5219a\u7684\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u4e14\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e3a1.\n    // \u56e0\u6b64\uff0c\u82e5n\u4e3a\u5076\u6570\uff0c\u5219\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f5c\u4e3a\u6700\u5927\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u82e5n\u4e3a\u5947\u6570\uff0c\u5219\u53ef\u4ee5\u3002\n    // \u6240\u4ee5\uff0c\u53ea\u8981\u5c06(n+1)/2\u5230n\u4f5c\u4e3a\u6700\u5927\u7684\u4e00\u4e2a\u5143\u7d20\u5373\u53ef\u3002\n    for i := n; i >= (n+1)/2; i-- {\n        // \u4ee5i\u4e3a\u6700\u5927\u5143\u7d20\uff0c\u6c42\u89e3\u53ef\u80fd\u7684\u7ec4\u5408\u3002\n        for j := 1; j < i; j++ {\n            for k := j+1; k < i; k++ {\n                if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0 {\n                    res++\n                }\n            }\n        }\n    }\n    return res\n}\n",
    "    sum_mod := 0\n    if n >= 3 {\n        sum_mod = ((n - 2) * (n - 1) * n) / 6 * 2\n    }\n\n    return sum_mod\n}\n",
    "    var count int = 0\n\n    for i := 1; i < n; i++ {\n        ai := i * i - i + 1\n        for j := i + 1; j < n; j++ {\n            aj := j * j - j + 1\n            sum := ai + aj\n            if (sum % 3 == 0) {\n                count += n - j\n            }\n        }\n    }\n\n    return count\n}\n",
    "    var count = 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n            if (i + j) % 3 == 0 {\n                count++\n            }\n        }\n    }\n    return count\n}\n",
    "    var table = make([]int, n + 1)\n    table[0] = 0\n    table[1] = 1\n    for i := 2; i <= n; i++ {\n        if i % 3 == 1 {\n            table[i] = table[i - 1] + 1\n        } else {\n            table[i] = table[i - 1]\n        }\n    }\n    fmt.Println(table)\n    return table[n]\n}\n",
    "    c := 0\n    // \u5168\u6392\u5217\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if is_triple(i, j, k) {\n                    c++\n                }\n            }\n        }\n    }\n    return c\n}\n",
    "    counter := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    counter++\n                }\n            }\n        }\n    }\n    return counter\n}\n"
  ],
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ]
}