name: HumanEval_120_maximum
language: js
results:
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmpvay91lpi.js:25:10)\n    at Object.<anonymous> (/tmp/tmpvay91lpi.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = arr[0];\n    let maxIndex = 0;\n    let i = 0;\n    while(i\
    \ < k){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j] >\
    \ max){\n                max = arr[j];\n                maxIndex = j;\n      \
    \      }\n        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n\
    \        max = arr[0];\n        maxIndex = 0;\n        i++;\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp0jafn_w3.js:42:10)\n    at Object.<anonymous> (/tmp/tmp0jafn_w3.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpqnain757.js:38:10)\n    at Object.<anonymous> (/tmp/tmpqnain757.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp26n2rfbq.js:38:10)\n    at Object.<anonymous> (/tmp/tmp26n2rfbq.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpt5lzt5qe.js:38:10)\n    at Object.<anonymous> (/tmp/tmpt5lzt5qe.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let sorted = arr.sort((a, b) => b - a);\n    for(let i = 0; i < k;\
    \ i++){\n        result.push(sorted[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpxfr495cu.js:30:10)\n    at Object.<anonymous> (/tmp/tmpxfr495cu.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpt0w2n5zt.js:38:10)\n    at Object.<anonymous> (/tmp/tmpt0w2n5zt.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpv_jwdg1w.js:38:10)\n    at Object.<anonymous> (/tmp/tmpv_jwdg1w.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpqhv6jxxl.js:38:10)\n    at Object.<anonymous> (/tmp/tmpqhv6jxxl.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    let result = [];\n    for(let i = 0; i < k;\
    \ i++){\n        result.push(sorted[sorted.length - (i + 1)]);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp3h8a8kun.js:30:10)\n    at Object.<anonymous> (/tmp/tmp3h8a8kun.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp6odlb_n_.js:38:10)\n    at Object.<anonymous> (/tmp/tmp6odlb_n_.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    let result = [];\n    for(let i = 0; i < k;\
    \ i++){\n        result.push(sorted[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpcn26lh1o.js:30:10)\n    at Object.<anonymous> (/tmp/tmpcn26lh1o.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpl0x0san6.js:26:10)\n    at Object.<anonymous> (/tmp/tmpl0x0san6.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = Math.max(...arr);\n\
    \        result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpiai36c15.js:31:10)\n    at Object.<anonymous> (/tmp/tmpiai36c15.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpvyp2qyky.js:26:10)\n    at Object.<anonymous> (/tmp/tmpvyp2qyky.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpbxkhzpj3.js:38:10)\n    at Object.<anonymous> (/tmp/tmpbxkhzpj3.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp9xuze4s4.js:38:10)\n    at Object.<anonymous> (/tmp/tmp9xuze4s4.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n    let sorted = arr.sort((a,b) => b-a);\n    return sorted.slice(0,k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpr8lxndto.js:27:10)\n    at Object.<anonymous> (/tmp/tmpr8lxndto.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpie33c26z.js:38:10)\n    at Object.<anonymous> (/tmp/tmpie33c26z.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpw7eyvsgk.js:38:10)\n    at Object.<anonymous> (/tmp/tmpw7eyvsgk.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpzkrc7gan.js:38:10)\n    at Object.<anonymous> (/tmp/tmpzkrc7gan.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let sortedArr = arr.sort((a, b) => b - a);\n    for(let i = 0; i\
    \ < k; i++){\n        result.push(sortedArr[i]);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpy4bb0cdd.js:30:10)\n    at Object.<anonymous> (/tmp/tmpy4bb0cdd.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmplfczclwk.js:38:10)\n    at Object.<anonymous> (/tmp/tmplfczclwk.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp8pdweeek.js:38:10)\n    at Object.<anonymous> (/tmp/tmp8pdweeek.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmpejdlmq_4.js:25:10)\n    at Object.<anonymous> (/tmp/tmpejdlmq_4.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp791ntwkl.js:38:10)\n    at Object.<anonymous> (/tmp/tmp791ntwkl.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = -Infinity;\n    let maxIndex = 0;\n    for(let i = 0; i\
    \ < k; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpg7buzbzc.js:39:10)\n    at Object.<anonymous> (/tmp/tmpg7buzbzc.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpvw3es2pe.js:38:10)\n    at Object.<anonymous> (/tmp/tmpvw3es2pe.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = [];\n\
    \    for(let i = 0; i < k; i++){\n        let maxNum = arr[0];\n        let maxIndex\
    \ = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j] >\
    \ maxNum){\n                maxNum = arr[j];\n                maxIndex = j;\n\
    \            }\n        }\n        max.push(maxNum);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpnerj66gd.js:38:10)\n    at Object.<anonymous> (/tmp/tmpnerj66gd.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0)\
    \ return [];\n    if(k === arr.length) return arr;\n    let result = [];\n   \
    \ for(let i = 0; i < arr.length; i++){\n        if(result.length < k){\n     \
    \       result.push(arr[i]);\n        } else {\n            let min = result[0];\n\
    \            let minIndex = 0;\n            for(let j = 1; j < result.length;\
    \ j++){\n                if(result[j] < min){\n                    min = result[j];\n\
    \                    minIndex = j;\n                }\n            }\n       \
    \     if(arr[i] > min){\n                result[minIndex] = arr[i];\n        \
    \    }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -3, -4, 5 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmptoxoeadn.js:45:10)\n    at Object.<anonymous> (/tmp/tmptoxoeadn.js:58:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ -3, -4, 5 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp1dw7ccx0.js:38:10)\n    at Object.<anonymous> (/tmp/tmp1dw7ccx0.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpugw2608w.js:38:10)\n    at Object.<anonymous> (/tmp/tmpugw2608w.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmpukebv1i4.js:25:10)\n    at Object.<anonymous> (/tmp/tmpukebv1i4.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp33d7wgp_.js:26:10)\n    at Object.<anonymous> (/tmp/tmp33d7wgp_.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpxvyb5pew.js:38:10)\n    at Object.<anonymous> (/tmp/tmpxvyb5pew.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpdlxwukmg.js:38:10)\n    at Object.<anonymous> (/tmp/tmpdlxwukmg.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = -Infinity;\n    let maxIndex = 0;\n    for(let i = 0; i\
    \ < k; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpvafxckb5.js:39:10)\n    at Object.<anonymous> (/tmp/tmpvafxckb5.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpdxu7rsqy.js:38:10)\n    at Object.<anonymous> (/tmp/tmpdxu7rsqy.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = arr[0];\n    let maxIndex = 0;\n    for(let i = 0; i <\
    \ k; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n        max = arr[0];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -3 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpucckoz4t.js:39:10)\n    at Object.<anonymous> (/tmp/tmpucckoz4t.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -3 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmpwui2p8ng.js:25:10)\n    at Object.<anonymous> (/tmp/tmpwui2p8ng.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = -Infinity;\n    let index = 0;\n    for(let i = 0; i <\
    \ k; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \        max = -Infinity;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpkjm5_mmp.js:39:10)\n    at Object.<anonymous> (/tmp/tmpkjm5_mmp.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = 0;\n    let index = 0;\n    for(let i = 0; i < k; i++){\n\
    \        max = arr[i];\n        index = i;\n        for(let j = i; j < arr.length;\
    \ j++){\n            if(arr[j] > max){\n                max = arr[j];\n      \
    \          index = j;\n            }\n        }\n        result.push(max);\n \
    \       arr[index] = arr[i];\n        arr[i] = max;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpx2ajok0s.js:41:10)\n    at Object.<anonymous> (/tmp/tmpx2ajok0s.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpp3zj0q60.js:38:10)\n    at Object.<anonymous> (/tmp/tmpp3zj0q60.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = 0;\n    let maxIndex = 0;\n    for(let i = 0; i < k; i++){\n\
    \        for(let j = 0; j < arr.length; j++){\n            if(arr[j] > max){\n\
    \                max = arr[j];\n                maxIndex = j;\n            }\n\
    \        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n    \
    \    max = 0;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 0, 0 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpf7goeb5e.js:39:10)\n    at Object.<anonymous> (/tmp/tmpf7goeb5e.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, 0, 0 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = -Infinity;\n    let maxIndex = 0;\n    for(let i = 0; i\
    \ < k; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpnq7qsh9b.js:39:10)\n    at Object.<anonymous> (/tmp/tmpnq7qsh9b.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpic6rzze9.js:38:10)\n    at Object.<anonymous> (/tmp/tmpic6rzze9.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = Math.max(...arr);\n\
    \        result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpme8dvbg3.js:31:10)\n    at Object.<anonymous> (/tmp/tmpme8dvbg3.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        result.push(Math.max(...arr));\n\
    \        arr.splice(arr.indexOf(Math.max(...arr)), 1);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpm_yji0ca.js:30:10)\n    at Object.<anonymous> (/tmp/tmpm_yji0ca.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = [];\n\
    \    for(let i = 0; i < k; i++){\n        let maxNum = arr[0];\n        for(let\
    \ j = 0; j < arr.length; j++){\n            if(arr[j] > maxNum){\n           \
    \     maxNum = arr[j];\n            }\n        }\n        max.push(maxNum);\n\
    \        arr.splice(arr.indexOf(maxNum), 1);\n    }\n    return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpn49f0_0s.js:36:10)\n    at Object.<anonymous> (/tmp/tmpn49f0_0s.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0){\n\
    \        return [];\n    }\n    if(k === arr.length){\n        return arr.sort((a,\
    \ b) => a - b);\n    }\n    let result = [];\n    let max = -Infinity;\n    let\
    \ maxIndex = 0;\n    for(let i = 0; i < k; i++){\n        for(let j = 0; j < arr.length;\
    \ j++){\n            if(arr[j] > max){\n                max = arr[j];\n      \
    \          maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = -Infinity;\n        max = -Infinity;\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 123, 20, 2 ]\n\nshould equal\n\n[ 2, 20,\
    \ 123 ]\n    at test (/tmp/tmp26drl5ao.js:47:10)\n    at Object.<anonymous> (/tmp/tmp26drl5ao.js:57:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 123, 20, 2 ],\n  expected: [ 2, 20, 123\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = -Infinity;\n     \
    \   let maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n        \
    \    if(arr[j] > max){\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpz8f09sy1.js:38:10)\n    at Object.<anonymous> (/tmp/tmpz8f09sy1.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = arr[0];\n    let maxIndex = 0;\n    for(let i = 0; i <\
    \ k; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n        max = arr[0];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -3 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpf_xl75u_.js:39:10)\n    at Object.<anonymous> (/tmp/tmpf_xl75u_.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -3 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    return arr.sort((a,\
    \ b) => b - a).slice(0, k);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpgbqvuphk.js:25:10)\n    at Object.<anonymous> (/tmp/tmpgbqvuphk.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpo_742vgt.js:38:10)\n    at Object.<anonymous> (/tmp/tmpo_742vgt.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmpzhibdtip.js:25:10)\n    at Object.<anonymous> (/tmp/tmpzhibdtip.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = arr.slice(0,\
    \ k).sort((a, b) => b - a);\n    for(let i = k; i < arr.length; i++){\n      \
    \  let j = 0;\n        while(j < k && arr[i] < max[j]){\n            j++;\n  \
    \      }\n        if(j < k){\n            max.splice(j, 0, arr[i]);\n        \
    \    max.pop();\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpqgpwatfw.js:36:10)\n    at Object.<anonymous> (/tmp/tmpqgpwatfw.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpnfbrgqoz.js:38:10)\n    at Object.<anonymous> (/tmp/tmpnfbrgqoz.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = arr[0];\n    let maxIndex = 0;\n    for(let i = 0; i <\
    \ k; i++){\n        max = arr[i];\n        maxIndex = i;\n        for(let j =\
    \ i; j < arr.length; j++){\n            if(arr[j] > max){\n                max\
    \ = arr[j];\n                maxIndex = j;\n            }\n        }\n       \
    \ result.push(max);\n        arr[maxIndex] = arr[i];\n        arr[i] = max;\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmprdeqe1id.js:41:10)\n    at Object.<anonymous> (/tmp/tmprdeqe1id.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    arr.sort((a,\
    \ b) => a - b);\n    return arr.slice(arr.length - k);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmpyczms3cy.js:25:10)\n    at Object.<anonymous> (/tmp/tmpyczms3cy.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = -Infinity;\n     \
    \   let maxIndex = -1;\n        for(let j = 0; j < arr.length; j++){\n       \
    \     if(arr[j] > max){\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmppib7zpef.js:38:10)\n    at Object.<anonymous> (/tmp/tmppib7zpef.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = [];\n\
    \    for(let i = 0; i < k; i++){\n        max.push(Math.max(...arr));\n      \
    \  arr.splice(arr.indexOf(Math.max(...arr)), 1);\n    }\n    return max;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmphp4mzv31.js:29:10)\n    at Object.<anonymous> (/tmp/tmphp4mzv31.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = Math.max(...arr);\n    for(let i = 0; i < k; i++){\n  \
    \      result.push(max);\n        let index = arr.indexOf(max);\n        arr.splice(index,\
    \ 1);\n        max = Math.max(...arr);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpesrd930k.js:33:10)\n    at Object.<anonymous> (/tmp/tmpesrd930k.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = arr[0];\n    let maxIndex = 0;\n    for(let i = 0; i <\
    \ k; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n        max = arr[0];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -3 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpizqmqg_o.js:39:10)\n    at Object.<anonymous> (/tmp/tmpizqmqg_o.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -3 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n    return arr.sort((a,b)=>b-a).slice(0,k)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpkxnc5t_9.js:26:10)\n    at Object.<anonymous> (/tmp/tmpkxnc5t_9.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = 0;\n    let maxIndex = 0;\n    for(let i = 0; i < k; i++){\n\
    \        max = arr[i];\n        maxIndex = i;\n        for(let j = i + 1; j <\
    \ arr.length; j++){\n            if(arr[j] > max){\n                max = arr[j];\n\
    \                maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr[maxIndex] = arr[i];\n        arr[i] = max;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp5g43awga.js:41:10)\n    at Object.<anonymous> (/tmp/tmp5g43awga.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmppk4dru9j.js:25:10)\n    at Object.<anonymous> (/tmp/tmppk4dru9j.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpp1lvrx7r.js:38:10)\n    at Object.<anonymous> (/tmp/tmpp1lvrx7r.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmprpg7o7ot.js:38:10)\n    at Object.<anonymous> (/tmp/tmprpg7o7ot.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmpp82u8gj2.js:25:10)\n    at Object.<anonymous> (/tmp/tmpp82u8gj2.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpb_jdbzae.js:38:10)\n    at Object.<anonymous> (/tmp/tmpb_jdbzae.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpg41rem86.js:26:10)\n    at Object.<anonymous> (/tmp/tmpg41rem86.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0){\n\
    \        return [];\n    }\n    let max = arr[0];\n    let maxIndex = 0;\n   \
    \ let result = [];\n    for(let i = 0; i < k; i++){\n        for(let j = 0; j\
    \ < arr.length; j++){\n            if(arr[j] > max){\n                max = arr[j];\n\
    \                maxIndex = j;\n            }\n        }\n        result.push(max);\n\
    \        arr.splice(maxIndex, 1);\n        max = arr[0];\n        maxIndex = 0;\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpylt8h6fc.js:43:10)\n    at Object.<anonymous> (/tmp/tmpylt8h6fc.js:56:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = Math.max(...arr);\n\
    \        result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp40lgc92v.js:31:10)\n    at Object.<anonymous> (/tmp/tmp40lgc92v.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpo3cle4kp.js:38:10)\n    at Object.<anonymous> (/tmp/tmpo3cle4kp.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp8jsq_ytq.js:38:10)\n    at Object.<anonymous> (/tmp/tmp8jsq_ytq.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpws90dir8.js:38:10)\n    at Object.<anonymous> (/tmp/tmpws90dir8.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = [];\n\
    \    for(let i = 0; i < k; i++){\n        let maxNum = arr[0];\n        let maxIndex\
    \ = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j] >\
    \ maxNum){\n                maxNum = arr[j];\n                maxIndex = j;\n\
    \            }\n        }\n        max.push(maxNum);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp9kuree2_.js:38:10)\n    at Object.<anonymous> (/tmp/tmp9kuree2_.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpfbsi5l_v.js:38:10)\n    at Object.<anonymous> (/tmp/tmpfbsi5l_v.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpbalq0ini.js:38:10)\n    at Object.<anonymous> (/tmp/tmpbalq0ini.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = Math.max(...arr);\n\
    \        result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpsch28dro.js:31:10)\n    at Object.<anonymous> (/tmp/tmpsch28dro.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp5btyx1sz.js:26:10)\n    at Object.<anonymous> (/tmp/tmp5btyx1sz.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmptu1jv1hr.js:26:10)\n    at Object.<anonymous> (/tmp/tmptu1jv1hr.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = -Infinity;\n    let maxIndex = 0;\n    for(let i = 0; i\
    \ < k; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpraoy78g4.js:38:10)\n    at Object.<anonymous> (/tmp/tmpraoy78g4.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpzx7fprb0.js:38:10)\n    at Object.<anonymous> (/tmp/tmpzx7fprb0.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmppgprb12l.js:26:10)\n    at Object.<anonymous> (/tmp/tmppgprb12l.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = Math.max(...arr);\n\
    \        result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp218ykc4g.js:31:10)\n    at Object.<anonymous> (/tmp/tmp218ykc4g.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmpm7olmxnk.js:25:10)\n    at Object.<anonymous> (/tmp/tmpm7olmxnk.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = Math.max(...arr);\n    for(let i = 0; i < k; i++){\n  \
    \      result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n        max\
    \ = Math.max(...arr);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpgv2c3agi.js:32:10)\n    at Object.<anonymous> (/tmp/tmpgv2c3agi.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    if(k === 0){\n\
    \        return [];\n    }\n    if(k === arr.length){\n        return arr.sort((a,\
    \ b) => a - b);\n    }\n    let result = [];\n    let max = arr[0];\n    let maxIndex\
    \ = 0;\n    for(let i = 0; i < k; i++){\n        max = arr[i];\n        maxIndex\
    \ = i;\n        for(let j = i + 1; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr[maxIndex] = arr[i];\n\
    \        arr[i] = max;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 123, 20, 2 ]\n\nshould equal\n\n[ 2, 20,\
    \ 123 ]\n    at test (/tmp/tmpsi3558ow.js:50:10)\n    at Object.<anonymous> (/tmp/tmpsi3558ow.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 123, 20, 2 ],\n  expected: [ 2, 20, 123\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let sortedArr = arr.sort((a, b) => a - b);\n    for(let i = 0; i\
    \ < k; i++){\n        result.push(sortedArr[i]);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -4, 4 ]\n\nshould equal\n\n[ 4, 4 ]\n\
    \    at test (/tmp/tmp7799m63r.js:31:10)\n    at Object.<anonymous> (/tmp/tmp7799m63r.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n  expected: [ 4, 4 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpm0nzvl7j.js:38:10)\n    at Object.<anonymous> (/tmp/tmpm0nzvl7j.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    arr.sort((a, b) => a - b);\n    for(let i = arr.length - 1; i >=\
    \ arr.length - k; i--){\n        result.push(arr[i]);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpbh2iwswb.js:30:10)\n    at Object.<anonymous> (/tmp/tmpbh2iwswb.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp2fiw1__b.js:38:10)\n    at Object.<anonymous> (/tmp/tmp2fiw1__b.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = arr.slice(0,\
    \ k);\n    for(let i = k; i < arr.length; i++){\n        let j = k - 1;\n    \
    \    while(j >= 0 && max[j] < arr[i]){\n            max[j + 1] = max[j];\n   \
    \         j--;\n        }\n        max[j + 1] = arr[i];\n    }\n    return max;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -3, -4, 5 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpj86w0b1r.js:34:10)\n    at Object.<anonymous> (/tmp/tmpj86w0b1r.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ -3, -4, 5 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp_0po7d7_.js:38:10)\n    at Object.<anonymous> (/tmp/tmp_0po7d7_.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let sorted = arr.sort((a, b) => b - a);\n    for(let i = 0; i < k;\
    \ i++){\n        result.push(sorted[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpulumno8v.js:30:10)\n    at Object.<anonymous> (/tmp/tmpulumno8v.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpimtvl973.js:38:10)\n    at Object.<anonymous> (/tmp/tmpimtvl973.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k, sorted.length);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp7xj37f9b.js:38:10)\n    at Object.<anonymous> (/tmp/tmp7xj37f9b.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpl0jmsq4c.js:38:10)\n    at Object.<anonymous> (/tmp/tmpl0jmsq4c.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpzbqk6rdv.js:38:10)\n    at Object.<anonymous> (/tmp/tmpzbqk6rdv.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpb6ptolgp.js:26:10)\n    at Object.<anonymous> (/tmp/tmpb6ptolgp.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = arr[0];\n    for(let i = 0; i < k; i++){\n        for(let\
    \ j = 0; j < arr.length; j++){\n            if(arr[j] > max){\n              \
    \  max = arr[j];\n            }\n        }\n        result.push(max);\n      \
    \  arr.splice(arr.indexOf(max), 1);\n        max = arr[0];\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpfa32ltbt.js:37:10)\n    at Object.<anonymous> (/tmp/tmpfa32ltbt.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpffjwxqpi.js:38:10)\n    at Object.<anonymous> (/tmp/tmpffjwxqpi.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp4fdckbsd.js:38:10)\n    at Object.<anonymous> (/tmp/tmp4fdckbsd.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpsat8xs20.js:38:10)\n    at Object.<anonymous> (/tmp/tmpsat8xs20.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    let result = [];\n    for(let i = 0; i < k;\
    \ i++){\n        result.push(sorted[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp7mz6dyiw.js:30:10)\n    at Object.<anonymous> (/tmp/tmp7mz6dyiw.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpt56m1l3f.js:26:10)\n    at Object.<anonymous> (/tmp/tmpt56m1l3f.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp6sd7yue2.js:38:10)\n    at Object.<anonymous> (/tmp/tmp6sd7yue2.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpt2d9c9ut.js:38:10)\n    at Object.<anonymous> (/tmp/tmpt2d9c9ut.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpqw_h7c_2.js:38:10)\n    at Object.<anonymous> (/tmp/tmpqw_h7c_2.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpi69on_zt.js:38:10)\n    at Object.<anonymous> (/tmp/tmpi69on_zt.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = arr.slice(0,\
    \ k).sort((a, b) => a - b);\n    for(let i = k; i < arr.length; i++){\n      \
    \  let j = k - 1;\n        while(j >= 0 && max[j] < arr[i]){\n            j--;\n\
    \        }\n        if(j !== k - 1){\n            max.splice(j + 1, 0, arr[i]);\n\
    \            max.pop();\n        }\n    }\n    return max;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -4, 4 ]\n\nshould equal\n\n[ 4, 4 ]\n\
    \    at test (/tmp/tmp3iwwxfhy.js:37:10)\n    at Object.<anonymous> (/tmp/tmp3iwwxfhy.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n  expected: [ 4, 4 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmp0iygfeyz.js:25:10)\n    at Object.<anonymous> (/tmp/tmp0iygfeyz.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let sorted = arr.sort((a, b) => a - b);\n    for(let i = 0; i < k;\
    \ i++){\n        result.push(sorted[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -4, 4 ]\n\nshould equal\n\n[ 4, 4 ]\n\
    \    at test (/tmp/tmpmaxor57o.js:31:10)\n    at Object.<anonymous> (/tmp/tmpmaxor57o.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ -4, 4 ],\n  expected: [ 4, 4 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp7egflmr2.js:38:10)\n    at Object.<anonymous> (/tmp/tmp7egflmr2.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmpdb7_tq4a.js:25:10)\n    at Object.<anonymous> (/tmp/tmpdb7_tq4a.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = arr[0];\n    let maxIndex = 0;\n    for(let i = 0; i <\
    \ k; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n        max = arr[0];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -3 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpy1v5mxzp.js:39:10)\n    at Object.<anonymous> (/tmp/tmpy1v5mxzp.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -3 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpgh7iddq0.js:38:10)\n    at Object.<anonymous> (/tmp/tmpgh7iddq0.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpmrtl2aya.js:38:10)\n    at Object.<anonymous> (/tmp/tmpmrtl2aya.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr\
    \ = arr.sort((a, b) => b - a);\n    return sortedArr.slice(0, k);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpkz5i5d7s.js:26:10)\n    at Object.<anonymous> (/tmp/tmpkz5i5d7s.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpc27yqu1y.js:38:10)\n    at Object.<anonymous> (/tmp/tmpc27yqu1y.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = -Infinity;\n    let maxIndex = 0;\n    for(let i = 0; i\
    \ < k; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr[maxIndex] = -Infinity;\n\
    \        max = -Infinity;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpykg7k8pw.js:38:10)\n    at Object.<anonymous> (/tmp/tmpykg7k8pw.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmphokjvpb6.js:38:10)\n    at Object.<anonymous> (/tmp/tmphokjvpb6.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k, sorted.length);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp08gfgdxy.js:38:10)\n    at Object.<anonymous> (/tmp/tmp08gfgdxy.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = -Infinity;\n    let maxIndex = 0;\n    let count = 0;\n\
    \    while(count < k){\n        for(let i = 0; i < arr.length; i++){\n       \
    \     if(arr[i] > max){\n                max = arr[i];\n                maxIndex\
    \ = i;\n            }\n        }\n        result.push(max);\n        arr[maxIndex]\
    \ = -Infinity;\n        max = -Infinity;\n        count++;\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp3agfcs5m.js:41:10)\n    at Object.<anonymous> (/tmp/tmp3agfcs5m.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpk4ubrawh.js:26:10)\n    at Object.<anonymous> (/tmp/tmpk4ubrawh.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpw0kopda6.js:26:10)\n    at Object.<anonymous> (/tmp/tmpw0kopda6.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = Math.max(...arr);\n    for(let i = 0; i < k; i++){\n  \
    \      result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n        max\
    \ = Math.max(...arr);\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp417cb5uh.js:31:10)\n    at Object.<anonymous> (/tmp/tmp417cb5uh.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp6wl9oh10.js:38:10)\n    at Object.<anonymous> (/tmp/tmp6wl9oh10.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmpa_4ef8n6.js:25:10)\n    at Object.<anonymous> (/tmp/tmpa_4ef8n6.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpo200fzet.js:38:10)\n    at Object.<anonymous> (/tmp/tmpo200fzet.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let sortedArr = arr.sort((a, b) => b - a);\n    for(let i = 0; i\
    \ < k; i++){\n        result.push(sortedArr[i]);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpeak8c_oj.js:30:10)\n    at Object.<anonymous> (/tmp/tmpeak8c_oj.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k, sorted.length);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = Math.max(...arr);\n\
    \        result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpir7vk3o9.js:31:10)\n    at Object.<anonymous> (/tmp/tmpir7vk3o9.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpu61y_8rd.js:38:10)\n    at Object.<anonymous> (/tmp/tmpu61y_8rd.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmppze_dqqu.js:38:10)\n    at Object.<anonymous> (/tmp/tmppze_dqqu.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmps8bmd0po.js:38:10)\n    at Object.<anonymous> (/tmp/tmps8bmd0po.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    arr.sort((a,\
    \ b) => b - a);\n    return arr.slice(0, k);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpzuzzf22e.js:26:10)\n    at Object.<anonymous> (/tmp/tmpzuzzf22e.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpfmvzh06v.js:38:10)\n    at Object.<anonymous> (/tmp/tmpfmvzh06v.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr\
    \ = arr.sort((a, b) => a - b);\n    let result = [];\n    for(let i = sortedArr.length\
    \ - 1; i >= sortedArr.length - k; i--){\n        result.push(sortedArr[i]);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpb69fi9qo.js:30:10)\n    at Object.<anonymous> (/tmp/tmpb69fi9qo.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = -Infinity;\n     \
    \   let maxIndex = -1;\n        for(let j = 0; j < arr.length; j++){\n       \
    \     if(arr[j] > max){\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpg0am6jjn.js:38:10)\n    at Object.<anonymous> (/tmp/tmpg0am6jjn.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = arr.slice(0,\
    \ k).sort((a, b) => b - a);\n    for(let i = k; i < arr.length; i++){\n      \
    \  for(let j = 0; j < k; j++){\n            if(arr[i] > max[j]){\n           \
    \     max.splice(j, 0, arr[i]);\n                max.pop();\n                break;\n\
    \            }\n        }\n    }\n    return max;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpuypgke4a.js:35:10)\n    at Object.<anonymous> (/tmp/tmpuypgke4a.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = Math.max(...arr);\n\
    \        result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n    }\n\
    \    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp2x4bmva5.js:30:10)\n    at Object.<anonymous> (/tmp/tmp2x4bmva5.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = Math.max(...arr);\n    for(let i = 0; i < k; i++){\n  \
    \      result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n        max\
    \ = Math.max(...arr);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpt31jyeai.js:32:10)\n    at Object.<anonymous> (/tmp/tmpt31jyeai.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = Math.max(...arr);\n\
    \        result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n    }\n\
    \    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpq855yo48.js:30:10)\n    at Object.<anonymous> (/tmp/tmpq855yo48.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = 0;\n    let maxIndex = 0;\n    for(let i = 0; i < k; i++){\n\
    \        for(let j = 0; j < arr.length; j++){\n            if(arr[j] > max){\n\
    \                max = arr[j];\n                maxIndex = j;\n            }\n\
    \        }\n        result.push(max);\n        arr.splice(maxIndex, 1);\n    \
    \    max = 0;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 0, 0 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpq2gihnfn.js:39:10)\n    at Object.<anonymous> (/tmp/tmpq2gihnfn.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, 0, 0 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = [];\n\
    \    for(let i = 0; i < k; i++){\n        let maxNum = arr[0];\n        let maxIndex\
    \ = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j] >\
    \ maxNum){\n                maxNum = arr[j];\n                maxIndex = j;\n\
    \            }\n        }\n        max.push(maxNum);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return max;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpmrhf9ubr.js:37:10)\n    at Object.<anonymous> (/tmp/tmpmrhf9ubr.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpqzzdjlyr.js:26:10)\n    at Object.<anonymous> (/tmp/tmpqzzdjlyr.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmplzfg8sip.js:38:10)\n    at Object.<anonymous> (/tmp/tmplzfg8sip.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmprlwph016.js:37:10)\n    at Object.<anonymous> (/tmp/tmprlwph016.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmph2q0_ak_.js:38:10)\n    at Object.<anonymous> (/tmp/tmph2q0_ak_.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let max = [];\n\
    \    for(let i = 0; i < k; i++){\n        let maxNum = arr[0];\n        for(let\
    \ j = 0; j < arr.length; j++){\n            if(arr[j] > maxNum){\n           \
    \     maxNum = arr[j];\n            }\n        }\n        max.push(maxNum);\n\
    \        arr.splice(arr.indexOf(maxNum), 1);\n    }\n    return max;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpc_kkv3l1.js:36:10)\n    at Object.<anonymous> (/tmp/tmpc_kkv3l1.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort(function(a, b){return a - b});\n    let result = [];\n    for(let\
    \ i = 0; i < k; i++){\n        result.push(sorted[sorted.length - 1 - i]);\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpl04yt52c.js:30:10)\n    at Object.<anonymous> (/tmp/tmpl04yt52c.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    arr.sort((a,\
    \ b) => a - b);\n    return arr.slice(arr.length - k);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    let result = [];\n    for(let i = sorted.length\
    \ - 1; i >= sorted.length - k; i--){\n        result.push(sorted[i]);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpqjpxbek2.js:30:10)\n    at Object.<anonymous> (/tmp/tmpqjpxbek2.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = -Infinity;\n     \
    \   let maxIndex = -1;\n        for(let j = 0; j < arr.length; j++){\n       \
    \     if(arr[j] > max){\n                max = arr[j];\n                maxIndex\
    \ = j;\n            }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpr9o3m6u2.js:38:10)\n    at Object.<anonymous> (/tmp/tmpr9o3m6u2.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = arr[0];\n    let index = 0;\n    for(let i = 0; i < k;\
    \ i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j] >\
    \ max){\n                max = arr[j];\n                index = j;\n         \
    \   }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n \
    \       max = arr[0];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -3 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmplq6qxql9.js:39:10)\n    at Object.<anonymous> (/tmp/tmplq6qxql9.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -3 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n    var result = [];\n    var max = arr[0];\n    var index = 0;\n    for(var\
    \ i = 0; i < k; i++){\n        for(var j = 0; j < arr.length; j++){\n        \
    \    if(arr[j] > max){\n                max = arr[j];\n                index =\
    \ j;\n            }\n        }\n        result.push(max);\n        arr.splice(index,\
    \ 1);\n        max = arr[0];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -3 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpce2iqkt0.js:40:10)\n    at Object.<anonymous> (/tmp/tmpce2iqkt0.js:53:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -3 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sortedArr\
    \ = arr.sort((a, b) => b - a);\n    let result = [];\n    for(let i = 0; i < k;\
    \ i++){\n        result.push(sortedArr[i]);\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpd27goadx.js:30:10)\n    at Object.<anonymous> (/tmp/tmpd27goadx.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        result.push(Math.max(...arr));\n\
    \        arr.splice(arr.indexOf(Math.max(...arr)), 1);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpj51hcfe5.js:30:10)\n    at Object.<anonymous> (/tmp/tmpj51hcfe5.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmpziyprdrz.js:25:10)\n    at Object.<anonymous> (/tmp/tmpziyprdrz.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp5h9srnzi.js:38:10)\n    at Object.<anonymous> (/tmp/tmp5h9srnzi.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = Math.max(...arr);\n    let min = Math.min(...arr);\n  \
    \  let maxIndex = arr.indexOf(max);\n    let minIndex = arr.indexOf(min);\n  \
    \  if(k === 1){\n        result.push(max);\n    }\n    else if(k === 2){\n   \
    \     result.push(max);\n        result.push(min);\n    }\n    else{\n       \
    \ result.push(max);\n        result.push(min);\n        for(let i = 0; i < k -\
    \ 2; i++){\n            if(arr[i] !== max && arr[i] !== min){\n              \
    \  result.push(arr[i]);\n            }\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -4, -3 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp1uqt3syt.js:45:10)\n    at Object.<anonymous> (/tmp/tmp1uqt3syt.js:58:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -4, -3 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = -Infinity;\n    let maxIndex = 0;\n    let count = 0;\n\
    \    while(count < k){\n        for(let i = 0; i < arr.length; i++){\n       \
    \     if(arr[i] > max){\n                max = arr[i];\n                maxIndex\
    \ = i;\n            }\n        }\n        result.push(max);\n        arr[maxIndex]\
    \ = -Infinity;\n        max = -Infinity;\n        count++;\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmprpigwf3b.js:41:10)\n    at Object.<anonymous> (/tmp/tmprpigwf3b.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k, sorted.length);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmprx7vru_p.js:38:10)\n    at Object.<anonymous> (/tmp/tmprx7vru_p.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmppnr177bk.js:25:10)\n    at Object.<anonymous> (/tmp/tmppnr177bk.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp9z1592cl.js:26:10)\n    at Object.<anonymous> (/tmp/tmp9z1592cl.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ index = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpxda69vci.js:38:10)\n    at Object.<anonymous> (/tmp/tmpxda69vci.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = []\n    for(let i = 0; i < k; i++){\n        let max = arr[0]\n        let\
    \ index = 0\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j]\n                index = j\n         \
    \   }\n        }\n        result.push(max)\n        arr.splice(index, 1)\n   \
    \ }\n    return result\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4,\
    \ 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpms2e7887.js:38:10)\n    at Object.<anonymous> (/tmp/tmpms2e7887.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    for(let i = 0; i < k; i++){\n        let max = arr[0];\n        let\
    \ maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpwr18pzqm.js:38:10)\n    at Object.<anonymous> (/tmp/tmpwr18pzqm.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length - k);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp8mg9ptoe.js:25:10)\n    at Object.<anonymous> (/tmp/tmp8mg9ptoe.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = arr[0];\n    let maxIndex = 0;\n    for(let i = 0; i <\
    \ k; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                maxIndex = j;\n    \
    \        }\n        }\n        result.push(max);\n        arr.splice(maxIndex,\
    \ 1);\n        max = arr[0];\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -3 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpkjd244mb.js:39:10)\n    at Object.<anonymous> (/tmp/tmpkjd244mb.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -3 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let sorted\
    \ = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = maximum;\n\
    \  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
    \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1],\
    \ 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1,\
    \ 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
    \ 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3, -10], 2),[3,\
    \ 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
    \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmpbg6wn3hn.js:26:10)\n    at Object.<anonymous> (/tmp/tmpbg6wn3hn.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    // your code\
    \ here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4,\
    \ -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20,\
    \ 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ -4, -3, 5\
    \ ]\n    at test (/tmp/tmpgeenwddv.js:25:10)\n    at Object.<anonymous> (/tmp/tmpgeenwddv.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array arr of integers and a positive integer k, return a sorted\
    \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n//\
    \ >>> maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4,\
    \ -4, 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n// [2]\n// Note:\n// 1. The length of the array will be in the range of\
    \ [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n// 3. 0 <= k <= len(arr)\nfunction maximum(arr, k){\n    let result\
    \ = [];\n    let max = -Infinity;\n    let index = 0;\n    for(let i = 0; i <\
    \ k; i++){\n        for(let j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr[index] = -Infinity;\n\
    \        max = -Infinity;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3,\
    \ -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n\
    \  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0,\
    \ 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
    \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
    \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
    \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400,\
    \ 0], 0),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, -3, -4 ]\n\nshould equal\n\n[ -4, -3,\
    \ 5 ]\n    at test (/tmp/tmp5c6se5b7.js:39:10)\n    at Object.<anonymous> (/tmp/tmp5c6se5b7.js:52:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, -3, -4 ],\n  expected: [ -4, -3, 5 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
