name: HumanEval_36_fizz_buzz
language: js
results:
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let str = i.toString();\n            for(let j = 0; j < str.length;\
    \ j++){\n                if(str[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let str = i.toString();\n            for(let j = 0; j < str.length;\
    \ j++){\n                if(str[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == '7'){\n                    count++;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == '7'){\n                    count++;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  let count = 0;\n \
    \ for(let i = 0; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      let\
    \ num = i.toString();\n      for(let j = 0; j < num.length; j++){\n        if(num[j]\
    \ === '7'){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          if(i.toString().indexOf(\"7\") != -1){\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n2\n    at test (/tmp/tmp4n4hg7gs.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4n4hg7gs.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          if(i.toString().includes(\"7\")){\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n2\n    at test (/tmp/tmpoanjg6ua.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoanjg6ua.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          if(i.toString().includes('7')){\n                count++;\n       \
    \     }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n2\n    at test (/tmp/tmpmofymkc0.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmofymkc0.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var number = i.toString();\n            for(var j = 0; j < number.length;\
    \ j++){\n                if(number[j] == 7){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == '7'){\n                    count++;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == '7'){\n                    count++;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          if(i.toString().includes('7')){\n                count++;\n       \
    \     }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n2\n    at test (/tmp/tmpsv4xw3tc.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsv4xw3tc.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n\tvar count = 0;\n\t\
    for(var i = 0; i < n; i++){\n\t\tif(i % 11 == 0 || i % 13 == 0){\n\t\t\tvar num\
    \ = i.toString();\n\t\t\tfor(var j = 0; j < num.length; j++){\n\t\t\t\tif(num[j]\
    \ == 7){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            if(i.toString().includes('7')){\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n2\n    at test (/tmp/tmp35urz0dv.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp35urz0dv.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString().split('');\n            for(let j = 0; j <\
    \ num.length; j++){\n                if(num[j] === '7'){\n                   \
    \ count++;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          if(i.toString().indexOf(\"7\") != -1){\n                count++;\n\
    \            }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n2\n    at test (/tmp/tmp78go6pm5.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp78go6pm5.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let str = i.toString();\n            for(let j = 0; j < str.length;\
    \ j++){\n                if(str[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            if(i.toString().includes('7')){\n                count++;\n     \
    \       }\n        }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
    \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n\
    \  assert.deepEqual(candidate(100),3);\n  assert.deepEqual(candidate(200),6);\n\
    \  assert.deepEqual(candidate(4000),192);\n  assert.deepEqual(candidate(10000),639);\n\
    \  assert.deepEqual(candidate(100000),8026);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n2\n    at test (/tmp/tmph63713dv.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmph63713dv.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 0; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    let count = 0;\n\
    \    for(let i = 1; i < n; i++){\n        if(i % 11 === 0 || i % 13 === 0){\n\
    \            let num = i.toString();\n            for(let j = 0; j < num.length;\
    \ j++){\n                if(num[j] === '7'){\n                    count++;\n \
    \               }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var str = i.toString();\n            for(var j = 0; j < str.length;\
    \ j++){\n                if(str[j] == '7'){\n                    count++;\n  \
    \              }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n  var count = 0;\n \
    \ for(var i = 1; i < n; i++){\n    if(i % 11 === 0 || i % 13 === 0){\n      var\
    \ num = i.toString();\n      for(var j = 0; j < num.length; j++){\n        if(num[j]\
    \ === '7'){\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 0; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
    // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n){\n    var count = 0;\n\
    \    for(var i = 1; i < n; i++){\n        if(i % 11 == 0 || i % 13 == 0){\n  \
    \          var num = i.toString();\n            for(var j = 0; j < num.length;\
    \ j++){\n                if(num[j] == 7){\n                    count++;\n    \
    \            }\n            }\n        }\n    }\n    return count;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fizz_buzz;\n\
    \  assert.deepEqual(candidate(50),0);\n  assert.deepEqual(candidate(78),2);\n\
    \  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
    \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
    \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
    }\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
