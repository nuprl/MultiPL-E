name: HumanEval_80_is_happy
language: js
results:
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpn7lofrl1.js:37:10)\n    at Object.<anonymous> (/tmp/tmpn7lofrl1.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    return s.length >= 3 && !/([a-z])\\1{2}/.test(s);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpxy7hdy2c.js:29:10)\n    at Object.<anonymous> (/tmp/tmpxy7hdy2c.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpubji38be.js:37:10)\n    at Object.<anonymous> (/tmp/tmpubji38be.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp18c55iq1.js:36:10)\n    at Object.<anonymous> (/tmp/tmp18c55iq1.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmppx0nrz7t.js:37:10)\n    at Object.<anonymous> (/tmp/tmppx0nrz7t.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpywrip3om.js:36:10)\n    at Object.<anonymous> (/tmp/tmpywrip3om.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(let\
    \ i=0;i<s.length-2;i++){\n        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    return s.length >= 3 && s.split('').every((e,i,a) => i < a.length\
    \ - 2 ? e !== a[i+1] && e !== a[i+2] : true)\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbzlm4rd8.js:31:10)\n    at Object.<anonymous> (/tmp/tmpbzlm4rd8.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6vy11rlw.js:37:10)\n    at Object.<anonymous> (/tmp/tmp6vy11rlw.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(let\
    \ i=0;i<s.length-2;i++){\n        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpqipvmrfw.js:37:10)\n    at Object.<anonymous> (/tmp/tmpqipvmrfw.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpkvzus6oe.js:37:10)\n    at Object.<anonymous> (/tmp/tmpkvzus6oe.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    var len = s.length;\n    if(len < 3){\n        return false;\n\
    \    }\n    for(var i = 0; i < len; i++){\n        if(s[i] == s[i+1] && s[i+1]\
    \ == s[i+2]){\n            return false;\n        }\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpyjg7ezns.js:38:10)\n    at Object.<anonymous> (/tmp/tmpyjg7ezns.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpaahvtlcx.js:36:10)\n    at Object.<anonymous> (/tmp/tmpaahvtlcx.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp9ge7iwxr.js:36:10)\n    at Object.<anonymous> (/tmp/tmp9ge7iwxr.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(let\
    \ i=0;i<s.length-2;i++){\n        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpu6uwrk7n.js:37:10)\n    at Object.<anonymous> (/tmp/tmpu6uwrk7n.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]===s[i+1]||s[i]===s[i+2]||s[i+1]===s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp2mug5n_d.js:37:10)\n    at Object.<anonymous> (/tmp/tmp2mug5n_d.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpvgz5hi8m.js:37:10)\n    at Object.<anonymous> (/tmp/tmpvgz5hi8m.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpbosjpumt.js:37:10)\n    at Object.<anonymous> (/tmp/tmpbosjpumt.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp3uyk9gnl.js:36:10)\n    at Object.<anonymous> (/tmp/tmp3uyk9gnl.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpe6nc3rtw.js:37:10)\n    at Object.<anonymous> (/tmp/tmpe6nc3rtw.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpk9na9a3l.js:37:10)\n    at Object.<anonymous> (/tmp/tmpk9na9a3l.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpwqyozzyh.js:36:10)\n    at Object.<anonymous> (/tmp/tmpwqyozzyh.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgdyx01vm.js:37:10)\n    at Object.<anonymous> (/tmp/tmpgdyx01vm.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpv59rfaz5.js:37:10)\n    at Object.<anonymous> (/tmp/tmpv59rfaz5.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpgehzhyxs.js:36:10)\n    at Object.<anonymous> (/tmp/tmpgehzhyxs.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(let\
    \ i=0;i<s.length-2;i++){\n        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpinh0lba7.js:36:10)\n    at Object.<anonymous> (/tmp/tmpinh0lba7.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmp6hckty6j.js:37:10)\n    at Object.<anonymous> (/tmp/tmp6hckty6j.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpmm1zt5hr.js:37:10)\n    at Object.<anonymous> (/tmp/tmpmm1zt5hr.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpizm0czhn.js:36:10)\n    at Object.<anonymous> (/tmp/tmpizm0czhn.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpt1g1bor6.js:36:10)\n    at Object.<anonymous> (/tmp/tmpt1g1bor6.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(let\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1]||s[i]==s[i+2]||s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(let\
    \ i=0;i<s.length-2;i++){\n        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] == s[i+1] && s[i+1] == s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpps_m8s0_.js:37:10)\n    at Object.<anonymous> (/tmp/tmpps_m8s0_.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length; i++){\n        if(s[i] === s[i+1] && s[i+1] === s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpzanq34kf.js:36:10)\n    at Object.<anonymous> (/tmp/tmpzanq34kf.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(var\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i+1] || s[i] === s[i+2]\
    \ || s[i+1] === s[i+2]){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(var\
    \ i=0;i<s.length-2;i++){\n        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length<3){\n        return false;\n    }\n    for(let\
    \ i=0;i<s.length-2;i++){\n        if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given a string s.\n// Your task is to check if the string is\
    \ hapjs or not.\n// A string is hapjs if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n\
    // >>> is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunction\
    \ is_happy(s){\n    if(s.length < 3){\n        return false;\n    }\n    for(let\
    \ i = 0; i < s.length - 2; i++){\n        if(s[i] === s[i + 1] || s[i] === s[i\
    \ + 2] || s[i + 1] === s[i + 2]){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
