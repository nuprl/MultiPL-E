name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length ===\
    \ 0) return [];\n  let min = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length ===\
    \ 0) return [];\n    let smallest = evens.reduce((a, b) => a < b ? a : b);\n \
    \   return [smallest, arr.indexOf(smallest)];\n}\n", "    var evens = arr.filter(function(num){\n\
    \        return num % 2 === 0;\n    });\n    var smallestEven = Math.min.apply(null,\
    \ evens);\n    var index = arr.indexOf(smallestEven);\n    return [smallestEven,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length ===\
    \ 0){\n        return [];\n    }\n    let smallestEven = evens.reduce((a, b) =>\
    \ Math.min(a, b));\n    let index = arr.indexOf(smallestEven);\n    return [smallestEven,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n   \
    \ let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  let min\
    \ = Math.min(...evens);\n  let index = arr.indexOf(min);\n  return evens.length\
    \ > 0 ? [min, index] : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    let minEven = Math.min(...evens);\n    let index = arr.indexOf(minEven);\n\
    \    return evens.length > 0 ? [minEven, index] : [];\n}\n", "    let evens =\
    \ arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index\
    \ = arr.indexOf(min);\n    return evens.length === 0 ? [] : [min, index];\n}\n",
  "  let evens = arr.filter(x => x % 2 === 0);\n  let min = Math.min(...evens);\n\
    \  let index = arr.indexOf(min);\n  if (evens.length === 0){\n    return [];\n\
    \  }\n  return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    let smallestEven = Math.min(...evens);\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "    let evenArr = arr.filter(x => x\
    \ % 2 === 0);\n    let minEven = Math.min(...evenArr);\n    let minEvenIndex =\
    \ arr.indexOf(minEven);\n    if (minEven === Infinity || minEven === -Infinity)\
    \ {\n        return [];\n    }\n    return [minEven, minEvenIndex];\n}\n", " \
    \ let evens = arr.filter(num => num % 2 === 0);\n  let smallestEven = Math.min(...evens);\n\
    \  let index = arr.indexOf(smallestEven);\n  return evens.length > 0 ? [smallestEven,\
    \ index] : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "  let evens = arr.filter(num => num % 2 === 0);\n  if (evens.length === 0) return\
    \ [];\n  let smallest = evens.reduce((a,b) => a < b ? a : b);\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n", "    let evenArr = arr.filter(num => num %\
    \ 2 === 0);\n    let minEven = Math.min(...evenArr);\n    let minEvenIndex = arr.indexOf(minEven);\n\
    \    return minEvenIndex === -1 ? [] : [minEven, minEvenIndex];\n}\n", "    let\
    \ evenArr = [];\n    let indexArr = [];\n    let result = [];\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evenArr.push(arr[i]);\n\
    \            indexArr.push(i);\n        }\n    }\n    if(evenArr.length === 0){\n\
    \        return result;\n    }\n    let min = Math.min(...evenArr);\n    let minIndex\
    \ = indexArr[evenArr.indexOf(min)];\n    result.push(min, minIndex);\n    return\
    \ result;\n}", "    var evenArr = arr.filter(function(item){\n        return item\
    \ % 2 === 0;\n    });\n    if(evenArr.length === 0){\n        return [];\n   \
    \ }\n    var min = Math.min.apply(null, evenArr);\n    var index = arr.indexOf(min);\n\
    \    return [min, index];\n}", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
