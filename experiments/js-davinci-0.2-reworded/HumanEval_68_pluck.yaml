name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // >>> pluck([4, 2, 3])\n// [2, 1]\n// >>> pluck([1, 2, 3])\n// [2, 1]\n// >>> pluck([])\n\
  // []\n// >>> pluck([5, 0, 3, 0, 4, 2])\n// [0, 1]\n// Constraints:\n// * 1 <= nodes.length\
  \ <= 10000\n// * 0 <= node.value\nfunction pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n   \
    \ return [min, arr.indexOf(min)];\n}\n", "    var evens = arr.filter(function(val){\n\
    \        return val % 2 === 0;\n    });\n    if(evens.length === 0){\n       \
    \ return [];\n    }\n    var min = Math.min.apply(null, evens);\n    var index\
    \ = arr.indexOf(min);\n    return [min, index];\n}\n", "    var evens = arr.filter(function(item){\n\
    \        return item % 2 === 0;\n    });\n    if(evens.length === 0){\n      \
    \  return [];\n    }\n    var smallestEven = evens.reduce(function(a, b){\n  \
    \      return Math.min(a, b);\n    });\n    return [smallestEven, arr.indexOf(smallestEven)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    if(arr.length === 0){\n        return [];\n    }\n    let evens = arr.filter(n\
    \ => n % 2 === 0);\n    if(evens.length === 0){\n        return [];\n    }\n \
    \   let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evens = arr.filter(num => num % 2 === 0);\n  \
    \  if (evens.length === 0) return [];\n    let smallest = evens.reduce((acc, curr)\
    \ => acc < curr ? acc : curr);\n    let index = arr.indexOf(smallest);\n    return\
    \ [smallest, index];\n}\n", "    if(arr.length === 0){\n        return [];\n \
    \   }\n    let evens = [];\n    for(let i = 0; i < arr.length; i++){\n       \
    \ if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n        }\n    }\n \
    \   if(evens.length === 0){\n        return [];\n    }\n    let smallest = evens[0];\n\
    \    let index = 0;\n    for(let i = 0; i < evens.length; i++){\n        if(evens[i]\
    \ < smallest){\n            smallest = evens[i];\n            index = i;\n   \
    \     }\n    }\n    return [smallest, index];\n}\n", "    if(arr.length === 0){\n\
    \        return [];\n    }\n    let evens = arr.filter(x => x % 2 === 0);\n  \
    \  if(evens.length === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) {\n        return\
    \ [];\n    }\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n   \
    \ let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return evens.length > 0 ? [min, index]\
    \ : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n\
    \  let smallestEven = evens.length > 0 ? evens.reduce((a, b) => Math.min(a, b))\
    \ : 0;\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n    return\
    \ [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0)\n    if (evens.length === 0) {\n        return []\n    }\n    let\
    \ min = Math.min(...evens)\n    let index = arr.indexOf(min)\n    return [min,\
    \ index]\n}\n", "    let evens = arr.filter(num => num % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallestEven = evens.reduce((a,b) => a < b ? a :\
    \ b);\n    let index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return evens.length ? [min, index] : [];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "  let evens = arr.filter(x => x % 2 === 0);\n  let smallestEven = Math.min(...evens);\n\
    \  let index = arr.indexOf(smallestEven);\n  return [smallestEven, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "  if(arr.length === 0){\n    return [];\n  }\n  let evens = arr.filter(num\
    \ => num % 2 === 0);\n  if(evens.length === 0){\n    return [];\n  }\n  let smallestEven\
    \ = evens.reduce((a, b) => a < b ? a : b);\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n", "    var evens = arr.filter(function(value){\n\
    \        return value % 2 === 0;\n    });\n    if(evens.length === 0){\n     \
    \   return [];\n    }\n    var min = Math.min.apply(null, evens);\n    var index\
    \ = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "  let evens\
    \ = arr.filter(num => num % 2 === 0);\n  if (evens.length === 0) return [];\n\
    \  let smallest = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "    let even = [];\n\
    \    let index = [];\n    let result = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \       index.push(i);\n        }\n    }\n    if(even.length === 0){\n       \
    \ return [];\n    }\n    let min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n\
    \    result.push(min);\n    result.push(minIndex);\n    return result;\n}", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return evens.length > 0 ? [min, index]\
    \ : [];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length\
    \ === 0) return [];\n  let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \  let index = arr.indexOf(smallest);\n  return [smallest, index];\n}\n", "  \
    \  let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens =\
    \ arr.filter(num => num % 2 === 0);\n    if (evens.length === 0) return [];\n\
    \    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let smallest\
    \ = evens.reduce((a,b) => Math.min(a,b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    var evens = arr.filter(function(num){\n        return num\
    \ % 2 === 0;\n    });\n    if(evens.length === 0){\n        return [];\n    }\n\
    \    var min = evens[0];\n    var index = 0;\n    for(var i = 0; i < evens.length;\
    \ i++){\n        if(evens[i] < min){\n            min = evens[i];\n          \
    \  index = i;\n        }\n    }\n    return [min, index];\n}\n", "    if (arr.length\
    \ === 0) return [];\n    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let even = [];\n    let index = [];\n  \
    \  let result = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            even.push(arr[i]);\n            index.push(i);\n  \
    \      }\n    }\n    if(even.length === 0){\n        return result;\n    }\n \
    \   let min = Math.min(...even);\n    let minIndex = index[even.indexOf(min)];\n\
    \    result.push(min, minIndex);\n    return result;\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "    var evens = arr.filter(function(num){\n\
    \        return num % 2 === 0;\n    });\n    if(evens.length === 0){\n       \
    \ return [];\n    }\n    var smallestEven = evens.reduce(function(a, b){\n   \
    \     return Math.min(a, b);\n    });\n    var smallestEvenIndex = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, smallestEvenIndex];\n}\n", "  if(arr.length === 0){\n\
    \    return [];\n  }\n  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length\
    \ === 0){\n    return [];\n  }\n  let min = Math.min(...evens);\n  let index =\
    \ arr.indexOf(min);\n  return [min, index];\n}\n", "    var evens = arr.filter(function(val){\n\
    \        return val % 2 === 0;\n    });\n    if(evens.length === 0){\n       \
    \ return [];\n    }\n    var smallest = evens.reduce(function(a, b){\n       \
    \ return a < b ? a : b;\n    });\n    return [smallest, arr.indexOf(smallest)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "  let evens\
    \ = arr.filter(num => num % 2 === 0);\n  if (evens.length === 0) return [];\n\
    \  let smallest = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "  if(arr.length\
    \ === 0) return [];\n  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length\
    \ === 0) return [];\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "    var evens = arr.filter(function(num){\n  \
    \      return num % 2 === 0;\n    });\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    var min = evens[0];\n    for(var i = 1; i < evens.length; i++){\n\
    \        if(evens[i] < min){\n            min = evens[i];\n        }\n    }\n\
    \    var index = arr.indexOf(min);\n    return [min, index];\n}\n", "    if(arr.length\
    \ === 0) return [];\n    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n  \
    \  return [min, arr.indexOf(min)];\n}\n", "    let even = arr.filter(x => x %\
    \ 2 === 0);\n    let min = Math.min(...even);\n    let index = arr.indexOf(min);\n\
    \    return even.length === 0 ? [] : [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    if(arr.length\
    \ === 0){\n        return [];\n    }\n    let evens = [];\n    let evenIndexes\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n\
    \            evens.push(arr[i]);\n            evenIndexes.push(i);\n        }\n\
    \    }\n    if(evens.length === 0){\n        return [];\n    }\n    let smallestEven\
    \ = evens[0];\n    let smallestEvenIndex = evenIndexes[0];\n    for(let i = 0;\
    \ i < evens.length; i++){\n        if(evens[i] < smallestEven){\n            smallestEven\
    \ = evens[i];\n            smallestEvenIndex = evenIndexes[i];\n        }\n  \
    \  }\n    return [smallestEven, smallestEvenIndex];\n}\n", "    let evens = arr.filter(num\
    \ => num % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest\
    \ = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    if(arr.length\
    \ === 0) return [];\n    let evens = arr.filter(x => x % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    if(arr.length === 0){\n        return []\n\
    \    }\n    let even = []\n    let index = []\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i])\n      \
    \      index.push(i)\n        }\n    }\n    if(even.length === 0){\n        return\
    \ []\n    }\n    let min = Math.min(...even)\n    let minIndex = even.indexOf(min)\n\
    \    return [min, index[minIndex]]\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    let smallest = evens.length === 0 ? [] : evens.reduce((a,b) =>\
    \ a < b ? a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  let min = Math.min(...evens);\n\
    \  let index = arr.indexOf(min);\n  return evens.length > 0 ? [min, index] : [];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return evens.length > 0 ? [min, index]\
    \ : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    if(min === Infinity){\n        return [];\n    }\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n  \
    \  return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(n => n %\
    \ 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    var evens = arr.filter(function(val){\n\
    \        return val % 2 === 0;\n    });\n    if(evens.length === 0){\n       \
    \ return [];\n    }\n    var min = Math.min.apply(null, evens);\n    return [min,\
    \ arr.indexOf(min)];\n}\n", "    if(arr.length === 0) return [];\n    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return [];\n   \
    \ let smallest = evens.reduce((a, b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(n => n % 2 ===\
    \ 0);\n    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((acc, curr) => acc < curr\
    \ ? acc : curr);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min =\
    \ Math.min(...evens);\n    let index = arr.indexOf(min);\n    return evens.length\
    \ === 0 ? [] : [min, index];\n}\n", "  if(arr.length === 0){\n    return [];\n\
    \  }\n  let evens = arr.filter(function(num){\n    return num % 2 === 0;\n  });\n\
    \  if(evens.length === 0){\n    return [];\n  }\n  let smallest = evens[0];\n\
    \  for(let i = 0; i < evens.length; i++){\n    if(evens[i] < smallest){\n    \
    \  smallest = evens[i];\n    }\n  }\n  let index = arr.indexOf(smallest);\n  return\
    \ [smallest, index];\n}\n", "    if(arr.length === 0){\n        return [];\n \
    \   }\n    let evenArr = arr.filter(num => num % 2 === 0);\n    if(evenArr.length\
    \ === 0){\n        return [];\n    }\n    let min = Math.min(...evenArr);\n  \
    \  let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0) return [];\n   \
    \ let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n", " \
    \   let evenArr = arr.filter(num => num % 2 === 0);\n    let minEven = Math.min(...evenArr);\n\
    \    let minEvenIndex = arr.indexOf(minEven);\n    return evenArr.length === 0\
    \ ? [] : [minEven, minEvenIndex];\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    if (evens.length === 0) {\n        return [];\n    } else {\n        return\
    \ [min, index];\n    }\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n \
    \   return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length === 0 ? [] : [min, index];\n}\n", "  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  let smallestEven = Math.min(...evens);\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x % 2\
    \ === 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "    let even = [];\n\
    \    let index = [];\n    let result = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n     \
    \       index.push(i);\n        }\n    }\n    if(even.length === 0){\n       \
    \ return [];\n    }\n    else{\n        let min = Math.min(...even);\n       \
    \ let minIndex = even.indexOf(min);\n        result.push(min);\n        result.push(index[minIndex]);\n\
    \        return result;\n    }\n}\n", "    var evens = arr.filter(function(n){\n\
    \        return n % 2 === 0;\n    });\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    var smallest = evens.reduce(function(a, b){\n        return\
    \ Math.min(a, b);\n    });\n    var index = arr.indexOf(smallest);\n    return\
    \ [smallest, index];\n}\n", "    var even = [];\n    var index = [];\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            index.push(i);\n        }\n    }\n    if(even.length === 0){\n  \
    \      return [];\n    }\n    var min = even[0];\n    var minIndex = 0;\n    for(var\
    \ i = 0; i < even.length; i++){\n        if(even[i] < min){\n            min =\
    \ even[i];\n            minIndex = i;\n        }\n    }\n    return [min, index[minIndex]];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    return evens.length === 0 ? [] : [min, arr.indexOf(min)];\n}\n", "    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) {\n     \
    \   return [];\n    }\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    var evens = arr.filter(function(num){\n\
    \        return num % 2 === 0;\n    });\n    if(evens.length === 0){\n       \
    \ return [];\n    }\n    var smallestEven = evens.reduce(function(a, b){\n   \
    \     return a < b ? a : b;\n    });\n    var index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x %\
    \ 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min =\
    \ Math.min(...evens);\n    let index = arr.indexOf(min);\n    if (evens.length\
    \ === 0) {\n        return [];\n    } else {\n        return [min, index];\n \
    \   }\n}\n", "    let evens = arr.filter(num => num % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallestEven = evens.reduce((a, b) => Math.min(a,\
    \ b));\n    let index = arr.indexOf(smallestEven);\n    return [smallestEven,\
    \ index];\n}\n", "    var evens = arr.filter(function(num){\n        return num\
    \ % 2 === 0;\n    });\n    if(evens.length === 0){\n        return [];\n    }\n\
    \    var smallest = evens.reduce(function(a, b){\n        return Math.min(a, b);\n\
    \    });\n    var index = arr.indexOf(smallest);\n    return [smallest, index];\n\
    }\n", "  if (arr.length === 0) return [];\n  let evens = arr.filter(x => x % 2\
    \ === 0);\n  if (evens.length === 0) return [];\n  let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n  return [smallest, arr.indexOf(smallest)];\n}\n", " \
    \   if(arr.length === 0){\n        return [];\n    }\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0){\n        return [];\n    }\n \
    \   let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if\
    \ (evens.length === 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(num => num % 2 === 0);\n    let smallestEven = evens.sort((a, b)\
    \ => a - b)[0];\n    let index = arr.indexOf(smallestEven);\n    return [smallestEven,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) {\n        return [];\n    }\n    let smallest = evens.reduce((a, b)\
    \ => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    var even = [];\n    var index = [];\n    var result = [];\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         even.push(arr[i]);\n            index.push(i);\n        }\n    }\n \
    \   if(even.length === 0){\n        return [];\n    }\n    var min = even[0];\n\
    \    var minIndex = index[0];\n    for(var j = 0; j < even.length; j++){\n   \
    \     if(even[j] < min){\n            min = even[j];\n            minIndex = index[j];\n\
    \        }\n    }\n    result.push(min);\n    result.push(minIndex);\n    return\
    \ result;\n}\n", "    if(arr.length === 0){\n        return [];\n    }\n    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    if(evens.length === 0){\n       \
    \ return [];\n    }\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let smallestEven = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    let index = arr.indexOf(smallestEven);\n    return\
    \ [smallestEven, index];\n}\n", "  if(arr.length === 0){\n    return [];\n  }\n\
    \  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length === 0){\n    return\
    \ [];\n  }\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    if(arr.length\
    \ === 0){\n        return [];\n    }\n    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    var minEven\
    \ = Infinity;\n    var minEvenIndex = -1;\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0 && arr[i] < minEven){\n            minEven\
    \ = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    if(minEvenIndex\
    \ === -1){\n        return [];\n    }\n    return [minEven, minEvenIndex];\n}\n",
  "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0) return [];\n\
    \  let smallest = evens.reduce((a, b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n\
    \  if (evens.length === 0) return [];\n  let min = Math.min(...evens);\n  let\
    \ index = arr.indexOf(min);\n  return [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let smallest =\
    \ evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    var evens\
    \ = arr.filter(function(e){\n        return e % 2 === 0;\n    });\n    if (evens.length\
    \ === 0) return [];\n    var min = Math.min.apply(null, evens);\n    var index\
    \ = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    if(arr.length === 0) return [];\n\
    \    let evens = arr.filter(num => num % 2 === 0);\n    if(evens.length === 0)\
    \ return [];\n    let smallestEven = evens.reduce((acc, curr) => acc < curr ?\
    \ acc : curr);\n    let index = arr.indexOf(smallestEven);\n    return [smallestEven,\
    \ index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length\
    \ === 0) return [];\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n\
    \  return [min, index];\n}\n", "    var evens = arr.filter(function(num){\n  \
    \      return num % 2 === 0;\n    });\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    var min = evens[0];\n    var index = 0;\n    for(var i = 0;\
    \ i < evens.length; i++){\n        if(evens[i] < min){\n            min = evens[i];\n\
    \            index = i;\n        }\n    }\n    return [min, index];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) {\n        return\
    \ [];\n    }\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n   \
    \ return [smallest, arr.indexOf(smallest)];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let smallestEven = evens.sort((a, b) =>\
    \ a - b)[0];\n    let index = arr.indexOf(smallestEven);\n    return evens.length\
    \ > 0 ? [smallestEven, index] : [];\n}\n", "  var evens = arr.filter(function(value){\n\
    \    return value % 2 === 0;\n  });\n  if(evens.length === 0){\n    return [];\n\
    \  }\n  var smallestEven = evens.reduce(function(a, b){\n    return Math.min(a,\
    \ b);\n  });\n  var index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length\
    \ === 0) return [];\n  let min = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0)\
    \ return [];\n  let smallest = evens.reduce((a, b) => Math.min(a, b));\n  let\
    \ index = arr.indexOf(smallest);\n  return [smallest, index];\n}\n", "  let evens\
    \ = arr.filter(x => x % 2 === 0);\n  let min = Math.min(...evens);\n  let index\
    \ = arr.indexOf(min);\n  return evens.length > 0 ? [min, index] : [];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "    var evenArr = [];\n    var indexArr = [];\n    var resultArr = [];\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n   \
    \         evenArr.push(arr[i]);\n            indexArr.push(i);\n        }\n  \
    \  }\n    if(evenArr.length === 0){\n        return [];\n    }\n    var min =\
    \ evenArr[0];\n    var minIndex = 0;\n    for(var j = 0; j < evenArr.length; j++){\n\
    \        if(evenArr[j] < min){\n            min = evenArr[j];\n            minIndex\
    \ = j;\n        }\n    }\n    resultArr.push(min);\n    resultArr.push(indexArr[minIndex]);\n\
    \    return resultArr;\n}", "    let evens = arr.filter(n => n % 2 === 0);\n \
    \   if (evens.length === 0) return [];\n    let smallest = evens.reduce((a, b)\
    \ => Math.min(a, b));\n    return [smallest, arr.indexOf(smallest)];\n}\n", " \
    \   var evens = arr.filter(function(num){\n        return num % 2 === 0;\n   \
    \ });\n    if(evens.length === 0){\n        return [];\n    }\n    var smallest\
    \ = evens.reduce(function(a, b){\n        return Math.min(a, b);\n    });\n  \
    \  var index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", " \
    \ if(arr.length === 0){\n    return [];\n  }\n  let evens = arr.filter(function(value){\n\
    \    return value % 2 === 0;\n  });\n  if(evens.length === 0){\n    return [];\n\
    \  }\n  let smallestEven = evens.reduce(function(a, b){\n    return Math.min(a,\
    \ b);\n  });\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n", "    let evens = arr.filter(num => num % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((acc, num) => num < acc ?\
    \ num : acc);\n    let index = arr.indexOf(smallest);\n    return [smallest, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n\
    }\n", "  var evens = arr.filter(function(num){\n    return num % 2 === 0;\n  });\n\
    \  if(evens.length === 0){\n    return [];\n  }\n  var smallestEven = evens.reduce(function(a,\
    \ b){\n    return Math.min(a, b);\n  });\n  return [smallestEven, arr.indexOf(smallestEven)];\n\
    }\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if (evens.length === 0)\
    \ return [];\n  let min = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n\
    }\n", "    let evens = arr.filter(num => num % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((a, b) => Math.min(a, b));\n\
    \    let index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ evens.length > 0 ? [min, index] : [];\n}\n", "    var evens = arr.filter(function(x){\n\
    \        return x % 2 === 0;\n    });\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    var smallestEven = evens.reduce(function(a, b){\n        return\
    \ a < b ? a : b;\n    });\n    return [smallestEven, arr.indexOf(smallestEven)];\n\
    }\n", "    var evens = arr.filter(function(num){\n        return num % 2 === 0;\n\
    \    });\n    if(evens.length === 0){\n        return [];\n    }\n    var smallest\
    \ = evens.reduce(function(a, b){\n        return Math.min(a, b);\n    });\n  \
    \  var index = arr.indexOf(smallest);\n    return [smallest, index];\n}\n", " \
    \   let min = Infinity;\n    let index = -1;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0 && arr[i] < min){\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    return index === -1 ? [] : [min,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let evensIndex\
    \ = arr.map((x, i) => x % 2 === 0 ? i : null).filter(x => x !== null);\n    if\
    \ (evens.length === 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    return [min, evensIndex[evens.indexOf(min)]];\n}\n", "    let evens = arr.filter(num\
    \ => num % 2 === 0);\n    let smallestEven = Math.min(...evens);\n    let index\
    \ = arr.indexOf(smallestEven);\n    return evens.length === 0 ? [] : [smallestEven,\
    \ index];\n}\n", "    if(arr.length === 0){\n        return [];\n    }\n    let\
    \ evenArr = arr.filter(x => x % 2 === 0);\n    if(evenArr.length === 0){\n   \
    \     return [];\n    }\n    let min = Math.min(...evenArr);\n    let index =\
    \ arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    var evens = [];\n    var evensIndex = [];\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n\
    \            evensIndex.push(i);\n        }\n    }\n    if(evens.length === 0){\n\
    \        return [];\n    }\n    var smallestEven = evens[0];\n    var smallestEvenIndex\
    \ = evensIndex[0];\n    for(var j = 0; j < evens.length; j++){\n        if(evens[j]\
    \ < smallestEven){\n            smallestEven = evens[j];\n            smallestEvenIndex\
    \ = evensIndex[j];\n        }\n    }\n    return [smallestEven, smallestEvenIndex];\n\
    }\n", "    if(arr.length === 0){\n        return [];\n    }\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0){\n        return [];\n    }\n \
    \   let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evenArr = arr.filter(num => num\
    \ % 2 === 0);\n    if(evenArr.length === 0) return [];\n    let minEven = Math.min(...evenArr);\n\
    \    let index = arr.indexOf(minEven);\n    return [minEven, index];\n}\n", " \
    \ let evens = arr.filter(num => num % 2 === 0);\n  let smallestEven = evens.length\
    \ > 0 ? evens.reduce((a,b) => Math.min(a,b)) : [];\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n", "  let evens = arr.filter(num => num %\
    \ 2 === 0);\n  if (evens.length === 0) return [];\n  let smallestEven = evens.reduce((a,\
    \ b) => Math.min(a, b));\n  let index = arr.indexOf(smallestEven);\n  return [smallestEven,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min =\
    \ Math.min(...evens);\n    let index = arr.indexOf(min);\n    return evens.length\
    \ === 0 ? [] : [min, index];\n}\n", "    if(arr.length === 0){\n        return\
    \ [];\n    }\n    let evens = arr.filter(n => n % 2 === 0);\n    if(evens.length\
    \ === 0){\n        return [];\n    }\n    let smallestEven = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    let index = arr.indexOf(smallestEven);\n    return\
    \ [smallestEven, index];\n}\n", "    var evens = arr.filter(function(num){\n \
    \       return num % 2 === 0;\n    });\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    var min = evens[0];\n    var minIndex = 0;\n    for(var i =\
    \ 1; i < evens.length; i++){\n        if(evens[i] < min){\n            min = evens[i];\n\
    \            minIndex = i;\n        }\n    }\n    return [min, minIndex];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return\
    \ [];\n    let smallest = evens.reduce((a, b) => a < b ? a : b);\n    return [smallest,\
    \ arr.indexOf(smallest)];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n  \
    \  let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    if (evens.length === 0) {\n        return [];\n\
    \    } else {\n        return [min, index];\n    }\n}\n", "  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) return [];\n  let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n", "    let even = [];\n    let evenIndex = [];\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \            evenIndex.push(i);\n        }\n    }\n    if(even.length === 0){\n\
    \        return [];\n    }\n    let smallestEven = even[0];\n    let smallestEvenIndex\
    \ = evenIndex[0];\n    for(let i = 0; i < even.length; i++){\n        if(even[i]\
    \ < smallestEven){\n            smallestEven = even[i];\n            smallestEvenIndex\
    \ = evenIndex[i];\n        }\n    }\n    return [smallestEven, smallestEvenIndex];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) return [];\n    let minEven = Math.min(...evens);\n    return [minEven, arr.indexOf(minEven)];\n\
    }\n", "    if(arr.length === 0){\n        return [];\n    }\n    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if(evens.length === 0){\n        return [];\n    }\n \
    \   let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evenArr = arr.filter(x => x % 2 === 0);\n    if\
    \ (evenArr.length === 0) {\n        return [];\n    }\n    let minEven = Math.min(...evenArr);\n\
    \    let index = arr.indexOf(minEven);\n    return [minEven, index];\n}\n", " \
    \   let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    if (evens.length === 0) {\n        return\
    \ [];\n    } else {\n        return [min, index];\n    }\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let\
    \ min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return evens.length\
    \ > 0 ? [min, index] : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    var evens = arr.filter(function(n){\n\
    \        return n % 2 === 0;\n    });\n    if(evens.length === 0){\n        return\
    \ [];\n    }\n    var smallest = evens.reduce(function(a, b){\n        return\
    \ a < b ? a : b;\n    });\n    var index = arr.indexOf(smallest);\n    return\
    \ [smallest, index];\n}\n", "    if(arr.length === 0){\n        return [];\n \
    \   }\n    let evens = arr.filter(num => num % 2 === 0);\n    if(evens.length\
    \ === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n    return\
    \ [min, arr.indexOf(min)];\n}\n", "    if(arr.length == 0){\n        return [];\n\
    \    }\n    var evens = [];\n    for(var i = 0; i < arr.length; i++){\n      \
    \  if(arr[i] % 2 == 0){\n            evens.push(arr[i]);\n        }\n    }\n \
    \   if(evens.length == 0){\n        return [];\n    }\n    var min = evens[0];\n\
    \    var index = 0;\n    for(var i = 0; i < evens.length; i++){\n        if(evens[i]\
    \ < min){\n            min = evens[i];\n            index = i;\n        }\n  \
    \  }\n    return [min, index];\n}\n", "  let evens = arr.filter(x => x % 2 ===\
    \ 0);\n  let smallestEven = Math.min(...evens);\n  let index = arr.indexOf(smallestEven);\n\
    \  return [smallestEven, index];\n}\n", "    var evens = arr.filter(function(num){\n\
    \        return num % 2 === 0;\n    });\n    if(evens.length === 0){\n       \
    \ return [];\n    }\n    var smallest = evens.reduce(function(a, b){\n       \
    \ return Math.min(a, b);\n    });\n    var index = arr.indexOf(smallest);\n  \
    \  return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n  \
    \  let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let\
    \ min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    if (evens.length\
    \ === 0) {\n        return [];\n    } else {\n        return [min, index];\n \
    \   }\n}\n", "    let evenArr = arr.filter(num => num % 2 === 0);\n    let minEven\
    \ = Math.min(...evenArr);\n    if(minEven === Infinity){\n        return [];\n\
    \    }\n    let index = arr.indexOf(minEven);\n    return [minEven, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length ===\
    \ 0) {\n        return [];\n    }\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens =\
    \ arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n    let index\
    \ = arr.indexOf(min);\n    return evens.length > 0 ? [min, index] : [];\n}\n",
  "    var evens = arr.filter(function(num){\n        return num % 2 === 0;\n    });\n\
    \    if(evens.length === 0){\n        return [];\n    }\n    var smallestEven\
    \ = evens.reduce(function(a, b){\n        return Math.min(a, b);\n    });\n  \
    \  var index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n\
    }\n", "  let evens = arr.filter(x => x % 2 === 0);\n  if(evens.length === 0) return\
    \ [];\n  let min = Math.min(...evens);\n  return [min, arr.indexOf(min)];\n}\n",
  "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) {\n\
    \        return [];\n    }\n    let min = Math.min(...evens);\n    let index =\
    \ arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let\
    \ min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return [min,\
    \ index];\n}\n", "    let evens = arr.filter(num => num % 2 === 0);\n    let smallestEven\
    \ = Math.min(...evens);\n    let index = arr.indexOf(smallestEven);\n    return\
    \ [smallestEven, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if(evens.length === 0) return [];\n    let min = Math.min(...evens);\n  \
    \  let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n    let\
    \ index = arr.indexOf(min);\n    if (evens.length === 0) {\n        return [];\n\
    \    } else {\n        return [min, index];\n    }\n}\n", "    let evens = arr.filter(x\
    \ => x % 2 === 0);\n    if (evens.length === 0) {\n        return [];\n    }\n\
    \    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}\n",
  "    var evens = [];\n    var evensIndex = [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i]);\n    \
    \        evensIndex.push(i);\n        }\n    }\n    if(evens.length === 0){\n\
    \        return [];\n    }\n    var min = evens[0];\n    var minIndex = evensIndex[0];\n\
    \    for(var j = 0; j < evens.length; j++){\n        if(evens[j] < min){\n   \
    \         min = evens[j];\n            minIndex = evensIndex[j];\n        }\n\
    \    }\n    return [min, minIndex];\n}\n", "    let evens = arr.filter(x => x\
    \ % 2 === 0);\n    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n\
    \    return [min, arr.indexOf(min)];\n}\n", "  var evens = arr.filter(function(num){\n\
    \    return num % 2 === 0;\n  });\n  if(evens.length === 0){\n    return [];\n\
    \  }\n  var smallest = evens.reduce(function(a, b){\n    return Math.min(a, b);\n\
    \  });\n  var index = arr.indexOf(smallest);\n  return [smallest, index];\n}\n",
  "    if(arr.length === 0){\n        return [];\n    }\n    let evenArr = arr.filter(function(num){\n\
    \        return num % 2 === 0;\n    });\n    if(evenArr.length === 0){\n     \
    \   return [];\n    }\n    let min = Math.min(...evenArr);\n    let index = arr.indexOf(min);\n\
    \    return [min, index];\n}\n", "  if(arr.length === 0){\n    return [];\n  }\n\
    \  var evens = [];\n  var evensIndex = [];\n  for(var i = 0; i < arr.length; i++){\n\
    \    if(arr[i] % 2 === 0){\n      evens.push(arr[i]);\n      evensIndex.push(i);\n\
    \    }\n  }\n  if(evens.length === 0){\n    return [];\n  }\n  var smallestEven\
    \ = evens[0];\n  var smallestEvenIndex = evensIndex[0];\n  for(var j = 0; j <\
    \ evens.length; j++){\n    if(evens[j] < smallestEven){\n      smallestEven =\
    \ evens[j];\n      smallestEvenIndex = evensIndex[j];\n    }\n  }\n  return [smallestEven,\
    \ smallestEvenIndex];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n \
    \   let index = arr.indexOf(min);\n    return [min, index];\n}\n", "    if(arr.length\
    \ === 0){\n        return [];\n    }\n    let evens = arr.filter(num => num %\
    \ 2 === 0);\n    if(evens.length === 0){\n        return [];\n    }\n    let smallest\
    \ = evens.reduce((acc, curr) => acc < curr ? acc : curr);\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(e => e % 2 ===\
    \ 0);\n    if(evens.length === 0) return [];\n    let smallest = evens.reduce((a,\
    \ b) => a < b ? a : b);\n    let index = arr.indexOf(smallest);\n    return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    if (evens.length\
    \ === 0) return [];\n    let smallestEven = evens.reduce((a, b) => a < b ? a :\
    \ b);\n    let index = arr.indexOf(smallestEven);\n    return [smallestEven, index];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    if (evens.length === 0) return [];\n \
    \   return [min, index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n    return\
    \ evens.length === 0 ? [] : [min, index];\n}\n", "    let even = [];\n    let\
    \ index = [];\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2\
    \ === 0){\n            even.push(arr[i]);\n            index.push(i);\n      \
    \  }\n    }\n    if(even.length === 0){\n        return [];\n    }\n    let min\
    \ = even[0];\n    let minIndex = 0;\n    for(let i = 0; i < even.length; i++){\n\
    \        if(even[i] < min){\n            min = even[i];\n            minIndex\
    \ = i;\n        }\n    }\n    return [min, index[minIndex]];\n}\n", "    let evens\
    \ = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) {\n        return\
    \ [];\n    }\n    let minEven = Math.min(...evens);\n    let index = arr.indexOf(minEven);\n\
    \    return [minEven, index];\n}\n", "  let evens = arr.filter(x => x % 2 ===\
    \ 0);\n  let min = Math.min(...evens);\n  let index = arr.indexOf(min);\n  if\
    \ (evens.length === 0) {\n    return [];\n  } else {\n    return [min, index];\n\
    \  }\n}\n", "    let evens = arr.filter(val => val % 2 === 0);\n    if(evens.length\
    \ === 0) return [];\n    let smallest = evens.reduce((acc, val) => {\n       \
    \ if(val < acc) return val;\n        return acc;\n    });\n    return [smallest,\
    \ arr.indexOf(smallest)];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let smallestEven = evens.reduce((a,\
    \ b) => Math.min(a, b));\n    return [smallestEven, arr.indexOf(smallestEven)];\n\
    }\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min = Math.min(...evens);\n\
    \    let index = arr.indexOf(min);\n    return evens.length === 0 ? [] : [min,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min =\
    \ Math.min(...evens);\n    let index = arr.indexOf(min);\n    if (evens.length\
    \ === 0) {\n        return [];\n    } else {\n        return [min, index];\n \
    \   }\n}\n", "    var evenArr = arr.filter(function(item){\n        return item\
    \ % 2 === 0;\n    });\n    var minEven = Math.min.apply(null, evenArr);\n    var\
    \ index = arr.indexOf(minEven);\n    return [minEven, index];\n}\n", "    let\
    \ evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) return [];\n\
    \    let smallest = evens.reduce((a, b) => Math.min(a, b));\n    let index = arr.indexOf(smallest);\n\
    \    return [smallest, index];\n}\n", "    let evens = arr.filter(x => x % 2 ===\
    \ 0);\n    let min = Math.min(...evens);\n    let index = arr.indexOf(min);\n\
    \    return evens.length > 0 ? [min, index] : [];\n}\n", "  let evens = arr.filter(x\
    \ => x % 2 === 0);\n  if (evens.length === 0) return [];\n  let smallest = evens.reduce((a,\
    \ b) => Math.min(a, b));\n  let index = arr.indexOf(smallest);\n  return [smallest,\
    \ index];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n    let min =\
    \ Math.min(...evens);\n    let index = arr.indexOf(min);\n    return evens.length\
    \ > 0 ? [min, index] : [];\n}\n", "    let evens = arr.filter(x => x % 2 === 0);\n\
    \    if (evens.length === 0) return [];\n    let min = Math.min(...evens);\n \
    \   return [min, arr.indexOf(min)];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
