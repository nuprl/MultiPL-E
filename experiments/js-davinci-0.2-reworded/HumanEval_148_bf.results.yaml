name: HumanEval_148_bf
language: js
results:
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 > -1 && index2 > -1){\n        if(index1 >\
    \ index2){\n            for(var i = index2 + 1; i < index1; i++){\n          \
    \      result.push(planets[i]);\n            }\n        }else{\n            for(var\
    \ i = index1 + 1; i < index2; i++){\n                result.push(planets[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let p1 = planets.indexOf(planet1);\n\
    \    let p2 = planets.indexOf(planet2);\n    let result = [];\n    if(p1 == -1\
    \ || p2 == -1){\n        return result;\n    }\n    if(p1 > p2){\n        for(let\
    \ i = p2 + 1; i < p1; i++){\n            result.push(planets[i]);\n        }\n\
    \    }else{\n        for(let i = p1 + 1; i < p2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let orbit1\
    \ = planets.indexOf(planet1);\n    let orbit2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if (orbit1 < 0 || orbit2 < 0) {\n        return result;\n\
    \    }\n    if (orbit1 > orbit2) {\n        let temp = orbit1;\n        orbit1\
    \ = orbit2;\n        orbit2 = temp;\n    }\n    for (let i = orbit1 + 1; i < orbit2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if (index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if (index1 > index2){\n        var temp = index1;\n        index1\
    \ = index2;\n        index2 = temp;\n    }\n    for (var i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 > -1 && index2 > -1){\n        if(index1 <\
    \ index2){\n            for(let i = index1 + 1; i < index2; i++){\n          \
    \      result.push(planets[i]);\n            }\n        }else{\n            for(let\
    \ i = index2 + 1; i < index1; i++){\n                result.push(planets[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if (planet1Index === -1 || planet2Index === -1){\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index){\n      \
    \  for (var i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (var i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index > -1 && planet2Index > -1){\n     \
    \   if(planet1Index < planet2Index){\n            for(let i = planet1Index + 1;\
    \ i < planet2Index; i++){\n                result.push(planets[i]);\n        \
    \    }\n        } else {\n            for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n                result.push(planets[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\"\
    , \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1_index\
    \ = planets.indexOf(planet1);\n    let planet2_index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1_index === -1 || planet2_index === -1){\n\
    \        return result;\n    }\n    if(planet1_index < planet2_index){\n     \
    \   for(let i = planet1_index + 1; i < planet2_index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2_index + 1; i < planet1_index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result\
    \ = [];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if(index1 === -1 || index2 === -1){\n        return result;\n    }\n    if(index1\
    \ < index2){\n        for(let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = index2 + 1; i < index1; i++){\n  \
    \          result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if(planet1Index < 0 || planet2Index < 0){\n       \
    \ return result;\n    }\n    if(planet1Index < planet2Index){\n        for(var\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    else{\n        for(var i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    else{\n \
    \       for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let newArr = [];\n    if(index1 === -1 || index2 === -1){\n        return newArr;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        newArr.push(planets[i]);\n    }\n    return newArr;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  if(index1 === -1 || index2 === -1){\n        return [];\n    }\n    let result\
    \ = [];\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result\
    \ = [];\n    let planet1Index = planets.indexOf(planet1);\n    let planet2Index\
    \ = planets.indexOf(planet2);\n    if (planet1Index === -1 || planet2Index ===\
    \ -1){\n        return result;\n    }\n    if (planet1Index > planet2Index){\n\
    \        let temp = planet1Index;\n        planet1Index = planet2Index;\n    \
    \    planet2Index = temp;\n    }\n    for (let i = planet1Index + 1; i < planet2Index;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index > planet2Index){\n        let\
    \ temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index\
    \ = temp;\n    }\n    for(let i = planet1Index + 1; i < planet2Index; i++){\n\
    \        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if (index1 < 0 || index2 < 0) {\n        return result;\n\
    \    }\n    if (index1 > index2) {\n        var temp = index1;\n        index1\
    \ = index2;\n        index2 = temp;\n    }\n    for (var i = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1){\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index){\n      \
    \  for (let i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(var i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(var i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result\
    \ = [];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if(index1 === -1 || index2 === -1){\n        return result;\n    }\n    if(index1\
    \ < index2){\n        for(let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = index2 + 1; i < index1; i++){\n  \
    \          result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  if(index1 === -1 || index2 === -1){\n        return [];\n    }\n    let result\
    \ = [];\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(var i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    else{\n \
    \       for(var i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n\tvar planets = [\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tvar index1 = planets.indexOf(planet1);\n\
    \tvar index2 = planets.indexOf(planet2);\n\tif (index1 == -1 || index2 == -1){\n\
    \t\treturn [];\n\t}\n\tif (index1 > index2){\n\t\tvar temp = index1;\n\t\tindex1\
    \ = index2;\n\t\tindex2 = temp;\n\t}\n\tvar result = [];\n\tfor (var i = index1\
    \ + 1; i < index2; i++){\n\t\tresult.push(planets[i]);\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index > -1 && planet2Index > -1){\n     \
    \   if(planet1Index < planet2Index){\n            for(let i = planet1Index + 1;\
    \ i < planet2Index; i++){\n                result.push(planets[i]);\n        \
    \    }\n        } else {\n            for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n                result.push(planets[i]);\n            }\n        }\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\"\
    , \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var p1 = planets.indexOf(planet1);\n\
    \    var p2 = planets.indexOf(planet2);\n    var result = [];\n    if (p1 == -1\
    \ || p2 == -1){\n        return result;\n    }\n    if (p1 < p2){\n        for\
    \ (var i = p1 + 1; i < p2; i++){\n            result.push(planets[i]);\n     \
    \   }\n    }\n    else{\n        for (var i = p2 + 1; i < p1; i++){\n        \
    \    result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if (index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if (index1 < index2){\n        for (var i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    else {\n\
    \        for (var i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if (index1 == -1 || index2 == -1) {\n        return result;\n\
    \    }\n    if (index1 < index2) {\n        for (let i = index1 + 1; i < index2;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    } else {\n    \
    \    for (let i = index2 + 1; i < index1; i++) {\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        for(let i = index2 + 1; i < index1;\
    \ i++){\n            result.push(planets[i]);\n        }\n    } else {\n     \
    \   for(let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(var i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(var i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1){\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index){\n      \
    \  for (let i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        for(let i = index2 + 1; i < index1;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(var\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(var i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if (planet1Index === -1 || planet2Index === -1){\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index){\n      \
    \  for (var i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (var i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        for(let i = index2 + 1; i < index1;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    else{\n \
    \       for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var p1 = planets.indexOf(planet1);\n\
    \    var p2 = planets.indexOf(planet2);\n    if (p1 == -1 || p2 == -1){\n    \
    \    return [];\n    }\n    var result = [];\n    if (p1 < p2){\n        for (var\
    \ i = p1 + 1; i < p2; i++){\n            result.push(planets[i]);\n        }\n\
    \    } else {\n        for (var i = p2 + 1; i < p1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n   \
    \ }\n    let result = [];\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        for(let i = index2; i < index1; i++){\n\
    \            result.push(planets[i]);\n        }\n    }\n    else{\n        for(let\
    \ i = index1; i < index2; i++){\n            result.push(planets[i]);\n      \
    \  }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Jupiter', 'Saturn', 'Uranus' ]\n\nshould\
    \ equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmprbclcc0d.js:43:10)\n \
    \   at Object.<anonymous> (/tmp/tmprbclcc0d.js:52:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter',\
    \ 'Saturn', 'Uranus' ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets1\
    \ = planets.indexOf(planet1);\n    let planets2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planets1 === -1 || planets2 === -1){\n        return\
    \ result;\n    }\n    if(planets1 < planets2){\n        for(let i = planets1 +\
    \ 1; i < planets2; i++){\n            result.push(planets[i]);\n        }\n  \
    \  }\n    else{\n        for(let i = planets2 + 1; i < planets1; i++){\n     \
    \       result.push(planets[i]);\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  if(index1 == -1 || index2 == -1){\n        return [];\n    }\n    let result\
    \ = [];\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    else{\n \
    \       for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  if(index1 == -1 || index2 == -1){\n        return [];\n    }\n    var result\
    \ = [];\n    if(index1 < index2){\n        for(var i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(var i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1){\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index){\n      \
    \  for (let i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index > planet2Index){\n        var\
    \ temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index\
    \ = temp;\n    }\n    for(var i = planet1Index + 1; i < planet2Index; i++){\n\
    \        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    }\n    else {\n        if (planet1Index < planet2Index)\
    \ {\n            for (var i = planet1Index + 1; i < planet2Index; i++) {\n   \
    \             result.push(planets[i]);\n            }\n        }\n        else\
    \ {\n            for (var i = planet2Index + 1; i < planet1Index; i++) {\n   \
    \             result.push(planets[i]);\n            }\n        }\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if (index1 === -1 || index2 === -1){\n        return\
    \ result;\n    }\n    if (index1 > index2){\n        let temp = index1;\n    \
    \    index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++){\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index > planet2Index){\n        let\
    \ temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index\
    \ = temp;\n    }\n    for(let i = planet1Index + 1; i < planet2Index; i++){\n\
    \        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if (index1 > index2){\n        for (var i = index2; i\
    \ < index1; i++){\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (var i = index1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Jupiter', 'Saturn', 'Uranus' ]\n\nshould\
    \ equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmpscvxwixr.js:39:10)\n \
    \   at Object.<anonymous> (/tmp/tmpscvxwixr.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter',\
    \ 'Saturn', 'Uranus' ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        var temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(var i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        for(let i = index2; i <= index1; i++){\n\
    \            result.push(planets[i]);\n        }\n    }\n    else{\n        for(let\
    \ i = index1; i <= index2; i++){\n            result.push(planets[i]);\n     \
    \   }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ]\n\nshould equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmpshhv2jw2.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpshhv2jw2.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  if(index1 == -1 || index2 == -1){\n        return [];\n    }\n    if(index1\
    \ > index2){\n        var temp = index1;\n        index1 = index2;\n        index2\
    \ = temp;\n    }\n    return planets.slice(index1+1, index2);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        var temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(var i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets1\
    \ = planets.indexOf(planet1);\n    let planets2 = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planets1 < 0 || planets2 < 0) {\n        return\
    \ result;\n    }\n    if (planets1 > planets2) {\n        for (let i = planets2\
    \ + 1; i < planets1; i++) {\n            result.push(planets[i]);\n        }\n\
    \    } else {\n        for (let i = planets1 + 1; i < planets2; i++) {\n     \
    \       result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  if(index1 == -1 || index2 == -1){\n        return [];\n    }\n    var result\
    \ = [];\n    if(index1 < index2){\n        for(var i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    else{\n \
    \       for(var i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index > planet2Index){\n        let\
    \ temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index\
    \ = temp;\n    }\n    for(let i = planet1Index + 1; i < planet2Index; i++){\n\
    \        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(var\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(var i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 > index2){\n        for(let i = index2; i <\
    \ index1; i++){\n            result.push(planets[i]);\n        }\n    }else{\n\
    \        for(let i = index1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Jupiter', 'Saturn', 'Uranus' ]\n\nshould\
    \ equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmpxan5oui2.js:38:10)\n \
    \   at Object.<anonymous> (/tmp/tmpxan5oui2.js:47:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter',\
    \ 'Saturn', 'Uranus' ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result\
    \ = [];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 == -1 || index2 == -1){\n        return result;\n    }\n    if\
    \ (index1 < index2){\n        for (let i = index1 + 1; i < index2; i++){\n   \
    \         result.push(planets[i]);\n        }\n    }\n    else{\n        for (let\
    \ i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n  \
    \      }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        var temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(var i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index == -1 || planet2Index == -1){\n   \
    \     return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result\
    \ = [];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if(index1 === -1 || index2 === -1){\n        return result;\n    }\n    if(index1\
    \ < index2){\n        for(let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = index2 + 1; i < index1; i++){\n  \
    \          result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1){\n\
    \        return result;\n    }\n    if (planet1Index > planet2Index){\n      \
    \  for (let i = planet2Index + 1; i < planet1Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        var temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(var i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const planet1Index\
    \ = planets.indexOf(planet1);\n    const planet2Index = planets.indexOf(planet2);\n\
    \    if(planet1Index === -1 || planet2Index === -1){\n        return [];\n   \
    \ }\n    if(planet1Index < planet2Index){\n        return planets.slice(planet1Index\
    \ + 1, planet2Index);\n    }\n    return planets.slice(planet2Index + 1, planet1Index);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n\tvar planets = [\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tvar index1 = planets.indexOf(planet1);\n\
    \tvar index2 = planets.indexOf(planet2);\n\tvar result = [];\n\tif(index1 ===\
    \ -1 || index2 === -1){\n\t\treturn result;\n\t}\n\tif(index1 < index2){\n\t\t\
    for(var i = index1 + 1; i < index2; i++){\n\t\t\tresult.push(planets[i]);\n\t\t\
    }\n\t}\n\telse{\n\t\tfor(var i = index2 + 1; i < index1; i++){\n\t\t\tresult.push(planets[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\"\
    , \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return [];\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    else{\n \
    \       for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  if(index1 == -1 || index2 == -1){\n        return [];\n    }\n    if(index1\
    \ > index2){\n        let temp = index1;\n        index1 = index2;\n        index2\
    \ = temp;\n    }\n    let result = [];\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  if(index1 === -1 || index2 === -1){\n        return [];\n    }\n    let result\
    \ = [];\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if (index1 === -1 || index2 === -1){\n        return\
    \ result;\n    }\n    if (index1 < index2){\n        for (let i = index1 + 1;\
    \ i < index2; i++){\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if (index1 === -1 || index2 === -1){\n        return\
    \ result;\n    }\n    if (index1 > index2){\n        for (let i = index2 + 1;\
    \ i < index1; i++){\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if (index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if (index1 > index2){\n        var temp = index1;\n        index1\
    \ = index2;\n        index2 = temp;\n    }\n    for (var i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(var\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(var i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        var temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(var i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index > planet2Index){\n        var\
    \ temp = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index\
    \ = temp;\n    }\n    for(var i = planet1Index + 1; i < planet2Index; i++){\n\
    \        result.push(planets[i]);\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        var temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(var i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1){\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index){\n      \
    \  for (let i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result\
    \ = [];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if(index1 === -1 || index2 === -1){\n        return result;\n    }\n    if(index1\
    \ < index2){\n        for(let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = index2 + 1; i < index1; i++){\n  \
    \          result.push(planets[i]);\n        }\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if (index1 === -1 || index2 === -1){\n        return\
    \ result;\n    }\n    if (index1 > index2){\n        let temp = index1;\n    \
    \    index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++){\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 > -1 && index2 > -1){\n        if(index1 <\
    \ index2){\n            for(var i = index1 + 1; i < index2; i++){\n          \
    \      result.push(planets[i]);\n            }\n        }else{\n            for(var\
    \ i = index2 + 1; i < index1; i++){\n                result.push(planets[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        for(let i = index2 + 1; i < index1;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1){\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index){\n      \
    \  for (let i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if(planet1Index < 0 || planet2Index < 0){\n       \
    \ return result;\n    }\n    if(planet1Index < planet2Index){\n        for(var\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(var i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  if (index1 === -1 || index2 === -1){\n        return [];\n    }\n    var result\
    \ = [];\n    if (index1 < index2){\n        for (var i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    } else {\n     \
    \   for (var i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let p1 = planets.indexOf(planet1);\n\
    \    let p2 = planets.indexOf(planet2);\n    if(p1 === -1 || p2 === -1){\n   \
    \     return [];\n    }\n    let result = [];\n    if(p1 < p2){\n        for(let\
    \ i = p1 + 1; i < p2; i++){\n            result.push(planets[i]);\n        }\n\
    \    }else{\n        for(let i = p2 + 1; i < p1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  if(index1 === -1 || index2 === -1){\n        return [];\n    }\n    if(index1\
    \ > index2){\n        return planets.slice(index2, index1);\n    }\n    return\
    \ planets.slice(index1, index2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Jupiter', 'Saturn', 'Uranus' ]\n\nshould\
    \ equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmp8n0nv2b_.js:35:10)\n \
    \   at Object.<anonymous> (/tmp/tmp8n0nv2b_.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter',\
    \ 'Saturn', 'Uranus' ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 > -1 && index2 > -1){\n        if(index1 <\
    \ index2){\n            for(let i = index1 + 1; i < index2; i++){\n          \
    \      result.push(planets[i]);\n            }\n        }else{\n            for(let\
    \ i = index2 + 1; i < index1; i++){\n                result.push(planets[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1) {\n\
    \        return result;\n    } else if (planet1Index > planet2Index) {\n     \
    \   for (let i = planet2Index + 1; i < planet1Index; i++) {\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(var i = index1+1; i < index2; i++){\n\
    \            result.push(planets[i]);\n        }\n    }else{\n        for(var\
    \ i = index2+1; i < index1; i++){\n            result.push(planets[i]);\n    \
    \    }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if (index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if (index1 > index2){\n        var temp = index1;\n        index1\
    \ = index2;\n        index2 = temp;\n    }\n    for (var i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result\
    \ = [];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if(index1 === -1 || index2 === -1){\n        return result;\n    }\n    if(index1\
    \ > index2){\n        let temp = index1;\n        index1 = index2;\n        index2\
    \ = temp;\n    }\n    for(let i = index1 + 1; i < index2; i++){\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\"\
    , \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if (index1 === -1 || index2 === -1){\n        return\
    \ result;\n    }\n    if (index1 < index2){\n        for (let i = index1 + 1;\
    \ i < index2; i++){\n            result.push(planets[i]);\n        }\n    }\n\
    \    else{\n        for (let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var result\
    \ = [];\n    var start = planets.indexOf(planet1);\n    var end = planets.indexOf(planet2);\n\
    \    if (start === -1 || end === -1){\n        return result;\n    }\n    if (start\
    \ > end){\n        var temp = start;\n        start = end;\n        end = temp;\n\
    \    }\n    for (var i = start + 1; i < end; i++){\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\"\
    , \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        for(let i = index2 + 1; i < index1;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        for(var i = index2; i <= index1; i++){\n\
    \            result.push(planets[i]);\n        }\n    }\n    else{\n        for(var\
    \ i = index1; i <= index2; i++){\n            result.push(planets[i]);\n     \
    \   }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ]\n\nshould equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmpqtfmgdzy.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqtfmgdzy.js:52:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  if(index1 < 0 || index2 < 0){\n        return [];\n    }\n    if(index1 > index2){\n\
    \        [index1, index2] = [index2, index1];\n    }\n    return planets.slice(index1\
    \ + 1, index2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        for(let i = index2; i <= index1; i++){\n\
    \            result.push(planets[i]);\n        }\n    } else {\n        for(let\
    \ i = index1; i <= index2; i++){\n            result.push(planets[i]);\n     \
    \   }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ]\n\nshould equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmpxrgedmbj.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxrgedmbj.js:51:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 > -1 && index2 > -1){\n        if(index1 <\
    \ index2){\n            for(let i = index1 + 1; i < index2; i++){\n          \
    \      result.push(planets[i]);\n            }\n        }else{\n            for(let\
    \ i = index2 + 1; i < index1; i++){\n                result.push(planets[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var newArray = [];\n    if(index1 > -1 && index2 > -1){\n        if(index1\
    \ < index2){\n            for(var i = index1 + 1; i < index2; i++){\n        \
    \        newArray.push(planets[i]);\n            }\n        }\n        else{\n\
    \            for(var i = index2 + 1; i < index1; i++){\n                newArray.push(planets[i]);\n\
    \            }\n        }\n    }\n    return newArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 > index2){\n        for(var i = index2; i <=\
    \ index1; i++){\n            result.push(planets[i]);\n        }\n    } else if(index1\
    \ < index2){\n        for(var i = index1; i <= index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        result.push(planets[index1]);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ]\n\nshould equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmp8psxlnir.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8psxlnir.js:50:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 > -1 && index2 > -1){\n        if(index1 <\
    \ index2){\n            for(var i = index1 + 1; i < index2; i++){\n          \
    \      result.push(planets[i]);\n            }\n        }else{\n            for(var\
    \ i = index2 + 1; i < index1; i++){\n                result.push(planets[i]);\n\
    \            }\n        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if (index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if (index1 < index2){\n        for (let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    else{\n \
    \       for (let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const planet1Index\
    \ = planets.indexOf(planet1);\n    const planet2Index = planets.indexOf(planet2);\n\
    \    if (planet1Index === -1 || planet2Index === -1) {\n        return [];\n \
    \   }\n    if (planet1Index < planet2Index) {\n        return planets.slice(planet1Index\
    \ + 1, planet2Index);\n    }\n    return planets.slice(planet2Index + 1, planet1Index);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    else{\n \
    \       for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        for(let i = index2 + 1; i < index1;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(var\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(var i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index < 0 || planet2Index < 0){\n       \
    \ return result;\n    }\n    if(planet1Index > planet2Index){\n        let temp\
    \ = planet1Index;\n        planet1Index = planet2Index;\n        planet2Index\
    \ = temp;\n    }\n    for(let i = planet1Index + 1; i < planet2Index; i++){\n\
    \        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if (index1 == -1 || index2 == -1) {\n        return result;\n\
    \    }\n    if (index1 > index2) {\n        var temp = index1;\n        index1\
    \ = index2;\n        index2 = temp;\n    }\n    for (var i = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if (index1 === -1 || index2 === -1){\n        return\
    \ result;\n    }\n    if (index1 > index2){\n        let temp = index1;\n    \
    \    index1 = index2;\n        index2 = temp;\n    }\n    for (let i = index1\
    \ + 1; i < index2; i++){\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        var temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(var i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    else{\n \
    \       for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if (index1 === -1 || index2 === -1){\n        return\
    \ result;\n    }\n    if (index1 > index2){\n        for (var i = index2; i <=\
    \ index1; i++){\n            result.push(planets[i]);\n        }\n    } else {\n\
    \        for (var i = index1; i <= index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ]\n\nshould equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmprx0bpde7.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmprx0bpde7.js:51:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'\
    \ ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if (index1\
    \ > index2) {\n        var temp = index1;\n        index1 = index2;\n        index2\
    \ = temp;\n    }\n    var result = [];\n    for (var i = index1 + 1; i < index2;\
    \ i++) {\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const p1 =\
    \ planets.indexOf(planet1);\n    const p2 = planets.indexOf(planet2);\n    if(p1\
    \ === -1 || p2 === -1){\n        return [];\n    }\n    if(p1 > p2){\n       \
    \ return planets.slice(p2, p1);\n    }\n    return planets.slice(p1, p2);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Jupiter', 'Saturn', 'Uranus' ]\n\nshould\
    \ equal\n\n[ 'Saturn', 'Uranus' ]\n    at test (/tmp/tmp5ki41xto.js:35:10)\n \
    \   at Object.<anonymous> (/tmp/tmp5ki41xto.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Jupiter',\
    \ 'Saturn', 'Uranus' ],\n  expected: [ 'Saturn', 'Uranus' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if (planet1Index === -1 || planet2Index === -1){\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index){\n      \
    \  for (let i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result\
    \ = [];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if(index1 == -1 || index2 == -1){\n        return result;\n    }\n    if(index1\
    \ > index2){\n        let temp = index1;\n        index1 = index2;\n        index2\
    \ = temp;\n    }\n    for(let i = index1 + 1; i < index2; i++){\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\"\
    , \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(var i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    else{\n \
    \       for(var i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 == -1 || index2 == -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  if(index1 == -1 || index2 == -1){\n        return [];\n    }\n    let result\
    \ = [];\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  if(index1 === -1 || index2 === -1){\n        return [];\n    }\n    if(index1\
    \ > index2){\n        let temp = index1;\n        index1 = index2;\n        index2\
    \ = temp;\n    }\n    let result = [];\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  if(index1 === -1 || index2 === -1){\n        return [];\n    }\n    let result\
    \ = [];\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    } else {\n     \
    \   for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if (index1 === -1 || index2 === -1){\n        return\
    \ result;\n    }\n    if (index1 < index2){\n        for (var i = index1 + 1;\
    \ i < index2; i++){\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (var i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    const planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const planet1Index\
    \ = planets.indexOf(planet1);\n    const planet2Index = planets.indexOf(planet2);\n\
    \    if (planet1Index === -1 || planet2Index === -1){\n        return [];\n  \
    \  }\n    if (planet1Index < planet2Index){\n        return planets.slice(planet1Index\
    \ + 1, planet2Index);\n    }\n    return planets.slice(planet2Index + 1, planet1Index);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    else{\n \
    \       for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var result\
    \ = [];\n    var start = planets.indexOf(planet1);\n    var end = planets.indexOf(planet2);\n\
    \    if (start > end){\n        var temp = start;\n        start = end;\n    \
    \    end = temp;\n    }\n    for (var i = start + 1; i < end; i++){\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\"\
    , \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mercury', 'Venus', 'Earth', 'Mars' ]\n\
    \nshould equal\n\n[]\n    at test (/tmp/tmpr1r9qe5e.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr1r9qe5e.js:47:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mercury',\
    \ 'Venus', 'Earth', 'Mars' ],\n  expected: [],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  var result = [];\n    if (index1 === -1 || index2 === -1){\n        return\
    \ result;\n    }\n    if (index1 > index2){\n        var temp = index1;\n    \
    \    index1 = index2;\n        index2 = temp;\n    }\n    for (var i = index1\
    \ + 1; i < index2; i++){\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"\
    ),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"\
    ),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 < 0 || index2 < 0){\n        return result;\n\
    \    }\n    if(index1 < index2){\n        for(let i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }else{\n       \
    \ for(let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let result\
    \ = [];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 < 0 || index2 < 0) {\n        return result;\n    }\n    if (index1\
    \ > index2) {\n        let temp = index1;\n        index1 = index2;\n        index2\
    \ = temp;\n    }\n    for (let i = index1 + 1; i < index2; i++) {\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"Jupiter\"\
    , \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"\
    ),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 > index2){\n        for(let i = index2 + 1;\
    \ i < index1; i++){\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for(let i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Mercury', 'Venus', 'Earth', 'Mars' ]\n\
    \nshould equal\n\n[]\n    at test (/tmp/tmpnhysky6m.js:45:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnhysky6m.js:48:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Mercury',\
    \ 'Venus', 'Earth', 'Mars' ],\n  expected: [],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if (index1 === -1 || index2 === -1){\n        return\
    \ result;\n    }\n    if (index1 < index2){\n        for (let i = index1 + 1;\
    \ i < index2; i++){\n            result.push(planets[i]);\n        }\n    } else\
    \ {\n        for (let i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1\
    \ = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n  \
    \  let result = [];\n    if(index1 === -1 || index2 === -1){\n        return result;\n\
    \    }\n    if(index1 > index2){\n        let temp = index1;\n        index1 =\
    \ index2;\n        index2 = temp;\n    }\n    for(let i = index1 + 1; i < index2;\
    \ i++){\n        result.push(planets[i]);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = bf;\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"\
    Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]);\n  assert.deepEqual(candidate(\"Neptune\", \"Venus\"),[\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\"\
    , \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1\
    \ = planets.indexOf(planet1);\n    var index2 = planets.indexOf(planet2);\n  \
    \  if (index1 === -1 || index2 === -1){\n        return [];\n    }\n    var result\
    \ = [];\n    if (index1 < index2){\n        for (var i = index1 + 1; i < index2;\
    \ i++){\n            result.push(planets[i]);\n        }\n    } else {\n     \
    \   for (var i = index2 + 1; i < index1; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = bf;\n  assert.deepEqual(candidate(\"\
    Jupiter\", \"Neptune\"),[\"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Mercury\"),[\"Venus\"]);\n  assert.deepEqual(candidate(\"Mercury\"\
    , \"Uranus\"),[\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"\
    Neptune\", \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    ]);\n  assert.deepEqual(candidate(\"Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"\
    Mars\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"\
    ),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index\
    \ = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(let\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return result;\n    }\n    if(planet1Index < planet2Index){\n        for(var\
    \ i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for(var i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//There are eight planets in our solar system: the closerst to the Sun\
    \ \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n\
    // Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"\
    ]\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"\
    Uranus\")\n// [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction\
    \ bf(planet1, planet2){\n    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var planet1Index\
    \ = planets.indexOf(planet1);\n    var planet2Index = planets.indexOf(planet2);\n\
    \    var result = [];\n    if (planet1Index === -1 || planet2Index === -1){\n\
    \        return result;\n    }\n    if (planet1Index < planet2Index){\n      \
    \  for (var i = planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    } else {\n        for (var i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
    Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
    \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\"\
    , \"Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
    Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
    \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
