name: HumanEval_139_special_factorial
language: js
prompt: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) = n!\
  \ * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
  // 288\n// The function will receive an integer as input and should return the special\n\
  // factorial of this integer.\nfunction special_factorial(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
  \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
  }\n\ntest();"
completions: ["  if (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n\
    \ - 1);\n}\n", "  var factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial\
    \ *= i;\n  }\n  return factorial;\n}\n", "    var factorial = 1;\n    for (var\
    \ i = n; i > 0; i--) {\n        factorial *= i;\n    }\n    return factorial;\n\
    }\n", "    let factorial = 1;\n    for (let i = 1; i <= n; i++) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\n", "  var factorial = 1;\n  for (var\
    \ i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n}\n", " \
    \ var factorial = 1;\n  for (var i = 1; i <= n; i++) {\n    factorial *= i;\n\
    \  }\n  return factorial;\n}\n", "  var factorial = 1;\n  for (var i = n; i >\
    \ 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n}\n", "    var factorial\
    \ = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *= i;\n    }\n  \
    \  return factorial;\n}\n", "  var result = 1;\n  for (var i = n; i > 0; i--)\
    \ {\n    result *= factorial(i);\n  }\n  return result;\n}\n", "    var factorial\
    \ = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *= i;\n    }\n  \
    \  return factorial;\n}\n", "    if (n <= 0) {\n        return 1;\n    }\n   \
    \ var result = 1;\n    for (var i = 1; i <= n; i++) {\n        result *= i;\n\
    \    }\n    return result;\n}\n", "  var factorial = 1;\n  for (var i = n; i >\
    \ 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n}\n", "    var factorial\
    \ = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *= i;\n    }\n  \
    \  return factorial;\n}\n", "  if (n === 0) {\n    return 1;\n  }\n  return n\
    \ * special_factorial(n - 1);\n}\n", "  var factorial = 1;\n  for (var i = n;\
    \ i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n}\n", "    var\
    \ factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *= i;\n\
    \    }\n    return factorial;\n}\n", "  var factorial = 1;\n  for (var i = n;\
    \ i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n}\n", "  var factorial\
    \ = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n\
    }\n", "    var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial\
    \ *= i;\n    }\n    return factorial;\n}\n", "  var factorial = 1;\n  for (var\
    \ i = n; i > 0; i--) {\n    factorial *= i;\n  }\n  return factorial;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
