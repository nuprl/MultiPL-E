name: HumanEval_114_minSubArraySum
language: js
results:
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n    let end\
    \ = 0;\n    while(start < nums.length){\n        sum += nums[end];\n        while(sum\
    \ >= 0){\n            minSum = Math.min(minSum, sum);\n            sum -= nums[start];\n\
    \            start++;\n        }\n        end++;\n    }\n    return minSum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n1\n    at test (/tmp/tmp_vt7dnl2.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_vt7dnl2.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        minSum = Math.min(minSum, sum);\n  \
    \      if(sum < 0){\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpq8dia4t6.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq8dia4t6.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        minSum = Math.min(minSum, sum);\n  \
    \      if(sum < 0){\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp2mveoxuq.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2mveoxuq.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        minSum = Math.min(minSum, sum);\n  \
    \      if(sum < 0){\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpe29zpyxx.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe29zpyxx.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n      minSum =\
    \ currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n    }\n  }\n  return\
    \ minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = nums[0];\n    let currSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currSum += nums[i];\n        if(currSum < minSum){\n        \
    \    minSum = currSum;\n        }\n        if(currSum > 0){\n            currSum\
    \ = 0;\n        }\n    }\n    return minSum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = nums[0];\n  let currentSum = nums[0];\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSum\
    \ = Math.min(minSum, currentSum);\n  }\n  return minSum;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n    let end\
    \ = 0;\n    while(start < nums.length){\n        sum += nums[end];\n        if(sum\
    \ < minSum){\n            minSum = sum;\n        }\n        if(end === nums.length\
    \ - 1){\n            sum -= nums[start];\n            start++;\n        } else\
    \ {\n            end++;\n        }\n    }\n    return minSum;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpiswpuabi.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpiswpuabi.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = nums[0];\n    let currentSum = nums[0];\n    for(let i = 1;\
    \ i < nums.length; i++){\n        currentSum = Math.min(currentSum + nums[i],\
    \ nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n    return\
    \ minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = nums[0];\n    let currSum = nums[0];\n    for(let i = 1; i <\
    \ nums.length; i++){\n        currSum = Math.min(nums[i], currSum + nums[i]);\n\
    \        minSum = Math.min(minSum, currSum);\n    }\n    return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n      minSum =\
    \ currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n    }\n  }\n  return\
    \ minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = nums[0];\n    let currSum = nums[0];\n    for(let i = 1; i <\
    \ nums.length; i++){\n        currSum = Math.min(nums[i], currSum + nums[i]);\n\
    \        minSum = Math.min(minSum, currSum);\n    }\n    return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n    let end\
    \ = 0;\n    while(start < nums.length){\n        sum += nums[end];\n        if(sum\
    \ < minSum){\n            minSum = sum;\n        }\n        if(end === nums.length\
    \ - 1){\n            sum -= nums[start];\n            start++;\n        }\n  \
    \      end++;\n    }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = 0;\n    let tempSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        tempSum += nums[i];\n        if(tempSum < minSum){\n        \
    \    minSum = tempSum;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n1\n    at test (/tmp/tmpw5m7b6so.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw5m7b6so.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n    let end\
    \ = 0;\n    while(start < nums.length){\n        sum += nums[end];\n        if(sum\
    \ < minSum){\n            minSum = sum;\n        }\n        if(end === nums.length\
    \ - 1){\n            sum -= nums[start];\n            start++;\n        }\n  \
    \      end++;\n    }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = nums[0];\n    let currSum = nums[0];\n    for(let i = 1; i <\
    \ nums.length; i++){\n        currSum = Math.min(nums[i], currSum + nums[i]);\n\
    \        minSum = Math.min(minSum, currSum);\n    }\n    return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = 0;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n    }\n    return minSum;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n1\n    at test (/tmp/tmpwbgou20o.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwbgou20o.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum) {\n      minSum\
    \ = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum = 0;\n   \
    \ }\n  }\n  return minSum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n    let end\
    \ = 0;\n    while(start < nums.length){\n        sum += nums[end];\n        if(sum\
    \ < minSum){\n            minSum = sum;\n        }\n        if(end === nums.length\
    \ - 1){\n            sum -= nums[start];\n            start++;\n        }\n  \
    \      end++;\n    }\n    return minSum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum) {\n      minSum\
    \ = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum = 0;\n   \
    \ }\n  }\n  return minSum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum) {\n      minSum\
    \ = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum = 0;\n   \
    \ }\n  }\n  return minSum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n    let end\
    \ = 0;\n    while(start < nums.length){\n        sum += nums[end];\n        if(sum\
    \ < minSum){\n            minSum = sum;\n        }\n        if(end === nums.length\
    \ - 1){\n            sum -= nums[start];\n            start++;\n        }\n  \
    \      end++;\n    }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        minSum = Math.min(minSum, sum);\n  \
    \      if(sum < 0){\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpnjy4anyb.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnjy4anyb.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = nums[0];\n  let currentSum = nums[0];\n  for (let i = 1; i < nums.length;\
    \ i++){\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSum\
    \ = Math.min(minSum, currentSum);\n  }\n  return minSum;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currSum += nums[i];\n        if(currSum < minSum){\n        \
    \    minSum = currSum;\n        }\n        if(currSum > 0){\n            currSum\
    \ = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = nums[0];\n    let currSum = nums[0];\n    for(let i = 1; i <\
    \ nums.length; i++){\n        currSum = Math.min(nums[i], currSum + nums[i]);\n\
    \        minSum = Math.min(minSum, currSum);\n    }\n    return minSum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = nums[0];\n    let currentSum = nums[0];\n    for(let i = 1;\
    \ i < nums.length; i++){\n        currentSum = Math.min(currentSum + nums[i],\
    \ nums[i]);\n        minSum = Math.min(minSum, currentSum);\n    }\n    return\
    \ minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currSum += nums[i];\n        if(currSum < minSum){\n        \
    \    minSum = currSum;\n        }\n        if(currSum > 0){\n            currSum\
    \ = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currSum += nums[i];\n        if(currSum < minSum){\n        \
    \    minSum = currSum;\n        }\n        if(currSum > 0){\n            currSum\
    \ = 0;\n        }\n    }\n    return minSum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let sum = 0;\n  let start = 0;\n  let end = 0;\n\
    \  while (start < nums.length) {\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum < 0) {\n      sum = 0;\n      start = end;\n    }\n    sum\
    \ += nums[end];\n    end++;\n  }\n  return minSum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    let left = 0;\n    for (let\
    \ i = 0; i < nums.length; i++) {\n        sum += nums[i];\n        while (sum\
    \ >= minSum) {\n            minSum = Math.min(minSum, sum);\n            sum -=\
    \ nums[left];\n            left++;\n        }\n    }\n    return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nInfinity\n\nshould equal\n\n1\n    at test\
    \ (/tmp/tmphmvo3jhm.js:28:10)\n    at Object.<anonymous> (/tmp/tmphmvo3jhm.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: Infinity,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currSum += nums[i];\n        if(currSum < minSum){\n        \
    \    minSum = currSum;\n        }\n        if(currSum > 0){\n            currSum\
    \ = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n    let end\
    \ = 0;\n    while(start < nums.length){\n        sum += nums[end];\n        if(sum\
    \ < minSum){\n            minSum = sum;\n        }\n        if(end === nums.length\
    \ - 1){\n            sum -= nums[start];\n            start++;\n        } else\
    \ {\n            end++;\n        }\n    }\n    return minSum;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp001sj0hu.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp001sj0hu.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        minSum = Math.min(minSum, sum);\n  \
    \      if(sum < 0){\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpxk2fm62m.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxk2fm62m.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n    let end\
    \ = 0;\n    while(start < nums.length){\n        sum += nums[end];\n        if(sum\
    \ < minSum){\n            minSum = sum;\n        }\n        if(end === nums.length\
    \ - 1){\n            sum -= nums[start];\n            start++;\n        }\n  \
    \      end++;\n    }\n    return minSum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = nums[0];\n    let currSum = nums[0];\n    for(let i = 1; i <\
    \ nums.length; i++){\n        currSum = Math.min(nums[i], currSum + nums[i]);\n\
    \        minSum = Math.min(minSum, currSum);\n    }\n    return minSum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let currSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currSum += nums[i];\n    if (currSum < minSum) {\n      minSum =\
    \ currSum;\n    }\n    if (currSum > 0) {\n      currSum = 0;\n    }\n  }\n  return\
    \ minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = nums[0];\n  let currentSum = nums[0];\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    currentSum = Math.min(currentSum + nums[i], nums[i]);\n    minSum\
    \ = Math.min(minSum, currentSum);\n  }\n  return minSum;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n    let end\
    \ = 0;\n    while(start < nums.length){\n        sum += nums[end];\n        if(sum\
    \ < minSum){\n            minSum = sum;\n        }\n        if(end === nums.length\
    \ - 1){\n            sum -= nums[start];\n            start++;\n        }\n  \
    \      end++;\n    }\n    return minSum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let currentSum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    currentSum += nums[i];\n    if (currentSum < minSum) {\n      minSum\
    \ = currentSum;\n    }\n    if (currentSum > 0) {\n      currentSum = 0;\n   \
    \ }\n  }\n  return minSum;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        minSum = Math.min(minSum, sum);\n  \
    \      if(sum < 0){\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpe6m17apq.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe6m17apq.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currSum += nums[i];\n        if(currSum < minSum){\n        \
    \    minSum = currSum;\n        }\n        if(currSum > 0){\n            currSum\
    \ = 0;\n        }\n    }\n    return minSum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        minSum = Math.min(minSum, sum);\n  \
    \      if(sum < 0){\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpft09opt1.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpft09opt1.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        minSum = Math.min(minSum, sum);\n  \
    \      if(sum < 0){\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpx9tfmvwb.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx9tfmvwb.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = nums[0];\n  let currentSum = nums[0];\n  for (let i = 1; i < nums.length;\
    \ i++) {\n    if (currentSum < 0) {\n      currentSum = nums[i];\n    } else {\n\
    \      currentSum += nums[i];\n    }\n    if (currentSum < minSum) {\n      minSum\
    \ = currentSum;\n    }\n  }\n  return minSum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpxtevoydb.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxtevoydb.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n    let end\
    \ = 0;\n    while(start < nums.length){\n        sum += nums[end];\n        if(sum\
    \ < minSum){\n            minSum = sum;\n        }\n        if(end === nums.length\
    \ - 1){\n            sum -= nums[start];\n            start++;\n        } else\
    \ {\n            end++;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpuqb10rve.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuqb10rve.js:47:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let min = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++)\
    \ {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n    }\n    if\
    \ (sum > 0) {\n      sum = 0;\n    }\n  }\n  return min;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \  let minSum = Infinity;\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    if (sum < minSum) {\n      minSum = sum;\n\
    \    }\n    if (sum > 0) {\n      sum = 0;\n    }\n  }\n  return minSum;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n        }\n        if(sum > 0){\n            sum = 0;\n        }\n \
    \   }\n    return minSum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
    // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n\
    \    let minSum = Infinity;\n    let currentSum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        currentSum += nums[i];\n        if(currentSum < minSum){\n  \
    \          minSum = currentSum;\n        }\n        if(currentSum > 0){\n    \
    \        currentSum = 0;\n        }\n    }\n    return minSum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
