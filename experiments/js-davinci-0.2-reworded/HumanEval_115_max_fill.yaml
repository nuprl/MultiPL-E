name: HumanEval_115_max_fill
language: js
prompt: "//You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n// and each 1 in a row represents a single unit of water.\n// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n// and\
  \ all buckets have the same capacity.\n// Your task is to use the buckets to empty\
  \ the wells.\n// Output the number of times you need to lower the buckets.\n// Example\
  \ 1:\n// >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n// 6\n// Example\
  \ 2:\n// >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]],\
  \ 2)\n// 5\n// Example 3:\n// >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n// 0\n//\
  \ Constraints:\n// * all wells have the same length\n// * 1 <= grid.length <= 10^2\n\
  // * 1 <= grid[:,1].length <= 10^2\n// * grid[i][j] -> 0 | 1\n// * 1 <= capacity\
  \ <= 10\nfunction max_fill(grid, capacity){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = max_fill;\n  assert.deepEqual(candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1,\
  \ 1, 1]], 1),6);\n  assert.deepEqual(candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1,\
  \ 1, 1, 1], [0, 1, 1, 1]], 2),5);\n  assert.deepEqual(candidate([[0, 0, 0], [0,\
  \ 0, 0]], 5),0);\n  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2),4);\n\
  \  assert.deepEqual(candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9),2);\n}\n\ntest();"
completions: ["    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let max = 0;\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j\
    \ < col; j++){\n            if(grid[i][j] == 1){\n                max += capacity;\n\
    \            }\n        }\n    }\n    while(max > 0){\n        for(let i = 0;\
    \ i < row; i++){\n            for(let j = 0; j < col; j++){\n                if(grid[i][j]\
    \ == 1){\n                    grid[i][j] = 0;\n                    max -= 1;\n\
    \                }\n            }\n        }\n        count += 1;\n    }\n   \
    \ return count;\n}\n", "    let count = 0;\n    let row = grid.length;\n    let\
    \ col = grid[0].length;\n    let bucket = capacity;\n    for(let i = 0; i < row;\
    \ i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j] ===\
    \ 1){\n                if(bucket > 0){\n                    bucket--;\n      \
    \              grid[i][j] = 0;\n                }else{\n                    bucket\
    \ = capacity;\n                    count++;\n                    bucket--;\n \
    \                   grid[i][j] = 0;\n                }\n            }\n      \
    \  }\n    }\n    return count;\n}\n", "    let count = 0;\n    let row = grid.length;\n\
    \    let col = grid[0].length;\n    let bucket = capacity;\n    for(let i = 0;\
    \ i < row; i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j]\
    \ === 1){\n                if(bucket === 0){\n                    count++;\n \
    \                   bucket = capacity;\n                }\n                bucket--;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count++;\n            }\n        }\n        if(count > max){\n    \
    \        max = count;\n        }\n        count = 0;\n    }\n    return max *\
    \ capacity;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count += capacity;\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    let count = 0;\n    let bucket = capacity;\n   \
    \ for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                if(bucket > 0){\n\
    \                    bucket--;\n                    grid[i][j] = 0;\n        \
    \        } else {\n                    bucket = capacity;\n                  \
    \  count++;\n                    bucket--;\n                    grid[i][j] = 0;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count += capacity;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    let wells = grid.length;\n    let length = grid[0].length;\n\
    \    let buckets = new Array(wells).fill(0);\n    let i = 0;\n    while(i < length){\n\
    \        for(let j = 0; j < wells; j++){\n            if(grid[j][i] === 1){\n\
    \                buckets[j]++;\n                if(buckets[j] > capacity){\n \
    \                   count++;\n                    buckets[j] = 0;\n          \
    \      }\n            }\n        }\n        i++;\n    }\n    return count;\n}\n",
  "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count += capacity;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    let wells = grid.length;\n    let length = grid[0].length;\n\
    \    let buckets = new Array(wells).fill(0);\n    let i = 0;\n    while(i < length){\n\
    \        let j = 0;\n        while(j < wells){\n            if(grid[j][i] ===\
    \ 1){\n                buckets[j] += 1;\n            }\n            j++;\n   \
    \     }\n        i++;\n    }\n    let k = 0;\n    while(k < wells){\n        if(buckets[k]\
    \ > capacity){\n            count += buckets[k] - capacity;\n        }\n     \
    \   k++;\n    }\n    return count;\n}\n", "    let count = 0;\n    let row = grid.length;\n\
    \    let col = grid[0].length;\n    let max = 0;\n    for(let i = 0; i < row;\
    \ i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n\
    \                count++;\n            }\n        }\n        if(count > max){\n\
    \            max = count;\n        }\n        count = 0;\n    }\n    return max\
    \ * capacity;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let max = 0;\n    let row =\
    \ grid.length;\n    let col = grid[0].length;\n    for(let i = 0; i < row; i++){\n\
    \        for(let j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n   \
    \             count++;\n            }\n        }\n        if(count > max){\n \
    \           max = count;\n        }\n        count = 0;\n    }\n    return max\
    \ * capacity;\n}\n", "    // your code here\n}\n", "    let count = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count += capacity;\n     \
    \       }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n  \
    \  for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let row = grid.length;\n    let col = grid[0].length;\n    let arr = [];\n\
    \    for(let i = 0; i < row; i++){\n        arr.push(0);\n    }\n    for(let i\
    \ = 0; i < col; i++){\n        for(let j = 0; j < row; j++){\n            if(grid[j][i]\
    \ === 1){\n                arr[j] += 1;\n            }\n        }\n    }\n   \
    \ for(let i = 0; i < row; i++){\n        if(arr[i] > capacity){\n            count\
    \ += arr[i] - capacity;\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count\
    \ += capacity;\n            }\n        }\n    }\n    return count;\n}\n", "  \
    \  let count = 0;\n    let max = 0;\n    let max_index = 0;\n    for(let i = 0;\
    \ i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n \
    \           if(grid[i][j] == 1){\n                count++;\n            }\n  \
    \      }\n        if(count > max){\n            max = count;\n            max_index\
    \ = i;\n        }\n        count = 0;\n    }\n    let max_count = 0;\n    for(let\
    \ i = 0; i < grid[max_index].length; i++){\n        if(grid[max_index][i] == 1){\n\
    \            max_count++;\n        }\n    }\n    return max_count * capacity;\n\
    }\n", "    // your code here\n}\n", "  let count = 0;\n  let max = 0;\n  for(let\
    \ i = 0; i < grid.length; i++){\n    for(let j = 0; j < grid[i].length; j++){\n\
    \      if(grid[i][j] === 1){\n        count++;\n      }\n    }\n    if(count >\
    \ max){\n      max = count;\n    }\n    count = 0;\n  }\n  return max * capacity;\n\
    }\n", "    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let bucket = capacity;\n    for(let i = 0; i < row; i++){\n        for(let\
    \ j = 0; j < col; j++){\n            if(grid[i][j] === 1){\n                if(bucket\
    \ > 0){\n                    bucket--;\n                    grid[i][j] = 0;\n\
    \                }\n                else{\n                    count++;\n    \
    \                bucket = capacity - 1;\n                    grid[i][j] = 0;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "    let count = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ==\
    \ 1){\n                count++;\n            }\n        }\n        if(count >\
    \ max){\n            max = count;\n        }\n        count = 0;\n    }\n    return\
    \ max * capacity;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    // your code here\n}\n", "    let count = 0;\n\
    \    let buckets = new Array(grid[0].length).fill(0);\n    for(let i = 0; i <\
    \ grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n     \
    \       if(grid[i][j] === 1){\n                buckets[j]++;\n            }\n\
    \        }\n        count += fill_buckets(buckets, capacity);\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i <\
    \ grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n     \
    \       if(grid[i][j] === 1){\n                count++;\n            }\n     \
    \   }\n        if(count > max){\n            max = count;\n        }\n       \
    \ count = 0;\n    }\n    return max * capacity;\n}\n", "    // Your code here\n\
    }\n", "    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let max = 0;\n    let max_col = 0;\n    let max_row = 0;\n    let max_count\
    \ = 0;\n    let max_count_col = 0;\n    let max_count_row = 0;\n    for(let i\
    \ = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max){\n            max = count;\n            max_row = i;\n        }\n   \
    \     count = 0;\n    }\n    for(let i = 0; i < col; i++){\n        for(let j\
    \ = 0; j < row; j++){\n            if(grid[j][i] == 1){\n                count++;\n\
    \            }\n        }\n        if(count > max){\n            max = count;\n\
    \            max_col = i;\n        }\n        count = 0;\n    }\n    for(let i\
    \ = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j]\
    \ == 1){\n                count++;\n            }\n        }\n        if(count\
    \ == max){\n            max_count++;\n            max_count_row = i;\n       \
    \ }\n        count = 0;\n    }\n    for(let i = 0; i < col; i++){\n        for(let\
    \ j = 0; j < row; j++){\n            if(grid[j][i] == 1){\n                count++;\n\
    \            }\n        }\n        if(count == max){\n            max_count++;\n\
    \            max_count_col = i;\n        }\n        count = 0;\n    }\n    if(max_count\
    \ == 1){\n        if(max_row == max_count_row){\n            return max * capacity;\n\
    \        }\n        else{\n            return max * capacity;\n        }\n   \
    \ }\n    else{\n        return max * capacity;\n    }\n}\n\n", "    let count\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                grid[i][j]\
    \ = 0;\n                count++;\n                let bucket = capacity;\n   \
    \             while(bucket > 0){\n                    if(i > 0 && grid[i-1][j]\
    \ === 1){\n                        grid[i-1][j] = 0;\n                       \
    \ bucket--;\n                    }\n                    if(i < grid.length - 1\
    \ && grid[i+1][j] === 1){\n                        grid[i+1][j] = 0;\n       \
    \                 bucket--;\n                    }\n                    if(j >\
    \ 0 && grid[i][j-1] === 1){\n                        grid[i][j-1] = 0;\n     \
    \                   bucket--;\n                    }\n                    if(j\
    \ < grid[i].length - 1 && grid[i][j+1] === 1){\n                        grid[i][j+1]\
    \ = 0;\n                        bucket--;\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return count;\n}\n", "    let buckets\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                buckets\
    \ += 1;\n            }\n        }\n    }\n    return buckets * capacity;\n}\n",
  "    // your code here\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let row = grid[i];\n        let sum = 0;\n        for(let j =\
    \ 0; j < row.length; j++){\n            sum += row[j];\n        }\n        if(sum\
    \ > capacity){\n            count += sum - capacity;\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i <\
    \ grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n     \
    \       if(grid[i][j] == 1){\n                count += 1;\n            }\n   \
    \     }\n        if(count > max){\n            max = count;\n        }\n     \
    \   count = 0;\n    }\n    return max * capacity;\n}\n", "    let count = 0;\n\
    \    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          max += capacity;\n            }\n        }\n    }\n    for(let i =\
    \ 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count += capacity;\n     \
    \       }\n            if(count === max){\n                return count;\n   \
    \         }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let row = grid.length;\n    let col = grid[0].length;\n    let total = 0;\n\
    \    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n  \
    \          total += grid[i][j];\n        }\n    }\n    while(total > 0){\n   \
    \     for(let i = 0; i < row; i++){\n            for(let j = 0; j < col; j++){\n\
    \                if(grid[i][j] > 0){\n                    grid[i][j] -= capacity;\n\
    \                    if(grid[i][j] < 0){\n                        total += grid[i][j];\n\
    \                        grid[i][j] = 0;\n                    }\n            \
    \        count++;\n                }\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    let max = 0;\n    let max_index = 0;\n\
    \    let max_row = 0;\n    let max_col = 0;\n    let max_row_index = 0;\n    let\
    \ max_col_index = 0;\n    let row_index = 0;\n    let col_index = 0;\n    let\
    \ row_sum = 0;\n    let col_sum = 0;\n    let row_max = 0;\n    let col_max =\
    \ 0;\n    let row_max_index = 0;\n    let col_max_index = 0;\n    let row_max_row\
    \ = 0;\n    let row_max_col = 0;\n    let col_max_row = 0;\n    let col_max_col\
    \ = 0;\n    let row_max_count = 0;\n    let col_max_count = 0;\n    let row_count\
    \ = 0;\n    let col_count = 0;\n    let row_max_row_index = 0;\n    let row_max_col_index\
    \ = 0;\n    let col_max_row_index = 0;\n    let col_max_col_index = 0;\n    let\
    \ row_max_row_sum = 0;\n    let row_max_col_sum = 0;\n    let col_max_row_sum\
    \ = 0;\n    let col_max_col_sum = 0;\n    let row_max_row_max = 0;\n    let row_max_col_max\
    \ = 0;\n    let col_max_row_max = 0;\n    let col_max_col_max = 0;\n    let row_max_row_max_index\
    \ = 0;\n    let row_max_col_max_index = 0;\n    let col_max_row_max_index = 0;\n\
    \    let col_max_col_max_index = 0;\n    let row_max_row_max_row = 0;\n    let\
    \ row_max_col_max_row = 0;\n    let col_max_row_max_row = 0;\n    let col_max_col_max_row\
    \ = 0;\n    let row_max_row_max_col =", "    let count = 0;\n    for(let i = 0;\
    \ i < grid.length; i++){\n        let row = grid[i];\n        let row_count =\
    \ 0;\n        for(let j = 0; j < row.length; j++){\n            if(row[j] ===\
    \ 1){\n                row_count++;\n            }\n        }\n        count +=\
    \ Math.ceil(row_count / capacity);\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count++;\n            }\n        }\n        if(count > max){\n    \
    \        max = count;\n        }\n        count = 0;\n    }\n    return max *\
    \ capacity;\n}\n", "    let count = 0;\n    let row = grid.length;\n    let col\
    \ = grid[0].length;\n    let wells = [];\n    for(let i = 0; i < row; i++){\n\
    \        wells.push([]);\n        for(let j = 0; j < col; j++){\n            wells[i].push(0);\n\
    \        }\n    }\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j\
    \ < col; j++){\n            if(grid[i][j] === 1){\n                wells[i][j]\
    \ = capacity;\n            }\n        }\n    }\n    let max = 0;\n    for(let\
    \ i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n            if(wells[i][j]\
    \ > max){\n                max = wells[i][j];\n            }\n        }\n    }\n\
    \    while(max > 0){\n        for(let i = 0; i < row; i++){\n            for(let\
    \ j = 0; j < col; j++){\n                if(wells[i][j] === max){\n          \
    \          if(i > 0 && wells[i-1][j] < max){\n                        wells[i-1][j]\
    \ = max;\n                    }\n                    if(i < row-1 && wells[i+1][j]\
    \ < max){\n                        wells[i+1][j] = max;\n                    }\n\
    \                    if(j > 0 && wells[i][j-1] < max){\n                     \
    \   wells[i][j-1] = max;\n                    }\n                    if(j < col-1\
    \ && wells[i][j+1] < max){\n                        wells[i][j+1] = max;\n   \
    \                 }\n                }\n            }\n        }\n        max--;\n\
    \        count++;\n    }\n    return count;\n}\n", "    let count = 0;\n    let\
    \ wells = [];\n    for(let i = 0; i < grid.length; i++){\n        wells.push(grid[i].reduce((acc,\
    \ curr) => acc + curr, 0));\n    }\n    while(wells.length > 0){\n        let\
    \ max = wells.reduce((acc, curr) => acc > curr ? acc : curr, 0);\n        if(max\
    \ > capacity){\n            count += capacity;\n            wells.splice(wells.indexOf(max),\
    \ 1, max - capacity);\n        } else {\n            count += max;\n         \
    \   wells.splice(wells.indexOf(max), 1);\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n       \
    \ for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                grid[i][j] = 0;\n                count++;\n                if(i\
    \ < grid.length - 1){\n                    grid[i + 1][j] = 0;\n             \
    \   }\n            }\n        }\n    }\n    return count;\n}\n", "    // your\
    \ code here\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                count++;\n            }\n   \
    \     }\n        if(count > max){\n            max = count;\n        }\n     \
    \   count = 0;\n    }\n    return max * capacity;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                grid[i][j] = 0;\n\
    \                count++;\n                let bucket = capacity;\n          \
    \      while(bucket > 0){\n                    if(j > 0 && grid[i][j-1] === 1){\n\
    \                        grid[i][j-1] = 0;\n                        bucket--;\n\
    \                    }\n                    if(j < grid[i].length - 1 && grid[i][j+1]\
    \ === 1){\n                        grid[i][j+1] = 0;\n                       \
    \ bucket--;\n                    }\n                    if(i > 0 && grid[i-1][j]\
    \ === 1){\n                        grid[i-1][j] = 0;\n                       \
    \ bucket--;\n                    }\n                    if(i < grid.length - 1\
    \ && grid[i+1][j] === 1){\n                        grid[i+1][j] = 0;\n       \
    \                 bucket--;\n                    }\n                }\n      \
    \      }\n        }\n    }\n    return count;\n}\n", "    // your code here\n\
    \    let count = 0;\n    let max = Math.max(...grid.map(x => x.reduce((a, b) =>\
    \ a + b)));\n    while (max > 0) {\n        grid.forEach(x => {\n            if\
    \ (x.includes(1)) {\n                x[x.indexOf(1)] = 0;\n                count++;\n\
    \            }\n        });\n        max -= capacity;\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    let wells = grid.length;\n    let length = grid[0].length;\n\
    \    for(let i = 0; i < wells; i++){\n        for(let j = 0; j < length; j++){\n\
    \            if(grid[i][j] === 1){\n                grid[i][j] = 0;\n        \
    \        count++;\n                if(capacity > 1){\n                    if(i\
    \ + 1 < wells && grid[i + 1][j] === 1){\n                        grid[i + 1][j]\
    \ = 0;\n                        count++;\n                    }\n            \
    \        if(j + 1 < length && grid[i][j + 1] === 1){\n                       \
    \ grid[i][j + 1] = 0;\n                        count++;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "    let result = 0;\n    let rowLength = grid[0].length;\n    let colLength = grid.length;\n\
    \    let row = 0;\n    let col = 0;\n    let max = 0;\n    let maxRow = 0;\n \
    \   let maxCol = 0;\n    let maxRowCount = 0;\n    let maxColCount = 0;\n    let\
    \ maxRowIndex = 0;\n    let maxColIndex = 0;\n    let rowCount = 0;\n    let colCount\
    \ = 0;\n    let rowIndex = 0;\n    let colIndex = 0;\n    let rowSum = 0;\n  \
    \  let colSum = 0;\n    let rowSumCount = 0;\n    let colSumCount = 0;\n    let\
    \ rowSumIndex = 0;\n    let colSumIndex = 0;\n    let rowSumMax = 0;\n    let\
    \ colSumMax = 0;\n    let rowSumMaxCount = 0;\n    let colSumMaxCount = 0;\n \
    \   let rowSumMaxIndex = 0;\n    let colSumMaxIndex = 0;\n    let rowSumMaxIndexCount\
    \ = 0;\n    let colSumMaxIndexCount = 0;\n    let rowSumMaxIndexCountMax = 0;\n\
    \    let colSumMaxIndexCountMax = 0;\n    let rowSumMaxIndexCountMaxIndex = 0;\n\
    \    let colSumMaxIndexCountMaxIndex = 0;\n    let rowSumMaxIndexCountMaxIndexCount\
    \ = 0;\n    let colSumMaxIndexCountMaxIndexCount = 0;\n    let rowSumMaxIndexCountMaxIndexCountMax\
    \ = 0;\n    let colSumMaxIndexCountMaxIndexCountMax = 0;\n    let rowSumMaxIndexCountMaxIndexCountMaxIndex\
    \ = 0;\n    let colSumMaxIndexCountMaxIndexCountMaxIndex = 0;\n    let rowSumMaxIndexCountMaxIndexCountMaxIndexCount\
    \ = 0;\n    let colSumMaxIndexCountMaxIndexCountMaxIndexCount = 0;\n    let rowSumMaxIndexCountMaxIndexCountMaxIndexCountMax\
    \ = 0;\n    let colSumMaxIndexCountMaxIndexCountMaxIndexCountMax = 0;\n    let\
    \ rowSumMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex = 0;\n    let colSumMaxIndexCountMaxIndexCountMaxIndexCountMaxIndex\
    \ =", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max){\n            max = count;\n        }\n        count = 0;\n    }\n  \
    \  return max * capacity;\n}\n", "    let count = 0;\n    let row = grid.length;\n\
    \    let col = grid[0].length;\n    let bucket = capacity;\n    for(let i = 0;\
    \ i < row; i++){\n        for(let j = 0; j < col; j++){\n            if(grid[i][j]\
    \ === 1){\n                if(bucket > 0){\n                    bucket--;\n  \
    \                  grid[i][j] = 0;\n                }\n                else{\n\
    \                    bucket = capacity;\n                    count++;\n      \
    \              bucket--;\n                    grid[i][j] = 0;\n              \
    \  }\n            }\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let wells = grid.length;\n    let units = grid[0].length;\n    let\
    \ buckets = capacity;\n    let filled = 0;\n    let empty = 0;\n    let max_fill\
    \ = 0;\n    let max_empty = 0;\n    for(let i = 0; i < wells; i++){\n        for(let\
    \ j = 0; j < units; j++){\n            if(grid[i][j] === 1){\n               \
    \ filled++;\n            }\n            else{\n                empty++;\n    \
    \        }\n        }\n        if(filled > max_fill){\n            max_fill =\
    \ filled;\n        }\n        if(empty > max_empty){\n            max_empty =\
    \ empty;\n        }\n        filled = 0;\n        empty = 0;\n    }\n    count\
    \ = max_fill * buckets;\n    count += max_empty * buckets;\n    return count;\n\
    }\n", "    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n  \
    \          if(grid[i][j] === 1){\n                grid[i][j] = 0;\n          \
    \      count++;\n                let bucket = capacity;\n                while(bucket\
    \ > 0){\n                    if(i > 0 && grid[i-1][j] === 1){\n              \
    \          grid[i-1][j] = 0;\n                        bucket--;\n            \
    \        }\n                    if(i < row-1 && grid[i+1][j] === 1){\n       \
    \                 grid[i+1][j] = 0;\n                        bucket--;\n     \
    \               }\n                    if(j > 0 && grid[i][j-1] === 1){\n    \
    \                    grid[i][j-1] = 0;\n                        bucket--;\n  \
    \                  }\n                    if(j < col-1 && grid[i][j+1] === 1){\n\
    \                        grid[i][j+1] = 0;\n                        bucket--;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let row = grid[i];\n        let row_sum = row.reduce((a, b) =>\
    \ a + b, 0);\n        if(row_sum > 0){\n            count += row_sum / capacity;\n\
    \            if(row_sum % capacity > 0){\n                count++;\n         \
    \   }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n    let\
    \ row = grid.length;\n    let col = grid[0].length;\n    let total = row * col;\n\
    \    let bucket = capacity;\n    let i = 0;\n    let j = 0;\n    while(i < row\
    \ && j < col){\n        if(grid[i][j] === 1){\n            if(bucket === 0){\n\
    \                bucket = capacity;\n                count++;\n            }\n\
    \            bucket--;\n            grid[i][j] = 0;\n            total--;\n  \
    \      }\n        if(j === col - 1){\n            i++;\n            j = 0;\n \
    \       }else{\n            j++;\n        }\n    }\n    return count;\n}\n", " \
    \   let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          grid[i][j] = 0;\n                count++;\n                let bucket\
    \ = capacity;\n                while(bucket > 0){\n                    if(i -\
    \ 1 >= 0 && grid[i - 1][j] === 1){\n                        grid[i - 1][j] = 0;\n\
    \                        bucket--;\n                    }\n                  \
    \  if(i + 1 < grid.length && grid[i + 1][j] === 1){\n                        grid[i\
    \ + 1][j] = 0;\n                        bucket--;\n                    }\n   \
    \                 if(j - 1 >= 0 && grid[i][j - 1] === 1){\n                  \
    \      grid[i][j - 1] = 0;\n                        bucket--;\n              \
    \      }\n                    if(j + 1 < grid[i].length && grid[i][j + 1] ===\
    \ 1){\n                        grid[i][j + 1] = 0;\n                        bucket--;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\n", "  let count = 0;\n  let max = 0;\n  let max_index =\
    \ 0;\n  let max_row = 0;\n  let max_col = 0;\n  let max_row_index = 0;\n  let\
    \ max_col_index = 0;\n  let max_row_count = 0;\n  let max_col_count = 0;\n  let\
    \ max_row_count_index = 0;\n  let max_col_count_index = 0;\n  let max_row_count_index_2\
    \ = 0;\n  let max_col_count_index_2 = 0;\n  let max_row_count_2 = 0;\n  let max_col_count_2\
    \ = 0;\n  let max_row_count_3 = 0;\n  let max_col_count_3 = 0;\n  let max_row_count_index_3\
    \ = 0;\n  let max_col_count_index_3 = 0;\n  let max_row_count_index_4 = 0;\n \
    \ let max_col_count_index_4 = 0;\n  let max_row_count_4 = 0;\n  let max_col_count_4\
    \ = 0;\n  let max_row_count_5 = 0;\n  let max_col_count_5 = 0;\n  let max_row_count_index_5\
    \ = 0;\n  let max_col_count_index_5 = 0;\n  let max_row_count_index_6 = 0;\n \
    \ let max_col_count_index_6 = 0;\n  let max_row_count_6 = 0;\n  let max_col_count_6\
    \ = 0;\n  let max_row_count_7 = 0;\n  let max_col_count_7 = 0;\n  let max_row_count_index_7\
    \ = 0;\n  let max_col_count_index_7 = 0;\n  let max_row_count_index_8 = 0;\n \
    \ let max_col_count_index_8 = 0;\n  let max_row_count_8 = 0;\n  let max_col_count_8\
    \ = 0;\n  let max_row_count_", "    // your code here\n}\n", "    let total =\
    \ 0;\n    let row = grid.length;\n    let col = grid[0].length;\n    let max =\
    \ 0;\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n\
    \            if(grid[i][j] === 1){\n                total++;\n            }\n\
    \        }\n    }\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j\
    \ < col; j++){\n            if(grid[i][j] === 1){\n                max = Math.max(max,\
    \ j);\n            }\n        }\n    }\n    return total * capacity + max;\n}\n",
  "    // your code here\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count++;\n            }\n\
    \        }\n        if(count > max){\n            max = count;\n        }\n  \
    \      count = 0;\n    }\n    return max * capacity;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        let row = grid[i];\n     \
    \   for(let j = 0; j < row.length; j++){\n            if(row[j] === 1){\n    \
    \            count += capacity;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    // your code here\n}\n", "    let count = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                count += capacity;\n        \
    \    }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n    let\
    \ row = grid.length;\n    let col = grid[0].length;\n    let i = 0;\n    let j\
    \ = 0;\n    while(i < row){\n        if(grid[i][j] === 1){\n            count++;\n\
    \            grid[i][j] = 0;\n            if(j === col - 1){\n               \
    \ i++;\n                j = 0;\n            }\n            else{\n           \
    \     j++;\n            }\n        }\n        else{\n            if(j === col\
    \ - 1){\n                i++;\n                j = 0;\n            }\n       \
    \     else{\n                j++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    let bucket = capacity;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                if(bucket === 0){\n      \
    \              bucket = capacity;\n                    count++;\n            \
    \    }\n                bucket--;\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count += capacity;\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    let total = 0;\n    let row = grid.length;\n   \
    \ let col = grid[0].length;\n    let max = 0;\n    for(let i = 0; i < row; i++){\n\
    \        for(let j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n   \
    \             total += 1;\n            }\n        }\n        if(total > max){\n\
    \            max = total;\n        }\n        total = 0;\n    }\n    return max\
    \ * capacity;\n}\n", "    // your code here\n}\n", "    var result = 0;\n    var\
    \ max_row = 0;\n    var max_col = 0;\n    var max_row_count = 0;\n    var max_col_count\
    \ = 0;\n    for(var i = 0; i < grid.length; i++){\n        var row_count = 0;\n\
    \        for(var j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ==\
    \ 1){\n                row_count++;\n            }\n        }\n        if(row_count\
    \ > max_row_count){\n            max_row_count = row_count;\n            max_row\
    \ = i;\n        }\n    }\n    for(var i = 0; i < grid[0].length; i++){\n     \
    \   var col_count = 0;\n        for(var j = 0; j < grid.length; j++){\n      \
    \      if(grid[j][i] == 1){\n                col_count++;\n            }\n   \
    \     }\n        if(col_count > max_col_count){\n            max_col_count = col_count;\n\
    \            max_col = i;\n        }\n    }\n    if(max_row_count > max_col_count){\n\
    \        result = max_row_count;\n    }else{\n        result = max_col_count;\n\
    \    }\n    return result * capacity;\n}\n", "    let count = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                grid[i][j] = 0;\n        \
    \        count++;\n                let bucket = capacity;\n                while(bucket\
    \ > 0){\n                    if(i+1 < grid.length && grid[i+1][j] === 1){\n  \
    \                      grid[i+1][j] = 0;\n                        bucket--;\n\
    \                    }\n                    if(j+1 < grid[i].length && grid[i][j+1]\
    \ === 1){\n                        grid[i][j+1] = 0;\n                       \
    \ bucket--;\n                    }\n                    if(i-1 >= 0 && grid[i-1][j]\
    \ === 1){\n                        grid[i-1][j] = 0;\n                       \
    \ bucket--;\n                    }\n                    if(j-1 >= 0 && grid[i][j-1]\
    \ === 1){\n                        grid[i][j-1] = 0;\n                       \
    \ bucket--;\n                    }\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\n", "    let count = 0;\n    let max_row = 0;\n\
    \    let max_col = 0;\n    let max_row_count = 0;\n    let max_col_count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                max_row_count++;\n\
    \            }\n        }\n        if(max_row_count > max_row){\n            max_row\
    \ = max_row_count;\n        }\n        max_row_count = 0;\n    }\n    for(let\
    \ i = 0; i < grid[0].length; i++){\n        for(let j = 0; j < grid.length; j++){\n\
    \            if(grid[j][i] === 1){\n                max_col_count++;\n       \
    \     }\n        }\n        if(max_col_count > max_col){\n            max_col\
    \ = max_col_count;\n        }\n        max_col_count = 0;\n    }\n    if(max_row\
    \ > max_col){\n        count = max_row * capacity;\n    }\n    else{\n       \
    \ count = max_col * capacity;\n    }\n    return count;\n}\n", "    let total\
    \ = 0;\n    let max = 0;\n    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                total += 1;\n            }\n        }\n        if(total\
    \ > max){\n            max = total;\n        }\n        total = 0;\n    }\n  \
    \  count = max * capacity;\n    return count;\n}\n", "    let count = 0;\n   \
    \ let bucket = capacity;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          if(bucket > 0){\n                    bucket--;\n                  \
    \  grid[i][j] = 0;\n                } else {\n                    bucket = capacity;\n\
    \                    count++;\n                    bucket--;\n               \
    \     grid[i][j] = 0;\n                }\n            }\n        }\n    }\n  \
    \  return count;\n}\n", "    let count = 0;\n    let wells = grid.length;\n  \
    \  let length = grid[0].length;\n    let buckets = new Array(wells).fill(0);\n\
    \    let i = 0;\n    while(i < length){\n        for(let j = 0; j < wells; j++){\n\
    \            if(grid[j][i] === 1){\n                buckets[j]++;\n          \
    \      if(buckets[j] === capacity){\n                    buckets[j] = 0;\n   \
    \                 count++;\n                }\n            }\n        }\n    \
    \    i++;\n    }\n    return count;\n}\n", "    let count = 0;\n    let max =\
    \ 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                count++;\n        \
    \    }\n        }\n        if(count > max){\n            max = count;\n      \
    \  }\n        count = 0;\n    }\n    return max * capacity;\n}\n", "    let count\
    \ = 0;\n    let bucket = capacity;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                if(bucket > 0){\n                    bucket--;\n      \
    \              grid[i][j] = 0;\n                }\n                else{\n   \
    \                 count++;\n                    bucket = capacity - 1;\n     \
    \               grid[i][j] = 0;\n                }\n            }\n        }\n\
    \    }\n    return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                grid[i][j] = 0;\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}", "    let count = 0;\n\
    \    let row = grid.length;\n    let col = grid[0].length;\n    let max = 0;\n\
    \    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n  \
    \          if(grid[i][j] == 1){\n                max = Math.max(max, j);\n   \
    \         }\n        }\n    }\n    for(let i = 0; i < row; i++){\n        for(let\
    \ j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n                if(j\
    \ == max){\n                    count += capacity;\n                }\n      \
    \          else{\n                    count += 1;\n                }\n       \
    \     }\n        }\n    }\n    return count;\n}\n", "    // your code here\n}\n",
  "    let count = 0;\n    let max_height = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let max_row = Math.max(...grid[i]);\n        if(max_row > max_height){\n\
    \            max_height = max_row;\n        }\n    }\n    for(let i = 0; i < max_height;\
    \ i++){\n        for(let j = 0; j < grid.length; j++){\n            for(let k\
    \ = 0; k < grid[j].length; k++){\n                if(grid[j][k] > 0){\n      \
    \              grid[j][k] -= 1;\n                    count += 1;\n           \
    \     }\n            }\n        }\n    }\n    return count;\n}\n", "    let count\
    \ = 0;\n    let max = 0;\n    let temp = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ == 1){\n                temp++;\n            }\n        }\n        if(temp >\
    \ max){\n            max = temp;\n        }\n        temp = 0;\n    }\n    count\
    \ = max * capacity;\n    return count;\n}\n", "    let count = 0;\n    let row\
    \ = grid.length;\n    let col = grid[0].length;\n    let total = row * col;\n\
    \    let visited = new Array(row).fill(0).map(() => new Array(col).fill(0));\n\
    \    let queue = [];\n    for(let i = 0; i < row; i++){\n        for(let j = 0;\
    \ j < col; j++){\n            if(grid[i][j] === 1 && visited[i][j] === 0){\n \
    \               queue.push([i, j]);\n                visited[i][j] = 1;\n    \
    \            count++;\n            }\n        }\n    }\n    while(queue.length\
    \ > 0){\n        let cur = queue.shift();\n        let x = cur[0];\n        let\
    \ y = cur[1];\n        if(x - 1 >= 0 && grid[x - 1][y] === 1 && visited[x - 1][y]\
    \ === 0){\n            queue.push([x - 1, y]);\n            visited[x - 1][y]\
    \ = 1;\n            count++;\n        }\n        if(x + 1 < row && grid[x + 1][y]\
    \ === 1 && visited[x + 1][y] === 0){\n            queue.push([x + 1, y]);\n  \
    \          visited[x + 1][y] = 1;\n            count++;\n        }\n        if(y\
    \ - 1 >= 0 && grid[x][y - 1] === 1 && visited[x][y - 1] === 0){\n            queue.push([x,\
    \ y - 1]);\n            visited[x][y - 1] = 1;\n            count++;\n       \
    \ }\n        if(y + 1 < col && grid[x][y + 1] === 1 && visited[x][y + 1] === 0){\n\
    \            queue.push([x, y + 1]);\n            visited[x][y + 1] = 1;\n   \
    \         count++;\n        }\n    }\n    return total - count;\n}\n", "    let\
    \ count = 0;\n    let wells = grid.length;\n    let well_length = grid[0].length;\n\
    \    let buckets = [];\n    for(let i = 0; i < wells; i++){\n        buckets.push(0);\n\
    \    }\n    for(let i = 0; i < well_length; i++){\n        for(let j = 0; j <\
    \ wells; j++){\n            if(grid[j][i] === 1){\n                buckets[j]++;\n\
    \                if(buckets[j] > capacity){\n                    count++;\n  \
    \                  buckets[j] = 0;\n                }\n            }\n       \
    \ }\n    }\n    return count;\n}\n", "    // your code here\n}\n", "    // your\
    \ code here\n    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n \
    \       let sum = 0;\n        for(let j = 0; j < grid[i].length; j++){\n     \
    \       sum += grid[i][j];\n        }\n        if(sum > 0){\n            count\
    \ += Math.ceil(sum / capacity);\n        }\n    }\n    return count;\n}\n", " \
    \   // your code here\n}\n", "    let count = 0;\n    let bucket = capacity;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                if(bucket === 0){\n\
    \                    bucket = capacity;\n                    count++;\n      \
    \          }\n                bucket--;\n            }\n        }\n    }\n   \
    \ return count;\n}\n", "    // your code here\n}\n", "    // your code here\n\
    }\n", "    let fill = 0;\n    let wells = grid.length;\n    let length = grid[0].length;\n\
    \    let buckets = [];\n    for(let i = 0; i < wells; i++){\n        buckets.push(capacity);\n\
    \    }\n    for(let i = 0; i < length; i++){\n        for(let j = 0; j < wells;\
    \ j++){\n            if(grid[j][i] === 1){\n                buckets[j]--;\n  \
    \              if(buckets[j] < 0){\n                    buckets[j] = capacity\
    \ - 1;\n                    fill++;\n                }\n            }\n      \
    \  }\n    }\n    return fill;\n}\n", "    // your code here\n}\n", "    // your\
    \ code here\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] === 1){\n                max += capacity;\n          \
    \  }\n        }\n    }\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count += capacity;\n            }\n            if(count === max){\n\
    \                return count;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n       \
    \ for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                count += capacity;\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i <\
    \ grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n     \
    \       if(grid[i][j] === 1){\n                count++;\n            }\n     \
    \   }\n        if(count > max){\n            max = count;\n        }\n       \
    \ count = 0;\n    }\n    return max * capacity;\n}", "    // your code here\n\
    }\n", "    let count = 0;\n    let max = 0;\n    let max_index = 0;\n    let max_row\
    \ = 0;\n    let max_col = 0;\n    let row_index = 0;\n    let col_index = 0;\n\
    \    let row_length = grid.length;\n    let col_length = grid[0].length;\n   \
    \ let bucket = capacity;\n    while(true){\n        for(let i = 0; i < row_length;\
    \ i++){\n            for(let j = 0; j < col_length; j++){\n                if(grid[i][j]\
    \ === 1){\n                    if(bucket > 0){\n                        bucket--;\n\
    \                        grid[i][j] = 0;\n                    }\n            \
    \        else{\n                        if(max < bucket){\n                  \
    \          max = bucket;\n                            max_index = count;\n   \
    \                         max_row = i;\n                            max_col =\
    \ j;\n                        }\n                        bucket = capacity;\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n        if(max > 0){\n            bucket = max;\n \
    \           count = max_index;\n            grid[max_row][max_col] = 1;\n    \
    \        max = 0;\n        }\n        else{\n            break;\n        }\n \
    \   }\n    return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let wells = grid.length;\n\
    \    let well_length = grid[0].length;\n    let buckets = new Array(wells).fill(0);\n\
    \    let buckets_count = buckets.length;\n    let buckets_capacity = capacity;\n\
    \    let buckets_filled = 0;\n    let buckets_empty = 0;\n    let buckets_full\
    \ = 0;\n    let buckets_not_full = 0;\n    let buckets_not_empty = 0;\n    let\
    \ buckets_not_full_or_empty = 0;\n    let buckets_not_full_or_empty_index = 0;\n\
    \    let buckets_not_full_or_empty_index_value = 0;\n    let buckets_not_full_or_empty_index_value_next\
    \ = 0;\n    let buckets_not_full_or_empty_index_value_next_index = 0;\n    let\
    \ buckets_not_full_or_empty_index_value_next_index_value = 0;\n    let buckets_not_full_or_empty_index_value_next_index_value_next\
    \ = 0;\n    let buckets_not_full_or_empty_index_value_next_index_value_next_index\
    \ = 0;\n    let buckets_not_full_or_empty_index_value_next_index_value_next_index_value\
    \ = 0;\n    let buckets_not_full_or_empty_index_value_next_index_value_next_index_value_next\
    \ = 0;\n    let buckets_not_full_or_empty_index_value_next_index_value_next_index_value_next_index\
    \ = 0;\n    let buckets_not_full_or_empty_index_value_next_index_value_next_index_value_next_index_value\
    \ = 0;\n    let buckets_not_full_or_empty_index_value_next_index_value_next_index_value_next_index_value_next\
    \ = 0;\n    let buckets_not_full_or_empty_index_value_next_index_value_next_index_value_next_index_value_next_index\
    \ = 0;\n    let buckets_not_", "    // your code here\n}\n", "    let count =\
    \ 0;\n    let row = grid.length;\n    let col = grid[0].length;\n    let bucket\
    \ = capacity;\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col;\
    \ j++){\n            if(grid[i][j] === 1){\n                if(bucket === 0){\n\
    \                    count++;\n                    bucket = capacity;\n      \
    \          }\n                bucket--;\n            }\n        }\n    }\n   \
    \ return count;\n}\n", "    // your code here\n}\n", "    let count = 0;\n   \
    \ let max = 0;\n    let max_index = 0;\n    let max_row = 0;\n    let max_col\
    \ = 0;\n    let max_row_index = 0;\n    let max_col_index = 0;\n    let max_row_count\
    \ = 0;\n    let max_col_count = 0;\n    let max_row_max = 0;\n    let max_col_max\
    \ = 0;\n    let max_row_max_index = 0;\n    let max_col_max_index = 0;\n    let\
    \ max_row_max_count = 0;\n    let max_col_max_count = 0;\n    let max_row_max_row\
    \ = 0;\n    let max_col_max_col = 0;\n    let max_row_max_row_index = 0;\n   \
    \ let max_col_max_col_index = 0;\n    let max_row_max_row_count = 0;\n    let\
    \ max_col_max_col_count = 0;\n    let max_row_max_row_max = 0;\n    let max_col_max_col_max\
    \ = 0;\n    let max_row_max_row_max_index = 0;\n    let max_col_max_col_max_index\
    \ = 0;\n    let max_row_max_row_max_count = 0;\n    let max_col_max_col_max_count\
    \ = 0;\n    let max_row_max_row_max_row = 0;\n    let max_col_max_col_max_col\
    \ = 0;\n    let max_row_max_row_max_row_index = 0;\n    let max_col_max_col_max_col_index\
    \ = 0;\n    let max_row_max_row_max_row_count = 0;\n    let max_col_max_col_max_col_count\
    \ = 0;\n    let max_row_max_row_max_row_max = 0;\n    let max_col_max_col_max_col_max\
    \ = 0;\n    let max_row_max_row_max_row_max_index = 0;", "    let count = 0;\n\
    \    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count += 1;\n            }\n        }\n        if(count > max){\n \
    \           max = count;\n        }\n        count = 0;\n    }\n    return max\
    \ * capacity;\n}\n", "    // your code here\n}\n", "    let count = 0;\n    let\
    \ max = 0;\n    let sum = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n\
    \                sum += 1;\n            }\n        }\n        if(sum > max){\n\
    \            max = sum;\n        }\n        sum = 0;\n    }\n    count = max *\
    \ capacity;\n    return count;\n}", "    // your code here\n}\n", "    let count\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] == 1){\n                count\
    \ += capacity;\n            }\n        }\n    }\n    return count;\n}\n", "  \
    \  // your code here\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                if(capacity > 0){\n                    grid[i][j] =\
    \ 0;\n                    capacity--;\n                }\n                else{\n\
    \                    count++;\n                    capacity = capacity + grid[i].length\
    \ - j;\n                    grid[i][j] = 0;\n                    capacity--;\n\
    \                }\n            }\n        }\n    }\n    return count;\n}\n",
  "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count += capacity;\n            }\n        }\n    }\n    return count;\n\
    }\n", "\t// your code here\n}\n", "    // your code here\n}\n", "    let count\
    \ = 0;\n    let max = 0;\n    let max_index = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let sum = 0;\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            sum += grid[i][j];\n        }\n        if(sum > max){\n         \
    \   max = sum;\n            max_index = i;\n        }\n    }\n    for(let i =\
    \ 0; i < grid.length; i++){\n        if(i != max_index){\n            for(let\
    \ j = 0; j < grid[i].length; j++){\n                if(grid[i][j] == 1){\n   \
    \                 grid[i][j] = 0;\n                    count++;\n            \
    \    }\n            }\n        }\n    }\n    for(let i = 0; i < grid[max_index].length;\
    \ i++){\n        if(grid[max_index][i] == 1){\n            grid[max_index][i]\
    \ = 0;\n            count++;\n        }\n    }\n    return count;\n}\n", "   \
    \ let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j\
    \ = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n        \
    \        grid[i][j] = 0;\n                count++;\n                if(i > 0){\n\
    \                    grid[i-1][j] = 0;\n                }\n                if(i\
    \ < grid.length - 1){\n                    grid[i+1][j] = 0;\n               \
    \ }\n                if(j > 0){\n                    grid[i][j-1] = 0;\n     \
    \           }\n                if(j < grid[i].length - 1){\n                 \
    \   grid[i][j+1] = 0;\n                }\n            }\n        }\n    }\n  \
    \  return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let total = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let row = grid[i];\n        let row_total = 0;\n        for(let\
    \ j = 0; j < row.length; j++){\n            if(row[j] === 1){\n              \
    \  row_total += 1;\n            }\n        }\n        if(row_total > capacity){\n\
    \            total += capacity;\n        } else {\n            total += row_total;\n\
    \        }\n    }\n    return total;\n}\n", "    let count = 0;\n    let max =\
    \ 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count++;\n       \
    \     }\n        }\n        if(count > max){\n            max = count;\n     \
    \   }\n        count = 0;\n    }\n    return max * capacity;\n}", "    // your\
    \ code here\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                grid[i][j] = 0;\n                count++;\n           \
    \     let bucket = capacity;\n                while(bucket > 0){\n           \
    \         if(i-1 >= 0 && grid[i-1][j] === 1){\n                        grid[i-1][j]\
    \ = 0;\n                        bucket--;\n                    }\n           \
    \         if(i+1 < grid.length && grid[i+1][j] === 1){\n                     \
    \   grid[i+1][j] = 0;\n                        bucket--;\n                   \
    \ }\n                    if(j-1 >= 0 && grid[i][j-1] === 1){\n               \
    \         grid[i][j-1] = 0;\n                        bucket--;\n             \
    \       }\n                    if(j+1 < grid[i].length && grid[i][j+1] === 1){\n\
    \                        grid[i][j+1] = 0;\n                        bucket--;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    let count = 0;\n    let max = 0;\n    let max_index\
    \ = 0;\n    let max_row = 0;\n    let max_col = 0;\n    let row = 0;\n    let\
    \ col = 0;\n    let row_length = grid.length;\n    let col_length = grid[0].length;\n\
    \    let row_sum = 0;\n    let col_sum = 0;\n    let row_sum_array = [];\n   \
    \ let col_sum_array = [];\n    let row_sum_array_length = 0;\n    let col_sum_array_length\
    \ = 0;\n    let row_sum_array_index = 0;\n    let col_sum_array_index = 0;\n \
    \   let row_sum_array_index_max = 0;\n    let col_sum_array_index_max = 0;\n \
    \   let row_sum_array_index_max_value = 0;\n    let col_sum_array_index_max_value\
    \ = 0;\n    let row_sum_array_index_max_value_index = 0;\n    let col_sum_array_index_max_value_index\
    \ = 0;\n    let row_sum_array_index_max_value_index_max = 0;\n    let col_sum_array_index_max_value_index_max\
    \ = 0;\n    let row_sum_array_index_max_value_index_max_value = 0;\n    let col_sum_array_index_max_value_index_max_value\
    \ = 0;\n    let row_sum_array_index_max_value_index_max_value_index = 0;\n   \
    \ let col_sum_array_index_max_value_index_max_value_index = 0;\n    let row_sum_array_index_max_value_index_max_value_index_max\
    \ = 0;\n    let col_sum_array_index_max_value_index_max_value_index_max = 0;\n\
    \    let row_sum_array_index_max_value_index_max_value_index_max_value = 0;\n\
    \    let col_sum_array_index_max_value_index_max_value", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count++;\n            }\n        }\n        if(count > max){\n    \
    \        max = count;\n        }\n        count = 0;\n    }\n    return max *\
    \ capacity;\n}\n", "  let count = 0;\n  for (let i = 0; i < grid.length; i++)\
    \ {\n    let row = grid[i];\n    let sum = 0;\n    for (let j = 0; j < row.length;\
    \ j++) {\n      sum += row[j];\n    }\n    if (sum > capacity) {\n      count\
    \ += sum - capacity;\n    }\n  }\n  return count;\n}\n", "    let count = 0;\n\
    \    let max = 0;\n    let max_index = 0;\n    let max_row = 0;\n    let max_col\
    \ = 0;\n    let max_row_index = 0;\n    let max_col_index = 0;\n    let max_row_count\
    \ = 0;\n    let max_col_count = 0;\n    let max_row_sum = 0;\n    let max_col_sum\
    \ = 0;\n    let max_row_sum_index = 0;\n    let max_col_sum_index = 0;\n    let\
    \ max_row_sum_count = 0;\n    let max_col_sum_count = 0;\n    let max_row_sum_col\
    \ = 0;\n    let max_col_sum_row = 0;\n    let max_row_sum_col_count = 0;\n   \
    \ let max_col_sum_row_count = 0;\n    let max_row_sum_col_index = 0;\n    let\
    \ max_col_sum_row_index = 0;\n    let max_row_sum_col_sum = 0;\n    let max_col_sum_row_sum\
    \ = 0;\n    let max_row_sum_col_sum_count = 0;\n    let max_col_sum_row_sum_count\
    \ = 0;\n    let max_row_sum_col_sum_index = 0;\n    let max_col_sum_row_sum_index\
    \ = 0;\n    let max_row_sum_col_sum_col = 0;\n    let max_col_sum_row_sum_row\
    \ = 0;\n    let max_row_sum_col_sum_col_count = 0;\n    let max_col_sum_row_sum_row_count\
    \ = 0;\n    let max_row_sum_col_sum_col_index = 0;\n    let max_col_sum_row_sum_row_index\
    \ = 0;\n    let max_row_sum_col_sum_col_sum = 0;\n    let max_col_sum_row_sum_row_sum\
    \ = 0;\n    let max_row_sum_col_sum_col_sum_count = 0;", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "\tlet count = 0;\n\
    \tlet row = grid.length;\n\tlet col = grid[0].length;\n\tlet bucket = capacity;\n\
    \tfor(let i = 0; i < row; i++){\n\t\tfor(let j = 0; j < col; j++){\n\t\t\tif(grid[i][j]\
    \ === 1){\n\t\t\t\tbucket--;\n\t\t\t\tif(bucket === 0){\n\t\t\t\t\tcount++;\n\t\
    \t\t\t\tbucket = capacity;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n\
    }\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max){\n            max = count;\n        }\n        count = 0;\n    }\n  \
    \  return max * capacity;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                max = Math.max(max, j);\n\
    \            }\n        }\n    }\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count += capacity;\n            }\n            if(j ===\
    \ max){\n                count -= capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let sum = 0;\n    for(let i\
    \ = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            sum += grid[i][j];\n        }\n        if(sum > capacity){\n    \
    \        count += sum - capacity;\n        }\n        sum = 0;\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i <\
    \ grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n     \
    \       if(grid[i][j] == 1){\n                max += capacity;\n            }\n\
    \        }\n    }\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] == 1){\n       \
    \         count += capacity;\n            }\n            if(count == max){\n \
    \               return i + 1;\n            }\n        }\n    }\n}\n", "    let\
    \ count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n    let\
    \ max = 0;\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col;\
    \ j++){\n            if(grid[i][j] == 1){\n                count++;\n        \
    \    }\n        }\n        if(count > max){\n            max = count;\n      \
    \  }\n        count = 0;\n    }\n    return max * capacity;\n}\n", "    let count\
    \ = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count++;\n            }\n        }\n        if(count > max){\n    \
    \        max = count;\n        }\n        count = 0;\n    }\n    return max *\
    \ capacity;\n}\n", "    let total = 0;\n    let max = 0;\n    for(let i = 0; i\
    \ < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n   \
    \         if(grid[i][j] == 1){\n                total += 1;\n            }\n \
    \       }\n        if(total > max){\n            max = total;\n        }\n   \
    \     total = 0;\n    }\n    return max * capacity;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          max = Math.max(max, j);\n            }\n        }\n    }\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count += capacity;\n     \
    \       }\n            if(j === max){\n                count -= capacity;\n  \
    \          }\n        }\n    }\n    return count;\n}\n", "    // your code here\n\
    }\n", "    // your code here\n}\n", "    // your code here\n}\n", "    let count\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count\
    \ += capacity;\n            }\n        }\n    }\n    return count;\n}\n", "  //\
    \ your code here\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let result = 0;\n    let max = 0;\n    let max_index\
    \ = 0;\n    let sum = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            sum += grid[i][j];\n        }\n\
    \        if(sum > max){\n            max = sum;\n            max_index = i;\n\
    \        }\n        sum = 0;\n    }\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(i == max_index){\n\
    \                result += grid[i][j];\n            }\n            else{\n   \
    \             result += capacity;\n            }\n        }\n    }\n    return\
    \ result;\n}\n", "    let count = 0;\n    let max = 0;\n    let max_index = 0;\n\
    \    let max_row = 0;\n    let max_col = 0;\n    let max_row_index = 0;\n    let\
    \ max_col_index = 0;\n    let max_row_count = 0;\n    let max_col_count = 0;\n\
    \    let max_row_max = 0;\n    let max_col_max = 0;\n    let max_row_max_index\
    \ = 0;\n    let max_col_max_index = 0;\n    let max_row_max_count = 0;\n    let\
    \ max_col_max_count = 0;\n    let max_row_max_row = 0;\n    let max_col_max_col\
    \ = 0;\n    let max_row_max_row_index = 0;\n    let max_col_max_col_index = 0;\n\
    \    let max_row_max_row_count = 0;\n    let max_col_max_col_count = 0;\n    let\
    \ max_row_max_row_max = 0;\n    let max_col_max_col_max = 0;\n    let max_row_max_row_max_index\
    \ = 0;\n    let max_col_max_col_max_index = 0;\n    let max_row_max_row_max_count\
    \ = 0;\n    let max_col_max_col_max_count = 0;\n    let max_row_max_row_max_row\
    \ = 0;\n    let max_col_max_col_max_col = 0;\n    let max_row_max_row_max_row_index\
    \ = 0;\n    let max_col_max_col_max_col_index = 0;\n    let max_row_max_row_max_row_count\
    \ = 0;\n    let max_col_max_col_max_col_count = 0;\n    let max_row_max_row_max_row_max\
    \ = 0;\n    let max_col_max_col_max_col_max = 0;\n    let max_row_max_row_max_row_max_index\
    \ = 0;", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n    \
    \    for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                grid[i][j] = 0;\n                count++;\n                if(i\
    \ > 0){\n                    if(grid[i-1][j] === 1){\n                       \
    \ grid[i-1][j] = 0;\n                        count++;\n                    }\n\
    \                }\n                if(i < grid.length - 1){\n               \
    \     if(grid[i+1][j] === 1){\n                        grid[i+1][j] = 0;\n   \
    \                     count++;\n                    }\n                }\n   \
    \             if(j > 0){\n                    if(grid[i][j-1] === 1){\n      \
    \                  grid[i][j-1] = 0;\n                        count++;\n     \
    \               }\n                }\n                if(j < grid[i].length -\
    \ 1){\n                    if(grid[i][j+1] === 1){\n                        grid[i][j+1]\
    \ = 0;\n                        count++;\n                    }\n            \
    \    }\n            }\n        }\n    }\n    return count;\n}\n", "  // your code\
    \ here\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                count += capacity;\n            }\n        }\n    }\n \
    \   return count;\n}\n", "    // your code here\n}\n", "    let count = 0;\n \
    \   let max = 0;\n    let max_index = 0;\n    let max_row = [];\n    let max_row_index\
    \ = 0;\n    let max_row_count = 0;\n    let max_row_max = 0;\n    let max_row_max_index\
    \ = 0;\n    let max_row_max_row = [];\n    let max_row_max_row_index = 0;\n  \
    \  let max_row_max_row_count = 0;\n    let max_row_max_row_max = 0;\n    let max_row_max_row_max_index\
    \ = 0;\n    let max_row_max_row_max_row = [];\n    let max_row_max_row_max_row_index\
    \ = 0;\n    let max_row_max_row_max_row_count = 0;\n    let max_row_max_row_max_row_max\
    \ = 0;\n    let max_row_max_row_max_row_max_index = 0;\n    let max_row_max_row_max_row_max_row\
    \ = [];\n    let max_row_max_row_max_row_max_row_index = 0;\n    let max_row_max_row_max_row_max_row_count\
    \ = 0;\n    let max_row_max_row_max_row_max_row_max = 0;\n    let max_row_max_row_max_row_max_row_max_index\
    \ = 0;\n    let max_row_max_row_max_row_max_row_max_row = [];\n    let max_row_max_row_max_row_max_row_max_row_index\
    \ = 0;\n    let max_row_max_row_max_row_max_row_max_row_count = 0;\n    let max_row_max_row_max_row_max_row_max_row_max\
    \ = 0;\n    let max_row_max_row_max_row_max_row_max_row_max_index = 0;\n    let\
    \ max_row_max_row_max_row_max_row_", "    let count = 0;\n    let max = 0;\n \
    \   let row = 0;\n    let col = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] >\
    \ max){\n                max = grid[i][j];\n                row = i;\n       \
    \         col = j;\n            }\n        }\n    }\n    while(max > 0){\n   \
    \     for(let i = 0; i < grid.length; i++){\n            for(let j = 0; j < grid[i].length;\
    \ j++){\n                if(grid[i][j] > 0){\n                    grid[i][j] -=\
    \ capacity;\n                    count++;\n                }\n            }\n\
    \        }\n        max = 0;\n        for(let i = 0; i < grid.length; i++){\n\
    \            for(let j = 0; j < grid[i].length; j++){\n                if(grid[i][j]\
    \ > max){\n                    max = grid[i][j];\n                    row = i;\n\
    \                    col = j;\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count++;\n            }\n\
    \        }\n        if(count > max){\n            max = count;\n        }\n  \
    \      count = 0;\n    }\n    return max * capacity;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                grid[i][j] = 0;\n\
    \                count++;\n                for(let k = i; k < grid.length; k++){\n\
    \                    for(let l = 0; l < grid[k].length; l++){\n              \
    \          if(grid[k][l] === 1){\n                            grid[k][l] = 0;\n\
    \                            count++;\n                        }\n           \
    \         }\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                max = Math.max(max, j);\n            }\n        }\n\
    \    }\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count\
    \ += (max - j);\n            }\n        }\n    }\n    return count;\n}\n", " \
    \   let count = 0;\n    let max = 0;\n    let max_index = 0;\n    for(let i =\
    \ 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] == 1){\n                count++;\n            }\n \
    \       }\n        if(count > max){\n            max = count;\n            max_index\
    \ = i;\n        }\n        count = 0;\n    }\n    return max * capacity;\n}\n",
  "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let\
    \ j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n      \
    \          count += capacity;\n            }\n        }\n    }\n    return count;\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n       \
    \ for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                grid[i][j] = 0;\n                count++;\n                for(let\
    \ k = i; k < grid.length; k++){\n                    if(grid[k][j] === 1){\n \
    \                       grid[k][j] = 0;\n                        count++;\n  \
    \                  }\n                }\n            }\n        }\n    }\n   \
    \ return count;\n}\n", "    let max_fill = 0;\n    let row_count = grid.length;\n\
    \    let col_count = grid[0].length;\n    let row_index = 0;\n    let col_index\
    \ = 0;\n    let row_sum = 0;\n    let col_sum = 0;\n    let row_max = 0;\n   \
    \ let col_max = 0;\n    let row_max_index = 0;\n    let col_max_index = 0;\n \
    \   let row_max_count = 0;\n    let col_max_count = 0;\n    let row_max_sum =\
    \ 0;\n    let col_max_sum = 0;\n    let row_max_index_sum = 0;\n    let col_max_index_sum\
    \ = 0;\n    let row_max_index_count = 0;\n    let col_max_index_count = 0;\n \
    \   let row_max_index_sum_count = 0;\n    let col_max_index_sum_count = 0;\n \
    \   let row_max_index_sum_count_max = 0;\n    let col_max_index_sum_count_max\
    \ = 0;\n    let row_max_index_sum_count_max_index = 0;\n    let col_max_index_sum_count_max_index\
    \ = 0;\n    let row_max_index_sum_count_max_index_sum = 0;\n    let col_max_index_sum_count_max_index_sum\
    \ = 0;\n    let row_max_index_sum_count_max_index_sum_count = 0;\n    let col_max_index_sum_count_max_index_sum_count\
    \ = 0;\n    let row_max_index_sum_count_max_index_sum_count_max = 0;\n    let\
    \ col_max_index_sum_count_max_index_sum_count_max = 0;\n    let row_max_index_sum_count_max_index_sum_count_max_index\
    \ = 0;\n    let col_max_index_sum_count_max_index_sum_count_max_index = 0;\n \
    \   let row_max_index_sum_count_", "  let count = 0;\n  let row = grid.length;\n\
    \  let col = grid[0].length;\n  let max = 0;\n  let max_row = 0;\n  let max_col\
    \ = 0;\n  let max_count = 0;\n  let max_count_row = 0;\n  let max_count_col =\
    \ 0;\n  let max_count_row_col = 0;\n  let max_count_row_col_row = 0;\n  let max_count_row_col_col\
    \ = 0;\n  let max_count_row_col_row_col = 0;\n  let max_count_row_col_row_col_row\
    \ = 0;\n  let max_count_row_col_row_col_col = 0;\n  let max_count_row_col_row_col_row_col\
    \ = 0;\n  let max_count_row_col_row_col_row_col_row = 0;\n  let max_count_row_col_row_col_row_col_col\
    \ = 0;\n  let max_count_row_col_row_col_row_col_row_col = 0;\n  let max_count_row_col_row_col_row_col_row_col_row\
    \ = 0;\n  let max_count_row_col_row_col_row_col_row_col_col = 0;\n  let max_count_row_col_row_col_row_col_row_col_row_col\
    \ = 0;\n  let max_count_row_col_row_col_row_col_row_col_row_col_row = 0;\n  let\
    \ max_count_row_col_row_col_row_col_row_col_row_col_col = 0;\n  let max_count_row_col_row_col_row_col_row_col_row_col_row_col\
    \ = 0;\n  let max_count_row_col_row_col_row_col_row_col_row_col_row_col_row =\
    \ 0;\n  let max_count_row_col_row_col_row_col_row_col_row_col", "    let count\
    \ = 0;\n    let wells = grid.length;\n    let length = grid[0].length;\n    let\
    \ buckets = [];\n    for(let i = 0; i < wells; i++){\n        buckets.push(0);\n\
    \    }\n    for(let i = 0; i < length; i++){\n        for(let j = 0; j < wells;\
    \ j++){\n            if(grid[j][i] === 1){\n                buckets[j] += 1;\n\
    \            }\n        }\n        for(let k = 0; k < wells; k++){\n         \
    \   if(buckets[k] > capacity){\n                count += buckets[k] - capacity;\n\
    \                buckets[k] = capacity;\n            }\n        }\n    }\n   \
    \ return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        let row = grid[i];\n        let bucket = capacity;\n        for(let\
    \ j = 0; j < row.length; j++){\n            if(row[j] === 1){\n              \
    \  if(bucket === 0){\n                    bucket = capacity;\n               \
    \     count++;\n                }\n                bucket--;\n            }\n\
    \        }\n        if(bucket !== capacity){\n            count++;\n        }\n\
    \    }\n    return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let max = 0;\n    let max_index\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n\
    \            }\n        }\n        if(count > max){\n            max = count;\n\
    \            max_index = i;\n        }\n        count = 0;\n    }\n    let max_count\
    \ = 0;\n    for(let i = 0; i < grid[max_index].length; i++){\n        if(grid[max_index][i]\
    \ === 1){\n            max_count++;\n        }\n    }\n    return max_count *\
    \ capacity;\n}\n", "    let count = 0;\n    let row = grid.length;\n    let col\
    \ = grid[0].length;\n    let wells = [];\n    for(let i = 0; i < row; i++){\n\
    \        wells.push([]);\n        for(let j = 0; j < col; j++){\n            wells[i].push(0);\n\
    \        }\n    }\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j\
    \ < col; j++){\n            if(grid[i][j] === 1){\n                wells[i][j]\
    \ = capacity;\n            }\n        }\n    }\n    for(let i = 0; i < row; i++){\n\
    \        for(let j = 0; j < col; j++){\n            if(wells[i][j] === capacity){\n\
    \                count += capacity;\n                for(let k = i; k < row; k++){\n\
    \                    if(wells[k][j] > 0){\n                        wells[k][j]\
    \ = 0;\n                    }\n                }\n            }\n        }\n \
    \   }\n    return count;\n}\n", "    let count = 0;\n    let max = 0;\n    for(let\
    \ i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length; j++){\n\
    \            if(grid[i][j] === 1){\n                count++;\n            }\n\
    \        }\n        if(count > max){\n            max = count;\n        }\n  \
    \      count = 0;\n    }\n    return max * capacity;\n}\n", "    let count = 0;\n\
    \    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] === 1){\n                count += capacity;\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    // your code here\n\
    }\n", "    let count = 0;\n    for(let i = 0; i < grid.length; i++){\n       \
    \ for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n\
    \                count += capacity;\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    let row = grid.length;\n    let col =\
    \ grid[0].length;\n    let bucket = capacity;\n    for(let i = 0; i < row; i++){\n\
    \        for(let j = 0; j < col; j++){\n            if(grid[i][j] === 1){\n  \
    \              if(bucket === 0){\n                    count++;\n             \
    \       bucket = capacity;\n                }\n                bucket--;\n   \
    \         }\n        }\n    }\n    return count;\n}\n", "    // your code here\n\
    }\n", "    let count = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count++;\n            }\n        }\n        if(count\
    \ > max){\n            max = count;\n        }\n        count = 0;\n    }\n  \
    \  return max * capacity;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let max = 0;\n    let max_index\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] > max){\n                max\
    \ = grid[i][j];\n                max_index = j;\n            }\n        }\n  \
    \      count += capacity - max;\n        max = 0;\n    }\n    return count;\n}",
  "    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let i = 0;\n    let j = 0;\n    while(i < row){\n        while(j < col){\n\
    \            if(grid[i][j] == 1){\n                grid[i][j] = 0;\n         \
    \       count++;\n                if(j + 1 < col && grid[i][j + 1] == 1){\n  \
    \                  grid[i][j + 1] = 0;\n                    count++;\n       \
    \         }\n                if(i + 1 < row && grid[i + 1][j] == 1){\n       \
    \             grid[i + 1][j] = 0;\n                    count++;\n            \
    \    }\n            }\n            j++;\n        }\n        j = 0;\n        i++;\n\
    \    }\n    return count;\n}\n", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                grid[i][j] = 0;\n                count++;\n       \
    \         let k = i;\n                while(k >= 0 && capacity > 0){\n       \
    \             if(grid[k][j] === 1){\n                        grid[k][j] = 0;\n\
    \                        capacity--;\n                    }\n                \
    \    k--;\n                }\n                capacity = capacity + 1;\n     \
    \       }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n  \
    \  let max = 0;\n    let max_index = 0;\n    let i = 0;\n    let j = 0;\n    while(i\
    \ < grid.length){\n        if(grid[i][j] === 1){\n            count++;\n     \
    \       if(count > max){\n                max = count;\n                max_index\
    \ = i;\n            }\n        }\n        else{\n            count = 0;\n    \
    \    }\n        if(j === grid[i].length - 1){\n            i++;\n            j\
    \ = 0;\n        }\n        else{\n            j++;\n        }\n    }\n    return\
    \ max_index * capacity;\n}\n", "    let count = 0;\n    let max = 0;\n    let\
    \ bucket = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j =\
    \ 0; j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n          \
    \      bucket += 1;\n                if(bucket === capacity){\n              \
    \      count += 1;\n                    bucket = 0;\n                }\n     \
    \       }\n        }\n        if(bucket > max){\n            max = bucket;\n \
    \       }\n        bucket = 0;\n    }\n    return max * count;\n}\n", "    let\
    \ count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   if(capacity === 1){\n                    count += 1;\n                } else\
    \ {\n                    count += Math.ceil(capacity / 2);\n                }\n\
    \            }\n        }\n    }\n    return count;\n}\n", "    let count = 0;\n\
    \    let row = 0;\n    let col = 0;\n    let max = 0;\n    let maxRow = 0;\n \
    \   let maxCol = 0;\n    let maxRowCount = 0;\n    let maxColCount = 0;\n    let\
    \ maxRowColCount = 0;\n    let maxRowCol = 0;\n    let maxRowColRow = 0;\n   \
    \ let maxRowColCol = 0;\n    let maxRowColRowCount = 0;\n    let maxRowColColCount\
    \ = 0;\n    let maxRowColRowColCount = 0;\n    let maxRowColRowCol = 0;\n    let\
    \ maxRowColRowColRow = 0;\n    let maxRowColRowColCol = 0;\n    let maxRowColRowColRowCount\
    \ = 0;\n    let maxRowColRowColColCount = 0;\n    let maxRowColRowColRowColCount\
    \ = 0;\n    let maxRowColRowColRowCol = 0;\n    let maxRowColRowColRowColRow =\
    \ 0;\n    let maxRowColRowColRowColCol = 0;\n    let maxRowColRowColRowColRowCount\
    \ = 0;\n    let maxRowColRowColRowColColCount = 0;\n    let maxRowColRowColRowColRowColCount\
    \ = 0;\n    let maxRowColRowColRowColRowCol = 0;\n    let maxRowColRowColRowColRowColRow\
    \ = 0;\n    let maxRowColRowColRowColRowColCol = 0;\n    let maxRowColRowColRowColRowColRowCount\
    \ = 0;\n    let maxRowColRowColRowColRowColColCount = 0;\n    let maxRowColRowColRowColRowColRowColCount\
    \ = 0;\n    let maxRowColRowColRowColRowColRowCol = 0;\n    let maxRowColRowColRowColRowColRowColRow\
    \ = 0;\n    let maxRowColRowColRowColRowColRowColCol = 0;\n    let maxRowColRowColRowColRowColRowColRowCount\
    \ = 0;\n    let maxRowColRowColRowColRowColRowColColCount = 0;\n    let maxRowColRowColRowColRowColRowColRowColCount\
    \ = 0;\n    let maxRow", "    let count = 0;\n    for(let i = 0; i < grid.length;\
    \ i++){\n        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j]\
    \ === 1){\n                count += capacity;\n            }\n        }\n    }\n\
    \    return count;\n}\n", "    let count = 0;\n    let wells = grid.length;\n\
    \    let well_length = grid[0].length;\n    let buckets = [];\n    for(let i =\
    \ 0; i < wells; i++){\n        buckets.push(capacity);\n    }\n    for(let i =\
    \ 0; i < well_length; i++){\n        for(let j = 0; j < wells; j++){\n       \
    \     if(grid[j][i] == 1){\n                if(buckets[j] > 0){\n            \
    \        buckets[j]--;\n                }\n                else{\n           \
    \         count++;\n                    buckets[j] = capacity - 1;\n         \
    \       }\n            }\n        }\n    }\n    return count;\n}\n", "    let\
    \ count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n    let\
    \ max = 0;\n    let max_row = 0;\n    let max_col = 0;\n    let max_count = 0;\n\
    \    let max_count_row = 0;\n    let max_count_col = 0;\n    let max_count_row_col\
    \ = 0;\n    let max_count_row_col_row = 0;\n    let max_count_row_col_col = 0;\n\
    \    let max_count_row_col_row_col = 0;\n    let max_count_row_col_row_col_row\
    \ = 0;\n    let max_count_row_col_row_col_col = 0;\n    let max_count_row_col_row_col_row_col\
    \ = 0;\n    let max_count_row_col_row_col_row_col_row = 0;\n    let max_count_row_col_row_col_row_col_col\
    \ = 0;\n    let max_count_row_col_row_col_row_col_row_col = 0;\n    let max_count_row_col_row_col_row_col_row_col_row\
    \ = 0;\n    let max_count_row_col_row_col_row_col_row_col_col = 0;\n    let max_count_row_col_row_col_row_col_row_col_row_col\
    \ = 0;\n    let max_count_row_col_row_col_row_col_row_col_row_col_row = 0;\n \
    \   let max_count_row_col_row_col_row_col_row_col_row_col_col = 0;\n    let max_count_row_col_row_col_row_col_row_col_row_col_row_col\
    \ = 0;\n    let max_count_row_col_row_col_row_col_row_col_row_col_row_col_row\
    \ = 0;\n    let max_count_row_col_row_col_row_col_row_col_row_col", "    let count\
    \ = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n    let max\
    \ = 0;\n    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n\
    \            if(grid[i][j] == 1){\n                max = Math.max(max, j);\n \
    \           }\n        }\n    }\n    for(let i = 0; i < row; i++){\n        for(let\
    \ j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n                count++;\n\
    \                grid[i][j] = 0;\n            }\n            if(j == max){\n \
    \               break;\n            }\n        }\n    }\n    return count;\n}\n",
  "    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let max_row = 0;\n    let max_col = 0;\n    for(let i = 0; i < row; i++){\n\
    \        for(let j = 0; j < col; j++){\n            if(grid[i][j] == 1){\n   \
    \             max_row = Math.max(max_row, i);\n                max_col = Math.max(max_col,\
    \ j);\n            }\n        }\n    }\n    for(let i = 0; i <= max_row; i++){\n\
    \        for(let j = 0; j <= max_col; j++){\n            if(grid[i][j] == 1){\n\
    \                count++;\n            }\n        }\n    }\n    return count *\
    \ capacity;\n}\n", "    let count = 0;\n    let max = 0;\n    let max_row = 0;\n\
    \    let max_col = 0;\n    let max_row_count = 0;\n    let max_col_count = 0;\n\
    \    let row_count = 0;\n    let col_count = 0;\n    let row_total = 0;\n    let\
    \ col_total = 0;\n    let row_max = 0;\n    let col_max = 0;\n    let row_max_count\
    \ = 0;\n    let col_max_count = 0;\n    let row_max_index = 0;\n    let col_max_index\
    \ = 0;\n    let row_max_index_count = 0;\n    let col_max_index_count = 0;\n \
    \   let row_max_index_total = 0;\n    let col_max_index_total = 0;\n    let row_max_index_max\
    \ = 0;\n    let col_max_index_max = 0;\n    let row_max_index_max_count = 0;\n\
    \    let col_max_index_max_count = 0;\n    let row_max_index_max_total = 0;\n\
    \    let col_max_index_max_total = 0;\n    let row_max_index_max_index = 0;\n\
    \    let col_max_index_max_index = 0;\n    let row_max_index_max_index_count =\
    \ 0;\n    let col_max_index_max_index_count = 0;\n    let row_max_index_max_index_total\
    \ = 0;\n    let col_max_index_max_index_total = 0;\n    let row_max_index_max_index_max\
    \ = 0;\n    let col_max_index_max_index_max = 0;\n    let row_max_index_max_index_max_count\
    \ = 0;\n    let col_max_index_max_index_max_count = 0;\n    let row_max_index_max_index_max_total\
    \ = 0;\n    let col_max_index_max_index_max_total = 0;\n    let row_max_index_max_index_max",
  "    // your code here\n}\n", "    let count = 0;\n    let max = 0;\n    let max_index\
    \ = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j <\
    \ grid[i].length; j++){\n            if(grid[i][j] === 1){\n                count++;\n\
    \            }\n        }\n        if(count > max){\n            max = count;\n\
    \            max_index = i;\n        }\n        count = 0;\n    }\n    return\
    \ max * capacity;\n}\n", "    let count = 0;\n    let max = 0;\n    let min =\
    \ 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0; j < grid[i].length;\
    \ j++){\n            if(grid[i][j] == 1){\n                max++;\n          \
    \  }\n        }\n        if(max > min){\n            min = max;\n        }\n \
    \       max = 0;\n    }\n    count = min * capacity;\n    return count;\n}\n",
  "    let result = 0;\n    let max = 0;\n    for(let i = 0; i < grid.length; i++){\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            if(grid[i][j] ===\
    \ 1){\n                max = Math.max(max, j);\n            }\n        }\n   \
    \     result += max;\n        max = 0;\n    }\n    return result * capacity;\n\
    }\n", "    let count = 0;\n    let row = grid.length;\n    let col = grid[0].length;\n\
    \    let col_arr = new Array(col).fill(0);\n    let row_arr = new Array(row).fill(0);\n\
    \    for(let i = 0; i < row; i++){\n        for(let j = 0; j < col; j++){\n  \
    \          if(grid[i][j] == 1){\n                col_arr[j] += 1;\n          \
    \      row_arr[i] += 1;\n            }\n        }\n    }\n    for(let i = 0; i\
    \ < row; i++){\n        if(row_arr[i] > 0){\n            count += Math.ceil(row_arr[i]\
    \ / capacity);\n        }\n    }\n    for(let i = 0; i < col; i++){\n        if(col_arr[i]\
    \ > 0){\n            count += Math.ceil(col_arr[i] / capacity);\n        }\n \
    \   }\n    return count;\n}\n", "    let total = 0;\n    let max = 0;\n    let\
    \ count = 0;\n    for(let i = 0; i < grid.length; i++){\n        for(let j = 0;\
    \ j < grid[i].length; j++){\n            if(grid[i][j] === 1){\n             \
    \   total += 1;\n            }\n        }\n        if(total > max){\n        \
    \    max = total;\n        }\n        total = 0;\n    }\n    if(max <= capacity){\n\
    \        return 0;\n    }\n    else{\n        count = max / capacity;\n      \
    \  if(max % capacity !== 0){\n            count += 1;\n        }\n        return\
    \ count;\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
