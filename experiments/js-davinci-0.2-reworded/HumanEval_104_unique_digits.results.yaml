name: HumanEval_104_unique_digits
language: js
results:
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n  \
    \              flag = false;\n            }\n        }\n        if(flag){\n  \
    \          unique.push(x[i]);\n        }\n    }\n    return unique.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i];\n        var str = num.toString();\n        var\
    \ flag = true;\n        for(var j = 0; j < str.length; j++){\n            if(str[j]\
    \ % 2 == 0){\n                flag = false;\n            }\n        }\n      \
    \  if(flag){\n            arr.push(num);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var newArr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i];\n        var str = num.toString();\n        var\
    \ flag = true;\n        for(var j = 0; j < str.length; j++){\n            if(str[j]\
    \ % 2 === 0){\n                flag = false;\n            }\n        }\n     \
    \   if(flag){\n            newArr.push(num);\n        }\n    }\n    return newArr.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique_digits_array = [];\n    for (var i\
    \ = 0; i < x.length; i++){\n        var number = x[i];\n        var is_unique\
    \ = true;\n        while (number > 0){\n            var digit = number % 10;\n\
    \            if (digit % 2 == 0){\n                is_unique = false;\n      \
    \          break;\n            }\n            number = Math.floor(number / 10);\n\
    \        }\n        if (is_unique){\n            unique_digits_array.push(x[i]);\n\
    \        }\n    }\n    return unique_digits_array.sort(function(a, b){return a\
    \ - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        for(var\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n           \
    \     even.push(x[i]);\n                break;\n            }\n        }\n   \
    \ }\n    for(var i = 0; i < x.length; i++){\n        if(even.indexOf(x[i]) ==\
    \ -1){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let str = x[i].toString();\n        let flag = true;\n      \
    \  for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n \
    \               flag = false;\n                break;\n            }\n       \
    \ }\n        if(flag){\n            result.push(x[i]);\n        }\n    }\n   \
    \ return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var even = false;\n        var num = x[i].toString();\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            unique.push(x[i]);\n        }\n    }\n    return unique.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    // your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n[ 1, 15, 33\
    \ ]\n    at test (/tmp/tmpj5buw2lt.js:18:10)\n    at Object.<anonymous> (/tmp/tmpj5buw2lt.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var str = x[i].toString();\n        var flag = false;\n     \
    \   for(var j = 0; j < str.length; j++){\n            if(str[j] % 2 == 0){\n \
    \               flag = true;\n                break;\n            }\n        }\n\
    \        if(!flag){\n            arr.push(x[i]);\n        }\n    }\n    return\
    \ arr.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var newArr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var str = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n \
    \               flag = false;\n            }\n        }\n        if(flag){\n \
    \           newArr.push(x[i]);\n        }\n    }\n    return newArr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(function(y){\n           \
    \ return y % 2 !== 0;\n        })){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort(function(a, b){\n        return a - b;\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        var\
    \ count = 0;\n        for(var j = 0; j < num.length; j++){\n            if(num[j]\
    \ % 2 == 0){\n                count++;\n            }\n        }\n        if(count\
    \ == 0){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().length === 1){\n            result.push(x[i]);\n\
    \        }\n        else{\n            var counter = 0;\n            for(var j\
    \ = 0; j < x[i].toString().length; j++){\n                if(x[i].toString()[j]\
    \ % 2 !== 0){\n                    counter++;\n                }\n           \
    \ }\n            if(counter === x[i].toString().length){\n                result.push(x[i]);\n\
    \            }\n        }\n    }\n    return result.sort(function(a, b){return\
    \ a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var evens = [];\n    var odds = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        var\
    \ even = false;\n        for(var j = 0; j < num.length; j++){\n            if(num[j]\
    \ % 2 == 0){\n                even = true;\n            }\n        }\n       \
    \ if(even){\n            evens.push(x[i]);\n        }\n        else{\n       \
    \     odds.push(x[i]);\n        }\n    }\n    return odds.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var even = false;\n        var num = x[i].toString();\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let isEven = false;\n        let num = x[i].toString();\n   \
    \     for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                isEven = true;\n            }\n        }\n        if(!isEven){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString().split(\"\");\n        var count = 0;\n\
    \        for (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n\
    \                count++;\n            }\n        }\n        if (count == 0){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even_digits = [0, 2, 4, 6, 8];\n    var result\
    \ = [];\n    for (var i = 0; i < x.length; i++){\n        var num = x[i];\n  \
    \      var has_even = false;\n        while (num > 0){\n            var digit\
    \ = num % 10;\n            if (even_digits.indexOf(digit) > -1){\n           \
    \     has_even = true;\n                break;\n            }\n            num\
    \ = Math.floor(num / 10);\n        }\n        if (!has_even){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a - b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var is_unique = true;\n        var num = x[i].toString();\n \
    \       for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n\
    \                is_unique = false;\n            }\n        }\n        if(is_unique){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpnxefjys2.js:31:10)\n    at Object.<anonymous> (/tmp/tmpnxefjys2.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString();\n        var count = 0;\n        for\
    \ (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n         \
    \       count++;\n            }\n        }\n        if (count == 0){\n       \
    \     y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var str = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < str.length; j++){\n            if(str[j] % 2 == 0){\n  \
    \              flag = false;\n                break;\n            }\n        }\n\
    \        if(flag == true){\n            result.push(x[i]);\n        }\n    }\n\
    \    return result.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString();\n        var even = false;\n       \
    \ for (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n     \
    \           even = true;\n            }\n        }\n        if (even == false){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString();\n        var even = false;\n       \
    \ for (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n     \
    \           even = true;\n            }\n        }\n        if (even == false){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let newArr = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i];\n        let numStr = num.toString();\n     \
    \   let isEven = false;\n        for(let j = 0; j < numStr.length; j++){\n   \
    \         if(numStr[j] % 2 === 0){\n                isEven = true;\n         \
    \   }\n        }\n        if(!isEven){\n            newArr.push(num);\n      \
    \  }\n    }\n    return newArr.sort((a,b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(function(e){\n           \
    \ return e % 2 !== 0;\n        })){\n            unique.push(x[i]);\n        }\n\
    \    }\n    return unique.sort(function(a, b){\n        return a - b;\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var isEven = false;\n        var num = x[i].toString();\n   \
    \     for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                isEven = true;\n            }\n        }\n        if(!isEven){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let current = x[i];\n        let isEven = false;\n        while(current\
    \ > 0){\n            let digit = current % 10;\n            if(digit % 2 === 0){\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       current = Math.floor(current / 10);\n        }\n        if(!isEven){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var even = false;\n        var num = x[i].toString();\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var evenDigits = [];\n    var noEvenDigits = [];\n\
    \    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                evenDigits.push(x[i]);\n                break;\n            }\n\
    \        }\n    }\n    for(var i = 0; i < x.length; i++){\n        if(evenDigits.indexOf(x[i])\
    \ === -1){\n            noEvenDigits.push(x[i]);\n        }\n    }\n    return\
    \ noEvenDigits.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even_digits = [2,4,6,8,0];\n    var unique_digits\
    \ = [];\n    for (var i = 0; i < x.length; i++){\n        var is_unique = true;\n\
    \        var num = x[i].toString();\n        for (var j = 0; j < num.length; j++){\n\
    \            if (even_digits.includes(parseInt(num[j]))){\n                is_unique\
    \ = false;\n            }\n        }\n        if (is_unique){\n            unique_digits.push(x[i]);\n\
    \        }\n    }\n    return unique_digits.sort(function(a, b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i];\n        let even = false;\n        while(num\
    \ > 0){\n            let digit = num % 10;\n            if(digit % 2 == 0){\n\
    \                even = true;\n                break;\n            }\n       \
    \     num = Math.floor(num / 10);\n        }\n        if(!even){\n           \
    \ result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString();\n        let flag = true;\n      \
    \  for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n \
    \               flag = false;\n                break;\n            }\n       \
    \ }\n        if(flag){\n            result.push(x[i]);\n        }\n    }\n   \
    \ return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even_digit = [];\n    var unique_digit = [];\n\
    \    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString().split('');\n\
    \        for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                even_digit.push(x[i]);\n                break;\n            }\n\
    \        }\n    }\n    for(var k = 0; k < x.length; k++){\n        if(even_digit.indexOf(x[k])\
    \ === -1){\n            unique_digit.push(x[k]);\n        }\n    }\n    return\
    \ unique_digit.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n  \
    \              flag = false;\n                break;\n            }\n        }\n\
    \        if(flag){\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString().split(\"\");\n        var count = 0;\n\
    \        for (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n\
    \                count += 1;\n            }\n        }\n        if (count == 0){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var newArr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(function(e){\n           \
    \ return e % 2 !== 0;\n        })){\n            newArr.push(x[i]);\n        }\n\
    \    }\n    return newArr.sort(function(a, b){\n        return a - b;\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString().split(\"\");\n        var count = 0;\n\
    \        for (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n\
    \                count++;\n            }\n        }\n        if (count == 0){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even_digits = [];\n    var odd_digits = [];\n\
    \    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                even_digits.push(num);\n                break;\n            }\n\
    \        }\n    }\n    for(var k = 0; k < x.length; k++){\n        if(even_digits.indexOf(x[k].toString())\
    \ === -1){\n            odd_digits.push(x[k]);\n        }\n    }\n    return odd_digits.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(function(num){\n         \
    \   return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n       \
    \ }\n    }\n    return arr.sort(function(a, b){\n        return a - b;\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        if (x[i].toString().includes(\"2\") || x[i].toString().includes(\"\
    4\") || x[i].toString().includes(\"6\") || x[i].toString().includes(\"8\") ||\
    \ x[i].toString().includes(\"0\")){\n            continue;\n        }\n      \
    \  else{\n            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var even = false;\n        var num = x[i].toString();\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let even = [];\n    let odd = [];\n    for(let\
    \ i = 0; i < x.length; i++){\n        if(x[i] % 2 === 0){\n            even.push(x[i]);\n\
    \        }else{\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort((a,b)\
    \ => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 323 ]\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmp3yg8okz6.js:28:10)\n    at Object.<anonymous> (/tmp/tmp3yg8okz6.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(function(y){\n           \
    \ return y % 2 !== 0;\n        })){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort(function(a, b){\n        return a - b;\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString().split(\"\");\n        var count = 0;\n\
    \        for (var j = 0; j < z.length; j++){\n            if (z[j] % 2 === 0){\n\
    \                count++;\n            }\n        }\n        if (count === 0){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var str = x[i].toString();\n        var count = 0;\n        for(var\
    \ j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n          \
    \      count++;\n            }\n        }\n        if(count === 0){\n        \
    \    arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a, b){return\
    \ a - b});\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString();\n        let count = 0;\n        for(let\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n          \
    \      count++;\n            }\n        }\n        if(count === 0){\n        \
    \    result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a\
    \ - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i];\n        let digits = num.toString().split('');\n\
    \        let isEven = false;\n        for(let j = 0; j < digits.length; j++){\n\
    \            if(digits[j] % 2 === 0){\n                isEven = true;\n      \
    \      }\n        }\n        if(!isEven){\n            result.push(num);\n   \
    \     }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var even = false;\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            unique.push(x[i]);\n        }\n    }\n    return unique.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        var\
    \ count = 0;\n        for(var j = 0; j < num.length; j++){\n            if(num[j]\
    \ % 2 == 0){\n                count++;\n            }\n        }\n        if(count\
    \ > 0){\n            even.push(x[i]);\n        }\n        else{\n            odd.push(x[i]);\n\
    \        }\n    }\n    return odd.sort(function(a, b){return a-b});\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        if (x[i].toString().length == 1){\n            y.push(x[i]);\n\
    \        }\n        else{\n            var z = x[i].toString().split(\"\");\n\
    \            var count = 0;\n            for (var j = 0; j < z.length; j++){\n\
    \                if (z[j] % 2 == 0){\n                    count++;\n         \
    \       }\n            }\n            if (count == 0){\n                y.push(x[i]);\n\
    \            }\n        }\n    }\n    return y.sort(function(a, b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var temp = x[i].toString().split('');\n        var count = 0;\n\
    \        for(var j = 0; j < temp.length; j++){\n            if(temp[j] % 2 ==\
    \ 0){\n                count++;\n            }\n        }\n        if(count ==\
    \ 0){\n            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let unique_digits = [];\n    for (let i = 0; i\
    \ < x.length; i++){\n        let is_unique = true;\n        let num = x[i].toString();\n\
    \        for (let j = 0; j < num.length; j++){\n            if (num[j] % 2 ===\
    \ 0){\n                is_unique = false;\n            }\n        }\n        if\
    \ (is_unique){\n            unique_digits.push(x[i]);\n        }\n    }\n    return\
    \ unique_digits.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let even = [];\n    let odd = [];\n    for(let\
    \ i = 0; i < x.length; i++){\n        let num = x[i];\n        let str = num.toString();\n\
    \        let count = 0;\n        for(let j = 0; j < str.length; j++){\n      \
    \      if(str[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            odd.push(num);\n        }\n      \
    \  else{\n            even.push(num);\n        }\n    }\n    return odd.sort();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 135, 31 ]\n\nshould equal\n\n[ 31, 135\
    \ ]\n    at test (/tmp/tmpsocmqvq2.js:38:10)\n    at Object.<anonymous> (/tmp/tmpsocmqvq2.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 135, 31 ],\n  expected: [ 31, 135 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n  var result = [];\n  for (var i = 0; i < x.length;\
    \ i++) {\n    var even = false;\n    var num = x[i].toString();\n    for (var\
    \ j = 0; j < num.length; j++) {\n      if (num[j] % 2 === 0) {\n        even =\
    \ true;\n      }\n    }\n    if (even === false) {\n      result.push(x[i]);\n\
    \    }\n  }\n  return result.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var even = false;\n        var num = x[i].toString();\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n  \
    \              flag = false;\n            }\n        }\n        if(flag){\n  \
    \          arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let temp = x[i].toString().split('');\n        let flag = true;\n\
    \        for(let j = 0; j < temp.length; j++){\n            if(temp[j] % 2 ===\
    \ 0){\n                flag = false;\n                break;\n            }\n\
    \        }\n        if(flag){\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString();\n        var a = 0;\n        for (var\
    \ j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n              \
    \  a++;\n            }\n        }\n        if (a == 0){\n            y.push(x[i]);\n\
    \        }\n    }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i=0; i<x.length;\
    \ i++){\n        let even = false;\n        let num = x[i].toString();\n     \
    \   for(let j=0; j<num.length; j++){\n            if(num[j]%2==0){\n         \
    \       even = true;\n            }\n        }\n        if(!even){\n         \
    \   result.push(x[i]);\n        }\n    }\n    return result.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        var\
    \ count = 0;\n        for(var j = 0; j < num.length; j++){\n            if(num[j]\
    \ % 2 == 0){\n                count++;\n            }\n        }\n        if(count\
    \ == 0){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var even = false;\n        var num = x[i].toString();\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            unique.push(x[i]);\n        }\n    }\n    return unique.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even_digits = [];\n    var even_digits_index\
    \ = [];\n    var unique_digits = [];\n    for (var i = 0; i < x.length; i++){\n\
    \        var element = x[i].toString();\n        for (var j = 0; j < element.length;\
    \ j++){\n            if (element[j] % 2 === 0){\n                even_digits.push(element[j]);\n\
    \                even_digits_index.push(i);\n            }\n        }\n    }\n\
    \    for (var k = 0; k < x.length; k++){\n        if (even_digits_index.indexOf(k)\
    \ === -1){\n            unique_digits.push(x[k]);\n        }\n    }\n    return\
    \ unique_digits.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let even = [];\n    let odd = [];\n    for(let\
    \ i = 0; i < x.length; i++){\n        let num = x[i].toString();\n        let\
    \ count = 0;\n        for(let j = 0; j < num.length; j++){\n            if(num[j]\
    \ % 2 === 0){\n                count++;\n            }\n        }\n        if(count\
    \ === 0){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var flag = true;\n        var num = x[i].toString();\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n  \
    \              flag = false;\n                break;\n            }\n        }\n\
    \        if(flag){\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let arr = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString();\n        let flag = false;\n     \
    \   for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                flag = true;\n            }\n        }\n        if(flag === false){\n\
    \            arr.push(x[i]);\n        }\n    }\n    return arr.sort((a,b) => a\
    \ - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        if (x[i].toString().includes(\"2\") || x[i].toString().includes(\"\
    4\") || x[i].toString().includes(\"6\") || x[i].toString().includes(\"8\") ||\
    \ x[i].toString().includes(\"0\")){\n            continue;\n        }\n      \
    \  else{\n            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let even = false;\n        let num = x[i].toString().split('');\n\
    \        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                even = true;\n            }\n        }\n        if(even === false){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even_digits = [];\n    for (var i = 0; i <\
    \ x.length; i++){\n        var str = x[i].toString();\n        for (var j = 0;\
    \ j < str.length; j++){\n            if (str[j] % 2 === 0){\n                even_digits.push(x[i]);\n\
    \                break;\n            }\n        }\n    }\n    var unique_digits\
    \ = [];\n    for (var i = 0; i < x.length; i++){\n        if (even_digits.indexOf(x[i])\
    \ === -1){\n            unique_digits.push(x[i]);\n        }\n    }\n    return\
    \ unique_digits.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var even = false;\n        var num = x[i].toString();\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var newArr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var str = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n \
    \               flag = false;\n            }\n        }\n        if(flag){\n \
    \           newArr.push(x[i]);\n        }\n    }\n    return newArr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString().split('');\n        var count = 0;\n\
    \        for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                count++;\n            }\n        }\n        if(count === 0){\n\
    \            arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        if(x[i] % 2 === 0){\n            even.push(x[i]);\n\
    \        }\n        else{\n            odd.push(x[i]);\n        }\n    }\n   \
    \ return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpzruobrkm.js:27:10)\n    at Object.<anonymous> (/tmp/tmpzruobrkm.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var temp = x[i].toString().split('');\n        var flag = true;\n\
    \        for(var j = 0; j < temp.length; j++){\n            if(temp[j] % 2 ==\
    \ 0){\n                flag = false;\n                break;\n            }\n\
    \        }\n        if(flag){\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result.sort(function(a, b){return a - b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var str = x[i].toString();\n        var isEven = false;\n   \
    \     for (var j = 0; j < str.length; j++){\n            if (str[j] % 2 == 0){\n\
    \                isEven = true;\n            }\n        }\n        if (!isEven){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var is_unique = true;\n        var num = x[i].toString();\n \
    \       for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n\
    \                is_unique = false;\n            }\n        }\n        if(is_unique){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpyahuyn80.js:31:10)\n    at Object.<anonymous> (/tmp/tmpyahuyn80.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var str = x[i].toString();\n        var count = 0;\n        for(var\
    \ j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n          \
    \      count++;\n            }\n        }\n        if(count === 0){\n        \
    \    arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a, b){return\
    \ a - b});\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let even_digits = [];\n    let unique_digits =\
    \ [];\n    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString();\n\
    \        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                even_digits.push(x[i]);\n                break;\n           \
    \ }\n        }\n    }\n    for(let i = 0; i < x.length; i++){\n        if(!even_digits.includes(x[i])){\n\
    \            unique_digits.push(x[i]);\n        }\n    }\n    return unique_digits.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even_digits = [];\n    var unique_digits =\
    \ [];\n    for (var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        for (var j = 0; j < num.length; j++){\n            if (num[j] % 2 ===\
    \ 0){\n                even_digits.push(x[i]);\n                break;\n     \
    \       }\n        }\n    }\n    for (var i = 0; i < x.length; i++){\n       \
    \ if (even_digits.indexOf(x[i]) === -1){\n            unique_digits.push(x[i]);\n\
    \        }\n    }\n    return unique_digits.sort(function(a, b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even_digits = [0, 2, 4, 6, 8];\n    var even_digits_in_array\
    \ = [];\n    var even_digits_in_array_sorted = [];\n    var unique_digits_array\
    \ = [];\n    for (var i = 0; i < x.length; i++){\n        var number_to_string\
    \ = x[i].toString();\n        for (var j = 0; j < number_to_string.length; j++){\n\
    \            for (var k = 0; k < even_digits.length; k++){\n                if\
    \ (number_to_string[j] == even_digits[k]){\n                    even_digits_in_array.push(x[i]);\n\
    \                }\n            }\n        }\n    }\n    even_digits_in_array_sorted\
    \ = even_digits_in_array.sort(function(a, b){return a-b});\n    for (var i = 0;\
    \ i < x.length; i++){\n        if (even_digits_in_array_sorted.indexOf(x[i]) ==\
    \ -1){\n            unique_digits_array.push(x[i]);\n        }\n    }\n    return\
    \ unique_digits_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmp42odddxj.js:38:10)\n    at Object.<anonymous> (/tmp/tmp42odddxj.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        if(x[i] % 2 == 0){\n            even.push(x[i]);\n\
    \        }\n        else{\n            odd.push(x[i]);\n        }\n    }\n   \
    \ return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpgg8kpr77.js:28:10)\n    at Object.<anonymous> (/tmp/tmpgg8kpr77.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var str = x[i].toString();\n        var\
    \ count = 0;\n        for(var j = 0; j < str.length; j++){\n            if(str[j]\
    \ % 2 == 0){\n                count++;\n            }\n        }\n        if(count\
    \ == 0){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        var\
    \ count = 0;\n        for(var j = 0; j < num.length; j++){\n            if(num[j]\
    \ % 2 == 0){\n                count++;\n            }\n        }\n        if(count\
    \ == 0){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i];\n        let isUnique = true;\n        while(num\
    \ > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          num = Math.floor(num / 10);\n        }\n        if(isUnique){\n   \
    \         result.push(x[i]);\n        }\n    }\n    return result.sort((a, b)\
    \ => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar result = [];\n\tfor (var i = 0; i < x.length;\
    \ i++) {\n\t\tvar temp = x[i].toString().split('');\n\t\tvar flag = true;\n\t\t\
    for (var j = 0; j < temp.length; j++) {\n\t\t\tif (temp[j] % 2 == 0) {\n\t\t\t\
    \tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag) {\n\t\t\tresult.push(x[i]);\n\
    \t\t}\n\t}\n\treturn result.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var current = x[i];\n        var isUnique = true;\n        while(current\
    \ > 0){\n            var digit = current % 10;\n            if(digit % 2 == 0){\n\
    \                isUnique = false;\n                break;\n            }\n  \
    \          current = Math.floor(current / 10);\n        }\n        if(isUnique){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let flag = true;\n        let str = x[i].toString();\n      \
    \  for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n \
    \               flag = false;\n                break;\n            }\n       \
    \ }\n        if(flag){\n            result.push(x[i]);\n        }\n    }\n   \
    \ return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n  \
    \              flag = false;\n            }\n        }\n        if(flag){\n  \
    \          arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        var\
    \ count = 0;\n        for(var j = 0; j < num.length; j++){\n            if(num[j]\
    \ % 2 == 0){\n                count++;\n            }\n        }\n        if(count\
    \ == 0){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString();\n        var a = 0;\n        for (var\
    \ j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n              \
    \  a = 1;\n            }\n        }\n        if (a == 0){\n            y.push(x[i]);\n\
    \        }\n    }\n    return y.sort(function(a, b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var temp = x[i].toString().split('');\n        var flag = true;\n\
    \        for(var j = 0; j < temp.length; j++){\n            if(temp[j] % 2 ==\
    \ 0){\n                flag = false;\n                break;\n            }\n\
    \        }\n        if(flag){\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result.sort(function(a, b){\n        return a - b;\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var isEven = false;\n        var num = x[i].toString();\n   \
    \     for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                isEven = true;\n            }\n        }\n        if(!isEven){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i];\n        let even = false;\n        while(num\
    \ > 0){\n            let digit = num % 10;\n            if(digit % 2 == 0){\n\
    \                even = true;\n                break;\n            }\n       \
    \     num = Math.floor(num / 10);\n        }\n        if(!even){\n           \
    \ result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a - b);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString().split(\"\");\n        var count = 0;\n\
    \        for (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n\
    \                count++;\n            }\n        }\n        if (count == 0){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var newArr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var str = x[i].toString();\n        var count = 0;\n        for(var\
    \ j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n          \
    \      count++;\n            }\n        }\n        if(count === 0){\n        \
    \    newArr.push(x[i]);\n        }\n    }\n    return newArr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let even = [];\n    let odd = [];\n    for(let\
    \ i = 0; i < x.length; i++){\n        if(x[i] % 2 === 0){\n            even.push(x[i]);\n\
    \        }\n        else{\n            odd.push(x[i]);\n        }\n    }\n   \
    \ return odd.sort();\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 323 ]\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmpdnoji57s.js:28:10)\n    at Object.<anonymous> (/tmp/tmpdnoji57s.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let even = [];\n    let odd = [];\n    for(let\
    \ i = 0; i < x.length; i++){\n        if(x[i] % 2 === 0){\n            even.push(x[i]);\n\
    \        }\n        else{\n            odd.push(x[i]);\n        }\n    }\n   \
    \ return odd.sort();\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 323 ]\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmpmeyo5byk.js:29:10)\n    at Object.<anonymous> (/tmp/tmpmeyo5byk.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    // your code here\n    let result = [];\n    for(let\
    \ i = 0; i < x.length; i++){\n        if(x[i].toString().split('').every(e =>\
    \ e % 2 !== 0)){\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        if (x[i].toString().split('').every(function(e){\n          \
    \  return parseInt(e) % 2 !== 0;\n        })){\n            y.push(x[i]);\n  \
    \      }\n    }\n    return y.sort(function(a, b){\n        return a - b;\n  \
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var count = 0;\n        var num = x[i].toString();\n        for(var\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n          \
    \      count++;\n            }\n        }\n        if(count === 0){\n        \
    \    result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let flag = true;\n        let num = x[i].toString();\n      \
    \  for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n \
    \               flag = false;\n                break;\n            }\n       \
    \ }\n        if(flag){\n            result.push(x[i]);\n        }\n    }\n   \
    \ return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i];\n        var str = num.toString();\n        var\
    \ count = 0;\n        for(var j = 0; j < str.length; j++){\n            if(str[j]\
    \ % 2 == 0){\n                count++;\n            }\n        }\n        if(count\
    \ == 0){\n            arr.push(num);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        var\
    \ count = 0;\n        for(var j = 0; j < num.length; j++){\n            if(num[j]\
    \ % 2 == 0){\n                count++;\n            }\n        }\n        if(count\
    \ == 0){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var temp = x[i].toString().split('');\n        var flag = false;\n\
    \        for(var j = 0; j < temp.length; j++){\n            if(temp[j] % 2 ==\
    \ 0){\n                flag = true;\n                break;\n            }\n \
    \       }\n        if(!flag){\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result.sort(function(a, b){return a - b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n\tvar even = [];\n\tvar odd = [];\n\tfor(var i = 0;\
    \ i < x.length; i++){\n\t\tif(x[i] % 2 == 0){\n\t\t\teven.push(x[i]);\n\t\t}\n\
    \t\telse{\n\t\t\todd.push(x[i]);\n\t\t}\n\t}\n\treturn odd;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmp7p8ytbmd.js:28:10)\n    at Object.<anonymous> (/tmp/tmp7p8ytbmd.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var evens = [];\n    var odds = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        if(x[i] % 2 == 0){\n            evens.push(x[i]);\n\
    \        }\n        else{\n            odds.push(x[i]);\n        }\n    }\n  \
    \  return odds;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmp3joehzpc.js:28:10)\n    at Object.<anonymous> (/tmp/tmp3joehzpc.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString().split(\"\");\n        var even = false;\n\
    \        for (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n\
    \                even = true;\n            }\n        }\n        if (even == false){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let arr = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString().split('');\n        let count = 0;\n\
    \        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                count += 1;\n            }\n        }\n        if(count === 0){\n\
    \            arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var is_unique = true;\n        var num = x[i].toString();\n \
    \       for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n\
    \                is_unique = false;\n            }\n        }\n        if(is_unique){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpgrhqx53a.js:31:10)\n    at Object.<anonymous> (/tmp/tmpgrhqx53a.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var isEven = false;\n   \
    \     for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                isEven = true;\n            }\n        }\n        if(!isEven){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var even = false;\n        var num = x[i].toString();\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        if (x[i].toString().includes(\"2\") || x[i].toString().includes(\"\
    4\") || x[i].toString().includes(\"6\") || x[i].toString().includes(\"8\") ||\
    \ x[i].toString().includes(\"0\")){\n            continue;\n        }\n      \
    \  else{\n            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let evenDigits = [];\n    let uniqueDigits = [];\n\
    \    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString();\n\
    \        let numArr = num.split('');\n        for(let j = 0; j < numArr.length;\
    \ j++){\n            if(numArr[j] % 2 === 0){\n                evenDigits.push(numArr[j]);\n\
    \            }\n        }\n    }\n    if(evenDigits.length === 0){\n        return\
    \ x.sort(function(a, b){return a-b});\n    }\n    else{\n        return uniqueDigits;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 1, 15, 33 ]\n  \
    \  at test (/tmp/tmpawfmuru2.js:34:10)\n    at Object.<anonymous> (/tmp/tmpawfmuru2.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 1, 15, 33 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var even = false;\n        var num = x[i].toString();\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let even = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString().split('');\n        for(let j = 0;\
    \ j < num.length; j++){\n            if(num[j] % 2 === 0){\n                even.push(x[i]);\n\
    \                break;\n            }\n        }\n    }\n    return x.filter(num\
    \ => !even.includes(num)).sort((a,b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString().split(\"\");\n        var count = 0;\n\
    \        for (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n\
    \                count++;\n            }\n        }\n        if (count == 0){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let current = x[i];\n        let flag = true;\n        while(current\
    \ > 0){\n            let digit = current % 10;\n            if(digit % 2 == 0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \      current = Math.floor(current / 10);\n        }\n        if(flag){\n   \
    \         result.push(x[i]);\n        }\n    }\n    return result.sort((a, b)\
    \ => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        var\
    \ count = 0;\n        for(var j = 0; j < num.length; j++){\n            if(num[j]\
    \ % 2 == 0){\n                count++;\n            }\n        }\n        if(count\
    \ == 0){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let evenDigits = [0, 2, 4, 6, 8];\n    let result\
    \ = [];\n    for (let i = 0; i < x.length; i++){\n        let isEven = false;\n\
    \        let num = x[i];\n        while (num > 0){\n            let digit = num\
    \ % 10;\n            if (evenDigits.includes(digit)){\n                isEven\
    \ = true;\n                break;\n            }\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (!isEven){\n            result.push(x[i]);\n \
    \       }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let isEven = false;\n        let num = x[i].toString();\n   \
    \     for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                isEven = true;\n            }\n        }\n        if(!isEven){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n  \
    \              flag = false;\n                break;\n            }\n        }\n\
    \        if(flag){\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let arr = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString();\n        let flag = true;\n      \
    \  for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n \
    \               flag = false;\n            }\n        }\n        if(flag){\n \
    \           arr.push(x[i]);\n        }\n    }\n    return arr.sort((a,b) => a\
    \ - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let even_digits = [];\n    let odd_digits = [];\n\
    \    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString();\n\
    \        let count = 0;\n        for(let j = 0; j < num.length; j++){\n      \
    \      if(num[j] % 2 === 0){\n                count++;\n            }\n      \
    \  }\n        if(count === 0){\n            odd_digits.push(x[i]);\n        }\n\
    \    }\n    return odd_digits.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i];\n        let isEven = false;\n        while(num\
    \ > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if(!isEven){\n       \
    \     result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a\
    \ - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n  \
    \              flag = false;\n            }\n        }\n        if(flag){\n  \
    \          arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString();\n        let flag = true;\n      \
    \  for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n \
    \               flag = false;\n                break;\n            }\n       \
    \ }\n        if(flag){\n            result.push(x[i]);\n        }\n    }\n   \
    \ return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let temp = x[i].toString().split('');\n        let flag = true;\n\
    \        for(let j = 0; j < temp.length; j++){\n            if(temp[j] % 2 ===\
    \ 0){\n                flag = false;\n                break;\n            }\n\
    \        }\n        if(flag){\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var newArray = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var str = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n \
    \               flag = false;\n            }\n        }\n        if(flag){\n \
    \           newArray.push(x[i]);\n        }\n    }\n    return newArray.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let arr = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(function(num){\n         \
    \   return num % 2 !== 0;\n        })){\n            arr.push(x[i]);\n       \
    \ }\n    }\n    return arr.sort(function(a, b){\n        return a - b;\n    });\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even_digits = [];\n    var unique_digits =\
    \ [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                even_digits.push(x[i]);\n                break;\n           \
    \ }\n        }\n    }\n    for(var i = 0; i < x.length; i++){\n        if(even_digits.indexOf(x[i])\
    \ === -1){\n            unique_digits.push(x[i]);\n        }\n    }\n    return\
    \ unique_digits.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let sorted = x.sort((a,b) => a-b);\n    let unique\
    \ = [];\n    for(let i = 0; i < sorted.length; i++){\n        let num = sorted[i].toString();\n\
    \        let even = false;\n        for(let j = 0; j < num.length; j++){\n   \
    \         if(num[j] % 2 === 0){\n                even = true;\n            }\n\
    \        }\n        if(!even){\n            unique.push(sorted[i]);\n        }\n\
    \    }\n    return unique;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n  \
    \              flag = false;\n            }\n        }\n        if(flag){\n  \
    \          unique.push(x[i]);\n        }\n    }\n    return unique.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var evens = [];\n    var odds = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString().split('');\n \
    \       var even = false;\n        for(var j = 0; j < num.length; j++){\n    \
    \        if(num[j] % 2 === 0){\n                even = true;\n            }\n\
    \        }\n        if(even === false){\n            odds.push(x[i]);\n      \
    \  }\n    }\n    return odds.sort(function(a, b){return a-b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var evenDigits = [];\n    var uniqueDigits = [];\n\
    \    for(var i = 0; i < x.length; i++){\n        var number = x[i].toString();\n\
    \        for(var j = 0; j < number.length; j++){\n            if(number[j] % 2\
    \ === 0){\n                evenDigits.push(x[i]);\n                break;\n  \
    \          }\n        }\n    }\n    for(var i = 0; i < x.length; i++){\n     \
    \   if(evenDigits.indexOf(x[i]) === -1){\n            uniqueDigits.push(x[i]);\n\
    \        }\n    }\n    return uniqueDigits.sort(function(a, b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i];\n        var isEven = false;\n        while(num\
    \ > 0){\n            if(num % 2 == 0){\n                isEven = true;\n     \
    \           break;\n            }\n            num = Math.floor(num / 10);\n \
    \       }\n        if(!isEven){\n            result.push(x[i]);\n        }\n \
    \   }\n    return result.sort(function(a, b){return a - b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var str = x[i].toString();\n        var\
    \ flag = true;\n        for(var j = 0; j < str.length; j++){\n            if(str[j]\
    \ % 2 == 0){\n                flag = false;\n                break;\n        \
    \    }\n        }\n        if(flag){\n            odd.push(x[i]);\n        }\n\
    \    }\n    return odd.sort(function(a, b){return a - b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().length === 1){\n            result.push(x[i]);\n\
    \        }\n        else{\n            let count = 0;\n            for(let j =\
    \ 0; j < x[i].toString().length; j++){\n                if(x[i].toString()[j]\
    \ % 2 === 0){\n                    count++;\n                }\n            }\n\
    \            if(count === 0){\n                result.push(x[i]);\n          \
    \  }\n        }\n    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var newArr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var str = x[i].toString();\n        var count = 0;\n        for(var\
    \ j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n          \
    \      count++;\n            }\n        }\n        if(count === 0){\n        \
    \    newArr.push(x[i]);\n        }\n    }\n    return newArr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let even = [];\n    let odd = [];\n    for(let\
    \ i = 0; i < x.length; i++){\n        let num = x[i].toString();\n        let\
    \ check = false;\n        for(let j = 0; j < num.length; j++){\n            if(num[j]\
    \ % 2 === 0){\n                check = true;\n            }\n        }\n     \
    \   if(check === false){\n            odd.push(x[i]);\n        }\n    }\n    return\
    \ odd.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().length == 1){\n            result.push(x[i]);\n\
    \        }\n        else{\n            var num = x[i].toString();\n          \
    \  var flag = true;\n            for(var j = 0; j < num.length; j++){\n      \
    \          if(num[j] % 2 == 0){\n                    flag = false;\n         \
    \           break;\n                }\n            }\n            if(flag){\n\
    \                result.push(x[i]);\n            }\n        }\n    }\n    return\
    \ result.sort(function(a, b){return a-b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(num => num % 2 !== 0)){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        if (x[i].toString().split('').every(function(num){\n        \
    \    return parseInt(num) % 2 !== 0;\n        })){\n            y.push(x[i]);\n\
    \        }\n    }\n    return y.sort(function(a, b){\n        return a - b;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var flag = true;\n        var num = x[i].toString();\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n  \
    \              flag = false;\n                break;\n            }\n        }\n\
    \        if(flag){\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().length === 1){\n            arr.push(x[i]);\n\
    \        }\n        else{\n            for(var j = 0; j < x[i].toString().length;\
    \ j++){\n                if(x[i].toString()[j] % 2 === 0){\n                 \
    \   break;\n                }\n                else if(j === x[i].toString().length\
    \ - 1){\n                    arr.push(x[i]);\n                }\n            }\n\
    \        }\n    }\n    return arr.sort(function(a, b){return a - b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var isEven = false;\n        var num = x[i].toString();\n   \
    \     for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                isEven = true;\n            }\n        }\n        if(!isEven){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let evenDigits = [];\n    let oddDigits = [];\n\
    \    for(let i = 0; i < x.length; i++){\n        let num = x[i].toString().split('');\n\
    \        let even = false;\n        for(let j = 0; j < num.length; j++){\n   \
    \         if(num[j] % 2 === 0){\n                even = true;\n            }\n\
    \        }\n        if(even === true){\n            evenDigits.push(x[i]);\n \
    \       }\n        else{\n            oddDigits.push(x[i]);\n        }\n    }\n\
    \    return oddDigits.sort(function(a, b){return a-b});\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let str = x[i].toString();\n        let check = true;\n     \
    \   for(let j = 0; j < str.length; j++){\n            if(str[j] % 2 === 0){\n\
    \                check = false;\n            }\n        }\n        if(check){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let arr = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(num => num % 2 !== 0)){\n\
    \            arr.push(x[i]);\n        }\n    }\n    return arr.sort((a,b) => a\
    \ - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var str = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < str.length; j++){\n            if(str[j] % 2 == 0){\n  \
    \              flag = false;\n                break;\n            }\n        }\n\
    \        if(flag){\n            result.push(x[i]);\n        }\n    }\n    return\
    \ result.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let unique = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().includes('2') || x[i].toString().includes('4')\
    \ || x[i].toString().includes('6') || x[i].toString().includes('8') || x[i].toString().includes('0')){\n\
    \            continue;\n        }\n        else{\n            unique.push(x[i]);\n\
    \        }\n    }\n    return unique.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        if(x[i] % 2 == 0){\n            even.push(x[i]);\n\
    \        }\n        else{\n            odd.push(x[i]);\n        }\n    }\n   \
    \ return odd;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpw9948csq.js:28:10)\n    at Object.<anonymous> (/tmp/tmpw9948csq.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var even = false;\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            unique.push(x[i]);\n        }\n    }\n    return unique.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        if(x[i] % 2 == 0){\n            even.push(x[i]);\n\
    \        }\n        else{\n            odd.push(x[i]);\n        }\n    }\n   \
    \ return odd;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmp8bfgxlnd.js:27:10)\n    at Object.<anonymous> (/tmp/tmp8bfgxlnd.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even_digits = [];\n    for (var i = 0; i <\
    \ x.length; i++){\n        var num = x[i].toString();\n        for (var j = 0;\
    \ j < num.length; j++){\n            if (num[j] % 2 === 0){\n                even_digits.push(x[i]);\n\
    \                break;\n            }\n        }\n    }\n    return x.filter(function(item){\n\
    \        return even_digits.indexOf(item) === -1;\n    }).sort(function(a, b){\n\
    \        return a - b;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let unique = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString();\n        let even = false;\n     \
    \   for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                even = true;\n            }\n        }\n        if(!even){\n\
    \            unique.push(x[i]);\n        }\n    }\n    return unique.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString();\n        let count = 0;\n        for(let\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n           \
    \     count++;\n            }\n        }\n        if(count == 0){\n          \
    \  result.push(x[i]);\n        }\n    }\n    return result.sort((a,b) => a - b);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(digit => parseInt(digit) %\
    \ 2 !== 0)){\n            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString();\n        var count = 0;\n        for\
    \ (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n         \
    \       count++;\n            }\n        }\n        if (count == 0){\n       \
    \     y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var string = x[i].toString();\n        var\
    \ count = 0;\n        for(var j = 0; j < string.length; j++){\n            if(string[j]\
    \ % 2 == 0){\n                count++;\n            }\n        }\n        if(count\
    \ == 0){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().includes('2') || x[i].toString().includes('4')\
    \ || x[i].toString().includes('6') || x[i].toString().includes('8') || x[i].toString().includes('0')){\n\
    \            continue;\n        }\n        else{\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a, b){return a-b});\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString().split(\"\");\n        var count = 0;\n\
    \        for (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n\
    \                count += 1;\n            }\n        }\n        if (count == 0){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let even = [];\n    let odd = [];\n    for(let\
    \ i = 0; i < x.length; i++){\n        let num = x[i].toString();\n        let\
    \ flag = false;\n        for(let j = 0; j < num.length; j++){\n            if(num[j]\
    \ % 2 === 0){\n                flag = true;\n            }\n        }\n      \
    \  if(flag){\n            even.push(x[i]);\n        }\n        else{\n       \
    \     odd.push(x[i]);\n        }\n    }\n    return odd.sort((a,b) => a - b);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var even = false;\n     \
    \   for (var j = 0; j < num.length; j++){\n            if (num[j] % 2 == 0){\n\
    \                even = true;\n            }\n        }\n        if (even == false){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let even = false;\n        let num = x[i].toString().split('');\n\
    \        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                even = true;\n            }\n        }\n        if(even === false){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        for(var\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n           \
    \     even.push(x[i]);\n                break;\n            }\n        }\n   \
    \ }\n    for(var i = 0; i < x.length; i++){\n        if(even.indexOf(x[i]) ==\
    \ -1){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        if(x[i] % 2 === 0){\n            even.push(x[i]);\n\
    \        }else{\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 323 ]\n\nshould equal\n\n[]\n    at test\
    \ (/tmp/tmpqkdg2giw.js:27:10)\n    at Object.<anonymous> (/tmp/tmpqkdg2giw.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n  expected: [],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i];\n        let isEven = false;\n        while(num\
    \ > 0){\n            let digit = num % 10;\n            if(digit % 2 === 0){\n\
    \                isEven = true;\n                break;\n            }\n     \
    \       num = Math.floor(num / 10);\n        }\n        if(!isEven){\n       \
    \     result.push(x[i]);\n        }\n    }\n    return result.sort((a, b) => a\
    \ - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let even = false;\n        let num = x[i].toString().split('');\n\
    \        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                even = true;\n            }\n        }\n        if(even === false){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let arr = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString();\n        let flag = false;\n     \
    \   for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                flag = true;\n            }\n        }\n        if(flag === false){\n\
    \            arr.push(x[i]);\n        }\n    }\n    return arr.sort((a,b) => a\
    \ - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let temp = x[i].toString().split('');\n        let flag = true;\n\
    \        for(let j = 0; j < temp.length; j++){\n            if(temp[j] % 2 ===\
    \ 0){\n                flag = false;\n                break;\n            }\n\
    \        }\n        if(flag){\n            result.push(x[i]);\n        }\n   \
    \ }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var newArray = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().length === 1){\n            newArray.push(x[i]);\n\
    \        }\n        else{\n            var string = x[i].toString();\n       \
    \     var count = 0;\n            for(var j = 0; j < string.length; j++){\n  \
    \              if(string[j] % 2 === 0){\n                    count++;\n      \
    \          }\n            }\n            if(count === 0){\n                newArray.push(x[i]);\n\
    \            }\n        }\n    }\n    return newArray.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString().split('');\n        var counter = 0;\n\
    \        for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n\
    \                counter++;\n            }\n        }\n        if(counter == 0){\n\
    \            arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString();\n        var even = false;\n       \
    \ for (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n     \
    \           even = true;\n            }\n        }\n        if (even == false){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var flag = true;\n      \
    \  for (var j = 0; j < num.length; j++){\n            if (num[j] % 2 == 0){\n\
    \                flag = false;\n            }\n        }\n        if (flag){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(function(e){\n           \
    \ return e % 2 != 0;\n        })){\n            arr.push(x[i]);\n        }\n \
    \   }\n    return arr.sort(function(a, b){\n        return a - b;\n    });\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var even = false;\n        var num = x[i].toString();\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(function(e){\n           \
    \ return e % 2 != 0;\n        })){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort(function(a, b){return a - b});\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var flag = true;\n      \
    \  for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n  \
    \              flag = false;\n            }\n        }\n        if(flag){\n  \
    \          unique.push(x[i]);\n        }\n    }\n    return unique.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let newArr = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        if(x[i].toString().split('').every(num => num % 2 !== 0)){\n\
    \            newArr.push(x[i]);\n        }\n    }\n    return newArr.sort((a,b)\
    \ => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        var\
    \ count = 0;\n        for(var j = 0; j < num.length; j++){\n            if(num[j]\
    \ % 2 == 0){\n                count++;\n            }\n        }\n        if(count\
    \ == 0){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let counter = 0;\n        let num = x[i].toString();\n      \
    \  for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n \
    \               counter++;\n            }\n        }\n        if(counter === 0){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var z = x[i].toString();\n        var even = false;\n       \
    \ for (var j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n     \
    \           even = true;\n            }\n        }\n        if (even == false){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let unique = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString();\n        let even = false;\n     \
    \   for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                even = true;\n            }\n        }\n        if(!even){\n\
    \            unique.push(x[i]);\n        }\n    }\n    return unique.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var unique = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var isUnique = true;\n  \
    \      for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                isUnique = false;\n            }\n        }\n        if(isUnique){\n\
    \            unique.push(x[i]);\n        }\n    }\n    return unique.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var even = false;\n     \
    \   for (var j = 0; j < num.length; j++){\n            if (num[j] % 2 == 0){\n\
    \                even = true;\n            }\n        }\n        if (even == false){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i];\n        let isEven = false;\n        while(num\
    \ > 0){\n            if(num % 2 === 0){\n                isEven = true;\n    \
    \            break;\n            }\n            num = Math.floor(num / 10);\n\
    \        }\n        if(!isEven){\n            result.push(x[i]);\n        }\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [];\n    var odd = [];\n    for(var\
    \ i = 0; i < x.length; i++){\n        var num = x[i].toString();\n        for(var\
    \ j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n          \
    \      even.push(x[i]);\n                break;\n            }\n        }\n  \
    \  }\n    for(var i = 0; i < x.length; i++){\n        if(even.indexOf(x[i]) ===\
    \ -1){\n            odd.push(x[i]);\n        }\n    }\n    return odd.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var even = false;\n        var num = x[i].toString();\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var isEven = false;\n        var num = x[i].toString();\n   \
    \     for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                isEven = true;\n            }\n        }\n        if(!isEven){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even = [2,4,6,8,0];\n    var result = [];\n\
    \    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        var isEven = false;\n        for(var j = 0; j < num.length; j++){\n \
    \           if(even.includes(parseInt(num[j]))){\n                isEven = true;\n\
    \            }\n        }\n        if(!isEven){\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort(function(a,b){return a-b});\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let even = false;\n        let num = x[i].toString().split('');\n\
    \        for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                even = true;\n            }\n        }\n        if(!even){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort((a,\
    \ b) => a - b);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString();\n        let flag = true;\n      \
    \  for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n \
    \               flag = false;\n                break;\n            }\n       \
    \ }\n        if(flag){\n            result.push(x[i]);\n        }\n    }\n   \
    \ return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var even_digits = [];\n    var unique_digits =\
    \ [];\n    for(var i = 0; i < x.length; i++){\n        var num = x[i].toString();\n\
    \        for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                even_digits.push(x[i]);\n                break;\n           \
    \ }\n        }\n    }\n    for(var i = 0; i < x.length; i++){\n        if(even_digits.indexOf(x[i])\
    \ === -1){\n            unique_digits.push(x[i]);\n        }\n    }\n    return\
    \ unique_digits.sort(function(a, b){return a - b});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var y = [];\n    for (var i = 0; i < x.length;\
    \ i++){\n        if (x[i].toString().length == 1){\n            y.push(x[i]);\n\
    \        }\n        else{\n            var z = x[i].toString().split(\"\");\n\
    \            var a = 0;\n            for (var j = 0; j < z.length; j++){\n   \
    \             if (z[j] % 2 == 0){\n                    a = 1;\n              \
    \  }\n            }\n            if (a == 0){\n                y.push(x[i]);\n\
    \            }\n        }\n    }\n    return y.sort(function(a, b){return a-b});\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let flag = true;\n        let temp = x[i].toString();\n     \
    \   for(let j = 0; j < temp.length; j++){\n            if(temp[j] % 2 == 0){\n\
    \                flag = false;\n                break;\n            }\n      \
    \  }\n        if(flag){\n            result.push(x[i]);\n        }\n    }\n  \
    \  return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let y = [];\n    for (let i = 0; i < x.length;\
    \ i++){\n        let z = x[i].toString().split('');\n        let count = 0;\n\
    \        for (let j = 0; j < z.length; j++){\n            if (z[j] % 2 == 0){\n\
    \                count++;\n            }\n        }\n        if (count == 0){\n\
    \            y.push(x[i]);\n        }\n    }\n    return y.sort(function(a, b){return\
    \ a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let result = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString();\n        let flag = true;\n      \
    \  for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n \
    \               flag = false;\n                break;\n            }\n       \
    \ }\n        if(flag){\n            result.push(x[i]);\n        }\n    }\n   \
    \ return result.sort((a, b) => a - b);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var isUnique = true;\n        var num = x[i].toString();\n  \
    \      for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n\
    \                isUnique = false;\n            }\n        }\n        if(isUnique){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result.sort(function(a,\
    \ b){return a - b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    let unique = [];\n    for(let i = 0; i < x.length;\
    \ i++){\n        let num = x[i].toString();\n        let flag = true;\n      \
    \  for(let j = 0; j < num.length; j++){\n            if(num[j] % 2 === 0){\n \
    \               flag = false;\n            }\n        }\n        if(flag){\n \
    \           unique.push(x[i]);\n        }\n    }\n    return unique.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var result = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var num = x[i].toString();\n        var check = true;\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               check = false;\n            }\n        }\n        if(check){\n\
    \            result.push(x[i]);\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 15, 33, 1 ]\n\nshould equal\n\n[ 1, 15,\
    \ 33 ]\n    at test (/tmp/tmpy9s9jytv.js:31:10)\n    at Object.<anonymous> (/tmp/tmpy9s9jytv.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 15, 33, 1 ],\n  expected: [ 1, 15, 33 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of positive integers x. return a sorted array of all\
    \ \n// elements that hasn't any even digit.\n// Note: Returned array should be\
    \ sorted in increasing order.\n// For example:\n// >>> unique_digits([15, 33,\
    \ 1422, 1])\n// [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\n\
    function unique_digits(x){\n    var arr = [];\n    for(var i = 0; i < x.length;\
    \ i++){\n        var even = false;\n        var num = x[i].toString();\n     \
    \   for(var j = 0; j < num.length; j++){\n            if(num[j] % 2 == 0){\n \
    \               even = true;\n            }\n        }\n        if(even == false){\n\
    \            arr.push(x[i]);\n        }\n    }\n    return arr.sort(function(a,\
    \ b){return a-b});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
