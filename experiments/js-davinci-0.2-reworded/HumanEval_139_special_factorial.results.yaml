name: HumanEval_139_special_factorial
language: js
results:
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
    \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp5ahwignp.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ahwignp.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpyys7ogbw.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyys7ogbw.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp90oqgqhb.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp90oqgqhb.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ let factorial = 1;\n    for (let i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp0i81jxnn.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0i81jxnn.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpkh6_q8_7.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkh6_q8_7.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpaynathcw.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpaynathcw.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp6wce_ja0.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6wce_ja0.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpm909qf2p.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm909qf2p.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= factorial(i);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprg74mi3i.js:12\n    result *= factorial(i);\n    ^\n\nReferenceError:\
    \ factorial is not defined\n    at special_factorial (/tmp/tmprg74mi3i.js:12:5)\n\
    \    at test (/tmp/tmprg74mi3i.js:22:20)\n    at Object.<anonymous> (/tmp/tmprg74mi3i.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp6xy6r_hn.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6xy6r_hn.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ if (n <= 0) {\n        return 1;\n    }\n    var result = 1;\n    for (var i\
    \ = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
    \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpswqwcstz.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpswqwcstz.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpdtyr5_5s.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdtyr5_5s.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpfo7lyf9v.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfo7lyf9v.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
    \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpcyevjg17.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcyevjg17.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpxj2szapm.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxj2szapm.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp4uat_l2h.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4uat_l2h.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpu8ixq7xk.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu8ixq7xk.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp52jts001.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp52jts001.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpm3gwejdc.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm3gwejdc.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpm6fcyibh.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm6fcyibh.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp_byhti7d.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_byhti7d.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ if (n == 0) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp9xenf6rk.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9xenf6rk.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= factorial(i);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpj6lgci7v.js:12\n    result *= factorial(i);\n    ^\n\nReferenceError:\
    \ factorial is not defined\n    at special_factorial (/tmp/tmpj6lgci7v.js:12:5)\n\
    \    at test (/tmp/tmpj6lgci7v.js:22:20)\n    at Object.<anonymous> (/tmp/tmpj6lgci7v.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpyxot6rwk.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyxot6rwk.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp0g4sooov.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0g4sooov.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp788gobek.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp788gobek.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp8hxu675r.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8hxu675r.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ let factorial = 1;\n    for (let i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmproyhv2iy.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmproyhv2iy.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpl6te0fi2.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl6te0fi2.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp7bs4jdkd.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7bs4jdkd.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpav0kcxm7.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpav0kcxm7.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp0w1m8b9z.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0w1m8b9z.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpsu4d_1r1.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsu4d_1r1.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpo2ehqpjs.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo2ehqpjs.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpnbpsgp3e.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnbpsgp3e.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpm78sool_.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm78sool_.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpv9n4d5ue.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv9n4d5ue.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  //\
    \ Your code here\n  var result = 1;\n  for (var i = n; i > 0; i--) {\n    result\
    \ *= i;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpyr88ko_7.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyr88ko_7.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ let factorial = 1;\n    for (let i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpw788o31t.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw788o31t.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpzb9osd1r.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzb9osd1r.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmppcuink5c.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmppcuink5c.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp4ere3cmz.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4ere3cmz.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpxy6o6xpd.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxy6o6xpd.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = 1; i <= n; i++) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp5ezm8ygf.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ezm8ygf.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpj_bygt1v.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj_bygt1v.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpj3eik79m.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj3eik79m.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpzx7odr1y.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzx7odr1y.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp8vlyv9b6.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8vlyv9b6.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpr7t3dlxo.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr7t3dlxo.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmph5wib441.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmph5wib441.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmph0as8yhe.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmph0as8yhe.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmplawgp_ta.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmplawgp_ta.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
    \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp1xqgi1tk.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1xqgi1tk.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ if (n < 0) {\n        return null;\n    }\n    let result = 1;\n    for (let\
    \ i = n; i > 0; i--) {\n        result *= i;\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
    \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpyj_aq4zi.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyj_aq4zi.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++){\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpzkwl0f9d.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzkwl0f9d.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var fact = 1;\n    for(var i = n; i > 0; i--){\n        fact *= i;\n    }\n\
    \    return fact;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmps54f4c8r.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmps54f4c8r.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmptn62x5yd.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmptn62x5yd.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  //\
    \ Your code here\n  let factorial = 1;\n  for (let i = 1; i <= n; i++) {\n   \
    \ factorial *= i;\n  }\n  return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpuuwie_bl.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuuwie_bl.js:29:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ if (n == 0) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmphu9zfone.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmphu9zfone.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) {\n    return 1;\n  } else {\n    return n * special_factorial(n -\
    \ 1);\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpj62itoub.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj62itoub.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpytpldvrd.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpytpldvrd.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp0pjtj9zx.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0pjtj9zx.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpjxujwc66.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjxujwc66.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpbrker4_c.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbrker4_c.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpvjaxnhoc.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvjaxnhoc.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
    \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp8fr96yz9.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8fr96yz9.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp03w_bpv_.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp03w_bpv_.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp7rt222tm.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7rt222tm.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  let\
    \ factorial = 1;\n  for (let i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpuizuw3up.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuizuw3up.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpedmept3x.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpedmept3x.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpf1baxxoa.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf1baxxoa.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpycezbit9.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpycezbit9.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp3f902jtm.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3f902jtm.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpemhrkw3d.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpemhrkw3d.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = 1; i <= n; i++) {\n        result *= i;\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpmqqo77tj.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmqqo77tj.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) {\n    return 1;\n  }\n  var result = 1;\n  for (var i = n; i > 0;\
    \ i--) {\n    result *= i;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmputivf586.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmputivf586.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var fact = 1;\n    for(var i = 1; i <= n; i++){\n        fact *= i;\n    }\n\
    \    return fact;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpoqbekm24.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoqbekm24.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
    \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp31g0i00g.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp31g0i00g.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpmfb5dbt8.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmfb5dbt8.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp0s67c2_h.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0s67c2_h.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ let factorial = 1;\n    for (let i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpmtlvaxrh.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmtlvaxrh.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ let fact = 1;\n    for(let i = n; i > 0; i--){\n        fact *= i;\n    }\n\
    \    return fact;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpt54kqlzo.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt54kqlzo.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
    \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpekxietid.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpekxietid.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp066u2ue1.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp066u2ue1.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpnq5sxean.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnq5sxean.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpe9z0tppl.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe9z0tppl.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp1faxk54_.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1faxk54_.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++){\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpwqlmfkrp.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwqlmfkrp.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp0d1qg3y5.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0d1qg3y5.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ if (n === 0) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpu3ioap0k.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu3ioap0k.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp5bupera8.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5bupera8.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= factorial(i);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcd556ze4.js:12\n    result *= factorial(i);\n    ^\n\nReferenceError:\
    \ factorial is not defined\n    at special_factorial (/tmp/tmpcd556ze4.js:12:5)\n\
    \    at test (/tmp/tmpcd556ze4.js:22:20)\n    at Object.<anonymous> (/tmp/tmpcd556ze4.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpw62pssj7.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw62pssj7.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpq_wgngtl.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq_wgngtl.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  let\
    \ factorial = 1;\n  for (let i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpr9fa10fn.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr9fa10fn.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpr4t7xj8j.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr4t7xj8j.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpat0fo28e.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpat0fo28e.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpjh0200bk.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjh0200bk.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpgfk9y1g_.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgfk9y1g_.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpltll7tpo.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpltll7tpo.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpv9zgixkd.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv9zgixkd.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpy6xheabg.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy6xheabg.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpkcj9b2hi.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkcj9b2hi.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpc5ktz3i2.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc5ktz3i2.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ if (n === 0) {\n        return 1;\n    }\n    return n * special_factorial(n\
    \ - 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpovqqdelp.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmpovqqdelp.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpdk1umz7e.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdk1umz7e.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpkr55o7iz.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkr55o7iz.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpnjkj46ke.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnjkj46ke.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
    \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmph7mp65na.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmph7mp65na.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpz9u6291r.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz9u6291r.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  var factorial2 = 1;\n  for (var i = 1; i <= n; i++) {\n  \
    \  factorial *= i;\n  }\n  for (var i = 1; i < n; i++) {\n    factorial2 *= i;\n\
    \  }\n  return factorial * factorial2;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n144\n\nshould equal\n\n288\n    at test\
    \ (/tmp/tmpp4jf2poj.js:26:10)\n    at Object.<anonymous> (/tmp/tmpp4jf2poj.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 144,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ let factorial = 1;\n    for (let i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpyr7qf4di.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyr7qf4di.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpm87n_xv1.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm87n_xv1.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpqqdt8udq.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqqdt8udq.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpgbnz424u.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgbnz424u.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpqa5k_lqe.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqa5k_lqe.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpm87xhw0r.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm87xhw0r.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpee8_cfqg.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpee8_cfqg.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpsh4yua_z.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsh4yua_z.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpq2mpw3vk.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq2mpw3vk.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp6h8a5b9c.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6h8a5b9c.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpcvkrbc6b.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcvkrbc6b.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = 1; i <= n; i++) {\n        result *= i;\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp3wgjab68.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3wgjab68.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp6bd1yqwg.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6bd1yqwg.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp1ok9ji32.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1ok9ji32.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmptzt4ces_.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmptzt4ces_.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpzvec_at4.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzvec_at4.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpcv9oz7ze.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcv9oz7ze.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpfjstqska.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfjstqska.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpv2ln16wd.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv2ln16wd.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpuqgnoqv9.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuqgnoqv9.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpz1321t29.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz1321t29.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpv1to0x6u.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv1to0x6u.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpl2v7xcw4.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl2v7xcw4.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0uoth1jx.js:12\n        result *= factorial(i);\n        ^\n\n\
    ReferenceError: factorial is not defined\n    at special_factorial (/tmp/tmp0uoth1jx.js:12:9)\n\
    \    at test (/tmp/tmp0uoth1jx.js:22:20)\n    at Object.<anonymous> (/tmp/tmp0uoth1jx.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmptqqv1xl6.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmptqqv1xl6.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++){\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmplyyz3yyw.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmplyyz3yyw.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmproc5hk5n.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmproc5hk5n.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
    \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmprlnmkizh.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmprlnmkizh.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp1yf2nwun.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1yf2nwun.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpuw0oxghz.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuw0oxghz.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpc4_p1eg0.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc4_p1eg0.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp29b9l2km.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp29b9l2km.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpbm63c0f_.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbm63c0f_.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpe9_pv9q0.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe9_pv9q0.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp3iaheado.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3iaheado.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpyq6wkjy8.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyq6wkjy8.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpl_l85vlc.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl_l85vlc.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp7jmo28yk.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7jmo28yk.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpd6blm_qt.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd6blm_qt.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp7zolov1e.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7zolov1e.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = 1; i <= n; i++) {\n    result *= factorial(i);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6wpt7iuh.js:12\n    result *= factorial(i);\n    ^\n\nReferenceError:\
    \ factorial is not defined\n    at special_factorial (/tmp/tmp6wpt7iuh.js:12:5)\n\
    \    at test (/tmp/tmp6wpt7iuh.js:22:20)\n    at Object.<anonymous> (/tmp/tmp6wpt7iuh.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpq_mwdf5_.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq_mwdf5_.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp4b7u23ku.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4b7u23ku.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpbsguer6e.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbsguer6e.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpqd2cxw1d.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqd2cxw1d.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = 1; i <= n; i++) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpnq285v76.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnq285v76.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpxvb5hi7v.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxvb5hi7v.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpxgibqqta.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxgibqqta.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp8ymmbi32.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8ymmbi32.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= factorial(i);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn9qg3_pt.js:12\n    result *= factorial(i);\n    ^\n\nReferenceError:\
    \ factorial is not defined\n    at special_factorial (/tmp/tmpn9qg3_pt.js:12:5)\n\
    \    at test (/tmp/tmpn9qg3_pt.js:22:20)\n    at Object.<anonymous> (/tmp/tmpn9qg3_pt.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpn97hj5t9.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn97hj5t9.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmplhyyua7o.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmplhyyua7o.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpx_zlivw7.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx_zlivw7.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) {\n    return 1;\n  }\n  var result = 1;\n  for (var i = n; i > 0;\
    \ i--) {\n    result *= i;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpheug06fs.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpheug06fs.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp2ft8cf0e.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2ft8cf0e.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) return 1;\n  return n * special_factorial(n-1);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = special_factorial;\n\
    \  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
    \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpj2vs3uy_.js:19:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj2vs3uy_.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp6ygb6yt5.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6ygb6yt5.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpi0chdb6c.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpi0chdb6c.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ let result = 1;\n    for (let i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpoar5fhu3.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoar5fhu3.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp1w5rkevb.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1w5rkevb.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpv_5n14r2.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv_5n14r2.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpg2o1frwz.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg2o1frwz.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp7f1hyulo.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7f1hyulo.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpx0twei5y.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx0twei5y.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ total = 1;\n  for (var i = n; i > 0; i--) {\n    total *= i;\n  }\n  return\
    \ total;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpapdwxymo.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpapdwxymo.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp_gpvt88r.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_gpvt88r.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n === 0) {\n    return 1;\n  }\n  return n * special_factorial(n - 1);\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = special_factorial;\n  assert.deepEqual(candidate(4),288);\n  assert.deepEqual(candidate(5),34560);\n\
    \  assert.deepEqual(candidate(7),125411328000);\n  assert.deepEqual(candidate(1),1);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp1htk6001.js:21:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1htk6001.js:27:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmphkp2m5vw.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmphkp2m5vw.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  var factorial2 = 1;\n  for (var i = 1; i <= n; i++){\n   \
    \ factorial *= i;\n  }\n  for (var j = 1; j < n; j++){\n    factorial2 *= j;\n\
    \  }\n  return factorial * factorial2;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n144\n\nshould equal\n\n288\n    at test\
    \ (/tmp/tmp_klz8_qs.js:26:10)\n    at Object.<anonymous> (/tmp/tmp_klz8_qs.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 144,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ result = 1;\n  for (var i = n; i > 0; i--) {\n    result *= i;\n  }\n  return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpej23oq7p.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpej23oq7p.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpgkl9r92h.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgkl9r92h.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpshqiqpmn.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpshqiqpmn.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  if\
    \ (n <= 0) {\n    return 1;\n  }\n  var result = 1;\n  for (var i = n; i > 0;\
    \ i--) {\n    result *= i;\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmppsd1os77.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmppsd1os77.js:31:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpkrhdu3vc.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkrhdu3vc.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpyai3ozna.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyai3ozna.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++){\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpsmfmo2jq.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsmfmo2jq.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp20rfls8b.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp20rfls8b.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpapozcgcd.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpapozcgcd.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = 1; i <= n; i++) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmplcxs23xh.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmplcxs23xh.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ let factorial = 1;\n    for (let i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpt0og3khp.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt0og3khp.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpqgqbxitv.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqgqbxitv.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp38nqc1bh.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp38nqc1bh.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  var factorial2 = 1;\n  var factorial3 = 1;\n  for (var i =\
    \ 1; i <= n; i++) {\n    factorial = factorial * i;\n  }\n  for (var i = 1; i\
    \ <= n-1; i++) {\n    factorial2 = factorial2 * i;\n  }\n  for (var i = 1; i <=\
    \ n-2; i++) {\n    factorial3 = factorial3 * i;\n  }\n  return factorial * factorial2\
    \ * factorial3;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n17280\n\nshould equal\n\n34560\n    at test\
    \ (/tmp/tmp5wcq368g.js:31:10)\n    at Object.<anonymous> (/tmp/tmp5wcq368g.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 17280,\n  expected: 34560,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n  var\
    \ factorial = 1;\n  for (var i = n; i > 0; i--) {\n    factorial *= i;\n  }\n\
    \  return factorial;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmp2my27x_f.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2my27x_f.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpnmi08yl5.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnmi08yl5.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmppp9ztvs1.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmppp9ztvs1.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var factorial = 1;\n    for (var i = n; i > 0; i--) {\n        factorial *=\
    \ i;\n    }\n    return factorial;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmpsajcgx86.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsajcgx86.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= factorial(i);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqqf4j4je.js:12\n        result *= factorial(i);\n        ^\n\n\
    ReferenceError: factorial is not defined\n    at special_factorial (/tmp/tmpqqf4j4je.js:12:9)\n\
    \    at test (/tmp/tmpqqf4j4je.js:22:20)\n    at Object.<anonymous> (/tmp/tmpqqf4j4je.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//The Brazilian factorial is defined as:\n// brazilian_factorial(n) =\
    \ n! * (n-1)! * (n-2)! * ... * 1!\n// where n > 0\n// For example:\n// >>> special_factorial(4)\n\
    // 288\n// The function will receive an integer as input and should return the\
    \ special\n// factorial of this integer.\nfunction special_factorial(n){\n   \
    \ var result = 1;\n    for (var i = n; i > 0; i--) {\n        result *= i;\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = special_factorial;\n  assert.deepEqual(candidate(4),288);\n\
    \  assert.deepEqual(candidate(5),34560);\n  assert.deepEqual(candidate(7),125411328000);\n\
    \  assert.deepEqual(candidate(1),1);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n24\n\nshould equal\n\n288\n    at test (/tmp/tmplqa06dmt.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmplqa06dmt.js:28:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 24,\n  expected: 288,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
