name: HumanEval_125_split_words
language: js
results:
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpgmfx2qsv.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgmfx2qsv.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    if(txt.indexOf(\" \"\
    ) != -1){\n        arr = txt.split(\" \");\n    }\n    else if(txt.indexOf(\"\
    ,\") != -1){\n        arr = txt.split(\",\");\n    }\n    else{\n        var count\
    \ = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(i % 2 ==\
    \ 0){\n                count++;\n            }\n        }\n        arr = count;\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp7ssz2nhf.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7ssz2nhf.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp21m6z9mp.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp21m6z9mp.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else {\n        var count = 0;\n        for (var\
    \ i = 0; i < txt.length; i++){\n            if (i % 2 == 0){\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpqzuu1to8.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqzuu1to8.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 === 0){\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp2k9xam5d.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2k9xam5d.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    } else if (txt.indexOf(\",\") != -1) {\n    \
    \    return txt.split(\",\");\n    } else {\n        var count = 0;\n        for\
    \ (var i = 0; i < txt.length; i++) {\n            if (i % 2 != 0) {\n        \
    \        count++;\n            }\n        }\n        return count;\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmps7kbpifa.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmps7kbpifa.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp8w1kx6lq.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8w1kx6lq.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var words = txt.split(/[\\s,]+/);\n    if\
    \ (words.length > 1) {\n        return words;\n    }\n    else {\n        var\
    \ odd = 0;\n        for (var i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i)\
    \ % 2 == 1) {\n                odd++;\n            }\n        }\n        return\
    \ odd;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmpxmn8zmi7.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxmn8zmi7.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = txt.split(/[\\s,]+/);\n    if\
    \ (arr.length == 1){\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++){\n            if (txt.charCodeAt(i) % 2 == 1){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmp2xbenk6g.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2xbenk6g.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpeudpwbzl.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeudpwbzl.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp5iidceoa.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5iidceoa.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var odd = 0;\n        for (var i = 0; i < txt.length; i++)\
    \ {\n            if (i % 2 != 0) {\n                odd++;\n            }\n  \
    \      }\n        return odd;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpqo9ceuqo.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqo9ceuqo.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }else if(txt.indexOf(',') != -1){\n        return txt.split(',');\n\
    \    }else{\n        var count = 0;\n        for(var i = 0; i < txt.length; i++){\n\
    \            if(txt.charCodeAt(i) % 2 != 0){\n                count++;\n     \
    \       }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpou3jpddv.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpou3jpddv.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split('\
    \ ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length;\
    \ i++){\n            if(i % 2 == 1){\n                count++;\n            }\n\
    \        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp3l0eya3z.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3l0eya3z.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') > -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') > -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpk4y76qp9.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk4y76qp9.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                if(txt[i]\
    \ == txt[i].toLowerCase()){\n                    count++;\n                }\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp7oj9sgp8.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7oj9sgp8.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = txt.split(/[\\s,]+/);\n    if\
    \ (arr.length == 1){\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++){\n            if (i % 2 == 0 && txt[i] == txt[i].toLowerCase()){\n    \
    \            count++;\n            }\n        }\n        return count;\n    }\n\
    \    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmpzbrfaqkw.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzbrfaqkw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpchkbhu0k.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpchkbhu0k.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else {\n        let count = 0;\n        for (let\
    \ i = 0; i < txt.length; i++){\n            if (i % 2 == 1){\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpuv72wrva.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuv72wrva.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 == 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpyuzqba02.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyuzqba02.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for (let\
    \ i = 0; i < txt.length; i++){\n            if (i % 2 != 0){\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmppwnwdvgg.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmppwnwdvgg.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp8n2r1d0a.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8n2r1d0a.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpn8cq3zrb.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn8cq3zrb.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpbewr6umq.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbewr6umq.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split('\
    \ ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        var count = 0;\n        for(var i = 0; i < txt.length;\
    \ i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpl_dhs3hm.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl_dhs3hm.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    if(txt.indexOf(' ') !=\
    \ -1){\n        arr = txt.split(' ');\n    }\n    else if(txt.indexOf(',') !=\
    \ -1){\n        arr = txt.split(',');\n    }\n    else{\n        var count = 0;\n\
    \        for(var i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n \
    \               count++;\n            }\n        }\n        arr = count;\n   \
    \ }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp_q6as4vh.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_q6as4vh.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    if (words.length\
    \ > 1) {\n        return words;\n    }\n    else {\n        words = txt.split(\"\
    ,\");\n        if (words.length > 1) {\n            return words;\n        }\n\
    \        else {\n            var count = 0;\n            for (var i = 0; i < txt.length;\
    \ i++) {\n                if (i % 2 == 0) {\n                    count++;\n  \
    \              }\n            }\n            return count;\n        }\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpspirh5du.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpspirh5du.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpdxocv4k2.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdxocv4k2.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") !== -1) {\n     \
    \   return txt.split(\" \");\n    } else if (txt.indexOf(\",\") !== -1) {\n  \
    \      return txt.split(\",\");\n    } else {\n        var count = 0;\n      \
    \  for (var i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) %\
    \ 2 !== 0) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp56t7vzm6.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp56t7vzm6.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let result = [];\n    let arr = txt.split('');\n\
    \    let count = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ === ' '){\n            result.push(arr.slice(0, i).join(''));\n            result.push(arr.slice(i+1).join(''));\n\
    \            return result;\n        }\n        if(arr[i] === ','){\n        \
    \    result.push(arr.slice(0, i).join(''));\n            result.push(arr.slice(i+1).join(''));\n\
    \            return result;\n        }\n        if(arr[i].charCodeAt() >= 97 &&\
    \ arr[i].charCodeAt() <= 122){\n            if(arr[i].charCodeAt() % 2 === 1){\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'Hello,world !' ]\n\nshould equal\n\
    \n[ 'Hello,Hello,world', '!' ]\n    at test (/tmp/tmpm3uawawk.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpm3uawawk.js:50:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'Hello,world !' ],\n  expected: [ 'Hello,Hello,world', '!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpnzcxxpkc.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnzcxxpkc.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpiijg4evd.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpiijg4evd.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmprlx567w1.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmprlx567w1.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') > -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') > -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpwzid13f2.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwzid13f2.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp65ofwsw_.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp65ofwsw_.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    }\n    else if (txt.indexOf(\",\") != -1) {\n\
    \        return txt.split(\",\");\n    }\n    else {\n        var count = 0;\n\
    \        for (var i = 0; i < txt.length; i++) {\n            if (i % 2 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmplu8w31eg.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmplu8w31eg.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") !== -1) {\n     \
    \   return txt.split(\" \");\n    }\n    else if (txt.indexOf(\",\") !== -1) {\n\
    \        return txt.split(\",\");\n    }\n    else {\n        var count = 0;\n\
    \        for (var i = 0; i < txt.length; i++) {\n            if (i % 2 === 0)\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpmzo1ljdy.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmzo1ljdy.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') !== -1) {\n       \
    \ return txt.split(' ');\n    } else if (txt.indexOf(',') !== -1) {\n        return\
    \ txt.split(',');\n    } else {\n        var count = 0;\n        for (var i =\
    \ 0; i < txt.length; i++) {\n            if (i % 2 === 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpv7efg566.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv7efg566.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmppc_wrcg1.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmppc_wrcg1.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpg8l2yoll.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg8l2yoll.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = txt.split(\" \");\n    if(arr.length\
    \ > 1){\n        return arr;\n    }\n    else{\n        arr = txt.split(\",\"\
    );\n        if(arr.length > 1){\n            return arr;\n        }\n        else{\n\
    \            var count = 0;\n            for(var i = 0; i < txt.length; i++){\n\
    \                if(i % 2 == 1){\n                    count++;\n             \
    \   }\n            }\n            return count;\n        }\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp206q3e8l.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp206q3e8l.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    if(txt.indexOf(' ') !=\
    \ -1){\n        arr = txt.split(' ');\n    }else if(txt.indexOf(',') != -1){\n\
    \        arr = txt.split(',');\n    }else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n\
    \                count++;\n            }\n        }\n        arr = count;\n  \
    \  }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp4uvxm9at.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4uvxm9at.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpqpzo4pko.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqpzo4pko.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpu9n57t15.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu9n57t15.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp1u_v4e0f.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1u_v4e0f.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp9ncs3zw3.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9ncs3zw3.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    } else if (txt.indexOf(\",\") != -1) {\n    \
    \    return txt.split(\",\");\n    } else {\n        var count = 0;\n        for\
    \ (var i = 0; i < txt.length; i++) {\n            if (i % 2 == 0) {\n        \
    \        count++;\n            }\n        }\n        return count;\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp09vus6_p.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp09vus6_p.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") > -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") > -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmps8d2isp6.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmps8d2isp6.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") > -1) {\n       \
    \ return txt.split(\" \");\n    } else if (txt.indexOf(\",\") > -1) {\n      \
    \  return txt.split(\",\");\n    } else {\n        var count = 0;\n        for\
    \ (var i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) % 2 ==\
    \ 1) {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpfm3mea6_.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfm3mea6_.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpf5ee20rl.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf5ee20rl.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    }\n    else if (txt.indexOf(\",\") != -1) {\n\
    \        return txt.split(\",\");\n    }\n    else {\n        let count = 0;\n\
    \        for (let i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i)\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpv84nk1v4.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv84nk1v4.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    }\n    else if (txt.indexOf(\",\") != -1) {\n\
    \        return txt.split(\",\");\n    }\n    else {\n        var count = 0;\n\
    \        for (var i = 0; i < txt.length; i++) {\n            if (i % 2 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpckgjre79.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpckgjre79.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp5xuhhrsk.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5xuhhrsk.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var words = txt.split(/[\\s,]+/);\n    if\
    \ (words.length == 1) {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n    return words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmpivs0uvr0.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpivs0uvr0.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = txt.split(/[\\s,]+/);\n    if\
    \ (arr.length > 1) {\n        return arr;\n    }\n    else {\n        var count\
    \ = 0;\n        for (var i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i)\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmp5bsxf76p.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5bsxf76p.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \")>0){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\")>0){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count=0;\n        for(var i=0;i<txt.length;i++){\n\
    \            if(i%2==0){\n                count++;\n            }\n        }\n\
    \        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmputmw7r3s.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmputmw7r3s.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    if(txt.indexOf(\" \"\
    ) !== -1){\n        arr = txt.split(\" \");\n    }\n    else if(txt.indexOf(\"\
    ,\") !== -1){\n        arr = txt.split(\",\");\n    }\n    else{\n        var\
    \ count = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i)\
    \ % 2 !== 0){\n                count++;\n            }\n        }\n        arr\
    \ = count;\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpd1ce7fr8.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd1ce7fr8.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(' ')){\n        return\
    \ txt.split(' ');\n    }\n    else if (txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++){\n            if (i % 2 != 0){\n                count++;\n            }\n\
    \        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpk_cz1xi9.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk_cz1xi9.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for (var\
    \ i = 0; i < txt.length; i++){\n            if (txt.charCodeAt(i) % 2 == 1){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp6rf3x8d1.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6rf3x8d1.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")) {\n        return\
    \ txt.split(\" \");\n    } else if (txt.includes(\",\")) {\n        return txt.split(\"\
    ,\");\n    } else {\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 === 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp0gg68_x_.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0gg68_x_.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var words = txt.split(/[\\s,]+/);\n    if\
    \ (words.length == 1) {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 == 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    return words;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmpmh_063au.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmh_063au.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var result = [];\n    if (txt.indexOf('\
    \ ') != -1){\n        result = txt.split(' ');\n    }\n    else if (txt.indexOf(',')\
    \ != -1){\n        result = txt.split(',');\n    }\n    else{\n        var count\
    \ = 0;\n        for (var i = 0; i < txt.length; i++){\n            if (txt.charCodeAt(i)\
    \ % 2 != 0){\n                count++;\n            }\n        }\n        result\
    \ = count;\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpsue4g40g.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsue4g40g.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp8rxi8kk3.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8rxi8kk3.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp6px6h9_f.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6px6h9_f.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') !== -1) {\n       \
    \ return txt.split(' ');\n    } else if (txt.indexOf(',') !== -1) {\n        return\
    \ txt.split(',');\n    } else {\n        var count = 0;\n        for (var i =\
    \ 0; i < txt.length; i++) {\n            if (i % 2 === 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpp9yfp9cf.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp9yfp9cf.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpzfzb3gv_.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzfzb3gv_.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        let count = 0;\n        for(let i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpgg4j93o8.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgg4j93o8.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }else if(txt.indexOf(',') != -1){\n        return txt.split(',');\n\
    \    }else{\n        var count = 0;\n        for(var i = 0; i < txt.length; i++){\n\
    \            if(txt.charCodeAt(i) % 2 != 0){\n                count++;\n     \
    \       }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpsmgl8297.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsmgl8297.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for (var\
    \ i = 0; i < txt.length; i++){\n            if (i % 2 == 1){\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpa0n5_c9t.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa0n5_c9t.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpfr49w8y6.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfr49w8y6.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for (let\
    \ i = 0; i < txt.length; i++){\n            if (i % 2 == 1){\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp14kuom14.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp14kuom14.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpgzp11k16.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgzp11k16.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpr2i5sxf0.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr2i5sxf0.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp_xljefi6.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_xljefi6.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    var arr2 = [];\n    var\
    \ arr3 = [];\n    var arr4 = [];\n    var arr5 = [];\n    var arr6 = [];\n   \
    \ var arr7 = [];\n    var arr8 = [];\n    var arr9 = [];\n    var arr10 = [];\n\
    \    var arr11 = [];\n    var arr12 = [];\n    var arr13 = [];\n    var arr14\
    \ = [];\n    var arr15 = [];\n    var arr16 = [];\n    var arr17 = [];\n    var\
    \ arr18 = [];\n    var arr19 = [];\n    var arr20 = [];\n    var arr21 = [];\n\
    \    var arr22 = [];\n    var arr23 = [];\n    var arr24 = [];\n    var arr25\
    \ = [];\n    var arr26 = [];\n    var arr27 = [];\n    var arr28 = [];\n    var\
    \ arr29 = [];\n    var arr30 = [];\n    var arr31 = [];\n    var arr32 = [];\n\
    \    var arr33 = [];\n    var arr34 = [];\n    var arr35 = [];\n    var arr36\
    \ = [];\n    var arr37 = [];\n    var arr38 = [];\n    var arr39 = [];\n    var\
    \ arr40 = [];\n    var arr41 = [];\n    var arr42 = [];\n    var arr43 = [];\n\
    \    var arr44 = [];\n    var arr45 = [];\n    var arr46 = [];\n    var arr47\
    \ = [];\n    var arr48 = [];\n    var arr49 = [];\n    var arr50 = [];\n    var\
    \ arr51 = [];\n    var arr52 = [];\n    var arr53 = [];\n    var arr54 = [];\n\
    \    var arr55 = [];\n    var arr56 = [];\n    var arr57 = [];\n    var arr58\
    \ = [];\n    var arr59 = [];\n    var arr60 = [];\n    var arr61 = [];\n    var\
    \ arr62 = [];\n    var arr63 = [];\n    var arr64 = [];\n    var arr65 = [];\n\
    \    var arr66 = [];\n    var arr67 = [];\n    var arr68 = [];\n    var arr69\
    \ = [];\n    var arr70 = [];\n    var arr71 = [];\n    var arr72 = [];\n    var\
    \ arr73 = [];\n   \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpx6x8vu_o.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpqi5iun5g.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqi5iun5g.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpy0ks6l4c.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy0ks6l4c.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpw7o6rpj0.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw7o6rpj0.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var words = txt.split(/[\\s,]+/);\n    if\
    \ (words.length == 1) {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n    return words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmpdzj35bao.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdzj35bao.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') !== -1) {\n       \
    \ return txt.split(' ');\n    } else if (txt.indexOf(',') !== -1) {\n        return\
    \ txt.split(',');\n    } else {\n        var count = 0;\n        for (var i =\
    \ 0; i < txt.length; i++) {\n            if (i % 2 === 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpwaxqfqas.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwaxqfqas.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpfmjf5qhr.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfmjf5qhr.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = txt.split(\" \");\n    if(arr.length\
    \ > 1){\n        return arr;\n    }\n    else{\n        arr = txt.split(\",\"\
    );\n        if(arr.length > 1){\n            return arr;\n        }\n        else{\n\
    \            var count = 0;\n            for(var i = 0; i < txt.length; i++){\n\
    \                if(i % 2 == 1){\n                    count++;\n             \
    \   }\n            }\n            return count;\n        }\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpvz4pc2wy.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvz4pc2wy.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') !== -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') !== -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 !== 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpgpmtggd5.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgpmtggd5.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.match(/\\s/)){\n        return txt.split(/\\\
    s/)\n    }\n    else if(txt.match(/\\,/)){\n        return txt.split(/\\,/)\n\
    \    }\n    else{\n        var count = 0\n        for(var i = 0; i < txt.length;\
    \ i++){\n            if(i % 2 == 0){\n                count++\n            }\n\
    \        }\n        return count\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpp6x26yub.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp6x26yub.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp9ixczcye.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9ixczcye.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp7vnnr3qu.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7vnnr3qu.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpabipd0_6.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpabipd0_6.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpt2qpsk_w.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt2qpsk_w.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpjqqkefrg.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjqqkefrg.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = txt.split(/[\\s,]+/);\n    if\
    \ (arr.length == 1) {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 == 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmplspy970o.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplspy970o.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split('\
    \ ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length;\
    \ i++){\n            if(i % 2 == 0){\n                count++;\n            }\n\
    \        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpxaig7jld.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxaig7jld.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 == 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpwcpy0pl5.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwcpy0pl5.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpvv3fll7w.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvv3fll7w.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp4nb_bicl.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4nb_bicl.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        let count = 0;\n        for(let i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpd43gv2bj.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd43gv2bj.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpg8smetgx.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg8smetgx.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') !== -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') !== -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 !== 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpikg48jmd.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpikg48jmd.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                if(txt[i]\
    \ == txt[i].toLowerCase()){\n                    count++;\n                }\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpnmy6zhdw.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnmy6zhdw.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpexojp8ll.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpexojp8ll.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp1nv0t20_.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1nv0t20_.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    } else if (txt.indexOf(\",\") != -1) {\n    \
    \    return txt.split(\",\");\n    } else {\n        var count = 0;\n        for\
    \ (var i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmprdf80fxb.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmprdf80fxb.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for (var\
    \ i = 0; i < txt.length; i++){\n            if (i % 2 == 1){\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpswny8bht.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpswny8bht.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = txt.split(/[\\s,]+/);\n    if\
    \ (arr.length == 1) {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n    return arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmptbss2re8.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptbss2re8.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpbcf62o02.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbcf62o02.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpdqgv0i9c.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdqgv0i9c.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    if(txt.indexOf(' ') !=\
    \ -1){\n        arr = txt.split(' ');\n    }\n    else if(txt.indexOf(',') !=\
    \ -1){\n        arr = txt.split(',');\n    }\n    else{\n        var count = 0;\n\
    \        for(var i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n \
    \               count++;\n            }\n        }\n        arr = count;\n   \
    \ }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp9oo7a007.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9oo7a007.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var words = txt.split(/[\\s,]+/);\n    if\
    \ (words.length == 1) {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 == 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    return words;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmp2p9aq43u.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2p9aq43u.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") > -1) {\n       \
    \ return txt.split(\" \");\n    } else if (txt.indexOf(\",\") > -1) {\n      \
    \  return txt.split(\",\");\n    } else {\n        var count = 0;\n        for\
    \ (var i = 0; i < txt.length; i++) {\n            if (i % 2 === 0) {\n       \
    \         count++;\n            }\n        }\n        return count;\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpxrkwde01.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxrkwde01.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 == 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmppsj2p4mc.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmppsj2p4mc.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    var arr2 = [];\n    var\
    \ arr3 = [];\n    var arr4 = [];\n    var arr5 = [];\n    var arr6 = [];\n   \
    \ var arr7 = [];\n    var arr8 = [];\n    var arr9 = [];\n    var arr10 = [];\n\
    \    var arr11 = [];\n    var arr12 = [];\n    var arr13 = [];\n    var arr14\
    \ = [];\n    var arr15 = [];\n    var arr16 = [];\n    var arr17 = [];\n    var\
    \ arr18 = [];\n    var arr19 = [];\n    var arr20 = [];\n    var arr21 = [];\n\
    \    var arr22 = [];\n    var arr23 = [];\n    var arr24 = [];\n    var arr25\
    \ = [];\n    var arr26 = [];\n    var arr27 = [];\n    var arr28 = [];\n    var\
    \ arr29 = [];\n    var arr30 = [];\n    var arr31 = [];\n    var arr32 = [];\n\
    \    var arr33 = [];\n    var arr34 = [];\n    var arr35 = [];\n    var arr36\
    \ = [];\n    var arr37 = [];\n    var arr38 = [];\n    var arr39 = [];\n    var\
    \ arr40 = [];\n    var arr41 = [];\n    var arr42 = [];\n    var arr43 = [];\n\
    \    var arr44 = [];\n    var arr45 = [];\n    var arr46 = [];\n    var arr47\
    \ = [];\n    var arr48 = [];\n    var arr49 = [];\n    var arr50 = [];\n    var\
    \ arr51 = [];\n    var arr52 = [];\n    var arr53 = [];\n    var arr54 = [];\n\
    \    var arr55 = [];\n    var arr56 = [];\n    var arr57 = [];\n    var arr58\
    \ = [];\n    var arr59 = [];\n    var arr60 = [];\n    var arr61 = [];\n    var\
    \ arr62 = [];\n    var arr63 = [];\n    var arr64 = [];\n    var arr65 = [];\n\
    \    var arr66 = [];\n    var arr67 = [];\n    var arr68 = [];\n    var arr69\
    \ = [];\n    var arr70 = [];\n    var arr71 = [];\n    var arr72 = [];\n    var\
    \ arr73 = [];\n   \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmw_77gih.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp4zuv80oe.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4zuv80oe.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    }\n    else if (txt.indexOf(\",\") != -1) {\n\
    \        return txt.split(\",\");\n    }\n    else {\n        var count = 0;\n\
    \        for (var i = 0; i < txt.length; i++) {\n            if (i % 2 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp5h_0ul3p.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5h_0ul3p.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') > -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') > -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpiri1j4wm.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpiri1j4wm.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let arr = txt.split('');\n    let count\
    \ = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i] == ' '){\n\
    \            return txt.split(' ');\n        }\n        else if(arr[i] == ','){\n\
    \            return txt.split(',');\n        }\n        else if(arr[i].charCodeAt(0)\
    \ >= 97 && arr[i].charCodeAt(0) <= 122){\n            if(arr[i].charCodeAt(0)\
    \ % 2 != 0){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'Hello', 'world !' ]\n\nshould\
    \ equal\n\n[ 'Hello,Hello,world', '!' ]\n    at test (/tmp/tmpkt_ezugo.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkt_ezugo.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'Hello', 'Hello', 'world !' ],\n  expected:\
    \ [ 'Hello,Hello,world', '!' ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp7tvuckno.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7tvuckno.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    if(txt.indexOf(\" \"\
    ) != -1){\n        arr = txt.split(\" \");\n    }\n    else if(txt.indexOf(\"\
    ,\") != -1){\n        arr = txt.split(\",\");\n    }\n    else{\n        var count\
    \ = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(i % 2 !=\
    \ 0){\n                count++;\n            }\n        }\n        arr = count;\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmprjqsvd2q.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmprjqsvd2q.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.match(/\\s/g)){\n        return\
    \ txt.split(/\\s/g);\n    }\n    else if (txt.match(/\\,/g)){\n        return\
    \ txt.split(/\\,/g);\n    }\n    else {\n        let count = 0;\n        for (let\
    \ i = 0; i < txt.length; i++){\n            if (i % 2 == 1){\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp1nmsxggj.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1nmsxggj.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var words = txt.split(/[\\s,]+/);\n    if\
    \ (words.length == 1){\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++){\n            if (txt.charCodeAt(i) % 2 == 1){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    return words;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmpcsu6qx9u.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcsu6qx9u.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for (var\
    \ i = 0; i < txt.length; i++){\n            if (i % 2 == 0){\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp3unz1nl4.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3unz1nl4.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for (let\
    \ i = 0; i < txt.length; i++){\n            if (txt.charCodeAt(i) % 2 == 1){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpv9rt2spt.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv9rt2spt.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    var arr2 = [];\n    var\
    \ arr3 = [];\n    var arr4 = [];\n    var arr5 = [];\n    var arr6 = [];\n   \
    \ var arr7 = [];\n    var arr8 = [];\n    var arr9 = [];\n    var arr10 = [];\n\
    \    var arr11 = [];\n    var arr12 = [];\n    var arr13 = [];\n    var arr14\
    \ = [];\n    var arr15 = [];\n    var arr16 = [];\n    var arr17 = [];\n    var\
    \ arr18 = [];\n    var arr19 = [];\n    var arr20 = [];\n    var arr21 = [];\n\
    \    var arr22 = [];\n    var arr23 = [];\n    var arr24 = [];\n    var arr25\
    \ = [];\n    var arr26 = [];\n    var arr27 = [];\n    var arr28 = [];\n    var\
    \ arr29 = [];\n    var arr30 = [];\n    var arr31 = [];\n    var arr32 = [];\n\
    \    var arr33 = [];\n    var arr34 = [];\n    var arr35 = [];\n    var arr36\
    \ = [];\n    var arr37 = [];\n    var arr38 = [];\n    var arr39 = [];\n    var\
    \ arr40 = [];\n    var arr41 = [];\n    var arr42 = [];\n    var arr43 = [];\n\
    \    var arr44 = [];\n    var arr45 = [];\n    var arr46 = [];\n    var arr47\
    \ = [];\n    var arr48 = [];\n    var arr49 = [];\n    var arr50 = [];\n    var\
    \ arr51 = [];\n    var arr52 = [];\n    var arr53 = [];\n    var arr54 = [];\n\
    \    var arr55 = [];\n    var arr56 = [];\n    var arr57 = [];\n    var arr58\
    \ = [];\n    var arr59 = [];\n    var arr60 = [];\n    var arr61 = [];\n    var\
    \ arr62 = [];\n    var arr63 = [];\n    var arr64 = [];\n    var arr65 = [];\n\
    \    var arr66 = [];\n    var arr67 = [];\n    var arr68 = [];\n    var arr69\
    \ = [];\n    var arr70 = [];\n    var arr71 = [];\n    var arr72 = [];\n    var\
    \ arr73 = [];\n   \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4bwx_0xe.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    }\n    else if (txt.indexOf(\",\") != -1) {\n\
    \        return txt.split(\",\");\n    }\n    else {\n        var count = 0;\n\
    \        for (var i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i)\
    \ % 2 == 1) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpqyerd41u.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqyerd41u.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    }\n    else if (txt.indexOf(\",\") != -1) {\n\
    \        return txt.split(\",\");\n    }\n    else {\n        var count = 0;\n\
    \        for (var i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i)\
    \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp3c3gbyno.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3c3gbyno.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpu812zbi7.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu812zbi7.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpeswww3u0.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeswww3u0.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 != 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpfmsg5p6j.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfmsg5p6j.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpy5thy_zz.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy5thy_zz.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    } else if (txt.indexOf(\",\") != -1) {\n    \
    \    return txt.split(\",\");\n    } else {\n        var count = 0;\n        for\
    \ (var i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) % 2 !=\
    \ 0) {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp2hctgzmg.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2hctgzmg.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpuif_y9i5.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuif_y9i5.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    if (words.length\
    \ > 1) {\n        return words;\n    }\n    else {\n        words = txt.split(\"\
    ,\");\n        if (words.length > 1) {\n            return words;\n        }\n\
    \        else {\n            var count = 0;\n            for (var i = 0; i < txt.length;\
    \ i++) {\n                if (i % 2 == 0) {\n                    count++;\n  \
    \              }\n            }\n            return count;\n        }\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp7d3jtf7c.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7d3jtf7c.js:48:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmppbndvd7b.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmppbndvd7b.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpl19kewwe.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl19kewwe.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    if(txt.indexOf(\" \"\
    ) != -1){\n        arr = txt.split(\" \");\n    }else if(txt.indexOf(\",\") !=\
    \ -1){\n        arr = txt.split(\",\");\n    }else{\n        var count = 0;\n\
    \        for(var i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i)\
    \ % 2 != 0){\n                count++;\n            }\n        }\n        arr\
    \ = count;\n    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpbzem8z9i.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbzem8z9i.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpm1mcxgu7.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm1mcxgu7.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpg1jw7lxr.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg1jw7lxr.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 1){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp8a34_6hk.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8a34_6hk.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpk_o88x12.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk_o88x12.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 === 0) {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp92vryxkz.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp92vryxkz.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for (var\
    \ i = 0; i < txt.length; i++){\n            if (i % 2 == 1){\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp_ho2s2ky.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_ho2s2ky.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for (let\
    \ i = 0; i < txt.length; i++){\n            if (i % 2 == 1){\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpv9e1vrzv.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv9e1vrzv.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    }\n    else if (txt.indexOf(\",\") != -1) {\n\
    \        return txt.split(\",\");\n    }\n    else {\n        var count = 0;\n\
    \        for (var i = 0; i < txt.length; i++) {\n            if (i % 2 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp4xso5ne4.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4xso5ne4.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') !== -1) {\n       \
    \ return txt.split(' ');\n    } else if (txt.indexOf(',') !== -1) {\n        return\
    \ txt.split(',');\n    } else {\n        let count = 0;\n        for (let i =\
    \ 0; i < txt.length; i++) {\n            if (i % 2 !== 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpjoylpi61.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjoylpi61.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') !== -1) {\n       \
    \ return txt.split(' ');\n    } else if (txt.indexOf(',') !== -1) {\n        return\
    \ txt.split(',');\n    } else {\n        let count = 0;\n        for (let i =\
    \ 0; i < txt.length; i++) {\n            if (i % 2 !== 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp61c_f0na.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmp61c_f0na.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var words = txt.split(/[\\s,]+/);\n    if\
    \ (words.length == 1) {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n    return words;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmpspa9ad_w.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpspa9ad_w.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 !== 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpk6icff46.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk6icff46.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpcoqq7jie.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcoqq7jie.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    }\n    else if (txt.indexOf(\",\") != -1) {\n\
    \        return txt.split(\",\");\n    }\n    else {\n        var count = 0;\n\
    \        for (var i = 0; i < txt.length; i++) {\n            if (i % 2 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpmphlbseg.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmphlbseg.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp3jidbszd.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3jidbszd.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split('\
    \ ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length;\
    \ i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp7_f8mngf.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7_f8mngf.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpoiupoh62.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoiupoh62.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let arr = txt.split(/[, ]/);\n    if (arr.length\
    \ == 1) {\n        let count = 0;\n        for (let i = 0; i < txt.length; i++)\
    \ {\n            if (txt.charCodeAt(i) % 2 == 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    return arr;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmpegkw1jol.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpegkw1jol.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpaqrgx313.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpaqrgx313.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split('\
    \ ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length;\
    \ i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpge3og0vi.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpge3og0vi.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    }\n    else if (txt.indexOf(',') != -1) {\n        return\
    \ txt.split(',');\n    }\n    else {\n        var count = 0;\n        for (var\
    \ i = 0; i < txt.length; i++) {\n            if (i % 2 == 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp3ecrc_bp.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3ecrc_bp.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(' ')){\n        return txt.split('\
    \ ');\n    }\n    else if(txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length;\
    \ i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmphcboruo8.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmphcboruo8.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmprd7d_53l.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmprd7d_53l.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    if(txt.indexOf(\" \"\
    ) != -1){\n        arr = txt.split(\" \");\n    }\n    else if(txt.indexOf(\"\
    ,\") != -1){\n        arr = txt.split(\",\");\n    }\n    else{\n        var count\
    \ = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(i % 2 !=\
    \ 0){\n                count++;\n            }\n        }\n        arr = count;\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp9xhy9ik0.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9xhy9ik0.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(' ')){\n        return\
    \ txt.split(' ');\n    }\n    else if (txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++){\n            if (txt.charCodeAt(i) % 2 == 1){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp40ms7fnm.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp40ms7fnm.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    if(txt.indexOf(\" \"\
    ) != -1){\n        arr = txt.split(\" \");\n    }\n    else if(txt.indexOf(\"\
    ,\") != -1){\n        arr = txt.split(\",\");\n    }\n    else{\n        var count\
    \ = 0;\n        for(var i = 0; i < txt.length; i++){\n            if(i % 2 !=\
    \ 0){\n                count++;\n            }\n        }\n        arr = count;\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpgu2pb7h9.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgu2pb7h9.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    }\n    else if (txt.indexOf(',') != -1) {\n        return\
    \ txt.split(',');\n    }\n    else {\n        var count = 0;\n        for (var\
    \ i = 0; i < txt.length; i++) {\n            if (i % 2 == 0) {\n             \
    \   count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpmoeni292.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmoeni292.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    var arr1 = [];\n    var\
    \ arr2 = [];\n    var arr3 = [];\n    var arr4 = [];\n    var arr5 = [];\n   \
    \ var arr6 = [];\n    var arr7 = [];\n    var arr8 = [];\n    var arr9 = [];\n\
    \    var arr10 = [];\n    var arr11 = [];\n    var arr12 = [];\n    var arr13\
    \ = [];\n    var arr14 = [];\n    var arr15 = [];\n    var arr16 = [];\n    var\
    \ arr17 = [];\n    var arr18 = [];\n    var arr19 = [];\n    var arr20 = [];\n\
    \    var arr21 = [];\n    var arr22 = [];\n    var arr23 = [];\n    var arr24\
    \ = [];\n    var arr25 = [];\n    var arr26 = [];\n    var arr27 = [];\n    var\
    \ arr28 = [];\n    var arr29 = [];\n    var arr30 = [];\n    var arr31 = [];\n\
    \    var arr32 = [];\n    var arr33 = [];\n    var arr34 = [];\n    var arr35\
    \ = [];\n    var arr36 = [];\n    var arr37 = [];\n    var arr38 = [];\n    var\
    \ arr39 = [];\n    var arr40 = [];\n    var arr41 = [];\n    var arr42 = [];\n\
    \    var arr43 = [];\n    var arr44 = [];\n    var arr45 = [];\n    var arr46\
    \ = [];\n    var arr47 = [];\n    var arr48 = [];\n    var arr49 = [];\n    var\
    \ arr50 = [];\n    var arr51 = [];\n    var arr52 = [];\n    var arr53 = [];\n\
    \    var arr54 = [];\n    var arr55 = [];\n    var arr56 = [];\n    var arr57\
    \ = [];\n    var arr58 = [];\n    var arr59 = [];\n    var arr60 = [];\n    var\
    \ arr61 = [];\n    var arr62 = [];\n    var arr63 = [];\n    var arr64 = [];\n\
    \    var arr65 = [];\n    var arr66 = [];\n    var arr67 = [];\n    var arr68\
    \ = [];\n    var arr69 = [];\n    var arr70 = [];\n    var arr71 = [];\n    var\
    \ arr72 = [];\n   \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8wxwvlhv.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpmhvilnej.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmhvilnej.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 1){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp6cd43lrq.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6cd43lrq.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp0rwdvo_v.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0rwdvo_v.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 == 1){\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpki87jbpd.js:38:10)\n\
    \    at Object.<anonymous> (/tmp/tmpki87jbpd.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpo98on4lc.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo98on4lc.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') == -1){\n        if\
    \ (txt.indexOf(',') == -1){\n            var count = 0;\n            for (var\
    \ i = 0; i < txt.length; i++){\n                if (txt.charCodeAt(i) % 2 == 1){\n\
    \                    count++;\n                }\n            }\n            return\
    \ count;\n        }\n        else{\n            return txt.split(',');\n     \
    \   }\n    }\n    else{\n        return txt.split(' ');\n    }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpki27850v.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpki27850v.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") > -1) {\n       \
    \ return txt.split(\" \");\n    } else if (txt.indexOf(\",\") > -1) {\n      \
    \  return txt.split(\",\");\n    } else {\n        var count = 0;\n        for\
    \ (var i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) % 2 !==\
    \ 0) {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpmcpnfaid.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmcpnfaid.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") > -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") > -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpw9gug7ba.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw9gug7ba.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = [];\n    var arr2 = [];\n    var\
    \ arr3 = [];\n    var arr4 = [];\n    var arr5 = [];\n    var arr6 = [];\n   \
    \ var arr7 = [];\n    var arr8 = [];\n    var arr9 = [];\n    var arr10 = [];\n\
    \    var arr11 = [];\n    var arr12 = [];\n    var arr13 = [];\n    var arr14\
    \ = [];\n    var arr15 = [];\n    var arr16 = [];\n    var arr17 = [];\n    var\
    \ arr18 = [];\n    var arr19 = [];\n    var arr20 = [];\n    var arr21 = [];\n\
    \    var arr22 = [];\n    var arr23 = [];\n    var arr24 = [];\n    var arr25\
    \ = [];\n    var arr26 = [];\n    var arr27 = [];\n    var arr28 = [];\n    var\
    \ arr29 = [];\n    var arr30 = [];\n    var arr31 = [];\n    var arr32 = [];\n\
    \    var arr33 = [];\n    var arr34 = [];\n    var arr35 = [];\n    var arr36\
    \ = [];\n    var arr37 = [];\n    var arr38 = [];\n    var arr39 = [];\n    var\
    \ arr40 = [];\n    var arr41 = [];\n    var arr42 = [];\n    var arr43 = [];\n\
    \    var arr44 = [];\n    var arr45 = [];\n    var arr46 = [];\n    var arr47\
    \ = [];\n    var arr48 = [];\n    var arr49 = [];\n    var arr50 = [];\n    var\
    \ arr51 = [];\n    var arr52 = [];\n    var arr53 = [];\n    var arr54 = [];\n\
    \    var arr55 = [];\n    var arr56 = [];\n    var arr57 = [];\n    var arr58\
    \ = [];\n    var arr59 = [];\n    var arr60 = [];\n    var arr61 = [];\n    var\
    \ arr62 = [];\n    var arr63 = [];\n    var arr64 = [];\n    var arr65 = [];\n\
    \    var arr66 = [];\n    var arr67 = [];\n    var arr68 = [];\n    var arr69\
    \ = [];\n    var arr70 = [];\n    var arr71 = [];\n    var arr72 = [];\n    var\
    \ arr73 = [];\n   \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpujberz7a.js:101\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') > -1){\n        return\
    \ txt.split(' ');\n    }else if(txt.indexOf(',') > -1){\n        return txt.split(',');\n\
    \    }else{\n        var count = 0;\n        for(var i = 0; i < txt.length; i++){\n\
    \            if(txt.charCodeAt(i) % 2 == 1){\n                count++;\n     \
    \       }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpd8fmr56j.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd8fmr56j.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 == 1) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpllrtbnok.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpllrtbnok.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") != -1) {\n      \
    \  return txt.split(\" \");\n    } else if (txt.indexOf(\",\") != -1) {\n    \
    \    return txt.split(\",\");\n    } else {\n        var count = 0;\n        for\
    \ (var i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) % 2 ==\
    \ 1) {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpqko89rc9.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqko89rc9.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp1bj_kpsj.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1bj_kpsj.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpdjiiemab.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdjiiemab.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    }\n    else if (txt.indexOf(',') > -1) {\n        return\
    \ txt.split(',');\n    }\n    else {\n        var count = 0;\n        for (var\
    \ i = 0; i < txt.length; i++) {\n            if (txt.charCodeAt(i) % 2 == 1) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp5su374so.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5su374so.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') != -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') != -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 != 0){\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp7wu90dtf.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7wu90dtf.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp7_dgfmzo.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7_dgfmzo.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpd0n5l5uj.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd0n5l5uj.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(' ')){\n        return\
    \ txt.split(' ');\n    }\n    else if (txt.includes(',')){\n        return txt.split(',');\n\
    \    }\n    else{\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++){\n            if (i % 2 == 1){\n                count += 1;\n         \
    \   }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp1czmow1d.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1czmow1d.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') > -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') > -1) {\n        return txt.split(',');\n\
    \    } else {\n        let count = 0;\n        for (let i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 === 0) {\n                count++;\n         \
    \   }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmphipcy3io.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmphipcy3io.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var arr = txt.split(/[\\s,]+/);\n    if\
    \ (arr.length == 1){\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++){\n            if (i % 2 == 0 && txt[i] == txt[i].toLowerCase()){\n    \
    \            count++;\n            }\n        }\n        return count;\n    }\n\
    \    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\"\
    , \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'Hello', 'world', '!' ]\n\nshould equal\n\
    \n[ 'Hello', 'world,!' ]\n    at test (/tmp/tmpwm5dfx7m.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwm5dfx7m.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'Hello',\
    \ 'world', '!' ],\n  expected: [ 'Hello', 'world,!' ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') > -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') > -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp04wwvwfe.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp04wwvwfe.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 1){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpa4g1_6zt.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa4g1_6zt.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') !== -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') !== -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 !== 0){\n \
    \               count++;\n            }\n        }\n        return count;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmplrzk163b.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmplrzk163b.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.match(/\\s/)){\n        return txt.split(/\\\
    s/);\n    }\n    else if(txt.match(/\\,/)){\n        return txt.split(/\\,/);\n\
    \    }\n    else{\n        let count = 0;\n        for(let i = 0; i < txt.length;\
    \ i++){\n            if(i % 2 == 0){\n                count++;\n            }\n\
    \        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpa94tex2c.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa94tex2c.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    let arr = [];\n    if (txt.indexOf(' ')\
    \ !== -1){\n        arr = txt.split(' ');\n    }\n    else if (txt.indexOf(',')\
    \ !== -1){\n        arr = txt.split(',');\n    }\n    else {\n        let count\
    \ = 0;\n        for (let i = 0; i < txt.length; i++){\n            if (i % 2 ===\
    \ 0){\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"Hello\
    \ world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpivyu5vnj.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpivyu5vnj.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (txt.charCodeAt(i) % 2 != 0) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp_6azqlwp.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_6azqlwp.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        let count = 0;\n        for(let\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 1){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmptl_8b6o5.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmptl_8b6o5.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(' ') != -1) {\n        return\
    \ txt.split(' ');\n    } else if (txt.indexOf(',') != -1) {\n        return txt.split(',');\n\
    \    } else {\n        var count = 0;\n        for (var i = 0; i < txt.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                count++;\n          \
    \  }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpemp4hgjr.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpemp4hgjr.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.includes(\" \")){\n        return\
    \ txt.split(\" \");\n    }\n    else if (txt.includes(\",\")){\n        return\
    \ txt.split(\",\");\n    }\n    else {\n        let count = 0;\n        for (let\
    \ i = 0; i < txt.length; i++){\n            if (i % 2 == 1){\n               \
    \ count++;\n            }\n        }\n        return count;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = split_words;\n\
    \  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"\
    Hello,world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello\
    \ world,!\"),[\"Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world\
    \ !\"),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"\
    ),3);\n  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpouy_oxrz.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpouy_oxrz.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if (txt.indexOf(\" \") > -1) {\n       \
    \ return txt.split(\" \");\n    } else if (txt.indexOf(\",\") > -1) {\n      \
    \  return txt.split(\",\");\n    } else {\n        var count = 0;\n        for\
    \ (var i = 0; i < txt.length; i++) {\n            if (i % 2 == 0) {\n        \
    \        count++;\n            }\n        }\n        return count;\n    }\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp1mzz4ngt.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1mzz4ngt.js:42:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') !== -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') !== -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        let count = 0;\n        for(let i\
    \ = 0; i < txt.length; i++){\n            if(txt.charCodeAt(i) % 2 !== 0){\n \
    \               count++;\n            }\n        }\n        return count;\n  \
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmp2ixsco50.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2ixsco50.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpgxjs9e7c.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgxjs9e7c.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 != 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpvafcm3cg.js:40:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvafcm3cg.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") > -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") > -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpbzddl92h.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbzddl92h.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(\" \") != -1){\n        return\
    \ txt.split(\" \");\n    }\n    else if(txt.indexOf(\",\") != -1){\n        return\
    \ txt.split(\",\");\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpmuymvmqa.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmuymvmqa.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    var words = txt.split(\" \");\n    if (words.length\
    \ > 1) {\n        return words;\n    } else {\n        var words = txt.split(\"\
    ,\");\n        if (words.length > 1) {\n            return words;\n        } else\
    \ {\n            var count = 0;\n            for (var i = 0; i < txt.length; i++)\
    \ {\n                if (txt.charCodeAt(i) % 2 != 0) {\n                    count++;\n\
    \                }\n            }\n            return count;\n        }\n    }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"Hello\", \"\
    world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\", \"world!\"\
    ]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"world,!\"]);\n\
    \  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpv1820rhe.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv1820rhe.js:46:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') > -1){\n        return\
    \ txt.split(' ');\n    }\n    else if(txt.indexOf(',') > -1){\n        return\
    \ txt.split(',');\n    }\n    else{\n        var count = 0;\n        for(var i\
    \ = 0; i < txt.length; i++){\n            if(i % 2 == 0){\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = split_words;\n  assert.deepEqual(candidate(\"\
    Hello world!\"),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"\
    ),[\"Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"\
    Hello\", \"world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"\
    ),[\"Hello,Hello,world\", \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n\
    \  assert.deepEqual(candidate(\"aaabb\"),2);\n  assert.deepEqual(candidate(\"\
    aaaBb\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpn5z9wx9z.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn5z9wx9z.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string of words, return an array of words split on whitespace,\
    \ if no whitespaces exists in the text you\n// should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n// alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n// Examples\n\
    // >>> split_words(\"Hello world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"\
    Hello,world!\")\n// [\"Hello\", \"world!\"]\n// >>> split_words(\"abcdef\")\n\
    // 3\nfunction split_words(txt){\n    if(txt.indexOf(' ') == -1){\n        if(txt.indexOf(',')\
    \ == -1){\n            return txt.split('').filter(function(x,i){return i%2 ==\
    \ 0}).length;\n        }\n        return txt.split(',');\n    }\n    return txt.split('\
    \ ');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = split_words;\n  assert.deepEqual(candidate(\"Hello world!\"),[\"\
    Hello\", \"world!\"]);\n  assert.deepEqual(candidate(\"Hello,world!\"),[\"Hello\"\
    , \"world!\"]);\n  assert.deepEqual(candidate(\"Hello world,!\"),[\"Hello\", \"\
    world,!\"]);\n  assert.deepEqual(candidate(\"Hello,Hello,world !\"),[\"Hello,Hello,world\"\
    , \"!\"]);\n  assert.deepEqual(candidate(\"abcdef\"),3);\n  assert.deepEqual(candidate(\"\
    aaabb\"),2);\n  assert.deepEqual(candidate(\"aaaBb\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n2\n    at test (/tmp/tmpi6q44fra.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpi6q44fra.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: 2,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
