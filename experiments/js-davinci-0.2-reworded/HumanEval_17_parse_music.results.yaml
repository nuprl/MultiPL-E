name: HumanEval_17_parse_music
language: js
results:
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \  var music_array = music_string.split(\" \");\n  var beats_array = [];\n  for\
    \ (var i = 0; i < music_array.length; i++) {\n    if (music_array[i] === \"o\"\
    ) {\n      beats_array.push(4);\n    } else if (music_array[i] === \"o|\") {\n\
    \      beats_array.push(2);\n    } else if (music_array[i] === \".|\") {\n   \
    \   beats_array.push(1);\n    }\n  }\n  return beats_array;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    let beats = [];\n    let notes = music_string.split(' ');\n    for (let note\
    \ of notes) {\n        if (note === 'o') {\n            beats.push(4);\n     \
    \   } else if (note === 'o|') {\n            beats.push(2);\n        } else if\
    \ (note === '.|') {\n            beats.push(1);\n        }\n    }\n    return\
    \ beats;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var result = [];\n    var beats = {\n        'o': 4,\n        'o|': 2,\n\
    \        '.|': 1\n    };\n    var notes = music_string.split(' ');\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        result.push(beats[notes[i]]);\n   \
    \ }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmpyycff_9s.js:29:10)\n    at Object.<anonymous> (/tmp/tmpyycff_9s.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var split_music = music_string.split(\" \");\n    for\
    \ (var i = 0; i < split_music.length; i++){\n        if (split_music[i] == \"\
    o\"){\n            beats.push(4);\n        }\n        else if (split_music[i]\
    \ == \"o|\"){\n            beats.push(2);\n        }\n        else if (split_music[i]\
    \ == \".|\"){\n            beats.push(1);\n        }\n    }\n    return beats;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    let beats = [];\n    let notes = music_string.split(' ');\n    for (let i\
    \ = 0; i < notes.length; i++) {\n        if (notes[i] === 'o') {\n           \
    \ beats.push(4);\n        } else if (notes[i] === 'o|') {\n            beats.push(2);\n\
    \        } else if (notes[i] === '.|') {\n            beats.push(1);\n       \
    \ }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var result = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    result.push(4);\n        } else if (notes[i] == \"o|\") {\n            result.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            result.push(1);\n     \
    \   }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < music_array.length; i++){\n        if(music_array[i] == \"o\"){\n\
    \            result.push(4);\n        }\n        else if(music_array[i] == \"\
    o|\"){\n            result.push(2);\n        }\n        else if(music_array[i]\
    \ == \".|\"){\n            result.push(1);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [],\n        notes = music_string.split(' ');\n    for (var i\
    \ = 0; i < notes.length; i++) {\n        switch (notes[i]) {\n            case\
    \ 'o':\n                beats.push(4);\n                break;\n            case\
    \ 'o|':\n                beats.push(2);\n                break;\n            case\
    \ '.|':\n                beats.push(1);\n                break;\n        }\n \
    \   }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = {\n        'o' : 4,\n        'o|' : 2,\n        '.|' : 1\n  \
    \  };\n    var result = [];\n    var notes = music_string.split(' ');\n    for(var\
    \ i = 0; i < notes.length; i++){\n        result.push(beats[notes[i]]);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmpx28pezo2.js:29:10)\n    at Object.<anonymous> (/tmp/tmpx28pezo2.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = music_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < beats.length; i++){\n        if(beats[i] == \"o\"){\n           \
    \ result.push(4);\n        }\n        else if(beats[i] == \"o|\"){\n         \
    \   result.push(2);\n        }\n        else if(beats[i] == \".|\"){\n       \
    \     result.push(1);\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = 0;\n    var result = [];\n    for(var i = 0; i < music_string.length;\
    \ i++){\n        if(music_string[i] == 'o'){\n            beats = 4;\n       \
    \ }\n        else if(music_string[i] == 'o' && music_string[i+1] == '|'){\n  \
    \          beats = 2;\n        }\n        else if(music_string[i] == '.' && music_string[i+1]\
    \ == '|'){\n            beats = 1;\n        }\n        result.push(beats);\n \
    \   }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 4, 4, 4, 4, 4, 4 ]\n\nshould equal\n\
    \n[ 4, 4, 4, 4 ]\n    at test (/tmp/tmp5xkfr6g9.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5xkfr6g9.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 4, 4, 4,\n    4, 4, 4\n  ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var result = [];\n    var beat = {\n        'o': 4,\n        'o|': 2,\n \
    \       '.|': 1\n    };\n    var notes = music_string.split(' ');\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        result.push(beat[notes[i]]);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmpu971hx57.js:29:10)\n    at Object.<anonymous> (/tmp/tmpu971hx57.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var note_array = music_string.split(\" \");\n    for\
    \ (var i = 0; i < note_array.length; i++){\n        if (note_array[i] == \"o\"\
    ){\n            beats.push(4);\n        }\n        else if (note_array[i] == \"\
    o|\"){\n            beats.push(2);\n        }\n        else if (note_array[i]\
    \ == \".|\"){\n            beats.push(1);\n        }\n    }\n    return beats;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = music_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < beats.length; i++){\n        if(beats[i] == \"o\"){\n           \
    \ result.push(4);\n        }\n        else if(beats[i] == \"o|\"){\n         \
    \   result.push(2);\n        }\n        else if(beats[i] == \".|\"){\n       \
    \     result.push(1);\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = music_string.split(' ');\n    var result = [];\n    for(var i\
    \ = 0; i < beats.length; i++){\n        if(beats[i] == 'o'){\n            result.push(4);\n\
    \        }\n        else if(beats[i] == 'o|'){\n            result.push(2);\n\
    \        }\n        else if(beats[i] == '.|'){\n            result.push(1);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = {\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1\n\
    \    };\n    var result = [];\n    var notes = music_string.split(\" \");\n  \
    \  for (var i = 0; i < notes.length; i++) {\n        result.push(beats[notes[i]]);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmpo_hqspbf.js:29:10)\n    at Object.<anonymous> (/tmp/tmpo_hqspbf.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var result = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    result.push(4);\n        } else if (notes[i] == \"o|\") {\n            result.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            result.push(1);\n     \
    \   }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    // your code here\n    var arr = music_string.split(' ');\n    var result\
    \ = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i] == 'o'){\n\
    \            result.push(4);\n        }\n        else if(arr[i] == 'o|'){\n  \
    \          result.push(2);\n        }\n        else if(arr[i] == '.|'){\n    \
    \        result.push(1);\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var beats_map = {\n        'o': 4,\n        'o|': 2,\n\
    \        '.|': 1\n    };\n    var notes = music_string.split(' ');\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        beats.push(beats_map[notes[i]]);\n\
    \    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmplarrpqdn.js:29:10)\n    at Object.<anonymous> (/tmp/tmplarrpqdn.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var result = [];\n    var beats = {\n        'o': 4,\n        'o|': 2,\n\
    \        '.|': 1\n    };\n    var notes = music_string.split(' ');\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        result.push(beats[notes[i]]);\n   \
    \ }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmptt9mt_3b.js:29:10)\n    at Object.<anonymous> (/tmp/tmptt9mt_3b.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = {\n        'o' : 4,\n        'o|' : 2,\n        '.|' : 1\n  \
    \  };\n    var result = [];\n    var notes = music_string.split(' ');\n    for(var\
    \ i = 0; i < notes.length; i++){\n        result.push(beats[notes[i]]);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmpjw8t0uo0.js:29:10)\n    at Object.<anonymous> (/tmp/tmpjw8t0uo0.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var notes = music_string.split(\" \");\n    var beats = [];\n    for(var\
    \ i = 0; i < notes.length; i++){\n        if(notes[i] == \"o\"){\n           \
    \ beats.push(4);\n        }else if(notes[i] == \"o|\"){\n            beats.push(2);\n\
    \        }else if(notes[i] == \".|\"){\n            beats.push(1);\n        }\n\
    \    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = music_string.split(' ');\n    var result = [];\n    for (var\
    \ i = 0; i < beats.length; i++) {\n        if (beats[i] == 'o') {\n          \
    \  result.push(4);\n        } else if (beats[i] == 'o|') {\n            result.push(2);\n\
    \        } else if (beats[i] == '.|') {\n            result.push(1);\n       \
    \ }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    };\n\
    \    var result = [];\n    var notes = music_string.split(' ');\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        result.push(beats[notes[i]]);\n   \
    \ }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmpmswsnsfz.js:29:10)\n    at Object.<anonymous> (/tmp/tmpmswsnsfz.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    let beats = [];\n    let notes = music_string.split(' ');\n    for (let i\
    \ = 0; i < notes.length; i++) {\n        if (notes[i] === 'o') {\n           \
    \ beats.push(4);\n        } else if (notes[i] === 'o|') {\n            beats.push(2);\n\
    \        } else if (notes[i] === '.|') {\n            beats.push(1);\n       \
    \ }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = music_string.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < beats.length; i++){\n        if(beats[i] == \"o\"){\n           \
    \ result.push(4);\n        }\n        else if(beats[i] == \"o|\"){\n         \
    \   result.push(2);\n        }\n        else if(beats[i] == \".|\"){\n       \
    \     result.push(1);\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \tvar beats = [];\n\tvar notes = music_string.split(\" \");\n\tfor (var i = 0;\
    \ i < notes.length; i++) {\n\t\tif (notes[i] == \"o\") {\n\t\t\tbeats.push(4);\n\
    \t\t}\n\t\telse if (notes[i] == \"o|\") {\n\t\t\tbeats.push(2);\n\t\t}\n\t\telse\
    \ if (notes[i] == \".|\") {\n\t\t\tbeats.push(1);\n\t\t}\n\t}\n\treturn beats;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = {\n        'o' : 4,\n        'o|' : 2,\n        '.|' : 1\n  \
    \  };\n    var notes = music_string.split(' ');\n    var result = [];\n    for(var\
    \ i = 0; i < notes.length; i++){\n        result.push(beats[notes[i]]);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmp5y1ad5rv.js:29:10)\n    at Object.<anonymous> (/tmp/tmp5y1ad5rv.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var notes = music_string.split(\" \");\n    var beats = [];\n    for(var\
    \ i = 0; i < notes.length; i++){\n        if(notes[i] == \"o\"){\n           \
    \ beats.push(4);\n        }\n        else if(notes[i] == \"o|\"){\n          \
    \  beats.push(2);\n        }\n        else if(notes[i] == \".|\"){\n         \
    \   beats.push(1);\n        }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \tvar beats = [];\n\tvar notes = music_string.split(\" \");\n\tfor(var i = 0;\
    \ i < notes.length; i++){\n\t\tif(notes[i] == \"o\"){\n\t\t\tbeats.push(4);\n\t\
    \t}\n\t\telse if(notes[i] == \"o|\"){\n\t\t\tbeats.push(2);\n\t\t}\n\t\telse if(notes[i]\
    \ == \".|\"){\n\t\t\tbeats.push(1);\n\t\t}\n\t}\n\treturn beats;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    let beats = [];\n    let notes = music_string.split(' ');\n    for (let i\
    \ = 0; i < notes.length; i++) {\n        if (notes[i] === 'o') {\n           \
    \ beats.push(4);\n        } else if (notes[i] === 'o|') {\n            beats.push(2);\n\
    \        } else if (notes[i] === '.|') {\n            beats.push(1);\n       \
    \ }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var arr = music_string.split(\" \");\n    var result = [];\n    for(var i\
    \ = 0; i < arr.length; i++){\n        if(arr[i] == \"o\"){\n            result.push(4);\n\
    \        }\n        else if(arr[i] == \"o|\"){\n            result.push(2);\n\
    \        }\n        else if(arr[i] == \".|\"){\n            result.push(1);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var result = [];\n    var beats = {\n        'o': 4,\n        'o|': 2,\n\
    \        '.|': 1\n    };\n    var notes = music_string.split(' ');\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        result.push(beats[notes[i]]);\n   \
    \ }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmpp8zasf39.js:29:10)\n    at Object.<anonymous> (/tmp/tmpp8zasf39.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var result = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    result.push(4);\n        } else if (notes[i] == \"o|\") {\n            result.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            result.push(1);\n     \
    \   }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var beat = 0;\n    for(var i = 0; i < music_string.length;\
    \ i++){\n        if(music_string[i] == 'o'){\n            beat = 4;\n        }\n\
    \        else if(music_string[i] == 'o' && music_string[i+1] == '|'){\n      \
    \      beat = 2;\n        }\n        else if(music_string[i] == '.' && music_string[i+1]\
    \ == '|'){\n            beat = 1;\n        }\n        beats.push(beat);\n    }\n\
    \    return beats;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 4, 4, 4, 4, 4, 4, 4 ]\n\nshould equal\n\
    \n[ 4, 4, 4, 4 ]\n    at test (/tmp/tmplchkjf0s.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplchkjf0s.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 4, 4, 4,\n    4, 4, 4\n  ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    let beats = [];\n    let notes = music_string.split(' ');\n    for (let i\
    \ = 0; i < notes.length; i++) {\n        if (notes[i] === 'o') {\n           \
    \ beats.push(4);\n        } else if (notes[i] === 'o|') {\n            beats.push(2);\n\
    \        } else if (notes[i] === '.|') {\n            beats.push(1);\n       \
    \ }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = music_string.split(' ');\n    var result = [];\n    for(var i\
    \ = 0; i < beats.length; i++){\n        if(beats[i] == 'o'){\n            result.push(4);\n\
    \        }\n        else if(beats[i] == 'o|'){\n            result.push(2);\n\
    \        }\n        else if(beats[i] == '.|'){\n            result.push(1);\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = {\n        \"o\" : 4,\n        \"o|\" : 2,\n        \".|\" :\
    \ 1\n    };\n    var result = [];\n    var notes = music_string.split(\" \");\n\
    \    for(var i = 0; i < notes.length; i++){\n        result.push(beats[notes[i]]);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmpd4zptlw5.js:29:10)\n    at Object.<anonymous> (/tmp/tmpd4zptlw5.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = music_string.split(\" \");\n    var output = [];\n    for(var\
    \ i = 0; i < beats.length; i++){\n        if(beats[i] == \"o\"){\n           \
    \ output.push(4);\n        }\n        else if(beats[i] == \"o|\"){\n         \
    \   output.push(2);\n        }\n        else if(beats[i] == \".|\"){\n       \
    \     output.push(1);\n        }\n    }\n    return output;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_music;\n\
    \  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"o o o\
    \ o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1, 1,\
    \ 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1, 4,\
    \ 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1, 2,\
    \ 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = {\n        'o' : 4,\n        'o|' : 2,\n        '.|' : 1\n  \
    \  };\n    var result = [];\n    var notes = music_string.split(' ');\n    for(var\
    \ i = 0; i < notes.length; i++){\n        result.push(beats[notes[i]]);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmp2g6r24sj.js:29:10)\n    at Object.<anonymous> (/tmp/tmp2g6r24sj.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = {\n        'o' : 4,\n        'o|' : 2,\n        '.|' : 1\n  \
    \  };\n    var result = [];\n    var notes = music_string.split(' ');\n    for(var\
    \ i = 0; i < notes.length; i++){\n        result.push(beats[notes[i]]);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmpd8ortwi3.js:29:10)\n    at Object.<anonymous> (/tmp/tmpd8ortwi3.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    let beats = [];\n    let notes = music_string.split(' ');\n    for (let note\
    \ of notes) {\n        if (note === 'o') {\n            beats.push(4);\n     \
    \   } else if (note === 'o|') {\n            beats.push(2);\n        } else if\
    \ (note === '.|') {\n            beats.push(1);\n        }\n    }\n    return\
    \ beats;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
    o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\".| .| .| .|\"),[1, 1,\
    \ 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o o o\"),[2, 2, 1, 1,\
    \ 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .| o o| o o|\"),[2, 1,\
    \ 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var music_array = music_string.split(\" \");\n    var beats_array = [];\n\
    \    for (var i = 0; i < music_array.length; i++){\n        if (music_array[i]\
    \ == \"o\"){\n            beats_array.push(4);\n        }\n        else if (music_array[i]\
    \ == \"o|\"){\n            beats_array.push(2);\n        }\n        else if (music_array[i]\
    \ == \".|\"){\n            beats_array.push(1);\n        }\n    }\n    return\
    \ beats_array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"),[]);\n\
    \  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = {\n        'o' : 4,\n        'o|' : 2,\n        '.|' : 1\n  \
    \  };\n    var result = [];\n    var notes = music_string.split(' ');\n    for(var\
    \ i = 0; i < notes.length; i++){\n        result.push(beats[notes[i]]);\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\"\
    ),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n[]\n  \
    \  at test (/tmp/tmppc073tpj.js:29:10)\n    at Object.<anonymous> (/tmp/tmppc073tpj.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: [],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var note = music_string.split(\" \");\n    for (var\
    \ i = 0; i < note.length; i++){\n        if (note[i] == \"o\"){\n            beats.push(4);\n\
    \        }\n        else if (note[i] == \"o|\"){\n            beats.push(2);\n\
    \        }\n        else if (note[i] == \".|\"){\n            beats.push(1);\n\
    \        }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    let beats = [];\n    let notes = music_string.split(' ');\n    for (let i\
    \ = 0; i < notes.length; i++) {\n        if (notes[i] === 'o') {\n           \
    \ beats.push(4);\n        } else if (notes[i] === 'o|') {\n            beats.push(2);\n\
    \        } else if (notes[i] === '.|') {\n            beats.push(1);\n       \
    \ }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var result = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    result.push(4);\n        } else if (notes[i] == \"o|\") {\n            result.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            result.push(1);\n     \
    \   }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string representing musical notes in a special\
    \ ASCII format.\n// Your task is to parse this string and return array of integers\
    \ corresponding to how many beats does each\n// not last.\n// Here is a legend:\n\
    // 'o' - whole note, lasts four beats\n// 'o|' - half note, lasts two beats\n\
    // '.|' - quater note, lasts one beat\n// >>> parse_music(\"o o| .| o| o| .| .|\
    \ .| .| o o\")\n// [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nfunction parse_music(music_string){\n\
    \    var beats = [];\n    var notes = music_string.split(\" \");\n    for (var\
    \ i = 0; i < notes.length; i++) {\n        if (notes[i] == \"o\") {\n        \
    \    beats.push(4);\n        } else if (notes[i] == \"o|\") {\n            beats.push(2);\n\
    \        } else if (notes[i] == \".|\") {\n            beats.push(1);\n      \
    \  }\n    }\n    return beats;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_music;\n  assert.deepEqual(candidate(\"\
    \"),[]);\n  assert.deepEqual(candidate(\"o o o o\"),[4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"\
    .| .| .| .|\"),[1, 1, 1, 1]);\n  assert.deepEqual(candidate(\"o| o| .| .| o o\
    \ o o\"),[2, 2, 1, 1, 4, 4, 4, 4]);\n  assert.deepEqual(candidate(\"o| .| o| .|\
    \ o o| o o|\"),[2, 1, 2, 1, 4, 2, 4, 2]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
