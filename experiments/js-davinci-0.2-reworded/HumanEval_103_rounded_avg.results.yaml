name: HumanEval_103_rounded_avg
language: js
results:
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpvetg_q4r.js:33:10)\n    at Object.<anonymous> (/tmp/tmpvetg_q4r.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return `0b${avg.toString(2)}`;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpdiftgec_.js:33:10)\n    at Object.<anonymous> (/tmp/tmpdiftgec_.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp4zkfew9k.js:33:10)\n    at Object.<anonymous> (/tmp/tmp4zkfew9k.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmplfotm1hw.js:33:10)\n    at Object.<anonymous> (/tmp/tmplfotm1hw.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpyy9u47k5.js:32:10)\n    at Object.<anonymous> (/tmp/tmpyy9u47k5.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmped3g07ro.js:33:10)\n    at Object.<anonymous> (/tmp/tmped3g07ro.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmphjiol2o0.js:33:10)\n    at Object.<anonymous> (/tmp/tmphjiol2o0.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp7e9cp6_a.js:32:10)\n    at Object.<anonymous> (/tmp/tmp7e9cp6_a.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp7qwrit38.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7qwrit38.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpeprn254h.js:33:10)\n    at Object.<anonymous> (/tmp/tmpeprn254h.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp1l9m11wr.js:33:10)\n    at Object.<anonymous> (/tmp/tmp1l9m11wr.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpf35hofo3.js:32:10)\n    at Object.<anonymous> (/tmp/tmpf35hofo3.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpjjjx3s9g.js:33:10)\n    at Object.<anonymous> (/tmp/tmpjjjx3s9g.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp9xn5xkwh.js:33:10)\n    at Object.<anonymous> (/tmp/tmp9xn5xkwh.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpj1u1fk7s.js:33:10)\n    at Object.<anonymous> (/tmp/tmpj1u1fk7s.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpb9pou_m3.js:33:10)\n    at Object.<anonymous> (/tmp/tmpb9pou_m3.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp4ppzqpw0.js:33:10)\n    at Object.<anonymous> (/tmp/tmp4ppzqpw0.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpq_ocu094.js:33:10)\n    at Object.<anonymous> (/tmp/tmpq_ocu094.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpt5za2v56.js:33:10)\n    at Object.<anonymous> (/tmp/tmpt5za2v56.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp0lcj28_b.js:33:10)\n    at Object.<anonymous> (/tmp/tmp0lcj28_b.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpd2v5xzpf.js:33:10)\n    at Object.<anonymous> (/tmp/tmpd2v5xzpf.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp_iv9pqv4.js:33:10)\n    at Object.<anonymous> (/tmp/tmp_iv9pqv4.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpy53vmchs.js:33:10)\n    at Object.<anonymous> (/tmp/tmpy53vmchs.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp0_isbflk.js:33:10)\n    at Object.<anonymous> (/tmp/tmp0_isbflk.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmplqjt00f3.js:33:10)\n    at Object.<anonymous> (/tmp/tmplqjt00f3.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp7d5i8ln4.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7d5i8ln4.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpn9_a0why.js:33:10)\n    at Object.<anonymous> (/tmp/tmpn9_a0why.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpfqj_i9yi.js:33:10)\n    at Object.<anonymous> (/tmp/tmpfqj_i9yi.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpl3q50oe7.js:33:10)\n    at Object.<anonymous> (/tmp/tmpl3q50oe7.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpva8k86ag.js:33:10)\n    at Object.<anonymous> (/tmp/tmpva8k86ag.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpjjpzuisu.js:33:10)\n    at Object.<anonymous> (/tmp/tmpjjpzuisu.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp8whxk6gh.js:33:10)\n    at Object.<anonymous> (/tmp/tmp8whxk6gh.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpkqk8tfn5.js:33:10)\n    at Object.<anonymous> (/tmp/tmpkqk8tfn5.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return `0b${avg.toString(2)}`;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpiyve7ery.js:33:10)\n    at Object.<anonymous> (/tmp/tmpiyve7ery.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpmiyu91vs.js:33:10)\n    at Object.<anonymous> (/tmp/tmpmiyu91vs.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpb_2ob11n.js:33:10)\n    at Object.<anonymous> (/tmp/tmpb_2ob11n.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpqgw96bdw.js:33:10)\n    at Object.<anonymous> (/tmp/tmpqgw96bdw.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpls0te8ja.js:33:10)\n    at Object.<anonymous> (/tmp/tmpls0te8ja.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return `0b${avg.toString(2)}`;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmplju8_vgx.js:33:10)\n    at Object.<anonymous> (/tmp/tmplju8_vgx.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpiv0pgex9.js:33:10)\n    at Object.<anonymous> (/tmp/tmpiv0pgex9.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpb8mte4up.js:33:10)\n    at Object.<anonymous> (/tmp/tmpb8mte4up.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp5x2mn52t.js:33:10)\n    at Object.<anonymous> (/tmp/tmp5x2mn52t.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp579g2hxg.js:33:10)\n    at Object.<anonymous> (/tmp/tmp579g2hxg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp8ggw3jq5.js:33:10)\n    at Object.<anonymous> (/tmp/tmp8ggw3jq5.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpu5mfq6p4.js:33:10)\n    at Object.<anonymous> (/tmp/tmpu5mfq6p4.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpxxyhbfiz.js:33:10)\n    at Object.<anonymous> (/tmp/tmpxxyhbfiz.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpws4rd923.js:33:10)\n    at Object.<anonymous> (/tmp/tmpws4rd923.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp141fzytp.js:33:10)\n    at Object.<anonymous> (/tmp/tmp141fzytp.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n>m){\n\
    \        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i<=m; i++){\n\
    \        sum += i;\n    }\n    var avg = Math.round(sum/(m-n+1));\n    return\
    \ \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpcnso7z_q.js:33:10)\n    at Object.<anonymous> (/tmp/tmpcnso7z_q.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpf2hwb4wn.js:33:10)\n    at Object.<anonymous> (/tmp/tmpf2hwb4wn.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'11'\n\nshould equal\n\n'0b11'\n    at test\
    \ (/tmp/tmp13_4dmh_.js:31:10)\n    at Object.<anonymous> (/tmp/tmp13_4dmh_.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp3j4eul09.js:33:10)\n    at Object.<anonymous> (/tmp/tmp3j4eul09.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp95dsw4kt.js:33:10)\n    at Object.<anonymous> (/tmp/tmp95dsw4kt.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpbd0b3tfu.js:33:10)\n    at Object.<anonymous> (/tmp/tmpbd0b3tfu.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpol62gz8y.js:33:10)\n    at Object.<anonymous> (/tmp/tmpol62gz8y.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n >\
    \ m) return -1;\n  var sum = 0;\n  for (var i = n; i <= m; i++){\n    sum += i;\n\
    \  }\n  var avg = Math.round(sum / (m - n + 1));\n  return \"0b\" + avg.toString(2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpf7u7fki4.js:31:10)\n    at Object.<anonymous> (/tmp/tmpf7u7fki4.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpl39847hp.js:33:10)\n    at Object.<anonymous> (/tmp/tmpl39847hp.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var avg = Math.round((n + m) / 2);\n   \
    \ return avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'11'\n\nshould equal\n\n'0b11'\n    at test\
    \ (/tmp/tmpx6l45iw1.js:27:10)\n    at Object.<anonymous> (/tmp/tmpx6l45iw1.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'11'\n\nshould equal\n\n'0b11'\n    at test\
    \ (/tmp/tmpo8o2yqyc.js:31:10)\n    at Object.<anonymous> (/tmp/tmpo8o2yqyc.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmppig5s2ja.js:33:10)\n    at Object.<anonymous> (/tmp/tmppig5s2ja.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp24qsfrsb.js:33:10)\n    at Object.<anonymous> (/tmp/tmp24qsfrsb.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmprm13fhj8.js:33:10)\n    at Object.<anonymous> (/tmp/tmprm13fhj8.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n >\
    \ m) {\n    return -1;\n  }\n  var sum = 0;\n  for (var i = n; i <= m; i++) {\n\
    \    sum += i;\n  }\n  var avg = Math.round(sum / (m - n + 1));\n  return \"0b\"\
    \ + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmphi75ew6a.js:33:10)\n    at Object.<anonymous> (/tmp/tmphi75ew6a.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp3ao09x1r.js:33:10)\n    at Object.<anonymous> (/tmp/tmp3ao09x1r.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpz98tyr1q.js:33:10)\n    at Object.<anonymous> (/tmp/tmpz98tyr1q.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp8ipuy5n9.js:33:10)\n    at Object.<anonymous> (/tmp/tmp8ipuy5n9.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpvapehx4d.js:33:10)\n    at Object.<anonymous> (/tmp/tmpvapehx4d.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp65k_p_1c.js:33:10)\n    at Object.<anonymous> (/tmp/tmp65k_p_1c.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpskjadly8.js:33:10)\n    at Object.<anonymous> (/tmp/tmpskjadly8.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpz3wzgp2p.js:33:10)\n    at Object.<anonymous> (/tmp/tmpz3wzgp2p.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpfg4t4_1x.js:33:10)\n    at Object.<anonymous> (/tmp/tmpfg4t4_1x.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n>m){\n\
    \        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i<=m; i++){\n\
    \        sum += i;\n    }\n    let avg = Math.round(sum/(m-n+1));\n    return\
    \ \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp0o7u6h3v.js:33:10)\n    at Object.<anonymous> (/tmp/tmp0o7u6h3v.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp8_600f4r.js:33:10)\n    at Object.<anonymous> (/tmp/tmp8_600f4r.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp4lj_lkfo.js:33:10)\n    at Object.<anonymous> (/tmp/tmp4lj_lkfo.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmprisbg_51.js:33:10)\n    at Object.<anonymous> (/tmp/tmprisbg_51.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return `0b${avg.toString(2)}`;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpmwdp14em.js:33:10)\n    at Object.<anonymous> (/tmp/tmpmwdp14em.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpaq78dz8m.js:33:10)\n    at Object.<anonymous> (/tmp/tmpaq78dz8m.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpr_16zn68.js:33:10)\n    at Object.<anonymous> (/tmp/tmpr_16zn68.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpryzk04yi.js:33:10)\n    at Object.<anonymous> (/tmp/tmpryzk04yi.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpl701gt9c.js:32:10)\n    at Object.<anonymous> (/tmp/tmpl701gt9c.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpg5hy92xb.js:33:10)\n    at Object.<anonymous> (/tmp/tmpg5hy92xb.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp4zbzr1tj.js:33:10)\n    at Object.<anonymous> (/tmp/tmp4zbzr1tj.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpeauehuyt.js:33:10)\n    at Object.<anonymous> (/tmp/tmpeauehuyt.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n >\
    \ m) {\n    return -1;\n  }\n  var sum = 0;\n  for (var i = n; i <= m; i++) {\n\
    \    sum += i;\n  }\n  var avg = Math.round(sum / (m - n + 1));\n  return \"0b\"\
    \ + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp8prg4822.js:33:10)\n    at Object.<anonymous> (/tmp/tmp8prg4822.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n >\
    \ m) {\n    return -1;\n  }\n  var sum = 0;\n  for (var i = n; i <= m; i++) {\n\
    \    sum += i;\n  }\n  var avg = Math.round(sum / (m - n + 1));\n  return \"0b\"\
    \ + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpajadz_c2.js:33:10)\n    at Object.<anonymous> (/tmp/tmpajadz_c2.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp5dntj79c.js:33:10)\n    at Object.<anonymous> (/tmp/tmp5dntj79c.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp3420rz3s.js:33:10)\n    at Object.<anonymous> (/tmp/tmp3420rz3s.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpjpy3fdg9.js:33:10)\n    at Object.<anonymous> (/tmp/tmpjpy3fdg9.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp9wnj2jqi.js:33:10)\n    at Object.<anonymous> (/tmp/tmp9wnj2jqi.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpsfeiz3he.js:33:10)\n    at Object.<anonymous> (/tmp/tmpsfeiz3he.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpnhq2pnsv.js:33:10)\n    at Object.<anonymous> (/tmp/tmpnhq2pnsv.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpqe576wyd.js:33:10)\n    at Object.<anonymous> (/tmp/tmpqe576wyd.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpvoltg0qn.js:33:10)\n    at Object.<anonymous> (/tmp/tmpvoltg0qn.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp299hsrdz.js:33:10)\n    at Object.<anonymous> (/tmp/tmp299hsrdz.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp8pibp55h.js:33:10)\n    at Object.<anonymous> (/tmp/tmp8pibp55h.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp159pa4jt.js:33:10)\n    at Object.<anonymous> (/tmp/tmp159pa4jt.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp6oo3ec0h.js:33:10)\n    at Object.<anonymous> (/tmp/tmp6oo3ec0h.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmphvyte5g6.js:33:10)\n    at Object.<anonymous> (/tmp/tmphvyte5g6.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp0lzpebak.js:33:10)\n    at Object.<anonymous> (/tmp/tmp0lzpebak.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp9qin5yw1.js:33:10)\n    at Object.<anonymous> (/tmp/tmp9qin5yw1.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpcsbmml0i.js:33:10)\n    at Object.<anonymous> (/tmp/tmpcsbmml0i.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp9lubvta6.js:33:10)\n    at Object.<anonymous> (/tmp/tmp9lubvta6.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpz_cz8snf.js:33:10)\n    at Object.<anonymous> (/tmp/tmpz_cz8snf.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return `0b${avg.toString(2)}`;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpni1v4wox.js:33:10)\n    at Object.<anonymous> (/tmp/tmpni1v4wox.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpas7zceak.js:33:10)\n    at Object.<anonymous> (/tmp/tmpas7zceak.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp00vtgfk_.js:33:10)\n    at Object.<anonymous> (/tmp/tmp00vtgfk_.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    var sum\
    \ = 0;\n    var count = 0;\n    if(n > m){\n        return -1;\n    }\n    for(var\
    \ i = n; i <= m; i++){\n        sum += i;\n        count++;\n    }\n    var avg\
    \ = Math.round(sum/count);\n    return \"0b\" + avg.toString(2);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpd1hngbnl.js:34:10)\n    at Object.<anonymous> (/tmp/tmpd1hngbnl.js:46:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpg44k73x5.js:33:10)\n    at Object.<anonymous> (/tmp/tmpg44k73x5.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp2ns1lqcj.js:32:10)\n    at Object.<anonymous> (/tmp/tmp2ns1lqcj.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpvkjz95di.js:33:10)\n    at Object.<anonymous> (/tmp/tmpvkjz95di.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpx3b_yi4_.js:33:10)\n    at Object.<anonymous> (/tmp/tmpx3b_yi4_.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    var sum\
    \ = 0;\n    var count = 0;\n    if(n > m){\n        return -1;\n    }\n    for(var\
    \ i = n; i <= m; i++){\n        sum += i;\n        count++;\n    }\n    var avg\
    \ = Math.round(sum/count);\n    var binary = avg.toString(2);\n    return \"0b\"\
    \ + binary;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpdao_3wbh.js:36:10)\n    at Object.<anonymous> (/tmp/tmpdao_3wbh.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpk078c738.js:33:10)\n    at Object.<anonymous> (/tmp/tmpk078c738.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpclyb0_86.js:33:10)\n    at Object.<anonymous> (/tmp/tmpclyb0_86.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpycyqlo2m.js:33:10)\n    at Object.<anonymous> (/tmp/tmpycyqlo2m.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n >\
    \ m) {\n    return -1;\n  }\n  var sum = 0;\n  for (var i = n; i <= m; i++) {\n\
    \    sum += i;\n  }\n  var avg = Math.round(sum / (m - n + 1));\n  return avg.toString(2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'11'\n\nshould equal\n\n'0b11'\n    at test\
    \ (/tmp/tmp86f7hnyq.js:31:10)\n    at Object.<anonymous> (/tmp/tmp86f7hnyq.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp2dstdypa.js:33:10)\n    at Object.<anonymous> (/tmp/tmp2dstdypa.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    return \"0b\" + Math.round(sum / (m - n\
    \ + 1)).toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp2ks4odun.js:32:10)\n    at Object.<anonymous> (/tmp/tmp2ks4odun.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp4qvs1ri2.js:33:10)\n    at Object.<anonymous> (/tmp/tmp4qvs1ri2.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp39_y5w5k.js:33:10)\n    at Object.<anonymous> (/tmp/tmp39_y5w5k.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n >\
    \ m) return -1;\n  var sum = 0;\n  for (var i = n; i <= m; i++) {\n    sum +=\
    \ i;\n  }\n  return \"0b\" + Math.round(sum / (m - n + 1)).toString(2);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpgp9gbq_2.js:30:10)\n    at Object.<anonymous> (/tmp/tmpgp9gbq_2.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpwr1bv_9k.js:33:10)\n    at Object.<anonymous> (/tmp/tmpwr1bv_9k.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpsslxo5_p.js:33:10)\n    at Object.<anonymous> (/tmp/tmpsslxo5_p.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpf3lvivq5.js:33:10)\n    at Object.<anonymous> (/tmp/tmpf3lvivq5.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpua5ili82.js:33:10)\n    at Object.<anonymous> (/tmp/tmpua5ili82.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpymzto46i.js:33:10)\n    at Object.<anonymous> (/tmp/tmpymzto46i.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n >\
    \ m) {\n    return -1;\n  }\n  var sum = 0;\n  for (var i = n; i <= m; i++) {\n\
    \    sum += i;\n  }\n  var avg = Math.round(sum / (m - n + 1));\n  return \"0b\"\
    \ + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmppw8d0zv3.js:33:10)\n    at Object.<anonymous> (/tmp/tmppw8d0zv3.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpqr92pz6y.js:33:10)\n    at Object.<anonymous> (/tmp/tmpqr92pz6y.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return `0b${avg.toString(2)}`;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpgcnqzjd0.js:33:10)\n    at Object.<anonymous> (/tmp/tmpgcnqzjd0.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpp8mrurmb.js:33:10)\n    at Object.<anonymous> (/tmp/tmpp8mrurmb.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp76inb0is.js:33:10)\n    at Object.<anonymous> (/tmp/tmp76inb0is.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp_mj0y9wl.js:33:10)\n    at Object.<anonymous> (/tmp/tmp_mj0y9wl.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n>m){\n\
    \        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i<=m; i++){\n\
    \        sum += i;\n    }\n    var avg = Math.round(sum/(m-n+1));\n    return\
    \ \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp_gk6v6l_.js:33:10)\n    at Object.<anonymous> (/tmp/tmp_gk6v6l_.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpz5nyz2jv.js:33:10)\n    at Object.<anonymous> (/tmp/tmpz5nyz2jv.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpec6h6os6.js:33:10)\n    at Object.<anonymous> (/tmp/tmpec6h6os6.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp3wriq399.js:32:10)\n    at Object.<anonymous> (/tmp/tmp3wriq399.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp7cqazynb.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7cqazynb.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpbj4e0i7j.js:33:10)\n    at Object.<anonymous> (/tmp/tmpbj4e0i7j.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp4qpevkxc.js:33:10)\n    at Object.<anonymous> (/tmp/tmp4qpevkxc.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpb3hk177n.js:33:10)\n    at Object.<anonymous> (/tmp/tmpb3hk177n.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpgdqozkog.js:33:10)\n    at Object.<anonymous> (/tmp/tmpgdqozkog.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp7qx17rfn.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7qx17rfn.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp9040x2n3.js:33:10)\n    at Object.<anonymous> (/tmp/tmp9040x2n3.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp7ytzvp0g.js:33:10)\n    at Object.<anonymous> (/tmp/tmp7ytzvp0g.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp5xu4vylu.js:33:10)\n    at Object.<anonymous> (/tmp/tmp5xu4vylu.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpx0ri7tpu.js:32:10)\n    at Object.<anonymous> (/tmp/tmpx0ri7tpu.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpcs4mdyfx.js:33:10)\n    at Object.<anonymous> (/tmp/tmpcs4mdyfx.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmprsnzaqqb.js:33:10)\n    at Object.<anonymous> (/tmp/tmprsnzaqqb.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmphzxhpr_z.js:33:10)\n    at Object.<anonymous> (/tmp/tmphzxhpr_z.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    return \"0b\" + Math.round((n + m) / 2).toString(2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp_0lfy9ii.js:28:10)\n    at Object.<anonymous> (/tmp/tmp_0lfy9ii.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp2a1qo7kd.js:33:10)\n    at Object.<anonymous> (/tmp/tmp2a1qo7kd.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpeqjs74k3.js:33:10)\n    at Object.<anonymous> (/tmp/tmpeqjs74k3.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpcoed7u8n.js:32:10)\n    at Object.<anonymous> (/tmp/tmpcoed7u8n.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpjjgmg5w8.js:33:10)\n    at Object.<anonymous> (/tmp/tmpjjgmg5w8.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpk4u65pdj.js:33:10)\n    at Object.<anonymous> (/tmp/tmpk4u65pdj.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmppn9pefwg.js:33:10)\n    at Object.<anonymous> (/tmp/tmppn9pefwg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpp_8xyx19.js:33:10)\n    at Object.<anonymous> (/tmp/tmpp_8xyx19.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp9hmrakzq.js:33:10)\n    at Object.<anonymous> (/tmp/tmp9hmrakzq.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return `0b${avg.toString(2)}`;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp1kdn9g61.js:33:10)\n    at Object.<anonymous> (/tmp/tmp1kdn9g61.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp5zzy1686.js:33:10)\n    at Object.<anonymous> (/tmp/tmp5zzy1686.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'11'\n\nshould equal\n\n'0b11'\n    at test\
    \ (/tmp/tmpujrf7ufj.js:31:10)\n    at Object.<anonymous> (/tmp/tmpujrf7ufj.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected: '0b11',\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmprais_gif.js:33:10)\n    at Object.<anonymous> (/tmp/tmprais_gif.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp8fgf_c8q.js:33:10)\n    at Object.<anonymous> (/tmp/tmp8fgf_c8q.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmps_pvoe2l.js:33:10)\n    at Object.<anonymous> (/tmp/tmps_pvoe2l.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp2snj3k__.js:33:10)\n    at Object.<anonymous> (/tmp/tmp2snj3k__.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var avg = Math.round((n + m) / 2);\n   \
    \ return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp0kesje10.js:29:10)\n    at Object.<anonymous> (/tmp/tmp0kesje10.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpe6gku3kg.js:33:10)\n    at Object.<anonymous> (/tmp/tmpe6gku3kg.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return `0b${avg.toString(2)}`;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpn9csfygs.js:33:10)\n    at Object.<anonymous> (/tmp/tmpn9csfygs.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n >\
    \ m) {\n    return -1;\n  }\n  var sum = 0;\n  for (var i = n; i <= m; i++) {\n\
    \    sum += i;\n  }\n  var avg = Math.round(sum / (m - n + 1));\n  return \"0b\"\
    \ + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpp1gywcfm.js:33:10)\n    at Object.<anonymous> (/tmp/tmpp1gywcfm.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp6fvb0ltz.js:33:10)\n    at Object.<anonymous> (/tmp/tmp6fvb0ltz.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmph8ijhpfy.js:33:10)\n    at Object.<anonymous> (/tmp/tmph8ijhpfy.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n >\
    \ m) {\n    return -1;\n  }\n  var sum = 0;\n  for (var i = n; i <= m; i++) {\n\
    \    sum += i;\n  }\n  var avg = Math.round(sum / (m - n + 1));\n  return \"0b\"\
    \ + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpfnxpj2ng.js:33:10)\n    at Object.<anonymous> (/tmp/tmpfnxpj2ng.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpsnvkeyfz.js:33:10)\n    at Object.<anonymous> (/tmp/tmpsnvkeyfz.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return '0b' + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpsig4p063.js:33:10)\n    at Object.<anonymous> (/tmp/tmpsig4p063.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpotvi83og.js:33:10)\n    at Object.<anonymous> (/tmp/tmpotvi83og.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpsw1s059j.js:33:10)\n    at Object.<anonymous> (/tmp/tmpsw1s059j.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp5kg2z22b.js:33:10)\n    at Object.<anonymous> (/tmp/tmp5kg2z22b.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpkcru4yzr.js:33:10)\n    at Object.<anonymous> (/tmp/tmpkcru4yzr.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpucykdbwa.js:33:10)\n    at Object.<anonymous> (/tmp/tmpucykdbwa.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpbvd7tzl3.js:33:10)\n    at Object.<anonymous> (/tmp/tmpbvd7tzl3.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpzxsvq1vj.js:33:10)\n    at Object.<anonymous> (/tmp/tmpzxsvq1vj.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpvfd78skw.js:33:10)\n    at Object.<anonymous> (/tmp/tmpvfd78skw.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpz8ew348m.js:33:10)\n    at Object.<anonymous> (/tmp/tmpz8ew348m.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n >\
    \ m) return -1;\n  var sum = 0;\n  for (var i = n; i <= m; i++) {\n    sum +=\
    \ i;\n  }\n  var avg = Math.round(sum / (m - n + 1));\n  return \"0b\" + avg.toString(2);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmputna3i_f.js:31:10)\n    at Object.<anonymous> (/tmp/tmputna3i_f.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp543sq8rj.js:33:10)\n    at Object.<anonymous> (/tmp/tmp543sq8rj.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpcf086wl8.js:33:10)\n    at Object.<anonymous> (/tmp/tmpcf086wl8.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpf77obplv.js:33:10)\n    at Object.<anonymous> (/tmp/tmpf77obplv.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpuh1fxg57.js:33:10)\n    at Object.<anonymous> (/tmp/tmpuh1fxg57.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp348osxz5.js:33:10)\n    at Object.<anonymous> (/tmp/tmp348osxz5.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    let sum\
    \ = 0;\n    if(n > m){\n        return -1;\n    }\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpmsq36eoo.js:33:10)\n    at Object.<anonymous> (/tmp/tmpmsq36eoo.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpx7_jp8x8.js:33:10)\n    at Object.<anonymous> (/tmp/tmpx7_jp8x8.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpgrxgbu_0.js:33:10)\n    at Object.<anonymous> (/tmp/tmpgrxgbu_0.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpz4u7kcmb.js:33:10)\n    at Object.<anonymous> (/tmp/tmpz4u7kcmb.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    var sum = 0;\n    for(var i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    var avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpz4dvph11.js:33:10)\n    at Object.<anonymous> (/tmp/tmpz4dvph11.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpmigzis13.js:33:10)\n    at Object.<anonymous> (/tmp/tmpmigzis13.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return `0b${avg.toString(2)}`;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpj00x_otk.js:33:10)\n    at Object.<anonymous> (/tmp/tmpj00x_otk.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpgzz3_f2j.js:33:10)\n    at Object.<anonymous> (/tmp/tmpgzz3_f2j.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpy3e49mkf.js:33:10)\n    at Object.<anonymous> (/tmp/tmpy3e49mkf.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n    if(n >\
    \ m){\n        return -1;\n    }\n    let sum = 0;\n    for(let i = n; i <= m;\
    \ i++){\n        sum += i;\n    }\n    let avg = Math.round(sum / (m - n + 1));\n\
    \    return \"0b\" + avg.toString(2);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmp3s6cst95.js:32:10)\n    at Object.<anonymous> (/tmp/tmp3s6cst95.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
    \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>>\
    \ rounded_avg(20, 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n  if (n >\
    \ m) {\n    return -1;\n  }\n  var sum = 0;\n  for (var i = n; i <= m; i++) {\n\
    \    sum += i;\n  }\n  var avg = Math.round(sum / (m - n + 1));\n  return '0b'\
    \ + avg.toString(2);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'0b1111001011'\n\nshould equal\n\n'0b1111001010'\n\
    \    at test (/tmp/tmpalrhazp7.js:33:10)\n    at Object.<anonymous> (/tmp/tmpalrhazp7.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n  expected: '0b1111001010',\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
