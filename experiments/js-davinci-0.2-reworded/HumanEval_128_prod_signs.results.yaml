name: HumanEval_128_prod_signs
language: js
results:
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length == 0){\n        return undefined;\n    }\n    var sum = 0;\n\
    \    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ < 0){\n            prod *= -1;\n        }\n        else if(arr[i] > 0){\n  \
    \          prod *= 1;\n        }\n        else{\n            prod *= 0;\n    \
    \    }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    let prod = 1;\n\
    \    let sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ < 0){\n            prod *= -1;\n        }\n        if(arr[i] !== 0){\n     \
    \       sum += Math.abs(arr[i]);\n        }\n    }\n    return sum * prod;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpzr7efm2f.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzr7efm2f.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    var sum = 0;\n\
    \    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0){\n            sum += arr[i];\n            prod *= 1;\n        }\n     \
    \   else if(arr[i] < 0){\n            sum += arr[i] * -1;\n            prod *=\
    \ -1;\n        }\n        else{\n            prod *= 0;\n        }\n    }\n  \
    \  return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    var prod = 1;\n\
    \    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0){\n            prod *= 1;\n            sum += arr[i];\n        }\n     \
    \   else if(arr[i] < 0){\n            prod *= -1;\n            sum += arr[i] *\
    \ -1;\n        }\n        else{\n            prod *= 0;\n        }\n    }\n  \
    \  return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    var sum = 0;\n\
    \    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0){\n            sum += arr[i];\n            prod *= 1;\n        }\n     \
    \   else if(arr[i] < 0){\n            sum += arr[i] * -1;\n            prod *=\
    \ -1;\n        }\n        else{\n            prod *= 0;\n        }\n    }\n  \
    \  return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if (arr.length == 0) return undefined;\n    var sum = 0;\n    var prod =\
    \ 1;\n    for (var i = 0; i < arr.length; i++){\n        if (arr[i] > 0) prod\
    \ *= 1;\n        else if (arr[i] < 0) prod *= -1;\n        else prod *= 0;\n \
    \       sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    let sum = 0;\n\
    \    let prod = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0){\n            sum += arr[i];\n            prod *= 1;\n        }else if(arr[i]\
    \ < 0){\n            sum += arr[i] * -1;\n            prod *= -1;\n        }else{\n\
    \            prod *= 0;\n        }\n    }\n    return sum * prod;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    var sum = 0;\n\
    \    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0){\n            sum += arr[i];\n            prod *= 1;\n        }\n     \
    \   else if(arr[i] < 0){\n            sum += arr[i] * -1;\n            prod *=\
    \ -1;\n        }\n        else{\n            prod *= 0;\n        }\n    }\n  \
    \  return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2,\
    \ 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \  if (arr.length === 0) {\n    return undefined;\n  }\n  var sum = 0;\n  var\
    \ prod = 1;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n\
    \      sum += arr[i];\n      prod *= 1;\n    } else if (arr[i] < 0) {\n      sum\
    \ += arr[i] * -1;\n      prod *= -1;\n    } else {\n      prod *= 0;\n    }\n\
    \  }\n  return sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    var prod = 1;\n\
    \    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0){\n            prod *= 1;\n        }\n        else if(arr[i] < 0){\n   \
    \         prod *= -1;\n        }\n        else{\n            prod *= 0;\n    \
    \    }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    var prod = 1;\n\
    \    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ === 0){\n            continue;\n        }\n        if(arr[i] < 0){\n       \
    \     prod *= -1;\n        }\n        sum += Math.abs(arr[i]);\n    }\n    return\
    \ sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpabey09fj.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpabey09fj.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    var sum = 0;\n\
    \    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length == 0){\n        return undefined;\n    }\n    var sum = 0;\n\
    \    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    var sum = 0;\n\
    \    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ < 0){\n            prod *= -1;\n        }\n        else if(arr[i] > 0){\n  \
    \          prod *= 1;\n        }\n        else{\n            prod *= 0;\n    \
    \    }\n        sum += Math.abs(arr[i]);\n    }\n    return sum * prod;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    var sum = 0;\n\
    \    var prod = 1;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ === 0){\n            continue;\n        }\n        sum += Math.abs(arr[i]);\n\
    \        prod *= Math.sign(arr[i]);\n    }\n    return sum * prod;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = prod_signs;\n\
    \  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
    \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
    \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
    \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpt9jx67wz.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt9jx67wz.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if (arr.length === 0) {\n        return undefined;\n    }\n    let sum =\
    \ 0;\n    let prod = 1;\n    for (let i = 0; i < arr.length; i++) {\n        if\
    \ (arr[i] > 0) {\n            sum += arr[i];\n            prod *= 1;\n       \
    \ } else if (arr[i] < 0) {\n            sum += arr[i] * -1;\n            prod\
    \ *= -1;\n        } else {\n            prod *= 0;\n        }\n    }\n    return\
    \ sum * prod;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    let sum = 0;\n\
    \    let sign = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0){\n            sum += arr[i];\n        }\n        else if(arr[i] < 0){\n\
    \            sum += Math.abs(arr[i]);\n            sign *= -1;\n        }\n  \
    \  }\n    return sum * sign;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpd3zoym9n.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd3zoym9n.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    let sum = 0;\n\
    \    let prod = 1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0){\n            sum += arr[i];\n            prod *= 1;\n        }\n     \
    \   else if(arr[i] < 0){\n            sum += arr[i] * -1;\n            prod *=\
    \ -1;\n        }\n        else{\n            sum += 0;\n            prod *= 0;\n\
    \        }\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if(arr.length === 0){\n        return undefined;\n    }\n    var sum = 0;\n\
    \    var product = 1;\n    for(var i = 0; i < arr.length; i++){\n        sum +=\
    \ Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n    }\n    return\
    \ sum * product;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n\
    \  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//You are given an array arr of integers and you need to return\n// sum\
    \ of magnitudes of integers multiplied by product of all signs\n// of each number\
    \ in the array, represented by 1, -1 or 0.\n// Note: return undefined for empty\
    \ arr.\n// Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0,\
    \ 1])\n// 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n\
    \    if (arr.length === 0) return undefined;\n    let sum = 0;\n    let prod =\
    \ 1;\n    for (let i = 0; i < arr.length; i++){\n        if (arr[i] > 0) sum +=\
    \ arr[i];\n        else if (arr[i] < 0) sum -= arr[i];\n        if (arr[i] ===\
    \ 0) prod = 0;\n        else if (arr[i] > 0) prod *= 1;\n        else if (arr[i]\
    \ < 0) prod *= -1;\n    }\n    return sum * prod;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = prod_signs;\n  assert.deepEqual(candidate([1,\
    \ 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0, 1]),0);\n  assert.deepEqual(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n  assert.deepEqual(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1, 1, -1, 1]),4);\n\
    \  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
    \ 1, 1, 0]),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
