name: HumanEval_98_count_upper
language: js
results:
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i\
    \ % 2 == 0){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i\
    \ % 2 == 0){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmphezoxiqe.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmphezoxiqe.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()\
    \ && i % 2 === 0){\n            count++;\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"\
    abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"\
    B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpenla44br.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpenla44br.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpofjsjvf9.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpofjsjvf9.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] != \" \"){\n            count++;\n      \
    \  }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"\
    aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpg5rdmn66.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg5rdmn66.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpg6lxiizi.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg6lxiizi.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp490y6bo7.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp490y6bo7.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpu_pb5ay_.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu_pb5ay_.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp5876tb0d.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5876tb0d.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp9hrlohl8.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9hrlohl8.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i\
    \ % 2 == 0){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpyqm86upi.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyqm86upi.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpo03vk_a9.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo03vk_a9.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp_cgio2q2.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_cgio2q2.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count += 1;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmp6surojca.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6surojca.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpvzmqhb9e.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvzmqhb9e.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpd9o0gew3.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd9o0gew3.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmplt8l8e3r.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmplt8l8e3r.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpkebha30b.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkebha30b.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmp9xc4arbw.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9xc4arbw.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpc6e8bzs4.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc6e8bzs4.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpdo4eechl.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdo4eechl.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpdz2e5iha.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdz2e5iha.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmphs1bl_st.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmphs1bl_st.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpztcj9ghx.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpztcj9ghx.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmppvvdbja6.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmppvvdbja6.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpccvnf5sx.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpccvnf5sx.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] != \"A\" && s[i] != \"E\" && s[i] != \"I\"\
    \ && s[i] != \"O\" && s[i] != \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpdhi_20f3.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdhi_20f3.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp33q7y594.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp33q7y594.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i\
    \ % 2 == 0){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpn5xqofbz.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn5xqofbz.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp4qkktgk4.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4qkktgk4.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i\
    \ % 2 == 0){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpw95hqkkz.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw95hqkkz.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmplcz34ecg.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmplcz34ecg.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] != \" \"){\n            count++;\n      \
    \  }\n    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"\
    aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpgk9fmi_u.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgk9fmi_u.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpvocrxt1h.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvocrxt1h.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp2b7i1y87.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2b7i1y87.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmp4qatmd62.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4qatmd62.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ is_upper(s[i])){\n            count++;\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"\
    abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"\
    B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0amjqrmc.js:12\n        if(i % 2 == 0 && is_upper(s[i])){\n   \
    \              ^\n\nReferenceError: is_upper is not defined\n    at count_upper\
    \ (/tmp/tmp0amjqrmc.js:12:18)\n    at test (/tmp/tmp0amjqrmc.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp0amjqrmc.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpnfdj6z83.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnfdj6z83.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let\
    \ count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpgblkhhv9.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgblkhhv9.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let\
    \ count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpcc7hpzhy.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcc7hpzhy.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] ==\
    \ \"U\")){\n            count++;\n        }\n    }\n    return count;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = count_upper;\n\
    \  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"\
    abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"\
    B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpawlk2q12.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpawlk2q12.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpf4egr1d6.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf4egr1d6.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp49gb6pkj.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmp49gb6pkj.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmprm4kikua.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmprm4kikua.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpa70kii9w.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa70kii9w.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ is_upper(s[i])){\n            count++;\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"\
    abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"\
    B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpghpge252.js:12\n        if(i % 2 == 0 && is_upper(s[i])){\n   \
    \              ^\n\nReferenceError: is_upper is not defined\n    at count_upper\
    \ (/tmp/tmpghpge252.js:12:18)\n    at test (/tmp/tmpghpge252.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpghpge252.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpc0rh_ao6.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc0rh_ao6.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpv8hogeo1.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv8hogeo1.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] != \" \"){\n            count++;\n      \
    \  }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"\
    aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp4h1qysy_.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4h1qysy_.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmplapoc18p.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmplapoc18p.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmphs_ej8m2.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmphs_ej8m2.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp2qkd4ljh.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2qkd4ljh.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpsev3854q.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsev3854q.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] === \"A\"\
    \ || s[i] === \"E\" || s[i] === \"I\" || s[i] === \"O\" || s[i] === \"U\"){\n\
    \            if(i % 2 === 0){\n                count += 1;\n            }\n  \
    \      }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"\
    aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpjj362tl1.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjj362tl1.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp8r5v0e5k.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8r5v0e5k.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmppgs80gaz.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmppgs80gaz.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmp66fvzfkw.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmp66fvzfkw.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] != \"A\" && s[i] != \"E\" && s[i] != \"I\"\
    \ && s[i] != \"O\" && s[i] != \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpree8fmth.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpree8fmth.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpct64j4gj.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpct64j4gj.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let\
    \ count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmplg1qir6c.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmplg1qir6c.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmp_zq4cb2r.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_zq4cb2r.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] === \"A\"\
    \ || s[i] === \"E\" || s[i] === \"I\" || s[i] === \"O\" || s[i] === \"U\"){\n\
    \            if(i % 2 === 0){\n                count++;\n            }\n     \
    \   }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"\
    aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpoox71_wt.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoox71_wt.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    let\
    \ count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpndwp420a.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpndwp420a.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ is_upper(s[i])){\n            count++;\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"\
    abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"\
    B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppxen64j_.js:12\n        if(i % 2 == 0 && is_upper(s[i])){\n   \
    \              ^\n\nReferenceError: is_upper is not defined\n    at count_upper\
    \ (/tmp/tmppxen64j_.js:12:18)\n    at test (/tmp/tmppxen64j_.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmppxen64j_.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpbignh7cr.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbignh7cr.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmppk4aj5b3.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmppk4aj5b3.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmprrew4c59.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmprrew4c59.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == \"A\"\
    \ || s[i] == \"E\" || s[i] == \"I\" || s[i] == \"O\" || s[i] == \"U\"){\n    \
    \        if(i % 2 == 0){\n                count++;\n            }\n        }\n\
    \    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ s[i] === s[i].toUpperCase()){\n            count++;\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpteirfi3g.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpteirfi3g.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){\n            if(i\
    \ % 2 == 0){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] != \" \"){\n            count++;\n      \
    \  }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"\
    aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpg6r2n6j1.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg6r2n6j1.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpsy3okdu1.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsy3okdu1.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 === 0 &&\
    \ is_upper(s[i])){\n            count++;\n        }\n    }\n    return count;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"\
    abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"\
    B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf9tcc736.js:12\n        if(i % 2 === 0 && is_upper(s[i])){\n  \
    \               ^\n\nReferenceError: is_upper is not defined\n    at count_upper\
    \ (/tmp/tmpf9tcc736.js:12:18)\n    at test (/tmp/tmpf9tcc736.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpf9tcc736.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n\
    \  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpp0l_rsq7.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp0l_rsq7.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && (s[i] == \"A\" || s[i] == \"E\" || s[i] == \"\
    I\" || s[i] == \"O\" || s[i] == \"U\")){\n            count++;\n        }\n  \
    \  }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] != \" \"){\n            count++;\n      \
    \  }\n    }\n    return count;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"\
    aBCdEf\"),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpjuw_fe9v.js:24:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjuw_fe9v.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(i % 2 == 0 &&\
    \ s[i] == s[i].toUpperCase() && s[i] == \"A\" || s[i] == \"E\" || s[i] == \"I\"\
    \ || s[i] == \"O\" || s[i] == \"U\"){\n            count++;\n        }\n    }\n\
    \    return count;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"\
    ),1);\n  assert.deepEqual(candidate(\"abcdefg\"),0);\n  assert.deepEqual(candidate(\"\
    dBBE\"),0);\n  assert.deepEqual(candidate(\"B\"),0);\n  assert.deepEqual(candidate(\"\
    U\"),1);\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
    EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n1\n\nshould equal\n\n0\n    at test (/tmp/tmpwx3jl3n0.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwx3jl3n0.js:33:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected: 0,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given a string s, count the number of uppercase vowels in even indices.\n\
    // For example:\n// >>> count_upper(\"aBCdEf\")\n// 1\n// >>> count_upper(\"abcdefg\"\
    )\n// 0\n// >>> count_upper(\"dBBE\")\n// 0\nfunction count_upper(s){\n    var\
    \ count = 0;\n    for(var i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase()\
    \ && i % 2 === 0){\n            count++;\n        }\n    }\n    return count;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = count_upper;\n  assert.deepEqual(candidate(\"aBCdEf\"),1);\n  assert.deepEqual(candidate(\"\
    abcdefg\"),0);\n  assert.deepEqual(candidate(\"dBBE\"),0);\n  assert.deepEqual(candidate(\"\
    B\"),0);\n  assert.deepEqual(candidate(\"U\"),1);\n  assert.deepEqual(candidate(\"\
    \"),0);\n  assert.deepEqual(candidate(\"EEEE\"),2);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n1\n    at test (/tmp/tmpqr_0ywmn.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqr_0ywmn.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: 1,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
