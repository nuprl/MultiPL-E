name: HumanEval_129_minPath
language: js
prompt: "//Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n// each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
  \ to find the minimum path of length k in the grid. You can start\n// from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n// in other words,\
  \ you can go to cells which share an edge with you current\n// cell.\n// Please\
  \ note that a path of length k means visiting exactly k cells (not\n// necessarily\
  \ distinct).\n// You CANNOT go off the grid.\n// A path A (of length k) is considered\
  \ less than a path B (of length k) if\n// after making the ordered arrays of the\
  \ values on the cells that A and B go\n// through (let's call them lst_A and lst_B),\
  \ lst_A is lexicographically less\n// than lst_B, in other words, there exist an\
  \ integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i] and for any j\
  \ (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed that the answer\
  \ is unique.\n// Return an ordered array of the values on the cells that the minimum\
  \ path go through.\n// Examples:    \n// >>> minPath([[1, 2, 3], [4, 5, 6], [7,\
  \ 8, 9]], 3)\n// [1, 2, 1]\n// >>> minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1)\n\
  // [1]\nfunction minPath(grid, k){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = minPath;\n  assert.deepEqual(candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3),[1,\
  \ 2, 1]);\n  assert.deepEqual(candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1),[1]);\n\
  \  assert.deepEqual(candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13,\
  \ 14, 15, 16]], 4),[1, 2, 1, 2]);\n  assert.deepEqual(candidate([[6, 4, 13, 10],\
  \ [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7),[1, 10, 1, 10, 1, 10, 1]);\n\
  \  assert.deepEqual(candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3,\
  \ 10, 11, 16]], 5),[1, 7, 1, 7, 1]);\n  assert.deepEqual(candidate([[11, 8, 7, 2],\
  \ [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9),[1, 6, 1, 6, 1, 6, 1, 6, 1]);\n\
  \  assert.deepEqual(candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11,\
  \ 8, 7, 2]], 12),[1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]);\n  assert.deepEqual(candidate([[2,\
  \ 7, 4], [3, 1, 5], [6, 8, 9]], 8),[1, 3, 1, 3, 1, 3, 1, 3]);\n  assert.deepEqual(candidate([[6,\
  \ 1, 5], [3, 8, 9], [2, 7, 4]], 8),[1, 5, 1, 5, 1, 5, 1, 5]);\n  assert.deepEqual(candidate([[1,\
  \ 2], [3, 4]], 10),[1, 2, 1, 2, 1, 2, 1, 2, 1, 2]);\n  assert.deepEqual(candidate([[1,\
  \ 3], [3, 2]], 10),[1, 3, 1, 3, 1, 3, 1, 3, 1, 3]);\n}\n\ntest();"
completions: ["    // Your code here\n}\n", "    // your code here\n}\n", "    let\
    \ n = grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n);\n\
    \    for(let i = 0; i < n; i++){\n        visited[i] = new Array(m).fill(false);\n\
    \    }\n    let minPath = [];\n    let minSum = Number.MAX_SAFE_INTEGER;\n   \
    \ for(let i = 0; i < n; i++){\n        for(let j = 0; j < m; j++){\n         \
    \   let path = [];\n            let sum = 0;\n            dfs(grid, visited, i,\
    \ j, path, sum, k);\n            if(sum < minSum){\n                minSum = sum;\n\
    \                minPath = path;\n            }\n        }\n    }\n    return\
    \ minPath;\n}\n", "    // Your code here\n}\n", "    let n = grid.length;\n  \
    \  let m = grid[0].length;\n    let min = Infinity;\n    let minPath = [];\n \
    \   let minPaths = [];\n    let visited = [];\n    for(let i = 0; i < n; i++){\n\
    \        visited.push([]);\n        for(let j = 0; j < m; j++){\n            visited[i].push(false);\n\
    \        }\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j <\
    \ m; j++){\n            dfs(i, j, k, grid, visited, [], 0);\n        }\n    }\n\
    \    for(let i = 0; i < minPaths.length; i++){\n        if(minPaths[i].length\
    \ < min){\n            min = minPaths[i].length;\n            minPath = minPaths[i];\n\
    \        }\n    }\n    return minPath;\n}", "    // Your code here\n}\n", "  \
    \  // Your code here\n}\n", "    // Your code here\n}\n", "  var minPath = [];\n\
    \  var minPathSum = Infinity;\n  var minPathSumIndex = -1;\n  var minPathSumIndex2\
    \ = -1;\n  var minPathSumIndex3 = -1;\n  var minPathSumIndex4 = -1;\n  var minPathSumIndex5\
    \ = -1;\n  var minPathSumIndex6 = -1;\n  var minPathSumIndex7 = -1;\n  var minPathSumIndex8\
    \ = -1;\n  var minPathSumIndex9 = -1;\n  var minPathSumIndex10 = -1;\n  var minPathSumIndex11\
    \ = -1;\n  var minPathSumIndex12 = -1;\n  var minPathSumIndex13 = -1;\n  var minPathSumIndex14\
    \ = -1;\n  var minPathSumIndex15 = -1;\n  var minPathSumIndex16 = -1;\n  var minPathSumIndex17\
    \ = -1;\n  var minPathSumIndex18 = -1;\n  var minPathSumIndex19 = -1;\n  var minPathSumIndex20\
    \ = -1;\n  var minPathSumIndex21 = -1;\n  var minPathSumIndex22 = -1;\n  var minPathSumIndex23\
    \ = -1;\n  var minPathSumIndex24 = -1;\n  var minPathSumIndex25 = -1;\n  var minPathSumIndex26\
    \ = -1;\n  var minPathSumIndex27 = -1;\n  var minPathSumIndex28 = -1;\n  var minPathSumIndex29\
    \ = -1;\n  var minPathSumIndex30 = -1;\n  var minPathSumIndex31 = -1;\n  var minPathSumIndex32\
    \ = -1;\n  var minPathSumIndex33 = -1;\n  var minPathSumIndex34 = -1;\n  var minPathSumIndex35\
    \ = -1;\n  var minPathSumIndex36 = -1;\n  var minPathSumIndex37 = -1;\n  var minPathSumIndex38\
    \ = -1;\n  var minPathSumIndex39 = -1;\n  var minPathSumIndex40 = -1;\n  var minPathSumIndex41\
    \ = -1;\n  var minPath", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath = [];\n    let minSum = Infinity;\n    let minSumPath = [];\n\
    \    let visited = [];\n    for(let i = 0; i < n; i++){\n        visited.push([]);\n\
    \        for(let j = 0; j < m; j++){\n            visited[i].push(false);\n  \
    \      }\n    }\n    function dfs(i, j, path, sum){\n        if(sum > minSum){\n\
    \            return;\n        }\n        if(path.length === k){\n            if(sum\
    \ < minSum){\n                minSum = sum;\n                minSumPath = path;\n\
    \            }\n            return;\n        }\n        if(i < 0 || i >= n ||\
    \ j < 0 || j >= m || visited[i][j]){\n            return;\n        }\n       \
    \ visited[i][j] = true;\n        path.push(grid[i][j]);\n        sum += grid[i][j];\n\
    \        dfs(i + 1, j, path, sum);\n        dfs(i - 1, j, path, sum);\n      \
    \  dfs(i, j + 1, path, sum);\n        dfs(i, j - 1, path, sum);\n        visited[i][j]\
    \ = false;\n        path.pop();\n        sum -= grid[i][j];\n    }\n    for(let\
    \ i = 0; i < n; i++){\n        for(let j = 0; j < m; j++){\n            dfs(i,\
    \ j, [], 0);\n        }\n    }\n    return minSumPath;\n}\n", "    // your code\
    \ here\n}\n", "    // Your code here\n}\n", "    // Your code here\n}\n", "  \
    \  // Your code here\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath = [];\n    let minSum = Infinity;\n    let minPaths = [];\n \
    \   let minPathsSum = [];\n    let visited = [];\n    for(let i = 0; i < n; i++){\n\
    \        visited.push([]);\n        for(let j = 0; j < m; j++){\n            visited[i].push(false);\n\
    \        }\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j <\
    \ m; j++){\n            minPaths.push([]);\n            minPathsSum.push(0);\n\
    \            findMinPath(i, j, k, 0, grid, visited, minPaths, minPathsSum);\n\
    \        }\n    }\n    for(let i = 0; i < minPaths.length; i++){\n        if(minPathsSum[i]\
    \ < minSum){\n            minSum = minPathsSum[i];\n            minPath = minPaths[i];\n\
    \        }\n    }\n    return minPath;\n}", "    // Your code here\n}\n", "  \
    \  var n = grid.length;\n    var m = grid[0].length;\n    var minPath = [];\n\
    \    var minPathSum = Infinity;\n    var minPathSum2 = Infinity;\n    var minPathSum3\
    \ = Infinity;\n    var minPathSum4 = Infinity;\n    var minPathSum5 = Infinity;\n\
    \    var minPathSum6 = Infinity;\n    var minPathSum7 = Infinity;\n    var minPathSum8\
    \ = Infinity;\n    var minPathSum9 = Infinity;\n    var minPathSum10 = Infinity;\n\
    \    var minPathSum11 = Infinity;\n    var minPathSum12 = Infinity;\n    var minPathSum13\
    \ = Infinity;\n    var minPathSum14 = Infinity;\n    var minPathSum15 = Infinity;\n\
    \    var minPathSum16 = Infinity;\n    var minPathSum17 = Infinity;\n    var minPathSum18\
    \ = Infinity;\n    var minPathSum19 = Infinity;\n    var minPathSum20 = Infinity;\n\
    \    var minPathSum21 = Infinity;\n    var minPathSum22 = Infinity;\n    var minPathSum23\
    \ = Infinity;\n    var minPathSum24 = Infinity;\n    var minPathSum25 = Infinity;\n\
    \    var minPathSum26 = Infinity;\n    var minPathSum27 = Infinity;\n    var minPathSum28\
    \ = Infinity;\n    var minPathSum29 = Infinity;\n    var minPathSum30 = Infinity;\n\
    \    var minPathSum31 = Infinity;\n    var minPathSum32 = Infinity;\n    var minPathSum33\
    \ = Infinity;\n    var minPathSum34 = Infinity;\n    var minPathSum35 = Infinity;\n\
    \    var minPathSum36 = Infinity;\n    var minPathSum37 = Infinity;\n    var minPathSum38\
    \ = Infinity;\n    var minPathSum39 = Infinity;\n    var minPathSum40 = Infinity;\n\
    \    var minPathSum41 = Infinity;\n    var minPathSum42 = Infinity;\n    var minPathSum43\
    \ = Infinity;\n    var minPathSum44 = Infinity;\n    var minPathSum45 = Infinity;\n\
    \    var minPathSum46 = Infinity;\n    var minPathSum47 = Infinity;\n    var minPathSum48\
    \ = Infinity;\n    var minPathSum", "    var minPath = [];\n    var minPathValue\
    \ = [];\n    var minPathIndex = [];\n    var minPathIndexValue = [];\n    var\
    \ minPathIndexValue2 = [];\n    var minPathIndexValue3 = [];\n    var minPathIndexValue4\
    \ = [];\n    var minPathIndexValue5 = [];\n    var minPathIndexValue6 = [];\n\
    \    var minPathIndexValue7 = [];\n    var minPathIndexValue8 = [];\n    var minPathIndexValue9\
    \ = [];\n    var minPathIndexValue10 = [];\n    var minPathIndexValue11 = [];\n\
    \    var minPathIndexValue12 = [];\n    var minPathIndexValue13 = [];\n    var\
    \ minPathIndexValue14 = [];\n    var minPathIndexValue15 = [];\n    var minPathIndexValue16\
    \ = [];\n    var minPathIndexValue17 = [];\n    var minPathIndexValue18 = [];\n\
    \    var minPathIndexValue19 = [];\n    var minPathIndexValue20 = [];\n    var\
    \ minPathIndexValue21 = [];\n    var minPathIndexValue22 = [];\n    var minPathIndexValue23\
    \ = [];\n    var minPathIndexValue24 = [];\n    var minPathIndexValue25 = [];\n\
    \    var minPathIndexValue26 = [];\n    var minPathIndexValue27 = [];\n    var\
    \ minPathIndexValue28 = [];\n    var minPathIndexValue29 = [];\n    var minPathIndexValue30\
    \ = [];\n    var minPathIndexValue31 = [];\n    var minPathIndexValue32 = [];\n\
    \    var minPathIndexValue33 = [];\n    var minPathIndexValue34 = [];\n    var\
    \ minPathIndexValue35 = [];\n    var minPathIndexValue36 = [];\n    var minPathIndexValue37\
    \ = [];\n    var minPathIndexValue38 = [];\n    var minPathIndexValue39 = [];\n\
    \    var minPathIndexValue40 = [];\n    var minPathIndexValue41 = [];\n    var\
    \ minPathIndexValue42 = [];\n    var minPathIndexValue43 = [];\n    var minPathIndexValue44\
    \ = [];\n    var minPathIndexValue45 = [];\n    var minPathIndexValue46 = [];\n\
    \    var minPathIndexValue47 = [];\n    var minPathIndexValue48 = [];\n    var\
    \ minPathIndexValue49 = [];", "    // Your code here\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let minPath = [];\n    let minPathSum = Infinity;\n\
    \    let minPathSum2 = Infinity;\n    let minPath2 = [];\n    let minPathSum3\
    \ = Infinity;\n    let minPath3 = [];\n    let minPathSum4 = Infinity;\n    let\
    \ minPath4 = [];\n    let minPathSum5 = Infinity;\n    let minPath5 = [];\n  \
    \  let minPathSum6 = Infinity;\n    let minPath6 = [];\n    let minPathSum7 =\
    \ Infinity;\n    let minPath7 = [];\n    let minPathSum8 = Infinity;\n    let\
    \ minPath8 = [];\n    let minPathSum9 = Infinity;\n    let minPath9 = [];\n  \
    \  let minPathSum10 = Infinity;\n    let minPath10 = [];\n    let minPathSum11\
    \ = Infinity;\n    let minPath11 = [];\n    let minPathSum12 = Infinity;\n   \
    \ let minPath12 = [];\n    let minPathSum13 = Infinity;\n    let minPath13 = [];\n\
    \    let minPathSum14 = Infinity;\n    let minPath14 = [];\n    let minPathSum15\
    \ = Infinity;\n    let minPath15 = [];\n    let minPathSum16 = Infinity;\n   \
    \ let minPath16 = [];\n    let minPathSum17 = Infinity;\n    let minPath17 = [];\n\
    \    let minPathSum18 = Infinity;\n    let minPath18 = [];\n    let minPathSum19\
    \ = Infinity;\n    let minPath19 = [];\n    let minPathSum20 = Infinity;\n   \
    \ let minPath20 = [];\n    let minPathSum21 = Infinity;\n    let minPath21 = [];\n\
    \    let minPathSum22 = Infinity;\n    let minPath22 = [];\n    let minPathSum23\
    \ = Infinity;\n    let minPath23 = [];\n    let minPathSum24 = Infinity;\n   \
    \ let minPath24 = [];\n    let minPathSum25 = Infinity;\n    let minPath25 = [];\n\
    \    let minPathSum26 = Infinity;\n    let minPath26 = [];\n    let minPathSum27\
    \ = Infinity;\n    let minPath27 = [];\n    let minPathSum28 =", "    // Your\
    \ code here\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n  \
    \  var min = [];\n    var min_value = Infinity;\n    for(var i = 0; i < n; i++){\n\
    \        for(var j = 0; j < m; j++){\n            var curr = [];\n           \
    \ var curr_value = dfs(i, j, 0, curr);\n            if(curr_value < min_value){\n\
    \                min = curr;\n                min_value = curr_value;\n      \
    \      }\n        }\n    }\n    return min;\n    function dfs(i, j, k, curr){\n\
    \        if(k == 0){\n            return 0;\n        }\n        if(i < 0 || i\
    \ >= n || j < 0 || j >= m){\n            return Infinity;\n        }\n       \
    \ curr.push(grid[i][j]);\n        var min = Infinity;\n        for(var di = -1;\
    \ di <= 1; di++){\n            for(var dj = -1; dj <= 1; dj++){\n            \
    \    if(di == 0 && dj == 0){\n                    continue;\n                }\n\
    \                var curr_value = dfs(i + di, j + dj, k - 1, curr);\n        \
    \        if(curr_value < min){\n                    min = curr_value;\n      \
    \          }\n            }\n        }\n        curr.pop();\n        return min\
    \ + grid[i][j];\n    }\n}\n", "    // your code here\n}\n", "  var n = grid.length;\n\
    \  var m = grid[0].length;\n  var visited = new Array(n);\n  for(var i = 0; i\
    \ < n; i++){\n    visited[i] = new Array(m);\n    for(var j = 0; j < m; j++){\n\
    \      visited[i][j] = false;\n    }\n  }\n  var min = [];\n  var min_sum = Number.MAX_VALUE;\n\
    \  for(var i = 0; i < n; i++){\n    for(var j = 0; j < m; j++){\n      var path\
    \ = [];\n      var sum = 0;\n      dfs(grid, i, j, k, visited, path, sum);\n \
    \     if(sum < min_sum){\n        min_sum = sum;\n        min = path;\n      }\n\
    \    }\n  }\n  return min;\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n\
    \    var min = [];\n    var min_sum = Infinity;\n    var min_path = [];\n    function\
    \ dfs(i, j, path, sum){\n        if(i < 0 || i >= n || j < 0 || j >= m || path.length\
    \ > k){\n            return;\n        }\n        path.push(grid[i][j]);\n    \
    \    sum += grid[i][j];\n        if(path.length == k){\n            if(sum < min_sum){\n\
    \                min_sum = sum;\n                min_path = path.slice();\n  \
    \          }\n            else if(sum == min_sum){\n                for(var i\
    \ = 0; i < k; i++){\n                    if(path[i] < min_path[i]){\n        \
    \                min_path = path.slice();\n                        break;\n  \
    \                  }\n                    else if(path[i] > min_path[i]){\n  \
    \                      break;\n                    }\n                }\n    \
    \        }\n            path.pop();\n            return;\n        }\n        dfs(i\
    \ + 1, j, path, sum);\n        dfs(i - 1, j, path, sum);\n        dfs(i, j + 1,\
    \ path, sum);\n        dfs(i, j - 1, path, sum);\n        path.pop();\n    }\n\
    \    for(var i = 0; i < n; i++){\n        for(var j = 0; j < m; j++){\n      \
    \      dfs(i, j, [], 0);\n        }\n    }\n    return min_path;\n}\n", "    //\
    \ Your code here\n}\n", "    var n = grid.length;\n    var minPath = [];\n   \
    \ var minSum = Infinity;\n    var minPathSum = Infinity;\n    var minPathSumIndex\
    \ = -1;\n    var minPathSumIndex2 = -1;\n    var minPathSumIndex3 = -1;\n    var\
    \ minPathSumIndex4 = -1;\n    var minPathSumIndex5 = -1;\n    var minPathSumIndex6\
    \ = -1;\n    var minPathSumIndex7 = -1;\n    var minPathSumIndex8 = -1;\n    var\
    \ minPathSumIndex9 = -1;\n    var minPathSumIndex10 = -1;\n    var minPathSumIndex11\
    \ = -1;\n    var minPathSumIndex12 = -1;\n    var minPathSumIndex13 = -1;\n  \
    \  var minPathSumIndex14 = -1;\n    var minPathSumIndex15 = -1;\n    var minPathSumIndex16\
    \ = -1;\n    var minPathSumIndex17 = -1;\n    var minPathSumIndex18 = -1;\n  \
    \  var minPathSumIndex19 = -1;\n    var minPathSumIndex20 = -1;\n    var minPathSumIndex21\
    \ = -1;\n    var minPathSumIndex22 = -1;\n    var minPathSumIndex23 = -1;\n  \
    \  var minPathSumIndex24 = -1;\n    var minPathSumIndex25 = -1;\n    var minPathSumIndex26\
    \ = -1;\n    var minPathSumIndex27 = -1;\n    var minPathSumIndex28 = -1;\n  \
    \  var minPathSumIndex29 = -1;\n    var minPathSumIndex30 = -1;\n    var minPathSumIndex31\
    \ = -1;\n    var minPathSumIndex32 = -1;\n    var minPathSumIndex33 = -1;\n  \
    \  var minPathSumIndex34 = -1;\n    var minPathSumIndex35 = -1;\n    var minPathSumIndex36\
    \ = -1;\n    var minPathSumIndex37 = -1;\n    var minPathSumIndex38 = -1;\n  \
    \  var minPathSumIndex39 = -1;\n    var minPathSumIndex40 = -1;", "    // Your\
    \ code here\n}\n", "    // your code here\n}\n", "    // your code here\n}\n",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minSum = Infinity;\n    let minPathSum = Infinity;\n    let minPathSum2\
    \ = Infinity;\n    let minPathSum3 = Infinity;\n    let minPathSum4 = Infinity;\n\
    \    let minPathSum5 = Infinity;\n    let minPathSum6 = Infinity;\n    let minPathSum7\
    \ = Infinity;\n    let minPathSum8 = Infinity;\n    let minPathSum9 = Infinity;\n\
    \    let minPathSum10 = Infinity;\n    let minPathSum11 = Infinity;\n    let minPathSum12\
    \ = Infinity;\n    let minPathSum13 = Infinity;\n    let minPathSum14 = Infinity;\n\
    \    let minPathSum15 = Infinity;\n    let minPathSum16 = Infinity;\n    let minPathSum17\
    \ = Infinity;\n    let minPathSum18 = Infinity;\n    let minPathSum19 = Infinity;\n\
    \    let minPathSum20 = Infinity;\n    let minPathSum21 = Infinity;\n    let minPathSum22\
    \ = Infinity;\n    let minPathSum23 = Infinity;\n    let minPathSum24 = Infinity;\n\
    \    let minPathSum25 = Infinity;\n    let minPathSum26 = Infinity;\n    let minPathSum27\
    \ = Infinity;\n    let minPathSum28 = Infinity;\n    let minPathSum29 = Infinity;\n\
    \    let minPathSum30 = Infinity;\n    let minPathSum31 = Infinity;\n    let minPathSum32\
    \ = Infinity;\n    let minPathSum33 = Infinity;\n    let minPathSum34 = Infinity;\n\
    \    let minPathSum35 = Infinity;\n    let minPathSum36 = Infinity;\n    let minPathSum37\
    \ = Infinity;\n    let minPathSum38 = Infinity;\n    let minPathSum39 = Infinity;\n\
    \    let minPathSum40 = Infinity;\n    let minPathSum41 = Infinity;\n    let minPathSum42\
    \ = Infinity;\n    let minPathSum43 = Infinity;\n    let minPathSum44 = Infinity;\n\
    \    let minPathSum45 = Infinity;\n    let minPathSum46 = Infinity;\n    let minPathSum47\
    \ = Infinity;\n    let minPathSum48 =", "    // Your code here\n}\n", "    let\
    \ n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n    let\
    \ minSum = Infinity;\n    let minPathSum = Infinity;\n    let visited = [];\n\
    \    for(let i = 0; i < n; i++){\n        visited.push([]);\n        for(let j\
    \ = 0; j < m; j++){\n            visited[i].push(false);\n        }\n    }\n \
    \   function dfs(i, j, path, sum){\n        if(sum > minPathSum){\n          \
    \  return;\n        }\n        if(path.length === k){\n            if(sum < minPathSum){\n\
    \                minPathSum = sum;\n                minPath = path;\n        \
    \    }\n            return;\n        }\n        if(i < 0 || i >= n || j < 0 ||\
    \ j >= m || visited[i][j]){\n            return;\n        }\n        visited[i][j]\
    \ = true;\n        dfs(i + 1, j, path.concat(grid[i][j]), sum + grid[i][j]);\n\
    \        dfs(i - 1, j, path.concat(grid[i][j]), sum + grid[i][j]);\n        dfs(i,\
    \ j + 1, path.concat(grid[i][j]), sum + grid[i][j]);\n        dfs(i, j - 1, path.concat(grid[i][j]),\
    \ sum + grid[i][j]);\n        visited[i][j] = false;\n    }\n    for(let i = 0;\
    \ i < n; i++){\n        for(let j = 0; j < m; j++){\n            dfs(i, j, [],\
    \ 0);\n        }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let dp = new Array(n);\n    for(let i = 0; i\
    \ < n; i++){\n        dp[i] = new Array(m);\n        for(let j = 0; j < m; j++){\n\
    \            dp[i][j] = new Array(k+1);\n            for(let l = 0; l <= k; l++){\n\
    \                dp[i][j][l] = new Array(2);\n                dp[i][j][l][0] =\
    \ [];\n                dp[i][j][l][1] = Infinity;\n            }\n        }\n\
    \    }\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < m; j++){\n\
    \            dp[i][j][1][0] = [grid[i][j]];\n            dp[i][j][1][1] = grid[i][j];\n\
    \        }\n    }\n    for(let l = 2; l <= k; l++){\n        for(let i = 0; i\
    \ < n; i++){\n            for(let j = 0; j < m; j++){\n                if(i >\
    \ 0){\n                    if(dp[i-1][j][l-1][1] < dp[i][j][l][1]){\n        \
    \                dp[i][j][l][0] = dp[i-1][j][l-1][0].slice();\n              \
    \          dp[i][j][l][0].push(grid[i][j]);\n                        dp[i][j][l][1]\
    \ = dp[i-1][j][l-1][1] + grid[i][j];\n                    }\n                \
    \    else if(dp[i-1][j][l-1][1] == dp[i][j][l][1]){\n                        let\
    \ temp = dp[i-1][j][l-1][0].slice();\n                        temp.push(grid[i][j]);\n\
    \                        if(temp < dp[i][j][l][0]){\n                        \
    \    d", "    // your code here\n}\n", "    // Your code here\n}\n", "    // your\
    \ code here\n}\n", "    // your code here\n}\n", "    // Your code here\n}\n",
  "    let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minSum = Infinity;\n    let minPathSum = Infinity;\n    let minPathSum2\
    \ = Infinity;\n    let minPathSum3 = Infinity;\n    let minPathSum4 = Infinity;\n\
    \    let minPathSum5 = Infinity;\n    let minPathSum6 = Infinity;\n    let minPathSum7\
    \ = Infinity;\n    let minPathSum8 = Infinity;\n    let minPathSum9 = Infinity;\n\
    \    let minPathSum10 = Infinity;\n    let minPathSum11 = Infinity;\n    let minPathSum12\
    \ = Infinity;\n    let minPathSum13 = Infinity;\n    let minPathSum14 = Infinity;\n\
    \    let minPathSum15 = Infinity;\n    let minPathSum16 = Infinity;\n    let minPathSum17\
    \ = Infinity;\n    let minPathSum18 = Infinity;\n    let minPathSum19 = Infinity;\n\
    \    let minPathSum20 = Infinity;\n    let minPathSum21 = Infinity;\n    let minPathSum22\
    \ = Infinity;\n    let minPathSum23 = Infinity;\n    let minPathSum24 = Infinity;\n\
    \    let minPathSum25 = Infinity;\n    let minPathSum26 = Infinity;\n    let minPathSum27\
    \ = Infinity;\n    let minPathSum28 = Infinity;\n    let minPathSum29 = Infinity;\n\
    \    let minPathSum30 = Infinity;\n    let minPathSum31 = Infinity;\n    let minPathSum32\
    \ = Infinity;\n    let minPathSum33 = Infinity;\n    let minPathSum34 = Infinity;\n\
    \    let minPathSum35 = Infinity;\n    let minPathSum36 = Infinity;\n    let minPathSum37\
    \ = Infinity;\n    let minPathSum38 = Infinity;\n    let minPathSum39 = Infinity;\n\
    \    let minPathSum40 = Infinity;\n    let minPathSum41 = Infinity;\n    let minPathSum42\
    \ = Infinity;\n    let minPathSum43 = Infinity;\n    let minPathSum44 = Infinity;\n\
    \    let minPathSum45 = Infinity;\n    let minPathSum46 = Infinity;\n    let minPathSum47\
    \ = Infinity;\n    let minPathSum48 =", "    let n = grid.length;\n    let minPath\
    \ = [];\n    let minPathSum = Infinity;\n    for(let i = 0; i < n; i++){\n   \
    \     for(let j = 0; j < n; j++){\n            let path = [];\n            let\
    \ pathSum = 0;\n            let pathLength = 0;\n            let visited = new\
    \ Set();\n            let queue = [[i, j]];\n            while(queue.length >\
    \ 0){\n                let [x, y] = queue.shift();\n                if(visited.has(x\
    \ + ',' + y)){\n                    continue;\n                }\n           \
    \     visited.add(x + ',' + y);\n                path.push(grid[x][y]);\n    \
    \            pathSum += grid[x][y];\n                pathLength++;\n         \
    \       if(pathLength === k){\n                    if(pathSum < minPathSum){\n\
    \                        minPathSum = pathSum;\n                        minPath\
    \ = path;\n                    }\n                    break;\n               \
    \ }\n                if(x > 0){\n                    queue.push([x - 1, y]);\n\
    \                }\n                if(x < n - 1){\n                    queue.push([x\
    \ + 1, y]);\n                }\n                if(y > 0){\n                 \
    \   queue.push([x, y - 1]);\n                }\n                if(y < n - 1){\n\
    \                    queue.push([x, y + 1]);\n                }\n            }\n\
    \        }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let minPath = [];\n    let minSum = Infinity;\n   \
    \ let minPathSum = Infinity;\n    let minPathArr = [];\n    let minPathSumArr\
    \ = [];\n    let minPathArrSum = [];\n    let minPathSumArrSum = [];\n    let\
    \ minPathArrSumArr = [];\n    let minPathSumArrSumArr = [];\n    let minPathArrSumArrSum\
    \ = [];\n    let minPathSumArrSumArrSum = [];\n    let minPathArrSumArrSumArr\
    \ = [];\n    let minPathSumArrSumArrSumArr = [];\n    let minPathArrSumArrSumArrSum\
    \ = [];\n    let minPathSumArrSumArrSumArrSum = [];\n    let minPathArrSumArrSumArrSumArr\
    \ = [];\n    let minPathSumArrSumArrSumArrSumArr = [];\n    let minPathArrSumArrSumArrSumArrSum\
    \ = [];\n    let minPathSumArrSumArrSumArrSumArrSum = [];\n    let minPathArrSumArrSumArrSumArrSumArr\
    \ = [];\n    let minPathSumArrSumArrSumArrSumArrSumArr = [];\n    let minPathArrSumArrSumArrSumArrSumArrSum\
    \ = [];\n    let minPathSumArrSumArrSumArrSumArrSumArrSum = [];\n    let minPathArrSumArrSumArrSumArrSumArrSumArr\
    \ = [];\n    let minPathSumArrSumArrSumArrSumArrSumArrSumArr = [];\n    let minPathArrSumArrSumArrSumArrSumArrSumArrSum\
    \ = [];\n    let minPathSumArrSumArrSumArrSumArrSumArrSumArrSum = [];\n    let\
    \ minPathArrSumArrSumArrSumArrSumArrSumArrSumArr = [];\n    let minPathSumArrSumArrSumArrSumArrSumArrSum",
  "    // Your code here\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n\
    \    var min = [];\n    var min_val = Infinity;\n    var curr = [];\n    var curr_val\
    \ = 0;\n    var visited = [];\n    for(var i = 0; i < n; i++){\n        visited.push([]);\n\
    \        for(var j = 0; j < m; j++){\n            visited[i].push(false);\n  \
    \      }\n    }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < m;\
    \ j++){\n            curr = [];\n            curr_val = 0;\n            visited[i][j]\
    \ = true;\n            curr.push(grid[i][j]);\n            curr_val += grid[i][j];\n\
    \            dfs(i, j, 1, k, curr, curr_val, visited, grid, min, min_val);\n \
    \           visited[i][j] = false;\n        }\n    }\n    return min;\n}\n", " \
    \   let n = grid.length;\n    let m = grid[0].length;\n    let min = [];\n   \
    \ let min_sum = Infinity;\n    let min_path = [];\n    let min_path_sum = Infinity;\n\
    \    let path = [];\n    let sum = 0;\n    let visited = [];\n    for(let i =\
    \ 0; i < n; i++){\n        visited.push([]);\n        for(let j = 0; j < m; j++){\n\
    \            visited[i].push(false);\n        }\n    }\n    for(let i = 0; i <\
    \ n; i++){\n        for(let j = 0; j < m; j++){\n            dfs(i, j, k);\n \
    \       }\n    }\n    return min;\n    function dfs(i, j, k){\n        if(k ===\
    \ 0){\n            if(sum < min_sum){\n                min_sum = sum;\n      \
    \          min = path.slice();\n            }\n            else if(sum === min_sum){\n\
    \                if(path.length < min_path.length){\n                    min_path\
    \ = path.slice();\n                    min_path_sum = sum;\n                }\n\
    \                else if(path.length === min_path.length){\n                 \
    \   for(let i = 0; i < path.length; i++){\n                        if(path[i]\
    \ < min_path[i]){\n                            min_path = path.slice();\n    \
    \                        min_path_sum = sum;\n                            break;\n\
    \                        }\n                        else if(path[i] > min_path[i]){\n\
    \                            break;\n                        }\n             \
    \       }\n                }\n            }\n            return;\n        }\n\
    \        if(i < 0 || i >= n || j < 0 || j >= m || visited[i][j]){\n          \
    \  return;\n        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n\
    \        sum += grid[i][j];\n        dfs(i - 1, j, k - 1);\n        dfs(i + 1,\
    \ j, k - 1);\n        dfs(i, j - 1, k - 1);", "    // Your code here\n}\n", " \
    \   // Your code here\n}\n", "    // Your code here\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let visited = new Array(n);\n    for(let i =\
    \ 0; i < n; i++){\n        visited[i] = new Array(m).fill(false);\n    }\n   \
    \ let minPath = [];\n    let minSum = Infinity;\n    let minSumPath = [];\n  \
    \  let dfs = function(i, j, path, sum){\n        if(i < 0 || i >= n || j < 0 ||\
    \ j >= m || visited[i][j]){\n            return;\n        }\n        if(path.length\
    \ === k){\n            if(sum < minSum){\n                minSum = sum;\n    \
    \            minSumPath = path;\n            }\n            return;\n        }\n\
    \        visited[i][j] = true;\n        path.push(grid[i][j]);\n        sum +=\
    \ grid[i][j];\n        dfs(i + 1, j, path, sum);\n        dfs(i - 1, j, path,\
    \ sum);\n        dfs(i, j + 1, path, sum);\n        dfs(i, j - 1, path, sum);\n\
    \        visited[i][j] = false;\n        path.pop();\n        sum -= grid[i][j];\n\
    \    }\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < m; j++){\n\
    \            dfs(i, j, [], 0);\n        }\n    }\n    return minSumPath;\n}\n",
  "    // Your code here\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n\
    \    var minPath = [];\n    var minPathSum = Infinity;\n    var minPathSumIndex\
    \ = 0;\n    var minPathSumIndex2 = 0;\n    var minPathSumIndex3 = 0;\n    var\
    \ minPathSumIndex4 = 0;\n    var minPathSumIndex5 = 0;\n    var minPathSumIndex6\
    \ = 0;\n    var minPathSumIndex7 = 0;\n    var minPathSumIndex8 = 0;\n    var\
    \ minPathSumIndex9 = 0;\n    var minPathSumIndex10 = 0;\n    var minPathSumIndex11\
    \ = 0;\n    var minPathSumIndex12 = 0;\n    var minPathSumIndex13 = 0;\n    var\
    \ minPathSumIndex14 = 0;\n    var minPathSumIndex15 = 0;\n    var minPathSumIndex16\
    \ = 0;\n    var minPathSumIndex17 = 0;\n    var minPathSumIndex18 = 0;\n    var\
    \ minPathSumIndex19 = 0;\n    var minPathSumIndex20 = 0;\n    var minPathSumIndex21\
    \ = 0;\n    var minPathSumIndex22 = 0;\n    var minPathSumIndex23 = 0;\n    var\
    \ minPathSumIndex24 = 0;\n    var minPathSumIndex25 = 0;\n    var minPathSumIndex26\
    \ = 0;\n    var minPathSumIndex27 = 0;\n    var minPathSumIndex28 = 0;\n    var\
    \ minPathSumIndex29 = 0;\n    var minPathSumIndex30 = 0;\n    var minPathSumIndex31\
    \ = 0;\n    var minPathSumIndex32 = 0;\n    var minPathSumIndex33 = 0;\n    var\
    \ minPathSumIndex34 = 0;\n    var minPathSumIndex35 = 0;\n    var minPathSumIndex36\
    \ = 0;\n    var minPathSumIndex37 = 0;\n    var minPathSumIndex38 = 0;\n    var\
    \ minPathSumIndex39 = 0;\n    var minPathSumIndex40 = 0;\n    var minPathSumIndex41\
    \ = 0;\n    var minPathSumIndex42 = 0;\n    var minPathSumIndex43 = 0;\n    var\
    \ min", "    var n = grid.length;\n    var m = grid[0].length;\n    var minPath\
    \ = [];\n    var minSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPath = [];\n    var minSum = Number.MAX_VALUE;\n    var minPathSum\
    \ = Number.MAX_VALUE;\n    var minPath = [];\n    var minSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPath = [];\n    var minSum\
    \ = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n    var minPath\
    \ = [];\n    var minSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPath = [];\n    var minSum = Number.MAX_VALUE;\n    var minPathSum\
    \ = Number.MAX_VALUE;\n    var minPath = [];\n    var minSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPath = [];\n    var minSum\
    \ = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n    var minPath\
    \ = [];\n    var minSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPath = [];\n    var minSum = Number.MAX_VALUE;\n    var minPathSum\
    \ = Number.MAX_VALUE;\n    var minPath = [];\n    var minSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPath = [];\n    var minSum\
    \ = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n    var minPath\
    \ = [];\n    var minSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPath = [];\n    var minSum = Number.MAX_VALUE;\n    var minPathSum\
    \ = Number.MAX_VALUE;\n    var minPath = [];\n    var minSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPath = [];\n    var minSum",
  "    var n = grid.length;\n    var m = grid[0].length;\n    var visited = [];\n\
    \    for(var i = 0; i < n; i++){\n        visited.push([]);\n        for(var j\
    \ = 0; j < m; j++){\n            visited[i].push(false);\n        }\n    }\n \
    \   var minPath = [];\n    for(var i = 0; i < n; i++){\n        for(var j = 0;\
    \ j < m; j++){\n            var path = [];\n            var res = findMinPath(grid,\
    \ i, j, k, visited, path);\n            if(res.length > 0){\n                if(minPath.length\
    \ == 0){\n                    minPath = res;\n                }else{\n       \
    \             for(var l = 0; l < res.length; l++){\n                        if(res[l]\
    \ < minPath[l]){\n                            minPath = res;\n               \
    \             break;\n                        }else if(res[l] > minPath[l]){\n\
    \                            break;\n                        }\n             \
    \       }\n                }\n            }\n        }\n    }\n    return minPath;\n\
    }\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let path = [];\n\
    \    let min = Infinity;\n    let minPath = [];\n    let visited = [];\n    for(let\
    \ i = 0; i < n; i++){\n        visited.push([]);\n        for(let j = 0; j < m;\
    \ j++){\n            visited[i].push(false);\n        }\n    }\n    for(let i\
    \ = 0; i < n; i++){\n        for(let j = 0; j < m; j++){\n            path = [];\n\
    \            dfs(grid, i, j, k, path, visited);\n            if(path.length <\
    \ min){\n                min = path.length;\n                minPath = path;\n\
    \            }\n            else if(path.length === min){\n                if(path\
    \ < minPath){\n                    minPath = path;\n                }\n      \
    \      }\n        }\n    }\n    return minPath;\n}", "    // Your code here\n\
    }\n", "    var n = grid.length;\n    var m = grid[0].length;\n    var minPath\
    \ = [];\n    var minPathSum = Infinity;\n    var minPathSumGrid = [];\n    for(var\
    \ i = 0; i < n; i++){\n        minPathSumGrid.push([]);\n        for(var j = 0;\
    \ j < m; j++){\n            minPathSumGrid[i].push(Infinity);\n        }\n   \
    \ }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < m; j++){\n  \
    \          var path = [];\n            var pathSum = 0;\n            var pathSumGrid\
    \ = [];\n            for(var i = 0; i < n; i++){\n                pathSumGrid.push([]);\n\
    \                for(var j = 0; j < m; j++){\n                    pathSumGrid[i].push(Infinity);\n\
    \                }\n            }\n            pathSumGrid[i][j] = 0;\n      \
    \      path.push(grid[i][j]);\n            pathSum += grid[i][j];\n          \
    \  if(pathSum < minPathSum){\n                minPathSum = pathSum;\n        \
    \        minPath = path;\n                minPathSumGrid = pathSumGrid;\n    \
    \        }\n            var queue = [];\n            queue.push([i, j]);\n   \
    \         while(queue.length > 0){\n                var curr = queue.shift();\n\
    \                var x = curr[0];\n                var y = curr[1];\n        \
    \        if(x > 0 && pathSumGrid[x - 1][y] > pathSumGrid[x][y] + 1){\n       \
    \             pathSumGrid[x - 1][y] = pathSumGrid[x][y] + 1;\n               \
    \     queue.push([x - 1, y]);\n                }\n                if(x < n - 1\
    \ && pathSumGrid[x + 1][y] > pathSumGrid[x][y] + 1){\n                    pathSumGrid[x\
    \ + 1][y] = pathSumGrid[x][y] + 1;\n                    queue.push([x + 1, y]);\n\
    \                }\n                if(y > 0 && pathSumGrid[x][y -", "    // Your\
    \ code here\n}\n", "    // Your code here\n}\n", "    // your code here\n}\n",
  "    // your code here\n}\n", "    // Your code here\n}\n", "    // your code here\n\
    }\n", "    // your code here\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n\
    \    var minPath = [];\n    var minPathSum = Infinity;\n    var minPathSum2 =\
    \ Infinity;\n    var minPath2 = [];\n    var minPathSum3 = Infinity;\n    var\
    \ minPath3 = [];\n    var minPathSum4 = Infinity;\n    var minPath4 = [];\n  \
    \  var minPathSum5 = Infinity;\n    var minPath5 = [];\n    var minPathSum6 =\
    \ Infinity;\n    var minPath6 = [];\n    var minPathSum7 = Infinity;\n    var\
    \ minPath7 = [];\n    var minPathSum8 = Infinity;\n    var minPath8 = [];\n  \
    \  var minPathSum9 = Infinity;\n    var minPath9 = [];\n    var minPathSum10 =\
    \ Infinity;\n    var minPath10 = [];\n    var minPathSum11 = Infinity;\n    var\
    \ minPath11 = [];\n    var minPathSum12 = Infinity;\n    var minPath12 = [];\n\
    \    var minPathSum13 = Infinity;\n    var minPath13 = [];\n    var minPathSum14\
    \ = Infinity;\n    var minPath14 = [];\n    var minPathSum15 = Infinity;\n   \
    \ var minPath15 = [];\n    var minPathSum16 = Infinity;\n    var minPath16 = [];\n\
    \    var minPathSum17 = Infinity;\n    var minPath17 = [];\n    var minPathSum18\
    \ = Infinity;\n    var minPath18 = [];\n    var minPathSum19 = Infinity;\n   \
    \ var minPath19 = [];\n    var minPathSum20 = Infinity;\n    var minPath20 = [];\n\
    \    var minPathSum21 = Infinity;\n    var minPath21 = [];\n    var minPathSum22\
    \ = Infinity;\n    var minPath22 = [];\n    var minPathSum23 = Infinity;\n   \
    \ var minPath23 = [];\n    var minPathSum24 = Infinity;\n    var minPath24 = [];\n\
    \    var minPathSum25 = Infinity;\n    var minPath25 = [];\n    var minPathSum26\
    \ = Infinity;\n    var minPath26 = [];\n    var minPathSum27 = Infinity;\n   \
    \ var minPath27 = [];\n    var minPathSum28 =", "    let n = grid.length;\n  \
    \  let visited = new Array(n);\n    for(let i = 0; i < n; i++){\n        visited[i]\
    \ = new Array(n).fill(false);\n    }\n    let minPath = [];\n    let minSum =\
    \ Infinity;\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < n; j++){\n\
    \            let path = [];\n            let sum = 0;\n            dfs(grid, i,\
    \ j, k, visited, path, sum);\n            if(sum < minSum){\n                minSum\
    \ = sum;\n                minPath = path;\n            }\n        }\n    }\n \
    \   return minPath;\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let visited = [];\n    for(let i = 0; i < n; i++){\n        visited.push([]);\n\
    \        for(let j = 0; j < m; j++){\n            visited[i].push(false);\n  \
    \      }\n    }\n    let minPath = [];\n    let minPathSum = Infinity;\n    for(let\
    \ i = 0; i < n; i++){\n        for(let j = 0; j < m; j++){\n            let path\
    \ = [];\n            let pathSum = 0;\n            dfs(i, j, k, path, pathSum);\n\
    \        }\n    }\n    return minPath;\n    function dfs(i, j, k, path, pathSum){\n\
    \        if(i < 0 || i >= n || j < 0 || j >= m || visited[i][j]){\n          \
    \  return;\n        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n\
    \        pathSum += grid[i][j];\n        if(path.length === k){\n            if(pathSum\
    \ < minPathSum){\n                minPathSum = pathSum;\n                minPath\
    \ = path.slice();\n            }\n            else if(pathSum === minPathSum){\n\
    \                if(path.join('') < minPath.join('')){\n                    minPath\
    \ = path.slice();\n                }\n            }\n        }\n        else{\n\
    \            dfs(i - 1, j, k, path, pathSum);\n            dfs(i + 1, j, k, path,\
    \ pathSum);\n            dfs(i, j - 1, k, path, pathSum);\n            dfs(i,\
    \ j + 1, k, path, pathSum);\n        }\n        visited[i][j] = false;\n     \
    \   path.pop();\n    }\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n\
    \    var min = [];\n    var min_sum = Infinity;\n    var min_path = [];\n    var\
    \ visited = [];\n    for(var i = 0; i < n; i++){\n        visited.push([]);\n\
    \        for(var j = 0; j < m; j++){\n            visited[i].push(false);\n  \
    \      }\n    }\n    var dfs = function(i, j, sum, path){\n        if(visited[i][j]){\n\
    \            return;\n        }\n        if(path.length == k){\n            if(sum\
    \ < min_sum){\n                min_sum = sum;\n                min_path = path.slice();\n\
    \            }\n            return;\n        }\n        visited[i][j] = true;\n\
    \        var new_path = path.slice();\n        new_path.push(grid[i][j]);\n  \
    \      if(i > 0){\n            dfs(i - 1, j, sum + grid[i][j], new_path);\n  \
    \      }\n        if(i < n - 1){\n            dfs(i + 1, j, sum + grid[i][j],\
    \ new_path);\n        }\n        if(j > 0){\n            dfs(i, j - 1, sum + grid[i][j],\
    \ new_path);\n        }\n        if(j < m - 1){\n            dfs(i, j + 1, sum\
    \ + grid[i][j], new_path);\n        }\n        visited[i][j] = false;\n    }\n\
    \    for(var i = 0; i < n; i++){\n        for(var j = 0; j < m; j++){\n      \
    \      dfs(i, j, 0, []);\n        }\n    }\n    return min_path;\n}\n", "    var\
    \ n = grid.length;\n    var m = grid[0].length;\n    var minPath = [];\n    var\
    \ minSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n    var\
    \ minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n   \
    \ var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPathSum = Number.MAX_VALUE;\n\
    \    var minPathSum = Number.MAX_VALUE;\n    var minPath", "    // your code here\n\
    }\n", "    // Your code here\n}\n", "  // Your code here\n}\n", "    // your code\
    \ here\n}\n", "    // your code here\n}\n", "    let minPath = [];\n    let minSum\
    \ = Infinity;\n    let minSumPath = [];\n    let minSumPaths = [];\n    let minLexPath\
    \ = [];\n    let minLexPaths = [];\n    let minLexSum = Infinity;\n    let minLexSumPath\
    \ = [];\n    let minLexSumPaths = [];\n    let minLexSumLexPath = [];\n    let\
    \ minLexSumLexPaths = [];\n    let minLexSumLexSum = Infinity;\n    let minLexSumLexSumPath\
    \ = [];\n    let minLexSumLexSumPaths = [];\n    let minLexSumLexSumLexPath =\
    \ [];\n    let minLexSumLexSumLexPaths = [];\n    let minLexSumLexSumLexSum =\
    \ Infinity;\n    let minLexSumLexSumLexSumPath = [];\n    let minLexSumLexSumLexSumPaths\
    \ = [];\n    let minLexSumLexSumLexSumLexPath = [];\n    let minLexSumLexSumLexSumLexPaths\
    \ = [];\n    let minLexSumLexSumLexSumLexSum = Infinity;\n    let minLexSumLexSumLexSumLexSumPath\
    \ = [];\n    let minLexSumLexSumLexSumLexSumPaths = [];\n    let minLexSumLexSumLexSumLexSumLexPath\
    \ = [];\n    let minLexSumLexSumLexSumLexSumLexPaths = [];\n    let minLexSumLexSumLexSumLexSumLexSum\
    \ = Infinity;\n    let minLexSumLexSumLexSumLexSumLexSumPath = [];\n    let minLexSumLexSumLexSumLexSumLexSumPaths\
    \ = [];\n    let minLexSumLexSumLexSumLexSumLexSumLexPath = [];\n    let minLexSumLexSumLexSumLexSumLexSumLexPaths\
    \ = [];\n    let minLexSumLexSumLexSumLexSumLexSumLexSum = Infinity;\n    let\
    \ minLexSumLexSumLexSumLexSumLexSumLexSumPath = [];\n    let minLexSumLexSumLexSumLexSumLexSumLexSumPaths\
    \ = [];\n    let minLexSumLexSumLexSumLexSumLexSumLexSumLexPath = [];\n    let\
    \ minLexSumLexSumLexSumLexSumLexSumLexSumLexPaths = [];\n    let minLexSumLexSumLexSumLexSumLexSumLexSumLexSum\
    \ =", "    // Your code here\n}\n", "    // your code here\n}\n", "    var n =\
    \ grid.length;\n    var m = grid[0].length;\n    var min = [];\n    var min_val\
    \ = Infinity;\n    var visited = [];\n    for(var i = 0; i < n; i++){\n      \
    \  visited.push([]);\n        for(var j = 0; j < m; j++){\n            visited[i].push(false);\n\
    \        }\n    }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j <\
    \ m; j++){\n            var path = [];\n            var val = dfs(grid, i, j,\
    \ k, path, visited);\n            if(val < min_val){\n                min_val\
    \ = val;\n                min = path;\n            }\n        }\n    }\n    return\
    \ min;\n}\n", "    // your code here\n}\n", "    let minPath = [];\n    let minSum\
    \ = Infinity;\n    let minPaths = [];\n    let minPathsSum = [];\n    let path\
    \ = [];\n    let sum = 0;\n    let paths = [];\n    let pathsSum = [];\n    let\
    \ visited = [];\n    for(let i = 0; i < grid.length; i++){\n        visited.push([]);\n\
    \        for(let j = 0; j < grid[i].length; j++){\n            visited[i].push(false);\n\
    \        }\n    }\n    function findPath(i, j, k){\n        if(k === 0){\n   \
    \         if(sum < minSum){\n                minSum = sum;\n                minPath\
    \ = path.slice();\n                minPaths = paths.slice();\n               \
    \ minPathsSum = pathsSum.slice();\n            }\n            else if(sum ===\
    \ minSum){\n                if(path.length < minPath.length){\n              \
    \      minPath = path.slice();\n                    minPaths = paths.slice();\n\
    \                    minPathsSum = pathsSum.slice();\n                }\n    \
    \            else if(path.length === minPath.length){\n                    for(let\
    \ i = 0; i < path.length; i++){\n                        if(path[i] < minPath[i]){\n\
    \                            minPath = path.slice();\n                       \
    \     minPaths = paths.slice();\n                            minPathsSum = pathsSum.slice();\n\
    \                            break;\n                        }\n             \
    \           else if(path[i] > minPath[i]){\n                            break;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            return;\n        }\n        if(i < 0 || i >= grid.length\
    \ || j < 0 || j >= grid[i].length || visited[i][j]){\n            return;\n  \
    \      }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n    \
    \    sum += grid[i][j];\n        paths.push([i, j]);\n        pathsSum.push(sum);\n\
    \        findPath(i + 1, j, k - 1);\n        findPath(i - 1, j, k - 1);\n    \
    \    findPath(i, j", "    let N = grid.length;\n    let minPath = [];\n    let\
    \ minPathSum = Infinity;\n    let minPathSum2 = Infinity;\n    let minPath2 =\
    \ [];\n    let minPathSum3 = Infinity;\n    let minPath3 = [];\n    let minPathSum4\
    \ = Infinity;\n    let minPath4 = [];\n    let minPathSum5 = Infinity;\n    let\
    \ minPath5 = [];\n    let minPathSum6 = Infinity;\n    let minPath6 = [];\n  \
    \  let minPathSum7 = Infinity;\n    let minPath7 = [];\n    let minPathSum8 =\
    \ Infinity;\n    let minPath8 = [];\n    let minPathSum9 = Infinity;\n    let\
    \ minPath9 = [];\n    let minPathSum10 = Infinity;\n    let minPath10 = [];\n\
    \    let minPathSum11 = Infinity;\n    let minPath11 = [];\n    let minPathSum12\
    \ = Infinity;\n    let minPath12 = [];\n    let minPathSum13 = Infinity;\n   \
    \ let minPath13 = [];\n    let minPathSum14 = Infinity;\n    let minPath14 = [];\n\
    \    let minPathSum15 = Infinity;\n    let minPath15 = [];\n    let minPathSum16\
    \ = Infinity;\n    let minPath16 = [];\n    let minPathSum17 = Infinity;\n   \
    \ let minPath17 = [];\n    let minPathSum18 = Infinity;\n    let minPath18 = [];\n\
    \    let minPathSum19 = Infinity;\n    let minPath19 = [];\n    let minPathSum20\
    \ = Infinity;\n    let minPath20 = [];\n    let minPathSum21 = Infinity;\n   \
    \ let minPath21 = [];\n    let minPathSum22 = Infinity;\n    let minPath22 = [];\n\
    \    let minPathSum23 = Infinity;\n    let minPath23 = [];\n    let minPathSum24\
    \ = Infinity;\n    let minPath24 = [];\n    let minPathSum25 = Infinity;\n   \
    \ let minPath25 = [];\n    let minPathSum26 = Infinity;\n    let minPath26 = [];\n\
    \    let minPathSum27 = Infinity;\n    let minPath27 = [];\n    let minPathSum28\
    \ = Infinity;\n    let minPath28 = [];\n", "    // Your code here\n}\n", "   \
    \ var n = grid.length;\n    var m = grid[0].length;\n    var minPath = [];\n \
    \   var minPathSum = Infinity;\n    var minPathSum2 = Infinity;\n    var minPath2\
    \ = [];\n    var minPathSum3 = Infinity;\n    var minPath3 = [];\n    var minPathSum4\
    \ = Infinity;\n    var minPath4 = [];\n    var minPathSum5 = Infinity;\n    var\
    \ minPath5 = [];\n    var minPathSum6 = Infinity;\n    var minPath6 = [];\n  \
    \  var minPathSum7 = Infinity;\n    var minPath7 = [];\n    var minPathSum8 =\
    \ Infinity;\n    var minPath8 = [];\n    var minPathSum9 = Infinity;\n    var\
    \ minPath9 = [];\n    var minPathSum10 = Infinity;\n    var minPath10 = [];\n\
    \    var minPathSum11 = Infinity;\n    var minPath11 = [];\n    var minPathSum12\
    \ = Infinity;\n    var minPath12 = [];\n    var minPathSum13 = Infinity;\n   \
    \ var minPath13 = [];\n    var minPathSum14 = Infinity;\n    var minPath14 = [];\n\
    \    var minPathSum15 = Infinity;\n    var minPath15 = [];\n    var minPathSum16\
    \ = Infinity;\n    var minPath16 = [];\n    var minPathSum17 = Infinity;\n   \
    \ var minPath17 = [];\n    var minPathSum18 = Infinity;\n    var minPath18 = [];\n\
    \    var minPathSum19 = Infinity;\n    var minPath19 = [];\n    var minPathSum20\
    \ = Infinity;\n    var minPath20 = [];\n    var minPathSum21 = Infinity;\n   \
    \ var minPath21 = [];\n    var minPathSum22 = Infinity;\n    var minPath22 = [];\n\
    \    var minPathSum23 = Infinity;\n    var minPath23 = [];\n    var minPathSum24\
    \ = Infinity;\n    var minPath24 = [];\n    var minPathSum25 = Infinity;\n   \
    \ var minPath25 = [];\n    var minPathSum26 = Infinity;\n    var minPath26 = [];\n\
    \    var minPathSum27 = Infinity;\n    var minPath27 = [];\n    var minPathSum28\
    \ =", "    // your code here\n}\n", "    // Your code here\n}\n", "    let n =\
    \ grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n).fill(0).map(()\
    \ => new Array(m).fill(false));\n    let minPath = [];\n    let minSum = Infinity;\n\
    \    let minPathSum = Infinity;\n    let dfs = function(i, j, path, sum, pathSum){\n\
    \        if(i < 0 || i >= n || j < 0 || j >= m || visited[i][j]){\n          \
    \  return;\n        }\n        path.push(grid[i][j]);\n        sum += grid[i][j];\n\
    \        pathSum += grid[i][j] * grid[i][j];\n        if(path.length === k){\n\
    \            if(sum < minSum || (sum === minSum && pathSum < minPathSum)){\n \
    \               minSum = sum;\n                minPathSum = pathSum;\n       \
    \         minPath = path.slice();\n            }\n            path.pop();\n  \
    \          return;\n        }\n        visited[i][j] = true;\n        dfs(i +\
    \ 1, j, path, sum, pathSum);\n        dfs(i - 1, j, path, sum, pathSum);\n   \
    \     dfs(i, j + 1, path, sum, pathSum);\n        dfs(i, j - 1, path, sum, pathSum);\n\
    \        visited[i][j] = false;\n        path.pop();\n    }\n    for(let i = 0;\
    \ i < n; i++){\n        for(let j = 0; j < m; j++){\n            dfs(i, j, [],\
    \ 0, 0);\n        }\n    }\n    return minPath;\n}\n", "    // your code here\n\
    }\n", "    // your code here\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n\
    \    let minPathSum2 = Infinity;\n    let minPath2 = [];\n    let minSum2 = Infinity;\n\
    \    let minPathSum3 = Infinity;\n    let minPath3 = [];\n    let minSum3 = Infinity;\n\
    \    let minPathSum4 = Infinity;\n    let minPath4 = [];\n    let minSum4 = Infinity;\n\
    \    let minPathSum5 = Infinity;\n    let minPath5 = [];\n    let minSum5 = Infinity;\n\
    \    let minPathSum6 = Infinity;\n    let minPath6 = [];\n    let minSum6 = Infinity;\n\
    \    let minPathSum7 = Infinity;\n    let minPath7 = [];\n    let minSum7 = Infinity;\n\
    \    let minPathSum8 = Infinity;\n    let minPath8 = [];\n    let minSum8 = Infinity;\n\
    \    let minPathSum9 = Infinity;\n    let minPath9 = [];\n    let minSum9 = Infinity;\n\
    \    let minPathSum10 = Infinity;\n    let minPath10 = [];\n    let minSum10 =\
    \ Infinity;\n    let minPathSum11 = Infinity;\n    let minPath11 = [];\n    let\
    \ minSum11 = Infinity;\n    let minPathSum12 = Infinity;\n    let minPath12 =\
    \ [];\n    let minSum12 = Infinity;\n    let minPathSum13 = Infinity;\n    let\
    \ minPath13 = [];\n    let minSum13 = Infinity;\n    let minPathSum14 = Infinity;\n\
    \    let minPath14 = [];\n    let minSum14 = Infinity;\n    let minPathSum15 =\
    \ Infinity;\n    let minPath15 = [];\n    let minSum15 = Infinity;\n    let minPathSum16\
    \ = Infinity;\n    let minPath16 = [];\n    let minSum16 = Infinity;\n    let\
    \ minPathSum17 = Infinity;\n    let minPath17 = [];\n    let minSum17 = Infinity;\n\
    \    let minPathSum18 = Infinity;\n    let minPath18 = [];\n    let minSum18 =\
    \ Infinity;\n    let minPathSum19 = Infinity", "    // your code here\n}\n", " \
    \   // your code here\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let visited = new Array(n);\n    for(let i = 0; i < n; i++){\n        visited[i]\
    \ = new Array(m).fill(false);\n    }\n    let minPath = [];\n    let minSum =\
    \ Infinity;\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < m; j++){\n\
    \            let path = [];\n            let sum = 0;\n            dfs(i, j, k,\
    \ path, sum);\n        }\n    }\n    return minPath;\n    function dfs(i, j, k,\
    \ path, sum){\n        if(i < 0 || i >= n || j < 0 || j >= m || visited[i][j]\
    \ || path.length > k){\n            return;\n        }\n        path.push(grid[i][j]);\n\
    \        sum += grid[i][j];\n        if(path.length === k){\n            if(sum\
    \ < minSum){\n                minSum = sum;\n                minPath = path.slice();\n\
    \            }\n            else if(sum === minSum){\n                for(let\
    \ i = 0; i < k; i++){\n                    if(path[i] < minPath[i]){\n       \
    \                 minPath = path.slice();\n                        break;\n  \
    \                  }\n                    else if(path[i] > minPath[i]){\n   \
    \                     break;\n                    }\n                }\n     \
    \       }\n            path.pop();\n            return;\n        }\n        visited[i][j]\
    \ = true;\n        dfs(i - 1, j, k, path, sum);\n        dfs(i + 1, j, k, path,\
    \ sum);\n        dfs(i, j - 1, k, path, sum);\n        dfs(i, j + 1, k, path,\
    \ sum);\n        visited[i][j] = false;\n        path.pop();\n    }\n}", "   \
    \ // your code here\n}\n", "    // Your code here\n}\n", "    var n = grid.length;\n\
    \    var m = grid[0].length;\n    var min = [];\n    var min_val = Infinity;\n\
    \    var visited = [];\n    for(var i = 0; i < n; i++){\n        visited.push([]);\n\
    \        for(var j = 0; j < m; j++){\n            visited[i].push(false);\n  \
    \      }\n    }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < m;\
    \ j++){\n            var path = [];\n            dfs(grid, i, j, k, path, visited);\n\
    \            if(path.length < min_val){\n                min_val = path.length;\n\
    \                min = path;\n            }\n            else if(path.length ==\
    \ min_val){\n                if(path < min){\n                    min = path;\n\
    \                }\n            }\n        }\n    }\n    return min;\n}\n", " \
    \   var n = grid.length;\n    var m = grid[0].length;\n    var minPath = [];\n\
    \    var minPathSum = Infinity;\n    var minPathSum2 = Infinity;\n    var minPath2\
    \ = [];\n    var visited = [];\n    for(var i = 0; i < n; i++){\n        visited[i]\
    \ = [];\n        for(var j = 0; j < m; j++){\n            visited[i][j] = false;\n\
    \        }\n    }\n    var path = [];\n    var pathSum = 0;\n    var pathSum2\
    \ = 0;\n    var path2 = [];\n    var dfs = function(i, j, k){\n        if(k ===\
    \ 0){\n            if(pathSum < minPathSum){\n                minPathSum = pathSum;\n\
    \                minPath = path.slice();\n            }\n            if(pathSum2\
    \ < minPathSum2){\n                minPathSum2 = pathSum2;\n                minPath2\
    \ = path2.slice();\n            }\n            return;\n        }\n        if(i\
    \ < 0 || i >= n || j < 0 || j >= m || visited[i][j]){\n            return;\n \
    \       }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n   \
    \     pathSum += grid[i][j];\n        path2.push(grid[i][j]);\n        pathSum2\
    \ += grid[i][j];\n        dfs(i - 1, j, k - 1);\n        dfs(i + 1, j, k - 1);\n\
    \        dfs(i, j - 1, k - 1);\n        dfs(i, j + 1, k - 1);\n        path.pop();\n\
    \        pathSum -= grid[i][j];\n        path2.pop();\n        pathSum2 -= grid[i][j];\n\
    \        visited[i][j] = false;\n    };\n    for(var i = 0; i < n; i++){\n   \
    \     for(var j = 0; j < m; j++){\n            dfs(i, j, k);\n        }\n    }\n\
    \    if(minPathSum < minPathSum2){\n", "    // Your code here\n}\n", "    // your\
    \ code here\n}\n", "    // Your code here\n}\n", "    var n = grid.length;\n \
    \   var m = grid[0].length;\n    var min = Infinity;\n    var minPath = [];\n\
    \    var path = [];\n    var visited = [];\n    for(var i = 0; i < n; i++){\n\
    \        visited[i] = [];\n        for(var j = 0; j < m; j++){\n            visited[i][j]\
    \ = false;\n        }\n    }\n    for(var i = 0; i < n; i++){\n        for(var\
    \ j = 0; j < m; j++){\n            path = [];\n            dfs(grid, i, j, k,\
    \ path, visited);\n            if(path.length < min){\n                min = path.length;\n\
    \                minPath = path;\n            }\n            else if(path.length\
    \ == min){\n                if(path < minPath){\n                    minPath =\
    \ path;\n                }\n            }\n        }\n    }\n    return minPath;\n\
    }\n", "    // your code here\n}\n", "    // your code here\n}\n", "  // your code\
    \ here\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let\
    \ minPath = [];\n    let minSum = Infinity;\n    for(let i = 0; i < n; i++){\n\
    \        for(let j = 0; j < m; j++){\n            let path = [];\n           \
    \ let sum = 0;\n            let visited = new Set();\n            let queue =\
    \ [[i, j]];\n            while(queue.length > 0){\n                let [x, y]\
    \ = queue.shift();\n                if(visited.has(x + ',' + y)) continue;\n \
    \               visited.add(x + ',' + y);\n                path.push(grid[x][y]);\n\
    \                sum += grid[x][y];\n                if(path.length === k){\n\
    \                    if(sum < minSum){\n                        minSum = sum;\n\
    \                        minPath = path;\n                    }\n            \
    \        break;\n                }\n                if(x > 0) queue.push([x -\
    \ 1, y]);\n                if(x < n - 1) queue.push([x + 1, y]);\n           \
    \     if(y > 0) queue.push([x, y - 1]);\n                if(y < m - 1) queue.push([x,\
    \ y + 1]);\n            }\n        }\n    }\n    return minPath;\n}\n", "    let\
    \ n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n    let\
    \ minPathSum = Infinity;\n    let minPathSum2 = Infinity;\n    let minPath2 =\
    \ [];\n    let minPathSum3 = Infinity;\n    let minPath3 = [];\n    let minPathSum4\
    \ = Infinity;\n    let minPath4 = [];\n    let minPathSum5 = Infinity;\n    let\
    \ minPath5 = [];\n    let minPathSum6 = Infinity;\n    let minPath6 = [];\n  \
    \  let minPathSum7 = Infinity;\n    let minPath7 = [];\n    let minPathSum8 =\
    \ Infinity;\n    let minPath8 = [];\n    let minPathSum9 = Infinity;\n    let\
    \ minPath9 = [];\n    let minPathSum10 = Infinity;\n    let minPath10 = [];\n\
    \    let minPathSum11 = Infinity;\n    let minPath11 = [];\n    let minPathSum12\
    \ = Infinity;\n    let minPath12 = [];\n    let minPathSum13 = Infinity;\n   \
    \ let minPath13 = [];\n    let minPathSum14 = Infinity;\n    let minPath14 = [];\n\
    \    let minPathSum15 = Infinity;\n    let minPath15 = [];\n    let minPathSum16\
    \ = Infinity;\n    let minPath16 = [];\n    let minPathSum17 = Infinity;\n   \
    \ let minPath17 = [];\n    let minPathSum18 = Infinity;\n    let minPath18 = [];\n\
    \    let minPathSum19 = Infinity;\n    let minPath19 = [];\n    let minPathSum20\
    \ = Infinity;\n    let minPath20 = [];\n    let minPathSum21 = Infinity;\n   \
    \ let minPath21 = [];\n    let minPathSum22 = Infinity;\n    let minPath22 = [];\n\
    \    let minPathSum23 = Infinity;\n    let minPath23 = [];\n    let minPathSum24\
    \ = Infinity;\n    let minPath24 = [];\n    let minPathSum25 = Infinity;\n   \
    \ let minPath25 = [];\n    let minPathSum26 = Infinity;\n    let minPath26 = [];\n\
    \    let minPathSum27 = Infinity;\n    let minPath27 = [];\n    let minPathSum28\
    \ =", "    let n = grid.length;\n    let m = grid[0].length;\n    let min = Infinity;\n\
    \    let minPath = [];\n    let visited = [];\n    for(let i = 0; i < n; i++){\n\
    \        visited.push([]);\n        for(let j = 0; j < m; j++){\n            visited[i].push(false);\n\
    \        }\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j <\
    \ m; j++){\n            let path = [];\n            let curr = grid[i][j];\n \
    \           path.push(curr);\n            visited[i][j] = true;\n            dfs(i,\
    \ j, path, visited, k);\n            visited[i][j] = false;\n        }\n    }\n\
    \    return minPath;\n    function dfs(i, j, path, visited, k){\n        if(path.length\
    \ === k){\n            if(path < min){\n                min = path;\n        \
    \        minPath = path;\n            }\n            return;\n        }\n    \
    \    if(i > 0 && !visited[i - 1][j]){\n            visited[i - 1][j] = true;\n\
    \            path.push(grid[i - 1][j]);\n            dfs(i - 1, j, path, visited,\
    \ k);\n            path.pop();\n            visited[i - 1][j] = false;\n     \
    \   }\n        if(i < n - 1 && !visited[i + 1][j]){\n            visited[i + 1][j]\
    \ = true;\n            path.push(grid[i + 1][j]);\n            dfs(i + 1, j, path,\
    \ visited, k);\n            path.pop();\n            visited[i + 1][j] = false;\n\
    \        }\n        if(j > 0 && !visited[i][j - 1]){\n            visited[i][j\
    \ - 1] = true;\n            path.push(grid[i][j - 1]);\n            dfs(i, j -\
    \ 1, path, visited, k);\n            path.pop();\n            visited[i][j - 1]",
  "    // Your code here\n}\n", "    // Your code here\n}\n", "    let n = grid.length;\n\
    \    let minPath = [];\n    let minPathSum = Infinity;\n    let minPathSum2 =\
    \ Infinity;\n    let minPath2 = [];\n    let minPath3 = [];\n    let minPathSum3\
    \ = Infinity;\n    let minPath4 = [];\n    let minPathSum4 = Infinity;\n    let\
    \ minPath5 = [];\n    let minPathSum5 = Infinity;\n    let minPath6 = [];\n  \
    \  let minPathSum6 = Infinity;\n    let minPath7 = [];\n    let minPathSum7 =\
    \ Infinity;\n    let minPath8 = [];\n    let minPathSum8 = Infinity;\n    let\
    \ minPath9 = [];\n    let minPathSum9 = Infinity;\n    let minPath10 = [];\n \
    \   let minPathSum10 = Infinity;\n    let minPath11 = [];\n    let minPathSum11\
    \ = Infinity;\n    let minPath12 = [];\n    let minPathSum12 = Infinity;\n   \
    \ let minPath13 = [];\n    let minPathSum13 = Infinity;\n    let minPath14 = [];\n\
    \    let minPathSum14 = Infinity;\n    let minPath15 = [];\n    let minPathSum15\
    \ = Infinity;\n    let minPath16 = [];\n    let minPathSum16 = Infinity;\n   \
    \ let minPath17 = [];\n    let minPathSum17 = Infinity;\n    let minPath18 = [];\n\
    \    let minPathSum18 = Infinity;\n    let minPath19 = [];\n    let minPathSum19\
    \ = Infinity;\n    let minPath20 = [];\n    let minPathSum20 = Infinity;\n   \
    \ let minPath21 = [];\n    let minPathSum21 = Infinity;\n    let minPath22 = [];\n\
    \    let minPathSum22 = Infinity;\n    let minPath23 = [];\n    let minPathSum23\
    \ = Infinity;\n    let minPath24 = [];\n    let minPathSum24 = Infinity;\n   \
    \ let minPath25 = [];\n    let minPathSum25 = Infinity;\n    let minPath26 = [];\n\
    \    let minPathSum26 = Infinity;\n    let minPath27 = [];\n    let minPathSum27\
    \ = Infinity;\n    let minPath28 = [];\n    let minPathSum28 = Infinity;\n", " \
    \   // your code here\n}\n", "    // your code here\n}\n", "    var n = grid.length;\n\
    \    var m = grid[0].length;\n    var min = [];\n    var min_sum = Infinity;\n\
    \    var min_path = [];\n    function dfs(i, j, path, sum){\n        if(sum >\
    \ min_sum) return;\n        if(path.length == k){\n            if(sum < min_sum){\n\
    \                min_sum = sum;\n                min_path = path.slice();\n  \
    \          }\n            return;\n        }\n        if(i > 0) dfs(i - 1, j,\
    \ path.concat(grid[i - 1][j]), sum + grid[i - 1][j]);\n        if(i < n - 1) dfs(i\
    \ + 1, j, path.concat(grid[i + 1][j]), sum + grid[i + 1][j]);\n        if(j >\
    \ 0) dfs(i, j - 1, path.concat(grid[i][j - 1]), sum + grid[i][j - 1]);\n     \
    \   if(j < m - 1) dfs(i, j + 1, path.concat(grid[i][j + 1]), sum + grid[i][j +\
    \ 1]);\n    }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < m;\
    \ j++){\n            dfs(i, j, [grid[i][j]], grid[i][j]);\n        }\n    }\n\
    \    return min_path;\n}\n", "    var minPath = [];\n    var minPathValue = Infinity;\n\
    \    var minPathIndex = [];\n    var minPathIndexValue = Infinity;\n    var minPathIndexIndex\
    \ = [];\n    var minPathIndexIndexValue = Infinity;\n    var minPathIndexIndexIndex\
    \ = [];\n    var minPathIndexIndexIndexValue = Infinity;\n    var minPathIndexIndexIndexIndex\
    \ = [];\n    var minPathIndexIndexIndexIndexValue = Infinity;\n    var minPathIndexIndexIndexIndexIndex\
    \ = [];\n    var minPathIndexIndexIndexIndexIndexValue = Infinity;\n    var minPathIndexIndexIndexIndexIndexIndex\
    \ = [];\n    var minPathIndexIndexIndexIndexIndexIndexValue = Infinity;\n    var\
    \ minPathIndexIndexIndexIndexIndexIndexIndex = [];\n    var minPathIndexIndexIndexIndexIndexIndexIndexValue\
    \ = Infinity;\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndex = [];\n\
    \    var minPathIndexIndexIndexIndexIndexIndexIndexIndexValue = Infinity;\n  \
    \  var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndex = [];\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = Infinity;\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [];\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = Infinity;\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [];\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = Infinity;\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [];\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = Infinity;\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [];\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = Infinity;\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [];\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = Infinity;\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex\
    \ = [];\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexValue\
    \ = Infinity;\n    var minPathIndexIndexIndexIndexIndexIndexIndexIndexIndexIndexIndex",
  "    // your code here\n}\n", "    // Your code here\n}\n", "    // Your code here\n\
    }\n", "    // your code here\n}\n", "    // Your code here\n}\n", "    let n =\
    \ grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n    let minSum\
    \ = Infinity;\n    let sum = 0;\n    let path = [];\n    let visited = [];\n \
    \   for(let i = 0; i < n; i++){\n        visited.push([]);\n        for(let j\
    \ = 0; j < m; j++){\n            visited[i].push(false);\n        }\n    }\n \
    \   function dfs(i, j, k){\n        if(k === 0){\n            if(sum < minSum){\n\
    \                minSum = sum;\n                minPath = path.slice();\n    \
    \        }\n            return;\n        }\n        if(i < 0 || i >= n || j <\
    \ 0 || j >= m || visited[i][j]){\n            return;\n        }\n        visited[i][j]\
    \ = true;\n        path.push(grid[i][j]);\n        sum += grid[i][j];\n      \
    \  dfs(i - 1, j, k - 1);\n        dfs(i + 1, j, k - 1);\n        dfs(i, j - 1,\
    \ k - 1);\n        dfs(i, j + 1, k - 1);\n        path.pop();\n        sum -=\
    \ grid[i][j];\n        visited[i][j] = false;\n    }\n    for(let i = 0; i < n;\
    \ i++){\n        for(let j = 0; j < m; j++){\n            dfs(i, j, k);\n    \
    \    }\n    }\n    return minPath;\n}\n", "    // Your code here\n}\n", "    //\
    \ your code here\n}\n", "    // Your code here\n}\n", "    // Your code here\n\
    \    let minPath = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n\
    \    let N = grid.length;\n    let visited = new Array(N).fill(0).map(() => new\
    \ Array(N).fill(false));\n    let dfs = function(i, j, path, sum){\n        if(i\
    \ < 0 || i >= N || j < 0 || j >= N || visited[i][j]) return;\n        path.push(grid[i][j]);\n\
    \        sum += grid[i][j];\n        visited[i][j] = true;\n        if(path.length\
    \ === k){\n            if(sum < minPathSum){\n                minPathSum = sum;\n\
    \                minPath = path.slice();\n            }\n            else if(sum\
    \ === minPathSum){\n                if(path < minPath){\n                    minPath\
    \ = path.slice();\n                }\n            }\n        }\n        else{\n\
    \            dfs(i + 1, j, path, sum);\n            dfs(i - 1, j, path, sum);\n\
    \            dfs(i, j + 1, path, sum);\n            dfs(i, j - 1, path, sum);\n\
    \        }\n        path.pop();\n        visited[i][j] = false;\n    }\n    for(let\
    \ i = 0; i < N; i++){\n        for(let j = 0; j < N; j++){\n            dfs(i,\
    \ j, [], 0);\n        }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let visited = new Array(n);\n    for(let i =\
    \ 0; i < n; i++){\n        visited[i] = new Array(m).fill(false);\n    }\n   \
    \ let minPath = [];\n    let minSum = Infinity;\n    for(let i = 0; i < n; i++){\n\
    \        for(let j = 0; j < m; j++){\n            let path = [];\n           \
    \ let sum = 0;\n            dfs(i, j, k, path, sum);\n        }\n    }\n    return\
    \ minPath;\n    function dfs(i, j, k, path, sum){\n        if(i < 0 || i >= n\
    \ || j < 0 || j >= m || visited[i][j] || path.length > k){\n            return;\n\
    \        }\n        path.push(grid[i][j]);\n        sum += grid[i][j];\n     \
    \   if(path.length === k){\n            if(sum < minSum){\n                minSum\
    \ = sum;\n                minPath = path.slice();\n            }\n           \
    \ return;\n        }\n        visited[i][j] = true;\n        dfs(i + 1, j, k,\
    \ path, sum);\n        dfs(i - 1, j, k, path, sum);\n        dfs(i, j + 1, k,\
    \ path, sum);\n        dfs(i, j - 1, k, path, sum);\n        visited[i][j] = false;\n\
    \        path.pop();\n    }\n}\n", "    // Your code here\n}\n", "    //YOUR CODE\
    \ HERE\n}\n", "    // your code here\n}\n", "    var minPath = [];\n    var minSum\
    \ = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n\
    \    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum\
    \ = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n\
    \    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum\
    \ = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n\
    \    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum\
    \ = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n\
    \    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum\
    \ = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n\
    \    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum\
    \ = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n\
    \    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum\
    \ = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n\
    \    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum\
    \ = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n\
    \    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum\
    \ = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n\
    \    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum\
    \ = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n\
    \    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum\
    \ = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n\
    \    var minPathSum = Infinity;\n    var minPathSum = Infinity;\n    var minPathSum\
    \ = Infinity;\n   ", "    // your code here\n}\n", "    // Your code here\n}\n",
  "    // Your code here\n}\n", "    // your code here\n}\n", "    // your code here\n\
    }\n", "    // your code here\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n\
    \    var minPath = [];\n    var minPathSum = Infinity;\n    var minPathSum2 =\
    \ Infinity;\n    var minPath2 = [];\n    var minPathSum3 = Infinity;\n    var\
    \ minPath3 = [];\n    var minPathSum4 = Infinity;\n    var minPath4 = [];\n  \
    \  var minPathSum5 = Infinity;\n    var minPath5 = [];\n    var minPathSum6 =\
    \ Infinity;\n    var minPath6 = [];\n    var minPathSum7 = Infinity;\n    var\
    \ minPath7 = [];\n    var minPathSum8 = Infinity;\n    var minPath8 = [];\n  \
    \  var minPathSum9 = Infinity;\n    var minPath9 = [];\n    var minPathSum10 =\
    \ Infinity;\n    var minPath10 = [];\n    var minPathSum11 = Infinity;\n    var\
    \ minPath11 = [];\n    var minPathSum12 = Infinity;\n    var minPath12 = [];\n\
    \    var minPathSum13 = Infinity;\n    var minPath13 = [];\n    var minPathSum14\
    \ = Infinity;\n    var minPath14 = [];\n    var minPathSum15 = Infinity;\n   \
    \ var minPath15 = [];\n    var minPathSum16 = Infinity;\n    var minPath16 = [];\n\
    \    var minPathSum17 = Infinity;\n    var minPath17 = [];\n    var minPathSum18\
    \ = Infinity;\n    var minPath18 = [];\n    var minPathSum19 = Infinity;\n   \
    \ var minPath19 = [];\n    var minPathSum20 = Infinity;\n    var minPath20 = [];\n\
    \    var minPathSum21 = Infinity;\n    var minPath21 = [];\n    var minPathSum22\
    \ = Infinity;\n    var minPath22 = [];\n    var minPathSum23 = Infinity;\n   \
    \ var minPath23 = [];\n    var minPathSum24 = Infinity;\n    var minPath24 = [];\n\
    \    var minPathSum25 = Infinity;\n    var minPath25 = [];\n    var minPathSum26\
    \ = Infinity;\n    var minPath26 = [];\n    var minPathSum27 = Infinity;\n   \
    \ var minPath27 = [];\n    var minPathSum28 =", "    // your code here\n}\n",
  "    var n = grid.length;\n    var m = grid[0].length;\n    var min = [];\n    var\
    \ min_sum = Infinity;\n    for(var i = 0; i < n; i++){\n        for(var j = 0;\
    \ j < m; j++){\n            var curr = [];\n            var curr_sum = 0;\n  \
    \          var visited = [];\n            for(var a = 0; a < n; a++){\n      \
    \          visited.push([]);\n                for(var b = 0; b < m; b++){\n  \
    \                  visited[a].push(false);\n                }\n            }\n\
    \            visited[i][j] = true;\n            curr.push(grid[i][j]);\n     \
    \       curr_sum += grid[i][j];\n            var res = dfs(grid, i, j, k - 1,\
    \ curr, curr_sum, visited);\n            if(res[1] < min_sum){\n             \
    \   min = res[0];\n                min_sum = res[1];\n            }\n        }\n\
    \    }\n    return min;\n}\n", "    // Your code here\n}\n", "    // Your code\
    \ here\n}\n", "    // your code here\n}\n", "    let n = grid.length;\n    let\
    \ m = grid[0].length;\n    let visited = new Array(n);\n    for(let i = 0; i <\
    \ n; i++){\n        visited[i] = new Array(m).fill(false);\n    }\n    let minPath\
    \ = [];\n    let minSum = Number.MAX_SAFE_INTEGER;\n    for(let i = 0; i < n;\
    \ i++){\n        for(let j = 0; j < m; j++){\n            let path = [];\n   \
    \         let sum = 0;\n            dfs(grid, i, j, k, visited, path, sum);\n\
    \            if(sum < minSum){\n                minSum = sum;\n              \
    \  minPath = path;\n            }\n        }\n    }\n    return minPath;\n}\n",
  "    // Your code here\n}\n", "  // your code here\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let minPath = [];\n    let minSum = Infinity;\n\
    \    let minPathSum = Infinity;\n    let minPathSum2 = Infinity;\n    let minPath2\
    \ = [];\n    let minSum2 = Infinity;\n    let minPathSum3 = Infinity;\n    let\
    \ minPath3 = [];\n    let minSum3 = Infinity;\n    let minPathSum4 = Infinity;\n\
    \    let minPath4 = [];\n    let minSum4 = Infinity;\n    let minPathSum5 = Infinity;\n\
    \    let minPath5 = [];\n    let minSum5 = Infinity;\n    let minPathSum6 = Infinity;\n\
    \    let minPath6 = [];\n    let minSum6 = Infinity;\n    let minPathSum7 = Infinity;\n\
    \    let minPath7 = [];\n    let minSum7 = Infinity;\n    let minPathSum8 = Infinity;\n\
    \    let minPath8 = [];\n    let minSum8 = Infinity;\n    for(let i = 0; i < n;\
    \ i++){\n        for(let j = 0; j < m; j++){\n            let sum = 0;\n     \
    \       let path = [];\n            let sum2 = 0;\n            let path2 = [];\n\
    \            let sum3 = 0;\n            let path3 = [];\n            let sum4\
    \ = 0;\n            let path4 = [];\n            let sum5 = 0;\n            let\
    \ path5 = [];\n            let sum6 = 0;\n            let path6 = [];\n      \
    \      let sum7 = 0;\n            let path7 = [];\n            let sum8 = 0;\n\
    \            let path8 = [];\n            for(let z = 0; z < k; z++){\n      \
    \          if(i - 1 >= 0){\n                    sum += grid[i - 1][j];\n     \
    \               path.push(grid[i - 1][j]);\n                }\n              \
    \  if(i + 1 < n){\n                    sum2 += grid[i + 1][j];\n             \
    \       path2.push(grid[i + 1][j]);\n                }\n                if(j -\
    \ 1 >= 0){\n                    sum3 += grid[i][j - 1];\n                    path3.push(grid[i",
  "  // your code here\n}\n", "    // your code here\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n\
    \    let minPathSum2 = Infinity;\n    let minPathSum3 = Infinity;\n    let minPathSum4\
    \ = Infinity;\n    let minPathSum5 = Infinity;\n    let minPathSum6 = Infinity;\n\
    \    let minPathSum7 = Infinity;\n    let minPathSum8 = Infinity;\n    let minPathSum9\
    \ = Infinity;\n    let minPathSum10 = Infinity;\n    let minPathSum11 = Infinity;\n\
    \    let minPathSum12 = Infinity;\n    let minPathSum13 = Infinity;\n    let minPathSum14\
    \ = Infinity;\n    let minPathSum15 = Infinity;\n    let minPathSum16 = Infinity;\n\
    \    let minPathSum17 = Infinity;\n    let minPathSum18 = Infinity;\n    let minPathSum19\
    \ = Infinity;\n    let minPathSum20 = Infinity;\n    let minPathSum21 = Infinity;\n\
    \    let minPathSum22 = Infinity;\n    let minPathSum23 = Infinity;\n    let minPathSum24\
    \ = Infinity;\n    let minPathSum25 = Infinity;\n    let minPathSum26 = Infinity;\n\
    \    let minPathSum27 = Infinity;\n    let minPathSum28 = Infinity;\n    let minPathSum29\
    \ = Infinity;\n    let minPathSum30 = Infinity;\n    let minPathSum31 = Infinity;\n\
    \    let minPathSum32 = Infinity;\n    let minPathSum33 = Infinity;\n    let minPathSum34\
    \ = Infinity;\n    let minPathSum35 = Infinity;\n    let minPathSum36 = Infinity;\n\
    \    let minPathSum37 = Infinity;\n    let minPathSum38 = Infinity;\n    let minPathSum39\
    \ = Infinity;\n    let minPathSum40 = Infinity;\n    let minPathSum41 = Infinity;\n\
    \    let minPathSum42 = Infinity;\n    let minPathSum43 = Infinity;\n    let minPathSum44\
    \ = Infinity;\n    let minPathSum45 = Infinity;\n    let minPathSum46 = Infinity;\n\
    \    let minPathSum47 = Infinity;\n    let minPathSum48 =", "    let minPath =\
    \ [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n    let minPathSum2\
    \ = Infinity;\n    let minPathSum3 = Infinity;\n    let minPathSum4 = Infinity;\n\
    \    let minPathSum5 = Infinity;\n    let minPathSum6 = Infinity;\n    let minPathSum7\
    \ = Infinity;\n    let minPathSum8 = Infinity;\n    let minPathSum9 = Infinity;\n\
    \    let minPathSum10 = Infinity;\n    let minPathSum11 = Infinity;\n    let minPathSum12\
    \ = Infinity;\n    let minPathSum13 = Infinity;\n    let minPathSum14 = Infinity;\n\
    \    let minPathSum15 = Infinity;\n    let minPathSum16 = Infinity;\n    let minPathSum17\
    \ = Infinity;\n    let minPathSum18 = Infinity;\n    let minPathSum19 = Infinity;\n\
    \    let minPathSum20 = Infinity;\n    let minPathSum21 = Infinity;\n    let minPathSum22\
    \ = Infinity;\n    let minPathSum23 = Infinity;\n    let minPathSum24 = Infinity;\n\
    \    let minPathSum25 = Infinity;\n    let minPathSum26 = Infinity;\n    let minPathSum27\
    \ = Infinity;\n    let minPathSum28 = Infinity;\n    let minPathSum29 = Infinity;\n\
    \    let minPathSum30 = Infinity;\n    let minPathSum31 = Infinity;\n    let minPathSum32\
    \ = Infinity;\n    let minPathSum33 = Infinity;\n    let minPathSum34 = Infinity;\n\
    \    let minPathSum35 = Infinity;\n    let minPathSum36 = Infinity;\n    let minPathSum37\
    \ = Infinity;\n    let minPathSum38 = Infinity;\n    let minPathSum39 = Infinity;\n\
    \    let minPathSum40 = Infinity;\n    let minPathSum41 = Infinity;\n    let minPathSum42\
    \ = Infinity;\n    let minPathSum43 = Infinity;\n    let minPathSum44 = Infinity;\n\
    \    let minPathSum45 = Infinity;\n    let minPathSum46 = Infinity;\n    let minPathSum47\
    \ = Infinity;\n    let minPathSum48 = Infinity;\n    let minPathSum49 = Infinity;\n\
    \    let minPathSum50 =", "    // Your code here\n}\n", "    // Your code here\n\
    }\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let dp = new\
    \ Array(n);\n    for(let i = 0; i < n; i++){\n        dp[i] = new Array(m);\n\
    \        for(let j = 0; j < m; j++){\n            dp[i][j] = new Array(k + 1);\n\
    \            for(let l = 0; l <= k; l++){\n                dp[i][j][l] = {\n \
    \                   path: [],\n                    cost: Infinity\n          \
    \      };\n            }\n        }\n    }\n    for(let i = 0; i < n; i++){\n\
    \        for(let j = 0; j < m; j++){\n            dp[i][j][1].path = [grid[i][j]];\n\
    \            dp[i][j][1].cost = 0;\n        }\n    }\n    for(let l = 2; l <=\
    \ k; l++){\n        for(let i = 0; i < n; i++){\n            for(let j = 0; j\
    \ < m; j++){\n                let min = Infinity;\n                let minPath\
    \ = [];\n                if(i - 1 >= 0){\n                    let path = dp[i\
    \ - 1][j][l - 1].path.slice();\n                    path.push(grid[i][j]);\n \
    \                   if(path < minPath){\n                        minPath = path;\n\
    \                        min = dp[i - 1][j][l - 1].cost;\n                   \
    \ }\n                }\n                if(i + 1 < n){\n                    let\
    \ path = dp[i + 1][j][l - 1].path.slice();\n                    path.push(grid[i][j]);\n\
    \                    if(path < minPath){\n                        minPath = path;\n\
    \                        min = dp[i + 1][j][l - 1].cost;\n                   \
    \ }\n                }\n                if(j - 1 >= 0){\n                    let\
    \ path = dp[i][j - 1][l - 1].path.slice();\n                    path.push(grid[i][j]);\n\
    \                    if(path < minPath){\n                        minPath = path;\n",
  "    let n = grid.length;\n    let minPath = [];\n    let minSum = Infinity;\n \
    \   let minPathSum = Infinity;\n    let visited = new Set();\n    let path = [];\n\
    \    let sum = 0;\n    function dfs(i, j, k){\n        if(k === 0){\n        \
    \    if(sum < minSum){\n                minSum = sum;\n                minPath\
    \ = path.slice();\n            }\n            else if(sum === minSum){\n     \
    \           if(path.join('') < minPath.join('')){\n                    minPath\
    \ = path.slice();\n                }\n            }\n            return;\n   \
    \     }\n        if(i < 0 || i >= n || j < 0 || j >= n || visited.has(i + ','\
    \ + j)){\n            return;\n        }\n        visited.add(i + ',' + j);\n\
    \        path.push(grid[i][j]);\n        sum += grid[i][j];\n        dfs(i - 1,\
    \ j, k - 1);\n        dfs(i + 1, j, k - 1);\n        dfs(i, j - 1, k - 1);\n \
    \       dfs(i, j + 1, k - 1);\n        path.pop();\n        sum -= grid[i][j];\n\
    \        visited.delete(i + ',' + j);\n    }\n    for(let i = 0; i < n; i++){\n\
    \        for(let j = 0; j < n; j++){\n            dfs(i, j, k);\n        }\n \
    \   }\n    return minPath;\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n\
    \    var minPath = [];\n    var minPathSum = Infinity;\n    var visited = [];\n\
    \    for(var i = 0; i < n; i++){\n        visited.push([]);\n        for(var j\
    \ = 0; j < m; j++){\n            visited[i].push(false);\n        }\n    }\n \
    \   var dfs = function(i, j, path, sum){\n        if(i < 0 || i >= n || j < 0\
    \ || j >= m || visited[i][j]){\n            return;\n        }\n        path.push(grid[i][j]);\n\
    \        sum += grid[i][j];\n        if(path.length === k){\n            if(sum\
    \ < minPathSum){\n                minPathSum = sum;\n                minPath =\
    \ path.slice();\n            }\n            path.pop();\n            return;\n\
    \        }\n        visited[i][j] = true;\n        dfs(i + 1, j, path, sum);\n\
    \        dfs(i - 1, j, path, sum);\n        dfs(i, j + 1, path, sum);\n      \
    \  dfs(i, j - 1, path, sum);\n        visited[i][j] = false;\n        path.pop();\n\
    \    }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j < m; j++){\n\
    \            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n}\n", " \
    \   // your code here\n}\n", "    // Your code here\n}\n", "    var n = grid.length;\n\
    \    var m = grid[0].length;\n    var minPath = [];\n    var minPathValue = Infinity;\n\
    \    var visited = [];\n    for(var i = 0; i < n; i++){\n        visited[i] =\
    \ [];\n        for(var j = 0; j < m; j++){\n            visited[i][j] = false;\n\
    \        }\n    }\n    for(var i = 0; i < n; i++){\n        for(var j = 0; j <\
    \ m; j++){\n            var path = [];\n            var pathValue = 0;\n     \
    \       var pathLength = 0;\n            var pathVisited = [];\n            for(var\
    \ i1 = 0; i1 < n; i1++){\n                pathVisited[i1] = [];\n            \
    \    for(var j1 = 0; j1 < m; j1++){\n                    pathVisited[i1][j1] =\
    \ false;\n                }\n            }\n            path.push(grid[i][j]);\n\
    \            pathValue += grid[i][j];\n            pathLength++;\n           \
    \ pathVisited[i][j] = true;\n            var queue = [];\n            queue.push([i,\
    \ j]);\n            while(queue.length > 0){\n                var cur = queue.shift();\n\
    \                var x = cur[0];\n                var y = cur[1];\n          \
    \      if(x > 0 && !pathVisited[x - 1][y]){\n                    queue.push([x\
    \ - 1, y]);\n                    path.push(grid[x - 1][y]);\n                \
    \    pathValue += grid[x - 1][y];\n                    pathLength++;\n       \
    \             pathVisited[x - 1][y] = true;\n                }\n             \
    \   if(x < n - 1 && !pathVisited[x + 1][y]){\n                    queue.push([x\
    \ + 1, y]);\n                    path.push(grid[x + 1][y]);\n                \
    \    pathValue += grid[x + 1][y];\n                    pathLength++;\n       \
    \             pathVisited[x + 1][y] = true;\n                }\n             \
    \   if(y > 0 && !pathVisited[x][y - 1]){\n", "    // Your code here\n}\n", " \
    \   let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minSum = Infinity;\n    let minPathSum = Infinity;\n    let minPathSumIndex\
    \ = -1;\n    let minPathSumValue = -1;\n    let minPathSumValueIndex = -1;\n \
    \   let minPathSumValueIndex2 = -1;\n    let minPathSumValueIndex3 = -1;\n   \
    \ let minPathSumValueIndex4 = -1;\n    let minPathSumValueIndex5 = -1;\n    let\
    \ minPathSumValueIndex6 = -1;\n    let minPathSumValueIndex7 = -1;\n    let minPathSumValueIndex8\
    \ = -1;\n    let minPathSumValueIndex9 = -1;\n    let minPathSumValueIndex10 =\
    \ -1;\n    let minPathSumValueIndex11 = -1;\n    let minPathSumValueIndex12 =\
    \ -1;\n    let minPathSumValueIndex13 = -1;\n    let minPathSumValueIndex14 =\
    \ -1;\n    let minPathSumValueIndex15 = -1;\n    let minPathSumValueIndex16 =\
    \ -1;\n    let minPathSumValueIndex17 = -1;\n    let minPathSumValueIndex18 =\
    \ -1;\n    let minPathSumValueIndex19 = -1;\n    let minPathSumValueIndex20 =\
    \ -1;\n    let minPathSumValueIndex21 = -1;\n    let minPathSumValueIndex22 =\
    \ -1;\n    let minPathSumValueIndex23 = -1;\n    let minPathSumValueIndex24 =\
    \ -1;\n    let minPathSumValueIndex25 = -1;\n    let minPathSumValueIndex26 =\
    \ -1;\n    let minPathSumValueIndex27 = -1;\n    let minPathSumValueIndex28 =\
    \ -1;\n    let minPathSumValueIndex29 = -1;\n    let minPathSumValueIndex30 =\
    \ -1;\n    let minPathSumValueIndex31 = -1;\n    let minPathSumValueIndex32 =\
    \ -1;\n    let minPathSumValueIndex33 = -1;\n    let minPathSumValueIndex34 =\
    \ -1;\n    let minPath", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n\
    \    let visited = [];\n    for(let i = 0; i < n; i++){\n        visited.push([]);\n\
    \        for(let j = 0; j < m; j++){\n            visited[i].push(false);\n  \
    \      }\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < m;\
    \ j++){\n            let path = [];\n            let pathSum = 0;\n          \
    \  dfs(i, j, k, path, pathSum);\n        }\n    }\n    return minPath;\n    function\
    \ dfs(i, j, k, path, pathSum){\n        if(i < 0 || i >= n || j < 0 || j >= m\
    \ || visited[i][j]){\n            return;\n        }\n        if(path.length ===\
    \ k){\n            if(pathSum < minPathSum){\n                minPathSum = pathSum;\n\
    \                minPath = path.slice();\n            }\n            else if(pathSum\
    \ === minPathSum){\n                if(path < minPath){\n                    minPath\
    \ = path.slice();\n                }\n            }\n            return;\n   \
    \     }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n     \
    \   pathSum += grid[i][j];\n        dfs(i + 1, j, k, path, pathSum);\n       \
    \ dfs(i - 1, j, k, path, pathSum);\n        dfs(i, j + 1, k, path, pathSum);\n\
    \        dfs(i, j - 1, k, path, pathSum);\n        path.pop();\n        pathSum\
    \ -= grid[i][j];\n        visited[i][j] = false;\n    }\n}\n", "    // Your code\
    \ here\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n    let\
    \ visited = new Array(n);\n    for(let i = 0; i < n; i++){\n        visited[i]\
    \ = new Array(m).fill(false);\n    }\n    let minPath = [];\n    let minSum =\
    \ Infinity;\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < m; j++){\n\
    \            let path = [];\n            let sum = 0;\n            dfs(i, j, 0,\
    \ path, sum);\n        }\n    }\n    return minPath;\n    function dfs(i, j, step,\
    \ path, sum){\n        if(step == k){\n            if(sum < minSum){\n       \
    \         minSum = sum;\n                minPath = path.slice();\n           \
    \ }\n            return;\n        }\n        if(i < 0 || i >= n || j < 0 || j\
    \ >= m || visited[i][j]){\n            return;\n        }\n        visited[i][j]\
    \ = true;\n        path.push(grid[i][j]);\n        sum += grid[i][j];\n      \
    \  dfs(i + 1, j, step + 1, path, sum);\n        dfs(i - 1, j, step + 1, path,\
    \ sum);\n        dfs(i, j + 1, step + 1, path, sum);\n        dfs(i, j - 1, step\
    \ + 1, path, sum);\n        path.pop();\n        sum -= grid[i][j];\n        visited[i][j]\
    \ = false;\n    }\n}\n", "    let n = grid.length;\n    let m = grid[0].length;\n\
    \    let minPath = [];\n    let minSum = Infinity;\n    let minPathSum = Infinity;\n\
    \    let path = [];\n    let pathSum = 0;\n    let visited = [];\n    for(let\
    \ i = 0; i < n; i++){\n        visited.push([]);\n        for(let j = 0; j < m;\
    \ j++){\n            visited[i].push(false);\n        }\n    }\n    function dfs(i,\
    \ j, k){\n        if(k === 0){\n            if(pathSum < minPathSum){\n      \
    \          minPathSum = pathSum;\n                minPath = path.slice();\n  \
    \          }\n            return;\n        }\n        if(i < 0 || i >= n || j\
    \ < 0 || j >= m || visited[i][j]){\n            return;\n        }\n        visited[i][j]\
    \ = true;\n        path.push(grid[i][j]);\n        pathSum += grid[i][j];\n  \
    \      dfs(i - 1, j, k - 1);\n        dfs(i + 1, j, k - 1);\n        dfs(i, j\
    \ - 1, k - 1);\n        dfs(i, j + 1, k - 1);\n        path.pop();\n        pathSum\
    \ -= grid[i][j];\n        visited[i][j] = false;\n    }\n    for(let i = 0; i\
    \ < n; i++){\n        for(let j = 0; j < m; j++){\n            dfs(i, j, k);\n\
    \        }\n    }\n    return minPath;\n}\n", "    // Your code here\n}\n", " \
    \   let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minPathSum = Infinity;\n    let minPathSum2 = Infinity;\n    let minPath2\
    \ = [];\n    let minPathSum3 = Infinity;\n    let minPath3 = [];\n    let minPathSum4\
    \ = Infinity;\n    let minPath4 = [];\n    let minPathSum5 = Infinity;\n    let\
    \ minPath5 = [];\n    let minPathSum6 = Infinity;\n    let minPath6 = [];\n  \
    \  let minPathSum7 = Infinity;\n    let minPath7 = [];\n    let minPathSum8 =\
    \ Infinity;\n    let minPath8 = [];\n    let minPathSum9 = Infinity;\n    let\
    \ minPath9 = [];\n    let minPathSum10 = Infinity;\n    let minPath10 = [];\n\
    \    let minPathSum11 = Infinity;\n    let minPath11 = [];\n    let minPathSum12\
    \ = Infinity;\n    let minPath12 = [];\n    let minPathSum13 = Infinity;\n   \
    \ let minPath13 = [];\n    let minPathSum14 = Infinity;\n    let minPath14 = [];\n\
    \    let minPathSum15 = Infinity;\n    let minPath15 = [];\n    let minPathSum16\
    \ = Infinity;\n    let minPath16 = [];\n    let minPathSum17 = Infinity;\n   \
    \ let minPath17 = [];\n    let minPathSum18 = Infinity;\n    let minPath18 = [];\n\
    \    let minPathSum19 = Infinity;\n    let minPath19 = [];\n    let minPathSum20\
    \ = Infinity;\n    let minPath20 = [];\n    let minPathSum21 = Infinity;\n   \
    \ let minPath21 = [];\n    let minPathSum22 = Infinity;\n    let minPath22 = [];\n\
    \    let minPathSum23 = Infinity;\n    let minPath23 = [];\n    let minPathSum24\
    \ = Infinity;\n    let minPath24 = [];\n    let minPathSum25 = Infinity;\n   \
    \ let minPath25 = [];\n    let minPathSum26 = Infinity;\n    let minPath26 = [];\n\
    \    let minPathSum27 = Infinity;\n    let minPath27 = [];\n    let minPathSum28\
    \ =", "  var minPath = [];\n  var minPathSum = Infinity;\n  var minPathSum2 =\
    \ Infinity;\n  var minPath2 = [];\n  var minPathSum3 = Infinity;\n  var minPath3\
    \ = [];\n  var minPathSum4 = Infinity;\n  var minPath4 = [];\n  var minPathSum5\
    \ = Infinity;\n  var minPath5 = [];\n  var minPathSum6 = Infinity;\n  var minPath6\
    \ = [];\n  var minPathSum7 = Infinity;\n  var minPath7 = [];\n  var minPathSum8\
    \ = Infinity;\n  var minPath8 = [];\n  var minPathSum9 = Infinity;\n  var minPath9\
    \ = [];\n  var minPathSum10 = Infinity;\n  var minPath10 = [];\n  var minPathSum11\
    \ = Infinity;\n  var minPath11 = [];\n  var minPathSum12 = Infinity;\n  var minPath12\
    \ = [];\n  var minPathSum13 = Infinity;\n  var minPath13 = [];\n  var minPathSum14\
    \ = Infinity;\n  var minPath14 = [];\n  var minPathSum15 = Infinity;\n  var minPath15\
    \ = [];\n  var minPathSum16 = Infinity;\n  var minPath16 = [];\n  var minPathSum17\
    \ = Infinity;\n  var minPath17 = [];\n  var minPathSum18 = Infinity;\n  var minPath18\
    \ = [];\n  var minPathSum19 = Infinity;\n  var minPath19 = [];\n  var minPathSum20\
    \ = Infinity;\n  var minPath20 = [];\n  var minPathSum21 = Infinity;\n  var minPath21\
    \ = [];\n  var minPathSum22 = Infinity;\n  var minPath22 = [];\n  var minPathSum23\
    \ = Infinity;\n  var minPath23 = [];\n  var minPathSum24 = Infinity;\n  var minPath24\
    \ = [];\n  var minPathSum25 = Infinity;\n  var minPath25 = [];\n  var minPathSum26\
    \ = Infinity;\n  var minPath26 = [];\n  var minPathSum27 = Infinity;\n  var minPath27\
    \ = [];\n  var minPathSum28 = Infinity;\n  var minPath28 = [];\n  var minPathSum29\
    \ = Infinity;", "    // Your code here\n}\n", "    // Your code here\n}\n", " \
    \   var minPath = [];\n    var minPathValue = Infinity;\n    var minPathGrid =\
    \ [];\n    var minPathGridValue = Infinity;\n    var gridSize = grid.length;\n\
    \    var gridSizeSq = gridSize * gridSize;\n    var gridSizeSqMinusOne = gridSizeSq\
    \ - 1;\n    var gridSizeMinusOne = gridSize - 1;\n    var gridSizeMinusOneSq =\
    \ gridSizeMinusOne * gridSizeMinusOne;\n    var gridSizeMinusOneSqMinusOne = gridSizeMinusOneSq\
    \ - 1;\n    var gridSizeMinusOneSqMinusOneMinusK = gridSizeMinusOneSqMinusOne\
    \ - k;\n    var gridSizeMinusOneSqMinusOneMinusKPlusOne = gridSizeMinusOneSqMinusOneMinusK\
    \ + 1;\n    var gridSizeMinusOneSqMinusOneMinusKPlusOneMinusK = gridSizeMinusOneSqMinusOneMinusKPlusOne\
    \ - k;\n    var gridSizeMinusOneSqMinusOneMinusKPlusOneMinusKPlusOne = gridSizeMinusOneSqMinusOneMinusKPlusOneMinusK\
    \ + 1;\n    var gridSizeMinusOneSqMinusOneMinusKPlusOneMinusKPlusOneMinusK = gridSizeMinusOneSqMinusOneMinusKPlusOneMinusKPlusOne\
    \ - k;\n    var gridSizeMinusOneSqMinusOneMinusKPlusOneMinusKPlusOneMinusKPlusOne\
    \ = gridSizeMinusOneSqMinusOneMinusKPlusOneMinusKPlusOneMinusK + 1;\n    var gridSizeMinusOneSqMinusOneMinusKPlusOneMinusKPlusOneMinusKPlusOneMinusK\
    \ = gridSizeMinusOneSqMinusOneMinusKPlusOneMinusKPlusOneMinusKPlusOne - k;\n \
    \   var gridSizeMinusOneSqMinusOneMinusKPlusOneMinusKPlusOneMinusKPlusOneMinusKPlusOne\
    \ = gridSizeMinusOneSqMinusOneMinusKPlusOneMinusKPlusOneMinusKPlusOneMin", " \
    \   // Your code here\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n\
    \    var minPath = [];\n    var minPathSum = Infinity;\n    var minPathSum2 =\
    \ Infinity;\n    var minPath2 = [];\n    var minPathSum3 = Infinity;\n    var\
    \ minPath3 = [];\n    var minPathSum4 = Infinity;\n    var minPath4 = [];\n  \
    \  var minPathSum5 = Infinity;\n    var minPath5 = [];\n    var minPathSum6 =\
    \ Infinity;\n    var minPath6 = [];\n    var minPathSum7 = Infinity;\n    var\
    \ minPath7 = [];\n    var minPathSum8 = Infinity;\n    var minPath8 = [];\n  \
    \  var minPathSum9 = Infinity;\n    var minPath9 = [];\n    var minPathSum10 =\
    \ Infinity;\n    var minPath10 = [];\n    var minPathSum11 = Infinity;\n    var\
    \ minPath11 = [];\n    var minPathSum12 = Infinity;\n    var minPath12 = [];\n\
    \    var minPathSum13 = Infinity;\n    var minPath13 = [];\n    var minPathSum14\
    \ = Infinity;\n    var minPath14 = [];\n    var minPathSum15 = Infinity;\n   \
    \ var minPath15 = [];\n    var minPathSum16 = Infinity;\n    var minPath16 = [];\n\
    \    var minPathSum17 = Infinity;\n    var minPath17 = [];\n    var minPathSum18\
    \ = Infinity;\n    var minPath18 = [];\n    var minPathSum19 = Infinity;\n   \
    \ var minPath19 = [];\n    var minPathSum20 = Infinity;\n    var minPath20 = [];\n\
    \    var minPathSum21 = Infinity;\n    var minPath21 = [];\n    var minPathSum22\
    \ = Infinity;\n    var minPath22 = [];\n    var minPathSum23 = Infinity;\n   \
    \ var minPath23 = [];\n    var minPathSum24 = Infinity;\n    var minPath24 = [];\n\
    \    var minPathSum25 = Infinity;\n    var minPath25 = [];\n    var minPathSum26\
    \ = Infinity;\n    var minPath26 = [];\n    var minPathSum27 = Infinity;\n   \
    \ var minPath27 = [];\n    var minPathSum28 =", "    // Your code goes here\n\
    }\n", "    var n = grid.length;\n    var minPath = [];\n    var minPathSum = Infinity;\n\
    \    var minPathSumIndex = [];\n    var minPathSumIndexes = [];\n    var minPathSumIndexesIndex\
    \ = 0;\n    var minPathSumIndexesIndexes = [];\n    var minPathSumIndexesIndexesIndex\
    \ = 0;\n    var minPathSumIndexesIndexesIndexes = [];\n    var minPathSumIndexesIndexesIndexesIndex\
    \ = 0;\n    var minPathSumIndexesIndexesIndexesIndexes = [];\n    var minPathSumIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    var minPathSumIndexesIndexesIndexesIndexesIndexes = [];\n    var minPathSumIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    var minPathSumIndexesIndexesIndexesIndexesIndexesIndexes = [];\n \
    \   var minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndex = 0;\n    var\
    \ minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexes = [];\n    var minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    var minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n    var minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    var minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n    var minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    var minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n    var minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    var minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexes\
    \ = [];\n    var minPathSumIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndexesIndex\
    \ = 0;\n    var minPathSumIndexesIndexesIndexesIndexesIndexes", "    // your code\
    \ here\n}\n", "    // Your code here\n}\n", "    // your code here\n}\n", "  \
    \  let n = grid.length;\n    let m = grid[0].length;\n    let minPath = [];\n\
    \    let minPathSum = Infinity;\n    let visited = new Array(n).fill(false).map(()\
    \ => new Array(m).fill(false));\n    let dfs = function(i, j, path, pathSum){\n\
    \        if(i < 0 || i >= n || j < 0 || j >= m || visited[i][j]){\n          \
    \  return;\n        }\n        if(path.length === k){\n            if(pathSum\
    \ < minPathSum){\n                minPathSum = pathSum;\n                minPath\
    \ = path;\n            }\n            return;\n        }\n        visited[i][j]\
    \ = true;\n        path.push(grid[i][j]);\n        pathSum += grid[i][j];\n  \
    \      dfs(i - 1, j, path, pathSum);\n        dfs(i + 1, j, path, pathSum);\n\
    \        dfs(i, j - 1, path, pathSum);\n        dfs(i, j + 1, path, pathSum);\n\
    \        path.pop();\n        pathSum -= grid[i][j];\n        visited[i][j] =\
    \ false;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < m;\
    \ j++){\n            dfs(i, j, [], 0);\n        }\n    }\n    return minPath;\n\
    }\n", "    // your code here\n}\n", "    // Your code here\n}\n", "    // your\
    \ code here\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n  \
    \  var min = [];\n    var min_val = Infinity;\n    var min_path = [];\n    for(var\
    \ i = 0; i < n; i++){\n        for(var j = 0; j < m; j++){\n            var path\
    \ = [];\n            var val = 0;\n            var res = dfs(i, j, k, grid, path,\
    \ val);\n            if(res[0] < min_val){\n                min_val = res[0];\n\
    \                min_path = res[1];\n            }\n        }\n    }\n    return\
    \ min_path;\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n  \
    \  var min = [];\n    var min_sum = Infinity;\n    var min_path = [];\n    for(var\
    \ i = 0; i < n; i++){\n        for(var j = 0; j < m; j++){\n            var path\
    \ = [];\n            var sum = 0;\n            var visited = [];\n           \
    \ for(var x = 0; x < n; x++){\n                visited.push([]);\n           \
    \     for(var y = 0; y < m; y++){\n                    visited[x].push(false);\n\
    \                }\n            }\n            dfs(grid, i, j, k, path, sum, visited);\n\
    \            if(sum < min_sum){\n                min_sum = sum;\n            \
    \    min_path = path;\n            }\n        }\n    }\n    return min_path;\n\
    }\n", "    // Your code here\n}\n", "  var minPath = [];\n  var minPathSum = Infinity;\n\
    \  var minPathSumIndex = 0;\n  var minPathSumIndex2 = 0;\n  var minPathSumIndex3\
    \ = 0;\n  var minPathSumIndex4 = 0;\n  var minPathSumIndex5 = 0;\n  var minPathSumIndex6\
    \ = 0;\n  var minPathSumIndex7 = 0;\n  var minPathSumIndex8 = 0;\n  var minPathSumIndex9\
    \ = 0;\n  var minPathSumIndex10 = 0;\n  var minPathSumIndex11 = 0;\n  var minPathSumIndex12\
    \ = 0;\n  var minPathSumIndex13 = 0;\n  var minPathSumIndex14 = 0;\n  var minPathSumIndex15\
    \ = 0;\n  var minPathSumIndex16 = 0;\n  var minPathSumIndex17 = 0;\n  var minPathSumIndex18\
    \ = 0;\n  var minPathSumIndex19 = 0;\n  var minPathSumIndex20 = 0;\n  var minPathSumIndex21\
    \ = 0;\n  var minPathSumIndex22 = 0;\n  var minPathSumIndex23 = 0;\n  var minPathSumIndex24\
    \ = 0;\n  var minPathSumIndex25 = 0;\n  var minPathSumIndex26 = 0;\n  var minPathSumIndex27\
    \ = 0;\n  var minPathSumIndex28 = 0;\n  var minPathSumIndex29 = 0;\n  var minPathSumIndex30\
    \ = 0;\n  var minPathSumIndex31 = 0;\n  var minPathSumIndex32 = 0;\n  var minPathSumIndex33\
    \ = 0;\n  var minPathSumIndex34 = 0;\n  var minPathSumIndex35 = 0;\n  var minPathSumIndex36\
    \ = 0;\n  var minPathSumIndex37 = 0;\n  var minPathSumIndex38 = 0;\n  var minPathSumIndex39\
    \ = 0;\n  var minPathSumIndex40 = 0;\n  var minPathSumIndex41 = 0;\n  var minPathSumIndex42\
    \ = 0;\n  var minPathSumIndex43 = 0;\n  var minPathSumIndex44 = 0;\n  var minPathSumIndex45\
    \ = 0;\n ", "    // your code here\n}\n", "    var n = grid.length;\n    var m\
    \ = grid[0].length;\n    var visited = new Array(n);\n    for(var i = 0; i < n;\
    \ i++){\n        visited[i] = new Array(m);\n        for(var j = 0; j < m; j++){\n\
    \            visited[i][j] = false;\n        }\n    }\n    var minPath = [];\n\
    \    var minSum = Number.MAX_VALUE;\n    for(var i = 0; i < n; i++){\n       \
    \ for(var j = 0; j < m; j++){\n            var path = [];\n            var sum\
    \ = 0;\n            visited[i][j] = true;\n            path.push(grid[i][j]);\n\
    \            sum += grid[i][j];\n            dfs(i, j, 1, k, path, sum, grid,\
    \ visited, minPath, minSum);\n            visited[i][j] = false;\n        }\n\
    \    }\n    return minPath;\n}\n", "    // your code here\n}\n", "    let n =\
    \ grid.length;\n    let m = grid[0].length;\n    let visited = new Array(n);\n\
    \    for(let i = 0; i < n; i++){\n        visited[i] = new Array(m).fill(false);\n\
    \    }\n    let minPath = [];\n    let minSum = Infinity;\n    let minPathSum\
    \ = Infinity;\n    let minPaths = [];\n    let minPathsSum = [];\n    let dfs\
    \ = function(i, j, path, pathSum){\n        if(i < 0 || i >= n || j < 0 || j >=\
    \ m || visited[i][j] || path.length > k){\n            return;\n        }\n  \
    \      if(path.length === k){\n            if(pathSum < minPathSum){\n       \
    \         minPathSum = pathSum;\n                minPath = path;\n           \
    \ }\n            if(pathSum === minPathSum){\n                minPaths.push(path);\n\
    \                minPathsSum.push(pathSum);\n            }\n            return;\n\
    \        }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n  \
    \      pathSum += grid[i][j];\n        dfs(i + 1, j, path.slice(), pathSum);\n\
    \        dfs(i - 1, j, path.slice(), pathSum);\n        dfs(i, j + 1, path.slice(),\
    \ pathSum);\n        dfs(i, j - 1, path.slice(), pathSum);\n        visited[i][j]\
    \ = false;\n    }\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j <\
    \ m; j++){\n            dfs(i, j, [], 0);\n        }\n    }\n    if(minPaths.length\
    \ === 0){\n        return minPath;\n    }\n    let minPathIndex = 0;\n    for(let\
    \ i = 1; i < minPaths.length; i++){\n        if(minPaths[i].toString() < minPaths[minPathIndex].toString()){\n\
    \            minPathIndex = i;\n        }\n    }\n    return minPath", "    var\
    \ minPath = [];\n    var minPathSum = Infinity;\n    var minPathSumIndex = 0;\n\
    \    var minPathSumIndexRow = 0;\n    var minPathSumIndexCol = 0;\n    var minPathSumIndexSum\
    \ = 0;\n    var minPathSumIndexSumRow = 0;\n    var minPathSumIndexSumCol = 0;\n\
    \    var minPathSumIndexSumSum = 0;\n    var minPathSumIndexSumSumRow = 0;\n \
    \   var minPathSumIndexSumSumCol = 0;\n    var minPathSumIndexSumSumSum = 0;\n\
    \    var minPathSumIndexSumSumSumRow = 0;\n    var minPathSumIndexSumSumSumCol\
    \ = 0;\n    var minPathSumIndexSumSumSumSum = 0;\n    var minPathSumIndexSumSumSumSumRow\
    \ = 0;\n    var minPathSumIndexSumSumSumSumCol = 0;\n    var minPathSumIndexSumSumSumSumSum\
    \ = 0;\n    var minPathSumIndexSumSumSumSumSumRow = 0;\n    var minPathSumIndexSumSumSumSumSumCol\
    \ = 0;\n    var minPathSumIndexSumSumSumSumSumSum = 0;\n    var minPathSumIndexSumSumSumSumSumSumRow\
    \ = 0;\n    var minPathSumIndexSumSumSumSumSumSumCol = 0;\n    var minPathSumIndexSumSumSumSumSumSumSum\
    \ = 0;\n    var minPathSumIndexSumSumSumSumSumSumSumRow = 0;\n    var minPathSumIndexSumSumSumSumSumSumSumCol\
    \ = 0;\n    var minPathSumIndexSumSumSumSumSumSumSumSum = 0;\n    var minPathSumIndexSumSumSumSumSumSumSumSumRow\
    \ = 0;\n    var minPathSumIndexSumSumSumSumSumSumSumSumCol = 0;\n    var minPathSumIndexSumSumSumSumSumSumSumSumSum\
    \ = 0;\n    var minPathSumIndexSumSumSumSumSumSumSumSumSumRow = 0;\n    var minPathSumIndexSumSumSumSumSumSumSumSumSumCol\
    \ = 0;\n    var minPathSumIndexSumSumSumSumSumSumSumSumSumSum = 0;\n    var minPathSumIndexSumSumSumSumSumSumSumSumSumSumRow\
    \ = 0;", "    // your code here\n}\n", "    var n = grid.length;\n    var m =\
    \ grid[0].length;\n    var minPath = [];\n    var minPathSum = Infinity;\n   \
    \ var minPathSum2 = Infinity;\n    var minPath2 = [];\n    var minPathSum3 = Infinity;\n\
    \    var minPath3 = [];\n    var minPathSum4 = Infinity;\n    var minPath4 = [];\n\
    \    var minPathSum5 = Infinity;\n    var minPath5 = [];\n    var minPathSum6\
    \ = Infinity;\n    var minPath6 = [];\n    var minPathSum7 = Infinity;\n    var\
    \ minPath7 = [];\n    var minPathSum8 = Infinity;\n    var minPath8 = [];\n  \
    \  var minPathSum9 = Infinity;\n    var minPath9 = [];\n    var minPathSum10 =\
    \ Infinity;\n    var minPath10 = [];\n    var minPathSum11 = Infinity;\n    var\
    \ minPath11 = [];\n    var minPathSum12 = Infinity;\n    var minPath12 = [];\n\
    \    var minPathSum13 = Infinity;\n    var minPath13 = [];\n    var minPathSum14\
    \ = Infinity;\n    var minPath14 = [];\n    var minPathSum15 = Infinity;\n   \
    \ var minPath15 = [];\n    var minPathSum16 = Infinity;\n    var minPath16 = [];\n\
    \    var minPathSum17 = Infinity;\n    var minPath17 = [];\n    var minPathSum18\
    \ = Infinity;\n    var minPath18 = [];\n    var minPathSum19 = Infinity;\n   \
    \ var minPath19 = [];\n    var minPathSum20 = Infinity;\n    var minPath20 = [];\n\
    \    var minPathSum21 = Infinity;\n    var minPath21 = [];\n    var minPathSum22\
    \ = Infinity;\n    var minPath22 = [];\n    var minPathSum23 = Infinity;\n   \
    \ var minPath23 = [];\n    var minPathSum24 = Infinity;\n    var minPath24 = [];\n\
    \    var minPathSum25 = Infinity;\n    var minPath25 = [];\n    var minPathSum26\
    \ = Infinity;\n    var minPath26 = [];\n    var minPathSum27 = Infinity;\n   \
    \ var minPath27 = [];\n    var minPathSum28 =", "    var n = grid.length;\n  \
    \  var m = grid[0].length;\n    var min = [];\n    var min_sum = Infinity;\n \
    \   var min_path = [];\n    var path = [];\n    var sum = 0;\n    var visited\
    \ = [];\n    for(var i = 0; i < n; i++){\n        visited[i] = [];\n        for(var\
    \ j = 0; j < m; j++){\n            visited[i][j] = false;\n        }\n    }\n\
    \    for(var i = 0; i < n; i++){\n        for(var j = 0; j < m; j++){\n      \
    \      path = [];\n            sum = 0;\n            for(var i = 0; i < n; i++){\n\
    \                for(var j = 0; j < m; j++){\n                    visited[i][j]\
    \ = false;\n                }\n            }\n            dfs(grid, i, j, k, path,\
    \ sum, visited);\n            if(sum < min_sum){\n                min_sum = sum;\n\
    \                min_path = path;\n            }\n        }\n    }\n    return\
    \ min_path;\n}\n", "    var n = grid.length;\n    var m = grid[0].length;\n  \
    \  var minPath = [];\n    var minPathSum = Infinity;\n    var visited = [];\n\
    \    for(var i = 0; i < n; i++){\n        visited.push([]);\n        for(var j\
    \ = 0; j < m; j++){\n            visited[i].push(false);\n        }\n    }\n \
    \   for(var i = 0; i < n; i++){\n        for(var j = 0; j < m; j++){\n       \
    \     var path = [];\n            var pathSum = 0;\n            dfs(grid, i, j,\
    \ k, path, pathSum, visited);\n            if(pathSum < minPathSum){\n       \
    \         minPathSum = pathSum;\n                minPath = path;\n           \
    \ }\n        }\n    }\n    return minPath;\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let min = [];\n    let min_value = Infinity;\n\
    \    for(let i = 0; i < n; i++){\n        for(let j = 0; j < m; j++){\n      \
    \      let path = [];\n            let value = dfs(grid, i, j, k, path);\n   \
    \         if(value < min_value){\n                min_value = value;\n       \
    \         min = path;\n            }\n        }\n    }\n    return min;\n}\n",
  "    // your code here\n}\n", "    // Your code here\n}\n", "    let n = grid.length;\n\
    \    let m = grid[0].length;\n    let visited = new Array(n);\n    for(let i =\
    \ 0; i < n; i++){\n        visited[i] = new Array(m).fill(false);\n    }\n   \
    \ let min = [];\n    let minSum = Infinity;\n    for(let i = 0; i < n; i++){\n\
    \        for(let j = 0; j < m; j++){\n            let path = [];\n           \
    \ let sum = 0;\n            dfs(i, j, k, path, sum);\n        }\n    }\n    return\
    \ min;\n    function dfs(i, j, k, path, sum){\n        if(i < 0 || i >= n || j\
    \ < 0 || j >= m || visited[i][j]){\n            return;\n        }\n        if(path.length\
    \ === k){\n            if(sum < minSum){\n                minSum = sum;\n    \
    \            min = path.slice();\n            }\n            return;\n       \
    \ }\n        visited[i][j] = true;\n        path.push(grid[i][j]);\n        sum\
    \ += grid[i][j];\n        dfs(i + 1, j, k, path, sum);\n        dfs(i - 1, j,\
    \ k, path, sum);\n        dfs(i, j + 1, k, path, sum);\n        dfs(i, j - 1,\
    \ k, path, sum);\n        path.pop();\n        sum -= grid[i][j];\n        visited[i][j]\
    \ = false;\n    }\n}\n", "    // Your code here\n}\n", "    var n = grid.length;\n\
    \    var m = grid[0].length;\n    var minPath = [];\n    var minPathSum = Infinity;\n\
    \    var minPathSum2 = Infinity;\n    var minPath2 = [];\n    var minPathSum3\
    \ = Infinity;\n    var minPath3 = [];\n    var minPathSum4 = Infinity;\n    var\
    \ minPath4 = [];\n    var minPathSum5 = Infinity;\n    var minPath5 = [];\n  \
    \  var minPathSum6 = Infinity;\n    var minPath6 = [];\n    var minPathSum7 =\
    \ Infinity;\n    var minPath7 = [];\n    var minPathSum8 = Infinity;\n    var\
    \ minPath8 = [];\n    var minPathSum9 = Infinity;\n    var minPath9 = [];\n  \
    \  var minPathSum10 = Infinity;\n    var minPath10 = [];\n    var minPathSum11\
    \ = Infinity;\n    var minPath11 = [];\n    var minPathSum12 = Infinity;\n   \
    \ var minPath12 = [];\n    var minPathSum13 = Infinity;\n    var minPath13 = [];\n\
    \    var minPathSum14 = Infinity;\n    var minPath14 = [];\n    var minPathSum15\
    \ = Infinity;\n    var minPath15 = [];\n    var minPathSum16 = Infinity;\n   \
    \ var minPath16 = [];\n    var minPathSum17 = Infinity;\n    var minPath17 = [];\n\
    \    var minPathSum18 = Infinity;\n    var minPath18 = [];\n    var minPathSum19\
    \ = Infinity;\n    var minPath19 = [];\n    var minPathSum20 = Infinity;\n   \
    \ var minPath20 = [];\n    var minPathSum21 = Infinity;\n    var minPath21 = [];\n\
    \    var minPathSum22 = Infinity;\n    var minPath22 = [];\n    var minPathSum23\
    \ = Infinity;\n    var minPath23 = [];\n    var minPathSum24 = Infinity;\n   \
    \ var minPath24 = [];\n    var minPathSum25 = Infinity;\n    var minPath25 = [];\n\
    \    var minPathSum26 = Infinity;\n    var minPath26 = [];\n    var minPathSum27\
    \ = Infinity;\n    var minPath27 = [];\n    var minPathSum28 =", "    // Your\
    \ code here\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
