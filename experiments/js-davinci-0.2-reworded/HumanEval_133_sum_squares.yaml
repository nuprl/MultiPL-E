name: HumanEval_133_sum_squares
language: js
prompt: "//You are given an array of numbers.\n// You need to return the sum of squared\
  \ numbers in the given array,\n// round each element in the array to the upper int(Ceiling)\
  \ first.\n// Examples:\n// >>> lst\n// [1, 2, 3]\n// >>> lst\n// [1, 4, 9]\n// >>>\
  \ lst\n// [1, 3, 5, 7]\n// >>> lst\n// [1.4, 4.2, 0]\n// >>> lst\n// [-2.4, 1, 1]\n\
  function sum_squares(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sum_squares;\n  assert.deepEqual(candidate([1, 2, 3]),14);\n  assert.deepEqual(candidate([1.0,\
  \ 2, 3]),14);\n  assert.deepEqual(candidate([1, 3, 5, 7]),84);\n  assert.deepEqual(candidate([1.4,\
  \ 4.2, 0]),29);\n  assert.deepEqual(candidate([-2.4, 1, 1]),6);\n  assert.deepEqual(candidate([100,\
  \ 1, 15, 2]),10230);\n  assert.deepEqual(candidate([10000, 10000]),200000000);\n\
  \  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4,\
  \ 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0]),0);\n  assert.deepEqual(candidate([-1]),1);\n\
  \  assert.deepEqual(candidate([-1, 1, 0]),2);\n}\n\ntest();"
completions: ["    return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n\
    }\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a,b) => a+b, 0);\n}\n",
  "    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        result\
    \ += Math.ceil(lst[i]) ** 2;\n    }\n    return result;\n}", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a, b) => a + b ** 2, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    let result = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        lst[i] = Math.ceil(lst[i]);\n\
    \        result += lst[i] * lst[i];\n    }\n    return result;\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)**2).reduce((a,b) => a+b);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a, b) => a + b ** 2, 0);\n}\n", "    return lst.map(Math.ceil).reduce((a,b)\
    \ => a+b**2,0);\n}", "    return lst.map(x => Math.ceil(x)**2).reduce((a, b) =>\
    \ a + b);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b,\
    \ 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b**2,\
    \ 0);\n}\n", "    return lst.map(x => Math.ceil(x) ** 2).reduce((a, b) => a +\
    \ b);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b**2,\
    \ 0);\n}\n", "    return lst.map(Math.ceil).reduce((a,b) => a + b * b, 0);\n}\n",
  "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "   \
    \ return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a, b) => a + b ** 2, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "    return lst.map(x =>\
    \ Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return lst.map(x =>\
    \ Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "    return lst.map(x =>\
    \ Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "    return lst.map(x =>\
    \ Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b)\
    \ => a + b*b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a,b)\
    \ => a+b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a,b) =>\
    \ a+b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b**2,\
    \ 0);\n}\n", "    return lst.map(Math.ceil).reduce((a,b)=>a+b*b,0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((x, y) => x + y * y, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)**2).reduce((a,b) => a+b, 0);\n}\n", "   \
    \ return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "  \
    \  return lst.map(x => Math.ceil(x)).reduce((x,y) => x + y * y, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)**2).reduce((a,b) => a+b, 0);\n}\n", "   \
    \ return lst.map(x => Math.ceil(x)**2).reduce((x,y) => x+y)\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)**2).reduce((a, b) => a + b, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a,b) => a + b * b, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a, b) => a + b**2, 0);\n}\n", "    return lst.map(Math.ceil).reduce((a,b)\
    \ => a + b*b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a,b)\
    \ => a+b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a\
    \ + b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x) ** 2).reduce((a, b)\
    \ => a + b);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a\
    \ + b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a\
    \ + b**2, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a\
    \ + b*b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a, b) =>\
    \ a + b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a\
    \ + b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a\
    \ + b*b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a\
    \ + b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a\
    \ + b*b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a\
    \ + b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a,b) =>\
    \ a+b);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b**2,\
    \ 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n\
    }\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n\
    }\n", "    return lst.map(x => Math.ceil(x)).reduce((x,y) => x + y*y, 0);\n}\n",
  "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "   \
    \ return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "  \
    \  return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "   \
    \ return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)**2).reduce((a,b) => a+b, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x) ** 2).reduce((a, b) => a + b, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "    return lst.map(x =>\
    \ Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "    return lst.map(x =>\
    \ Math.ceil(x)**2).reduce((a,b) => a+b);\n}\n", "    return lst.map(function(x){\n\
    \        return Math.ceil(x);\n    }).map(function(x){\n        return x*x;\n\
    \    }).reduce(function(x,y){\n        return x+y;\n    });\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a, b) => a + b**2, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((x, y) => x + y * y, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}", "    return lst.map(Math.ceil).reduce((a,b)\
    \ => a + b*b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a,b)\
    \ => a+b);\n}\n", "    return lst.map(Math.ceil).reduce((a, b) => a + b ** 2,\
    \ 0);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a, b) => a + b,\
    \ 0);\n}", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b,\
    \ 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n\
    }", "    return lst.map(Math.ceil).reduce((a,b) => a + b**2, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a, b) => a + b ** 2, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a, b) => a + b ** 2, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)**2).reduce((a, b) => a + b);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "    return lst.map(x =>\
    \ Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return lst.map(x =>\
    \ Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b)\
    \ => a + b*b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) =>\
    \ a + b**2, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) =>\
    \ a + b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) =>\
    \ a + b*b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a\
    \ + b**2, 0);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a, b) =>\
    \ a + b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a +\
    \ b*b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a,b) => a+b,\
    \ 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((x,y) => x + y*y, 0);\n\
    }\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b ** 2, 0);\n\
    }\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a,b) => a+b);\n}", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x) ** 2).reduce((a, b) => a + b, 0);\n}\n",
  "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "  \
    \  return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "  \
    \  return lst.map(x => Math.ceil(x)**2).reduce((a,b) => a+b);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((x, y) => x + y ** 2, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a, b) => a + b ** 2, 0);\n}\n", "    let\
    \ sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.ceil(lst[i])\
    \ ** 2;\n    }\n    return sum;\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,\
    \ b) => a + b ** 2, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b)\
    \ => a + b*b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((x,y) =>\
    \ x + y**2, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) =>\
    \ a + b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) =>\
    \ a + b ** 2, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b)\
    \ => a + b ** 2, 0);\n}\n", "    return lst.map(x => Math.ceil(x) ** 2).reduce((a,\
    \ b) => a + b);\n}\n", "    return lst.map(Math.ceil).reduce((a,b) => a+b*b, 0);\n\
    }\n", "    return lst.map(x => Math.ceil(x)).reduce((x, y) => x + y * y, 0);\n\
    }\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n",
  "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "   \
    \ return lst.map(x => Math.ceil(x)).reduce((acc, x) => acc + x*x, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "  \
    \  return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "   \
    \ return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)**2).reduce((a, b) => a + b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "  \
    \  return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)**2).reduce((a,b) => a+b, 0);\n}\n", "   \
    \ return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b ** 2, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((acc, x) => acc + x * x, 0);\n}\n",
  "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "  \
    \  return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "   \
    \ return lst.map(x => Math.ceil(x)**2).reduce((x,y) => x+y);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)**2).reduce((a, b) => a + b);\n}\n", "    return lst.map(x =>\
    \ Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "    return lst.map(x =>\
    \ Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return lst.map(x =>\
    \ Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return lst.map(x =>\
    \ Math.ceil(x)**2).reduce((a,b) => a+b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a,b)\
    \ => a+b, 0);\n}\n", "    return lst.map(x => Math.ceil(x) ** 2).reduce((a, b)\
    \ => a + b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) =>\
    \ a + b**2, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) =>\
    \ a + b*b, 0);\n}\n", "    return lst.map(Math.ceil).reduce((a,b) => a + b*b,\
    \ 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n\
    }\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a, b) => a + b);\n}\n",
  "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "  \
    \  return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "  \
    \  return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b, 0);\n}\n", "  \
    \  return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(Math.ceil).reduce((a,b) => a + b**2, 0);\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)**2).reduce((a,b) => a+b);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((x, y) => x + y * y, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((a,b) => a + b**2, 0);\n}\n", "    return lst.map(x\
    \ => Math.ceil(x)**2).reduce((a,b) => a+b);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a,b)\
    \ => a+b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a\
    \ + b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) =>\
    \ a + b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) =>\
    \ a + b**2, 0);\n}\n", "    return lst.map(x => Math.ceil(x) ** 2).reduce((a,\
    \ b) => a + b);\n}\n", "    return lst.map(x => Math.ceil(x) ** 2).reduce((a,\
    \ b) => a + b);\n}", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a\
    \ + b ** 2, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((x,y) =>\
    \ x + y**2, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((x,y) =>\
    \ x + y*y, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) =>\
    \ a + b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) =>\
    \ a + b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a,b)\
    \ => a+b);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a +\
    \ b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a\
    \ + b * b, 0);\n}\n", "    return lst.map(Math.ceil).reduce((a, b) => a + b *\
    \ b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b\
    \ ** 2, 0);\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a +\
    \ b * b, 0);\n}\n", "    return lst.map(x => Math.ceil(x)**2).reduce((a,b) =>\
    \ a+b, 0);\n}\n", "    return lst.map(Math.ceil).reduce((a,b) => a + b**2, 0);\n\
    }\n", "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n\
    }\n", "    return lst.map(x => Math.ceil(x)).reduce((x,y) => x + y*y, 0);\n}\n",
  "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b ** 2, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", " \
    \   return lst.map(x => Math.ceil(x)**2).reduce((a,b) => a+b, 0);\n}\n", "   \
    \ return lst.map(e => Math.ceil(e)).reduce((a, b) => a + b * b, 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
