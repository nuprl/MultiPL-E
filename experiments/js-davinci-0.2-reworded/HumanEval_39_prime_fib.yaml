name: HumanEval_39_prime_fib
language: js
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
  \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
  \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
  \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
  \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
completions: ["    var fib = fibonacci(n);\n    var prime = prime_numbers(fib);\n\
    \    return prime[n-1];\n}\n", "    var f = fibonacci(n);\n    var p = prime(n);\n\
    \    var i = 0;\n    var j = 0;\n    var result = 0;\n    while(i < n){\n    \
    \    while(j < n){\n            if(f[i] == p[j]){\n                result = f[i];\n\
    \                i = n;\n                break;\n            }\n            j++;\n\
    \        }\n        i++;\n    }\n    return result;\n}\n", "    var i = 0;\n \
    \   var j = 1;\n    var k = 0;\n    var count = 0;\n    while(count < n){\n  \
    \      k = i + j;\n        i = j;\n        j = k;\n        if(is_prime(k)){\n\
    \            count++;\n        }\n    }\n    return k;\n}\n", "    let fib = fibonacci(n);\n\
    \    let prime = prime_numbers(fib);\n    return prime[n-1];\n}\n", "    var fib\
    \ = fibonacci(n);\n    var i = 0;\n    while(!is_prime(fib)){\n        fib = fibonacci(n+i);\n\
    \        i++;\n    }\n    return fib;\n}\n", "    var fib = fibonacci(n);\n  \
    \  var prime = prime_number(n);\n    var prime_fib = [];\n    for(var i = 0; i\
    \ < fib.length; i++){\n        for(var j = 0; j < prime.length; j++){\n      \
    \      if(fib[i] == prime[j]){\n                prime_fib.push(fib[i]);\n    \
    \        }\n        }\n    }\n    return prime_fib[n-1];\n}\n", "    var fib_list\
    \ = [2,3];\n    var i = 2;\n    while(i < n){\n        fib_list.push(fib_list[i-1]\
    \ + fib_list[i-2]);\n        i++;\n    }\n    return fib_list[n-1];\n}\n", " \
    \   var fib = fibonacci(n);\n    var prime = prime_numbers(fib);\n    return prime[n-1];\n\
    }\n", "    var fib = fibonacci(n);\n    var i = 0;\n    while(i < fib.length){\n\
    \        if(is_prime(fib[i])){\n            return fib[i];\n        }\n      \
    \  i++;\n    }\n}\n", "    var fibs = [2,3];\n    var i = 2;\n    while(i < n){\n\
    \        fibs.push(fibs[i-1] + fibs[i-2]);\n        i++;\n    }\n    return fibs[n-1];\n\
    }\n", "    var fib = fibonacci(n);\n    var prime = prime_number(n);\n    var\
    \ i = 0;\n    var j = 0;\n    while(i < n){\n        if(fib[i] == prime[j]){\n\
    \            return fib[i];\n        }\n        else if(fib[i] < prime[j]){\n\
    \            i++;\n        }\n        else{\n            j++;\n        }\n   \
    \ }\n}\n", "    var fib = fibonacci(n);\n    var prime = prime_number(n);\n  \
    \  var prime_fib = [];\n    for(var i = 0; i < fib.length; i++){\n        for(var\
    \ j = 0; j < prime.length; j++){\n            if(fib[i] == prime[j]){\n      \
    \          prime_fib.push(fib[i]);\n            }\n        }\n    }\n    return\
    \ prime_fib[n-1];\n}\n", "    var fib = fibonacci(n);\n    var prime = prime_number(n);\n\
    \    var prime_fib = [];\n    for(var i = 0; i < fib.length; i++){\n        for(var\
    \ j = 0; j < prime.length; j++){\n            if(fib[i] == prime[j]){\n      \
    \          prime_fib.push(fib[i]);\n            }\n        }\n    }\n    return\
    \ prime_fib[n-1];\n}\n", "    var fib = fibonacci(n);\n    var prime = prime_number(n);\n\
    \    var result = [];\n    for(var i = 0; i < fib.length; i++){\n        for(var\
    \ j = 0; j < prime.length; j++){\n            if(fib[i] == prime[j]){\n      \
    \          result.push(fib[i]);\n            }\n        }\n    }\n    return result[n-1];\n\
    }\n", "\tvar i = 1;\n\tvar fib = 1;\n\tvar fib_prev = 1;\n\tvar fib_prev_prev\
    \ = 0;\n\twhile(i<n){\n\t\tfib_prev_prev = fib_prev;\n\t\tfib_prev = fib;\n\t\t\
    fib = fib_prev + fib_prev_prev;\n\t\tif(is_prime(fib)){\n\t\t\ti++;\n\t\t}\n\t\
    }\n\treturn fib;\n}\n", "    var fib = fibonacci(n);\n    var prime = prime_number(n);\n\
    \    var prime_fib = [];\n    for(var i = 0; i < fib.length; i++){\n        for(var\
    \ j = 0; j < prime.length; j++){\n            if(fib[i] == prime[j]){\n      \
    \          prime_fib.push(fib[i]);\n            }\n        }\n    }\n    return\
    \ prime_fib[n-1];\n}\n", "    var fib = fibonacci(n);\n    var prime = prime_number(n);\n\
    \    var i = 0;\n    var j = 0;\n    while(i < fib.length && j < prime.length){\n\
    \        if(fib[i] == prime[j]){\n            return fib[i];\n        }\n    \
    \    else if(fib[i] < prime[j]){\n            i++;\n        }\n        else{\n\
    \            j++;\n        }\n    }\n}\n", "\tvar fib_num = fib(n);\n\twhile(!is_prime(fib_num)){\n\
    \t\tn++;\n\t\tfib_num = fib(n);\n\t}\n\treturn fib_num;\n}\n", "  var fibs = [2,3];\n\
    \  var i = 2;\n  while(i < n){\n    fibs.push(fibs[i-1] + fibs[i-2]);\n    i++;\n\
    \  }\n  return fibs[n-1];\n}\n", "    var i = 0;\n    var fib = 0;\n    var prime\
    \ = 0;\n    while(i < n){\n        fib = fibonacci(i);\n        if(is_prime(fib)){\n\
    \            prime = fib;\n            i++;\n        }\n    }\n    return prime;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
