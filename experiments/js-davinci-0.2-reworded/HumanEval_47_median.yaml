name: HumanEval_47_median
language: js
prompt: "//Return median of elements in the array l.\n// >>> median([3, 1, 2, 4, 5])\n\
  // 3\n// >>> median([-10, 4, 6, 1000, 10, 20])\n// 15.0\nfunction median(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = median;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),3);\n  assert.deepEqual(candidate([-10,\
  \ 4, 6, 1000, 10, 20]),8.0);\n  assert.deepEqual(candidate([5]),5);\n  assert.deepEqual(candidate([6,\
  \ 5]),5.5);\n  assert.deepEqual(candidate([8, 1, 3, 9, 9, 2, 7]),7);\n}\n\ntest();"
completions: ["    var sorted = l.sort(function(a, b){return a-b});\n    var len =\
    \ sorted.length;\n    if (len % 2 == 0){\n        return (sorted[len/2] + sorted[len/2\
    \ - 1])/2;\n    }\n    else{\n        return sorted[Math.floor(len/2)];\n    }\n\
    }\n", "    var sorted = l.sort(function(a, b){return a-b});\n    var length =\
    \ sorted.length;\n    if (length % 2 == 0){\n        return (sorted[length/2]\
    \ + sorted[length/2 - 1])/2;\n    }\n    else{\n        return sorted[Math.floor(length/2)];\n\
    \    }\n}\n", "    var sorted = l.sort(function(a, b){return a-b});\n    var length\
    \ = sorted.length;\n    if (length % 2 == 0){\n        return (sorted[length/2]\
    \ + sorted[length/2 - 1])/2;\n    }\n    else{\n        return sorted[Math.floor(length/2)];\n\
    \    }\n}\n", "    var sorted = l.sort(function(a, b){return a-b});\n    var mid\
    \ = Math.floor(sorted.length/2);\n    if (sorted.length % 2 === 0){\n        return\
    \ (sorted[mid] + sorted[mid-1])/2;\n    }\n    else{\n        return sorted[mid];\n\
    \    }\n}\n", "    var sorted = l.sort(function(a, b){return a-b});\n    var mid\
    \ = Math.floor(sorted.length/2);\n    if (sorted.length % 2 === 0){\n        return\
    \ (sorted[mid] + sorted[mid-1])/2;\n    }\n    else{\n        return sorted[mid];\n\
    \    }\n}\n", "    var sorted = l.sort(function(a, b){return a-b});\n    var mid\
    \ = Math.floor(sorted.length/2);\n    if (sorted.length % 2 == 0){\n        return\
    \ (sorted[mid] + sorted[mid-1])/2;\n    }\n    else{\n        return sorted[mid];\n\
    \    }\n}\n", "\tvar sorted = l.sort(function(a,b){return a-b});\n\tvar len =\
    \ sorted.length;\n\tvar mid = Math.floor(len/2);\n\tif(len % 2 == 0){\n\t\treturn\
    \ (sorted[mid] + sorted[mid-1])/2;\n\t}\n\telse{\n\t\treturn sorted[mid];\n\t\
    }\n}\n", "    var sorted = l.sort(function(a, b){return a-b});\n    var middle\
    \ = Math.floor(sorted.length/2);\n    if (sorted.length % 2 == 0){\n        return\
    \ (sorted[middle-1] + sorted[middle])/2;\n    } else {\n        return sorted[middle];\n\
    \    }\n}\n", "    var m = l.length/2;\n    if(l.length % 2 == 0){\n        return\
    \ (l[m-1] + l[m])/2;\n    }\n    else{\n        return l[Math.floor(m)];\n   \
    \ }\n}\n", "    var sorted = l.sort(function(a, b){return a-b});\n    var len\
    \ = sorted.length;\n    if (len % 2 == 0){\n        return (sorted[len/2] + sorted[len/2\
    \ - 1])/2;\n    }\n    else{\n        return sorted[Math.floor(len/2)];\n    }\n\
    }\n", "    var m = l.length / 2;\n    if (l.length % 2 == 0){\n        return\
    \ (l[m] + l[m-1]) / 2;\n    }\n    else{\n        return l[Math.floor(m)];\n \
    \   }\n}\n", "    var sorted = l.sort(function(a, b){return a-b});\n    var len\
    \ = sorted.length;\n    if (len % 2 == 0){\n        return (sorted[len/2] + sorted[len/2\
    \ - 1])/2.0;\n    }\n    else{\n        return sorted[Math.floor(len/2)];\n  \
    \  }\n}\n", "    var sorted = l.sort(function(a, b){return a-b});\n    var half\
    \ = Math.floor(sorted.length/2);\n    if(sorted.length % 2)\n        return sorted[half];\n\
    \    else\n        return (sorted[half-1] + sorted[half]) / 2.0;\n}\n", "    var\
    \ m = l.length/2;\n    if(l.length % 2 == 0){\n        return (l[m-1] + l[m])/2;\n\
    \    }\n    else{\n        return l[Math.floor(m)];\n    }\n}\n", "    var l =\
    \ l.sort(function(a, b){return a-b});\n    var mid = Math.floor(l.length/2);\n\
    \    if (l.length % 2 == 0){\n        return (l[mid] + l[mid-1])/2;\n    }\n \
    \   else{\n        return l[mid];\n    }\n}\n", "    var sum = 0;\n    for(var\
    \ i = 0; i < l.length; i++){\n        sum += l[i];\n    }\n    return sum / l.length;\n\
    }\n", "    var sorted = l.sort(function(a, b){return a-b});\n    var len = sorted.length;\n\
    \    if (len % 2 == 0){\n        return (sorted[len/2] + sorted[len/2 - 1])/2;\n\
    \    }\n    else{\n        return sorted[Math.floor(len/2)];\n    }\n}\n", " \
    \   var l = l.sort(function(a, b){return a-b});\n    if (l.length % 2 == 0){\n\
    \        return (l[l.length/2] + l[l.length/2 - 1])/2;\n    }\n    else{\n   \
    \     return l[Math.floor(l.length/2)];\n    }\n}\n", "    var sorted = l.sort(function(a,\
    \ b){return a-b});\n    var len = sorted.length;\n    if (len % 2 == 0){\n   \
    \     return (sorted[len/2] + sorted[len/2 - 1])/2;\n    }\n    else{\n      \
    \  return sorted[Math.floor(len/2)];\n    }\n}\n", "    var n = l.length;\n  \
    \  var m = Math.floor(n/2);\n    if (n % 2 == 0){\n        return (l[m-1] + l[m])/2;\n\
    \    }\n    else{\n        return l[m];\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
