name: HumanEval_70_strange_sort_list
language: js
prompt: "//Given array of integers, return array in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1,\
  \ 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n\
  \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4,\
  \ 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2,\
  \ 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["    if(lst.length === 0){\n        return lst;\n    }\n    var min\
    \ = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n   \
    \ var result = [];\n    var i = 0;\n    while(lst.length > 0){\n        if(i %\
    \ 2 === 0){\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else{\n\
    \            result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n\
    \            max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return result;\n}\n", "    if (lst.length === 0){\n        return [];\n \
    \   }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var minIndex = lst.indexOf(min);\n    var maxIndex = lst.indexOf(max);\n\
    \    var newList = [];\n    newList.push(min);\n    newList.push(max);\n    lst.splice(minIndex,\
    \ 1);\n    lst.splice(maxIndex - 1, 1);\n    if (lst.length === 0){\n        return\
    \ newList;\n    }\n    return newList.concat(strange_sort_list(lst));\n}\n", " \
    \   if (lst.length == 0) {\n        return [];\n    }\n    lst.sort(function(a,\
    \ b){return a-b});\n    var result = [];\n    var i = 0;\n    var j = lst.length\
    \ - 1;\n    while (i < j) {\n        result.push(lst[i]);\n        result.push(lst[j]);\n\
    \        i++;\n        j--;\n    }\n    if (i == j) {\n        result.push(lst[i]);\n\
    \    }\n    return result;\n}\n", "    if (lst.length == 0) {\n        return\
    \ [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [];\n    var i = 0;\n    while (i < lst.length) {\n\
    \        if (i % 2 == 0) {\n            result.push(min);\n            min = Math.min.apply(null,\
    \ lst.filter(function(x) { return x > min; }));\n        } else {\n          \
    \  result.push(max);\n            max = Math.max.apply(null, lst.filter(function(x)\
    \ { return x < max; }));\n        }\n        i++;\n    }\n    return result;\n\
    }\n", "    if (lst.length == 0) return [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    var lst_1 = lst.slice(0, min_index).concat(lst.slice(min_index + 1));\n \
    \   var lst_2 = lst_1.slice(0, max_index - 1).concat(lst_1.slice(max_index));\n\
    \    new_lst.push(max);\n    var lst_3 = lst_2.slice(0, max_index - 1).concat(lst_2.slice(max_index));\n\
    \    var lst_4 = lst_3.slice(0, min_index).concat(lst_3.slice(min_index + 1));\n\
    \    new_lst = new_lst.concat(strange_sort_list(lst_4));\n    return new_lst;\n\
    }\n", "    if(lst.length === 0) return [];\n    let sorted = lst.sort((a,b) =>\
    \ a-b);\n    let result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n\
    \    while(i <= j){\n        result.push(sorted[i]);\n        i++;\n        if(i\
    \ <= j){\n            result.push(sorted[j]);\n            j--;\n        }\n \
    \   }\n    return result;\n}\n", "    if(lst.length === 0){\n        return [];\n\
    \    }\n    if(lst.length === 1){\n        return lst;\n    }\n    var min = Math.min(...lst);\n\
    \    var max = Math.max(...lst);\n    var minIndex = lst.indexOf(min);\n    var\
    \ maxIndex = lst.indexOf(max);\n    var newLst = [];\n    newLst.push(min);\n\
    \    newLst.push(max);\n    lst.splice(minIndex, 1);\n    lst.splice(maxIndex\
    \ - 1, 1);\n    return newLst.concat(strange_sort_list(lst));\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    if (lst.length == 1) {\n        return\
    \ lst;\n    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    var new_lst_2 = [];\n    for (var i = 0; i < lst.length;\
    \ i++) {\n        if (i == min_index) {\n            new_lst.push(min);\n    \
    \    }\n        else if (i == max_index) {\n            new_lst.push(max);\n \
    \       }\n        else {\n            new_lst_2.push(lst[i]);\n        }\n  \
    \  }\n    return new_lst.concat(strange_sort_list(new_lst_2));\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    var\
    \ result = [];\n    var lst_copy = lst.slice();\n    var min_index = 0;\n    var\
    \ max_index = 0;\n    for (var i = 0; i < lst.length; i++){\n        min_index\
    \ = lst_copy.indexOf(Math.min.apply(null, lst_copy));\n        max_index = lst_copy.indexOf(Math.max.apply(null,\
    \ lst_copy));\n        result.push(lst_copy[min_index]);\n        result.push(lst_copy[max_index]);\n\
    \        lst_copy.splice(min_index, 1);\n        lst_copy.splice(max_index - 1,\
    \ 1);\n    }\n    return result;\n}\n", "    if(lst.length == 0){\n        return\
    \ [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    var new_lst_2\
    \ = [];\n    for (var i = 0; i < lst.length; i++) {\n        if (i == min_index)\
    \ {\n            new_lst.push(min);\n        } else if (i == max_index) {\n  \
    \          new_lst.push(max);\n        } else {\n            new_lst_2.push(lst[i]);\n\
    \        }\n    }\n    return new_lst.concat(strange_sort_list(new_lst_2));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    var i = 0;\n\
    \    while (i < lst.length) {\n        if (i % 2 == 0) {\n            new_lst.push(min);\n\
    \            lst.splice(min_index, 1);\n            min = Math.min.apply(null,\
    \ lst);\n            min_index = lst.indexOf(min);\n        } else {\n       \
    \     new_lst.push(max);\n            lst.splice(max_index, 1);\n            max\
    \ = Math.max.apply(null, lst);\n            max_index = lst.indexOf(max);\n  \
    \      }\n        i++;\n    }\n    return new_lst;\n}\n", "    if (lst.length\
    \ == 0) {\n        return lst;\n    }\n    var res = [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    res.push(min);\n    res.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    return\
    \ res.concat(strange_sort_list(lst));\n}\n", "    if (lst.length == 0) {\n   \
    \     return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max\
    \ = Math.max.apply(null, lst);\n    var result = [min];\n    var i = 0;\n    while\
    \ (i < lst.length) {\n        if (lst[i] != min) {\n            result.push(lst[i]);\n\
    \        }\n        i++;\n    }\n    i = 0;\n    while (i < lst.length) {\n  \
    \      if (lst[i] != max) {\n            result.push(lst[i]);\n        }\n   \
    \     i++;\n    }\n    return result;\n}\n", "    if(lst.length == 0) return [];\n\
    \    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var res\
    \ = [];\n    var i = 0;\n    while(res.length < lst.length){\n        if(i % 2\
    \ == 0){\n            res.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        }\n        else{\n       \
    \     res.push(max);\n            lst.splice(lst.indexOf(max), 1);\n         \
    \   max = Math.max(...lst);\n        }\n        i++;\n    }\n    return res;\n\
    }\n", "    if(lst.length === 0){\n        return [];\n    }\n    var min = Math.min(...lst);\n\
    \    var max = Math.max(...lst);\n    var new_lst = [];\n    var i = 0;\n    while(new_lst.length\
    \ < lst.length){\n        if(i % 2 === 0){\n            new_lst.push(min);\n \
    \           lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        }\n        else{\n            new_lst.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return new_lst;\n}\n", "    if (lst.length == 0) return [];\n    var min =\
    \ Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n    var\
    \ new_lst = [];\n    var i = 0;\n    while (i < lst.length) {\n        new_lst.push(min);\n\
    \        new_lst.push(max);\n        i += 2;\n    }\n    return new_lst;\n}\n",
  "    if(lst.length == 0){\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if(lst.length\
    \ === 0){\n        return [];\n    }\n    var min = Math.min(...lst);\n    var\
    \ max = Math.max(...lst);\n    var new_lst = [];\n    var i = 0;\n    while(i\
    \ < lst.length){\n        new_lst.push(min);\n        new_lst.push(max);\n   \
    \     i += 2;\n    }\n    return new_lst;\n}\n", "    if(lst.length == 0){\n \
    \       return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max\
    \ = Math.max.apply(null, lst);\n    var result = [];\n    var i = 0;\n    while(lst.length\
    \ > 0){\n        if(i % 2 == 0){\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else{\n\
    \            result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n\
    \            max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return result;\n}\n", "    if(lst.length === 0) return [];\n    let min =\
    \ Math.min(...lst);\n    let max = Math.max(...lst);\n    let new_lst = [];\n\
    \    let i = 0;\n    while(new_lst.length < lst.length){\n        if(i % 2 ===\
    \ 0){\n            new_lst.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        }\n        else{\n       \
    \     new_lst.push(max);\n            lst.splice(lst.indexOf(max), 1);\n     \
    \       max = Math.max(...lst);\n        }\n        i++;\n    }\n    return new_lst;\n\
    }\n", "    if (lst.length == 0){\n        return [];\n    }\n    var result =\
    \ [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var min_removed = lst.splice(min_index, 1);\n    var max_removed = lst.splice(max_index\
    \ - 1, 1);\n    result.push(min_removed[0]);\n    result.push(max_removed[0]);\n\
    \    return result.concat(strange_sort_list(lst));\n}\n", "    if(lst.length ==\
    \ 0){\n        return [];\n    }\n    else if(lst.length == 1){\n        return\
    \ lst;\n    }\n    else{\n        var min = Math.min(...lst);\n        var max\
    \ = Math.max(...lst);\n        var min_index = lst.indexOf(min);\n        var\
    \ max_index = lst.indexOf(max);\n        var new_lst = [];\n        new_lst.push(min);\n\
    \        new_lst.push(max);\n        lst.splice(min_index, 1);\n        lst.splice(max_index-1,\
    \ 1);\n        return new_lst.concat(strange_sort_list(lst));\n    }\n}\n", " \
    \   if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    for (var i\
    \ = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n            new_lst.push(min);\n\
    \            lst.splice(min_index, 1);\n            min = Math.min.apply(null,\
    \ lst);\n            min_index = lst.indexOf(min);\n        } else {\n       \
    \     new_lst.push(max);\n            lst.splice(max_index, 1);\n            max\
    \ = Math.max.apply(null, lst);\n            max_index = lst.indexOf(max);\n  \
    \      }\n    }\n    return new_lst;\n}\n", "    if (lst.length == 0) {\n    \
    \    return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max\
    \ = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n    var\
    \ max_index = lst.indexOf(max);\n    var new_lst = [];\n    var new_lst_1 = [];\n\
    \    var new_lst_2 = [];\n    var new_lst_3 = [];\n    var new_lst_4 = [];\n \
    \   var new_lst_5 = [];\n    var new_lst_6 = [];\n    var new_lst_7 = [];\n  \
    \  var new_lst_8 = [];\n    var new_lst_9 = [];\n    var new_lst_10 = [];\n  \
    \  var new_lst_11 = [];\n    var new_lst_12 = [];\n    var new_lst_13 = [];\n\
    \    var new_lst_14 = [];\n    var new_lst_15 = [];\n    var new_lst_16 = [];\n\
    \    var new_lst_17 = [];\n    var new_lst_18 = [];\n    var new_lst_19 = [];\n\
    \    var new_lst_20 = [];\n    var new_lst_21 = [];\n    var new_lst_22 = [];\n\
    \    var new_lst_23 = [];\n    var new_lst_24 = [];\n    var new_lst_25 = [];\n\
    \    var new_lst_26 = [];\n    var new_lst_27 = [];\n    var new_lst_28 = [];\n\
    \    var new_lst_29 = [];\n    var new_lst_30 = [];\n    var new_lst_31 = [];\n\
    \    var new_lst_32 = [];\n    var new_lst_33 = [];\n    var new_lst_34 = [];\n\
    \    var new_lst_35 = [];\n    var new_lst_36 = [];\n    var new_lst_37 = [];\n\
    \    var new_lst_38 = [];\n    var new", "    if (lst.length == 0) {\n       \
    \ return [];\n    }\n    if (lst.length == 1) {\n        return lst;\n    }\n\
    \    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_list = [];\n    new_list.push(min);\n    new_list.push(max);\n  \
    \  lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    return new_list.concat(strange_sort_list(lst));\n\
    }\n", "    if(lst.length == 0){\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var res = [];\n    var\
    \ min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n    var\
    \ min_count = 0;\n    var max_count = 0;\n    while(res.length != lst.length){\n\
    \        if(min_count == max_count){\n            res.push(min);\n           \
    \ min_count++;\n        }\n        else{\n            res.push(max);\n       \
    \     max_count++;\n        }\n    }\n    return res;\n}\n", "    if (lst.length\
    \ == 0) return [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if\
    \ (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var result = [min];\n \
    \   var lst_copy = lst.slice();\n    lst_copy.splice(lst_copy.indexOf(min), 1);\n\
    \    while (lst_copy.length > 0) {\n        var min = Math.min.apply(null, lst_copy);\n\
    \        var max = Math.max.apply(null, lst_copy);\n        result.push(max);\n\
    \        lst_copy.splice(lst_copy.indexOf(max), 1);\n        if (lst_copy.length\
    \ > 0) {\n            result.push(min);\n            lst_copy.splice(lst_copy.indexOf(min),\
    \ 1);\n        }\n    }\n    return result;\n}\n", "    if(lst.length == 0) return\
    \ [];\n    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var\
    \ result = [];\n    var i = 0;\n    while(i < lst.length){\n        result.push(min);\n\
    \        result.push(max);\n        i++;\n    }\n    return result;\n}\n", " \
    \   if (lst.length == 0) {\n        return [];\n    }\n    if (lst.length == 1)\
    \ {\n        return lst;\n    }\n    var min = Math.min.apply(null, lst);\n  \
    \  var max = Math.max.apply(null, lst);\n    var index_min = lst.indexOf(min);\n\
    \    var index_max = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(index_min, 1);\n    lst.splice(index_max\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    var\
    \ result = [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var min_index_2 = lst.lastIndexOf(min);\n    var max_index_2 = lst.lastIndexOf(max);\n\
    \    var lst_1 = lst.slice(0, min_index);\n    var lst_2 = lst.slice(min_index\
    \ + 1, max_index);\n    var lst_3 = lst.slice(max_index + 1, min_index_2);\n \
    \   var lst_4 = lst.slice(min_index_2 + 1, max_index_2);\n    var lst_5 = lst.slice(max_index_2\
    \ + 1);\n    result.push(min);\n    result.push(max);\n    result.push(lst_1);\n\
    \    result.push(lst_2);\n    result.push(lst_3);\n    result.push(lst_4);\n \
    \   result.push(lst_5);\n    return result;\n}\n", "    if(lst.length == 0){\n\
    \        return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var\
    \ max = Math.max.apply(null, lst);\n    var new_lst = [];\n    var i = 0;\n  \
    \  while(i < lst.length){\n        if(i % 2 == 0){\n            new_lst.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ lst);\n        }\n        else{\n            new_lst.push(max);\n          \
    \  lst.splice(lst.indexOf(max), 1);\n            max = Math.max.apply(null, lst);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n", "    if(lst.length\
    \ == 0) return [];\n    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n\
    \    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var index_min = lst.indexOf(min);\n\
    \    var index_max = lst.indexOf(max);\n    var new_lst = [];\n    var i = 0;\n\
    \    while (i < lst.length) {\n        if (i % 2 == 0) {\n            new_lst.push(min);\n\
    \            lst.splice(index_min, 1);\n            min = Math.min.apply(null,\
    \ lst);\n            index_min = lst.indexOf(min);\n        } else {\n       \
    \     new_lst.push(max);\n            lst.splice(index_max, 1);\n            max\
    \ = Math.max.apply(null, lst);\n            index_max = lst.indexOf(max);\n  \
    \      }\n        i++;\n    }\n    return new_lst;\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    var i = 0;\n\
    \    while (i < lst.length) {\n        if (i % 2 == 0) {\n            new_lst.push(min);\n\
    \            lst.splice(min_index, 1);\n            if (lst.length == 0) {\n \
    \               break;\n            }\n            min = Math.min.apply(null,\
    \ lst);\n            min_index = lst.indexOf(min);\n        } else {\n       \
    \     new_lst.push(max);\n            lst.splice(max_index, 1);\n            if\
    \ (lst.length == 0) {\n                break;\n            }\n            max\
    \ = Math.max.apply(null, lst);\n            max_index = lst.indexOf(max);\n  \
    \      }\n        i++;\n    }\n    return new_lst;\n}\n", "    var res = [];\n\
    \    var lst_copy = lst.slice();\n    var lst_len = lst.length;\n    for (var\
    \ i = 0; i < lst_len; i++) {\n        if (i % 2 === 0) {\n            res.push(Math.min.apply(null,\
    \ lst_copy));\n        } else {\n            res.push(Math.max.apply(null, lst_copy));\n\
    \        }\n        lst_copy.splice(lst_copy.indexOf(res[i]), 1);\n    }\n   \
    \ return res;\n}\n", "    if (lst.length == 0) {\n        return [];\n    }\n\
    \    if (lst.length == 1) {\n        return lst;\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var result = [];\n    result.push(min);\n\
    \    result.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return result.concat(strange_sort_list(lst));\n}\n", "    if (lst.length\
    \ == 0) {\n        return lst;\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var new_lst = [];\n    var i =\
    \ 0;\n    while (lst.length > 0) {\n        if (i % 2 == 0) {\n            new_lst.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ lst);\n        } else {\n            new_lst.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        }\n        i++;\n\
    \    }\n    return new_lst;\n}\n", "    if(lst.length == 0){\n        return [];\n\
    \    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    var i = 0;\n    while(new_lst.length < lst.length){\n\
    \        if(i % 2 == 0){\n            new_lst.push(min);\n            lst.splice(min_index,\
    \ 1);\n            min = Math.min.apply(null, lst);\n            min_index = lst.indexOf(min);\n\
    \        }\n        else{\n            new_lst.push(max);\n            lst.splice(max_index,\
    \ 1);\n            max = Math.max.apply(null, lst);\n            max_index = lst.indexOf(max);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n", "    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let new_lst = [];\n    let i = 0;\n    while\
    \ (lst.length > 0){\n        if (i % 2 === 0){\n            new_lst.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        }\n        else {\n            new_lst.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return new_lst;\n}\n", "    if (lst.length == 0){\n        return [];\n  \
    \  }\n    if (lst.length == 1){\n        return lst;\n    }\n    var min = lst[0];\n\
    \    var max = lst[0];\n    var min_index = 0;\n    var max_index = 0;\n    for\
    \ (var i = 0; i < lst.length; i++){\n        if (lst[i] < min){\n            min\
    \ = lst[i];\n            min_index = i;\n        }\n        if (lst[i] > max){\n\
    \            max = lst[i];\n            max_index = i;\n        }\n    }\n   \
    \ var new_list = [];\n    new_list.push(min);\n    new_list.push(max);\n    var\
    \ new_lst = [];\n    for (var j = 0; j < lst.length; j++){\n        if (j != min_index\
    \ && j != max_index){\n            new_lst.push(lst[j]);\n        }\n    }\n \
    \   return new_list.concat(strange_sort_list(new_lst));\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    var i = 0;\n\
    \    while(i < lst.length){\n        if(i % 2 == 0){\n            new_lst.push(min);\n\
    \            lst.splice(min_index, 1);\n            min = Math.min.apply(null,\
    \ lst);\n            min_index = lst.indexOf(min);\n        }\n        else{\n\
    \            new_lst.push(max);\n            lst.splice(max_index, 1);\n     \
    \       max = Math.max.apply(null, lst);\n            max_index = lst.indexOf(max);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n", "    var res = [];\n\
    \    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var lst_copy = lst.slice();\n    lst_copy.splice(min_index, 1);\n    lst_copy.splice(max_index,\
    \ 1);\n    res.push(min);\n    res.push(max);\n    while (lst_copy.length > 0){\n\
    \        min = Math.min.apply(null, lst_copy);\n        max = Math.max.apply(null,\
    \ lst_copy);\n        min_index = lst_copy.indexOf(min);\n        max_index =\
    \ lst_copy.indexOf(max);\n        lst_copy.splice(min_index, 1);\n        lst_copy.splice(max_index,\
    \ 1);\n        res.push(min);\n        res.push(max);\n    }\n    return res;\n\
    }\n", "    if (lst.length == 0) {\n        return lst;\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var result = [];\n    var\
    \ i = 0;\n    while (lst.length > 0) {\n        if (i % 2 == 0) {\n          \
    \  result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n         \
    \   min = Math.min.apply(null, lst);\n        } else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max.apply(null,\
    \ lst);\n        }\n        i++;\n    }\n    return result;\n}\n", "    if(lst.length\
    \ === 0){\n        return [];\n    }\n    let min = Math.min(...lst);\n    let\
    \ max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n    let max_index\
    \ = lst.indexOf(max);\n    let new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0) {\n        return lst;\n    }\n    var res = [];\n\
    \    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    res.push(min);\n    res.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return res.concat(strange_sort_list(lst));\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index,\
    \ 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if\
    \ (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if\
    \ (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if\
    \ (lst.length == 0) return [];\n    var lst_sorted = lst.sort(function(a, b){return\
    \ a-b});\n    var lst_sorted_reverse = lst_sorted.reverse();\n    var lst_strange\
    \ = [];\n    for (var i = 0; i < lst.length; i++){\n        if (i % 2 == 0){\n\
    \            lst_strange.push(lst_sorted[i/2]);\n        }\n        else{\n  \
    \          lst_strange.push(lst_sorted_reverse[(i-1)/2]);\n        }\n    }\n\
    \    return lst_strange;\n}\n", "    if (lst.length == 0) return [];\n    var\
    \ res = [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var i = 0;\n    while (lst.length > 0) {\n        if (i % 2 == 0)\
    \ {\n            res.push(min);\n            lst.splice(lst.indexOf(min), 1);\n\
    \            min = Math.min.apply(null, lst);\n        } else {\n            res.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max.apply(null,\
    \ lst);\n        }\n        i++;\n    }\n    return res;\n}\n", "    var result\
    \ = [];\n    var sorted = lst.sort(function(a, b){return a-b});\n    var i = 0;\n\
    \    var j = sorted.length - 1;\n    while (i < j){\n        result.push(sorted[i]);\n\
    \        result.push(sorted[j]);\n        i++;\n        j--;\n    }\n    if (i\
    \ === j){\n        result.push(sorted[i]);\n    }\n    return result;\n}\n", " \
    \   if (lst.length == 0) return [];\n    var new_lst = [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var index_min = lst.indexOf(min);\n\
    \    var index_max = lst.indexOf(max);\n    new_lst.push(min);\n    new_lst.push(max);\n\
    \    lst.splice(index_min, 1);\n    lst.splice(index_max, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var result = [];\n    var\
    \ i = 0;\n    while (lst.length > 0) {\n        if (i % 2 == 0) {\n          \
    \  result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n         \
    \   min = Math.min.apply(null, lst);\n        } else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max.apply(null,\
    \ lst);\n        }\n        i++;\n    }\n    return result;\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    var new_lst_index\
    \ = 0;\n    var lst_index = 0;\n    while(lst_index < lst.length){\n        if(lst_index\
    \ == min_index){\n            new_lst[new_lst_index] = min;\n            new_lst_index++;\n\
    \            lst_index++;\n        }\n        else if(lst_index == max_index){\n\
    \            new_lst[new_lst_index] = max;\n            new_lst_index++;\n   \
    \         lst_index++;\n        }\n        else{\n            new_lst[new_lst_index]\
    \ = lst[lst_index];\n            new_lst_index++;\n            lst_index++;\n\
    \        }\n    }\n    return new_lst;\n}\n", "    if (lst.length == 0) {\n  \
    \      return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max\
    \ = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n    var\
    \ max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    if (lst.length == 0) {\n        return new_lst;\n    }\n    return\
    \ new_lst.concat(strange_sort_list(lst));\n}\n", "    if (lst.length == 0) {\n\
    \        return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var\
    \ max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n  \
    \  var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if\
    \ (lst.length == 0) {\n        return [];\n    }\n    var min = lst[0];\n    var\
    \ max = lst[0];\n    var min_index = 0;\n    var max_index = 0;\n    for (var\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] < min) {\n            min\
    \ = lst[i];\n            min_index = i;\n        }\n        if (lst[i] > max)\
    \ {\n            max = lst[i];\n            max_index = i;\n        }\n    }\n\
    \    var res = [min];\n    var lst_min = lst.slice(0, min_index).concat(lst.slice(min_index\
    \ + 1));\n    var lst_max = lst.slice(0, max_index).concat(lst.slice(max_index\
    \ + 1));\n    var lst_min_max = strange_sort_list(lst_min);\n    var lst_max_min\
    \ = strange_sort_list(lst_max);\n    var lst_min_max_max = lst_min_max.concat(max);\n\
    \    var lst_min_max_max_min = lst_min_max_max.concat(lst_max_min);\n    return\
    \ res.concat(lst_min_max_max_min);\n}\n", "    var new_lst = [];\n    var min\
    \ = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n   \
    \ var index_min = lst.indexOf(min);\n    var index_max = lst.indexOf(max);\n \
    \   var lst_min = lst.slice(0, index_min);\n    var lst_max = lst.slice(index_min\
    \ + 1, index_max);\n    var lst_min_max = lst.slice(index_max + 1);\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    if (lst_min.length > 0){\n        new_lst.push(Math.min.apply(null,\
    \ lst_min));\n        new_lst.push(Math.max.apply(null, lst_min));\n    }\n  \
    \  if (lst_max.length > 0){\n        new_lst.push(Math.min.apply(null, lst_max));\n\
    \        new_lst.push(Math.max.apply(null, lst_max));\n    }\n    if (lst_min_max.length\
    \ > 0){\n        new_lst.push(Math.min.apply(null, lst_min_max));\n        new_lst.push(Math.max.apply(null,\
    \ lst_min_max));\n    }\n    return new_lst;\n}\n", "    if (lst.length == 0)\
    \ {\n        return lst;\n    }\n    var min = Math.min.apply(null, lst);\n  \
    \  var max = Math.max.apply(null, lst);\n    var new_lst = [];\n    var i = 0;\n\
    \    while (lst.length > 0) {\n        if (i % 2 == 0) {\n            new_lst.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ lst);\n        } else {\n            new_lst.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        }\n        i++;\n\
    \    }\n    return new_lst;\n}\n", "    if (lst.length === 0) return [];\n   \
    \ var min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var result\
    \ = [];\n    var i = 0;\n    while (lst.length > 0) {\n        if (i % 2 === 0)\
    \ {\n            result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n\
    \            min = Math.min(...lst);\n        } else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    var result = [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    result.push(min);\n    result.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    return\
    \ result.concat(strange_sort_list(lst));\n}\n", "    var min = Math.min(...lst);\n\
    \    var max = Math.max(...lst);\n    var new_lst = [];\n    var i = 0;\n    while\
    \ (i < lst.length){\n        if (i % 2 == 0){\n            new_lst.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        }\n        else{\n            new_lst.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return new_lst;\n}\n", "    if(lst.length == 0){\n        return [];\n   \
    \ }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var new_lst = [];\n    var i = 0;\n    while(new_lst.length < lst.length){\n\
    \        if(i % 2 == 0){\n            new_lst.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else{\n\
    \            new_lst.push(max);\n            lst.splice(lst.indexOf(max), 1);\n\
    \            max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return new_lst;\n}\n", "    if (lst.length == 0) return [];\n    var min\
    \ = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n   \
    \ var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n \
    \   var result = [];\n    if (min_index < max_index) {\n        result.push(min);\n\
    \        result.push(max);\n        lst.splice(min_index, 1);\n        lst.splice(max_index\
    \ - 1, 1);\n    } else {\n        result.push(max);\n        result.push(min);\n\
    \        lst.splice(max_index, 1);\n        lst.splice(min_index - 1, 1);\n  \
    \  }\n    return result.concat(strange_sort_list(lst));\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    var sorted = lst.sort(function(a, b){return\
    \ a-b});\n    var result = [];\n    var i = 0;\n    var j = sorted.length - 1;\n\
    \    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n       \
    \ if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n     \
    \   }\n    }\n    return result;\n}\n", "    if (lst.length == 0) return [];\n\
    \    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [];\n    var i = 0;\n    while (lst.length > 0) {\n\
    \        if (i % 2 == 0) {\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        } else {\n      \
    \      result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n     \
    \       max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n   \
    \ return result;\n}\n", "    var result = [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var i = 0;\n    while (lst.length\
    \ > 0){\n        if (i % 2 == 0){\n            result.push(min);\n           \
    \ lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null, lst);\n\
    \        }\n        else{\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        }\n        i++;\n\
    \    }\n    return result;\n}\n", "    if(lst.length == 0){\n        return [];\n\
    \    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [];\n    var index = 0;\n    while(lst.length > 0){\n\
    \        result.push(min);\n        lst.splice(lst.indexOf(min), 1);\n       \
    \ if(lst.length > 0){\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n        }\n        min = Math.min.apply(null, lst);\n        max = Math.max.apply(null,\
    \ lst);\n    }\n    return result;\n}\n", "    if(lst.length == 0) return [];\n\
    \    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var res\
    \ = [min];\n    var i = 0;\n    while(lst.length > 0){\n        if(i % 2 == 0){\n\
    \            res.push(max);\n            lst.splice(lst.indexOf(max), 1);\n  \
    \          max = Math.max(...lst);\n        }\n        else{\n            res.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        }\n        i++;\n    }\n    return res;\n}\n", "    if (lst.length ==\
    \ 0) {\n        return [];\n    }\n    var max = Math.max.apply(null, lst);\n\
    \    var min = Math.min.apply(null, lst);\n    var max_index = lst.indexOf(max);\n\
    \    var min_index = lst.indexOf(min);\n    var lst_new = [];\n    lst_new.push(min);\n\
    \    lst_new.push(max);\n    lst.splice(max_index, 1);\n    lst.splice(min_index,\
    \ 1);\n    return lst_new.concat(strange_sort_list(lst));\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var result = [];\n    var index\
    \ = 0;\n    while(lst.length > 0){\n        if(index % 2 == 0){\n            result.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ lst);\n        }\n        else{\n            result.push(max);\n           \
    \ lst.splice(lst.indexOf(max), 1);\n            max = Math.max.apply(null, lst);\n\
    \        }\n        index++;\n    }\n    return result;\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var result = [];\n    var i = 0;\n\
    \    while (i < lst.length) {\n        if (i % 2 == 0) {\n            result.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ lst);\n        } else {\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        }\n        i++;\n\
    \    }\n    return result;\n}\n", "    if(lst.length == 0){\n        return [];\n\
    \    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var new_lst = [];\n    var i = 0;\n    while(new_lst.length != lst.length){\n\
    \        if(i % 2 == 0){\n            new_lst.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else{\n\
    \            new_lst.push(max);\n            lst.splice(lst.indexOf(max), 1);\n\
    \            max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return new_lst;\n}\n", "    let res = [];\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n    let\
    \ max_index = lst.indexOf(max);\n    let min_count = 0;\n    let max_count = 0;\n\
    \    let i = 0;\n    while (i < lst.length){\n        if (i % 2 === 0){\n    \
    \        res.push(min);\n            min_count++;\n            if (min_count ===\
    \ min_index){\n                min = Math.min(...lst.slice(min_index + 1));\n\
    \                min_index = lst.indexOf(min);\n            }\n        }\n   \
    \     else {\n            res.push(max);\n            max_count++;\n         \
    \   if (max_count === max_index){\n                max = Math.max(...lst.slice(max_index\
    \ + 1));\n                max_index = lst.indexOf(max);\n            }\n     \
    \   }\n        i++;\n    }\n    return res;\n}\n", "    if (lst.length == 0) return\
    \ [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [min];\n    var i = 0;\n    while (lst.length > 1) {\n\
    \        if (i % 2 == 0) {\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        } else {\n      \
    \      result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n     \
    \       min = Math.min.apply(null, lst);\n        }\n        i++;\n    }\n   \
    \ result.push(lst[0]);\n    return result;\n}\n", "    if (lst.length == 0) {\n\
    \        return [];\n    }\n    if (lst.length == 1) {\n        return lst;\n\
    \    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var new_lst = [];\n    var i = 0;\n    while (new_lst.length < lst.length)\
    \ {\n        if (i % 2 == 0) {\n            new_lst.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        } else {\n      \
    \      new_lst.push(max);\n            lst.splice(lst.indexOf(max), 1);\n    \
    \        max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n  \
    \  return new_lst;\n}\n", "    if (lst.length == 0) {\n        return [];\n  \
    \  }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var result = [min];\n    lst.splice(min_index, 1);\n    lst.splice(max_index,\
    \ 1);\n    while (lst.length > 0) {\n        var min = Math.min.apply(null, lst);\n\
    \        var max = Math.max.apply(null, lst);\n        var min_index = lst.indexOf(min);\n\
    \        var max_index = lst.indexOf(max);\n        result.push(max);\n      \
    \  result.push(min);\n        lst.splice(min_index, 1);\n        lst.splice(max_index,\
    \ 1);\n    }\n    return result;\n}\n", "    if (lst.length === 0) {\n       \
    \ return [];\n    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let min_index = lst.indexOf(min);\n    let max_index = lst.indexOf(max);\n\
    \    let new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var new_lst = [];\n   \
    \ var i = 0;\n    while (new_lst.length < lst.length) {\n        if (i % 2 ==\
    \ 0) {\n            new_lst.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        } else {\n      \
    \      new_lst.push(max);\n            lst.splice(lst.indexOf(max), 1);\n    \
    \        max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n  \
    \  return new_lst;\n}\n", "    if(lst.length == 0){\n        return lst;\n   \
    \ }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [min];\n    var lst_copy = lst.slice();\n    lst_copy.splice(lst_copy.indexOf(min),\
    \ 1);\n    var min_max = true;\n    while(lst_copy.length > 0){\n        if(min_max){\n\
    \            var max_index = lst_copy.indexOf(Math.max.apply(null, lst_copy));\n\
    \            result.push(lst_copy[max_index]);\n            lst_copy.splice(max_index,\
    \ 1);\n            min_max = false;\n        }\n        else{\n            var\
    \ min_index = lst_copy.indexOf(Math.min.apply(null, lst_copy));\n            result.push(lst_copy[min_index]);\n\
    \            lst_copy.splice(min_index, 1);\n            min_max = true;\n   \
    \     }\n    }\n    return result;\n}\n", "    var new_lst = [];\n    var min\
    \ = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n   \
    \ var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n \
    \   var lst_min = lst.slice(0, min_index);\n    var lst_max = lst.slice(min_index\
    \ + 1, max_index);\n    var lst_min_max = lst.slice(max_index + 1);\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    if (lst_min.length > 0) {\n        new_lst = new_lst.concat(strange_sort_list(lst_min));\n\
    \    }\n    if (lst_max.length > 0) {\n        new_lst = new_lst.concat(strange_sort_list(lst_max));\n\
    \    }\n    if (lst_min_max.length > 0) {\n        new_lst = new_lst.concat(strange_sort_list(lst_min_max));\n\
    \    }\n    return new_lst;\n}\n", "    if(lst.length == 0){\n        return [];\n\
    \    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    return\
    \ [min].concat(strange_sort_list(lst.reverse())).concat([max]);\n}\n", "    if\
    \ (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    var new_lst_index\
    \ = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (i % 2 == 0) {\n\
    \            new_lst[new_lst_index] = min;\n            new_lst_index++;\n   \
    \         lst.splice(min_index, 1);\n            min = Math.min.apply(null, lst);\n\
    \            min_index = lst.indexOf(min);\n        } else {\n            new_lst[new_lst_index]\
    \ = max;\n            new_lst_index++;\n            lst.splice(max_index, 1);\n\
    \            max = Math.max.apply(null, lst);\n            max_index = lst.indexOf(max);\n\
    \        }\n    }\n    return new_lst;\n}\n", "    if (lst.length == 0) {\n  \
    \      return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max\
    \ = Math.max.apply(null, lst);\n    var new_lst = [];\n    var i = 0;\n    while\
    \ (i < lst.length) {\n        new_lst.push(min);\n        new_lst.push(max);\n\
    \        i += 2;\n    }\n    return new_lst;\n}\n", "    if(lst.length == 0) return\
    \ [];\n    var max = Math.max.apply(null, lst);\n    var min = Math.min.apply(null,\
    \ lst);\n    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n\
    \    var i = 0;\n    while(new_lst.length < lst.length){\n        if(i % 2 ==\
    \ 0){\n            var min = Math.min.apply(null, lst);\n            new_lst.push(min);\n\
    \        }\n        else{\n            var max = Math.max.apply(null, lst);\n\
    \            new_lst.push(max);\n        }\n        i++;\n    }\n    return new_lst;\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var result = [];\n    result.push(min);\n\
    \    result.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return result.concat(strange_sort_list(lst));\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var new_lst = [];\n    var i =\
    \ 0;\n    while (i < lst.length) {\n        if (i % 2 == 0) {\n            new_lst.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ lst);\n        } else {\n            new_lst.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        }\n        i++;\n\
    \    }\n    return new_lst;\n}\n", "    if(lst.length == 0){\n        return [];\n\
    \    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [min];\n    var i = 0;\n    while(lst.length > 0){\n\
    \        if(i % 2 == 0){\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        }\n        else{\n\
    \            result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n\
    \            min = Math.min.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return result;\n}\n", "    var sorted = lst.sort(function(a, b){return a-b});\n\
    \    var result = [];\n    var i = 0;\n    var j = sorted.length - 1;\n    while\
    \ (i <= j){\n        result.push(sorted[i]);\n        if (i != j){\n         \
    \   result.push(sorted[j]);\n        }\n        i++;\n        j--;\n    }\n  \
    \  return result;\n}\n", "    if (lst.length == 0) {\n        return [];\n   \
    \ }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var result = [];\n    var i = 0;\n    while (i < lst.length) {\n        if\
    \ (i % 2 == 0) {\n            result.push(min);\n            lst.splice(min_index,\
    \ 1);\n            min = Math.min.apply(null, lst);\n            min_index = lst.indexOf(min);\n\
    \        } else {\n            result.push(max);\n            lst.splice(max_index,\
    \ 1);\n            max = Math.max.apply(null, lst);\n            max_index = lst.indexOf(max);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    var new_lst_1\
    \ = [];\n    var new_lst_2 = [];\n    var new_lst_3 = [];\n    var new_lst_4 =\
    \ [];\n    var new_lst_5 = [];\n    var new_lst_6 = [];\n    var new_lst_7 = [];\n\
    \    var new_lst_8 = [];\n    var new_lst_9 = [];\n    var new_lst_10 = [];\n\
    \    var new_lst_11 = [];\n    var new_lst_12 = [];\n    var new_lst_13 = [];\n\
    \    var new_lst_14 = [];\n    var new_lst_15 = [];\n    var new_lst_16 = [];\n\
    \    var new_lst_17 = [];\n    var new_lst_18 = [];\n    var new_lst_19 = [];\n\
    \    var new_lst_20 = [];\n    var new_lst_21 = [];\n    var new_lst_22 = [];\n\
    \    var new_lst_23 = [];\n    var new_lst_24 = [];\n    var new_lst_25 = [];\n\
    \    var new_lst_26 = [];\n    var new_lst_27 = [];\n    var new_lst_28 = [];\n\
    \    var new_lst_29 = [];\n    var new_lst_30 = [];\n    var new_lst_31 = [];\n\
    \    var new_lst_32 = [];\n    var new_lst_33 = [];\n    var new_lst_34 = [];\n\
    \    var new_lst_35 = [];\n    var new_lst_36 = [];\n    var new_lst_37 = [];\n\
    \    var new_lst_38 = [];\n    var new", "    if (lst.length == 0) return [];\n\
    \    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    var i = 0;\n    while (i < lst.length) {\n       \
    \ new_lst.push(min);\n        new_lst.push(max);\n        i += 2;\n    }\n   \
    \ return new_lst;\n}\n", "    if(lst.length == 0){\n        return [];\n    }\n\
    \    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if\
    \ (lst.length == 0) return [];\n    var min = Math.min.apply(null, lst);\n   \
    \ var max = Math.max.apply(null, lst);\n    var res = [];\n    var i = 0;\n  \
    \  while (lst.length > 0) {\n        if (i % 2 == 0) {\n            res.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ lst);\n        } else {\n            res.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        }\n        i++;\n\
    \    }\n    return res;\n}\n", "    if(lst.length == 0){\n        return [];\n\
    \    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [];\n    var temp = [];\n    var index = 0;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] != min && lst[i] != max){\n\
    \            temp.push(lst[i]);\n        }\n    }\n    result.push(min);\n   \
    \ result.push(max);\n    while(temp.length > 0){\n        min = Math.min.apply(null,\
    \ temp);\n        max = Math.max.apply(null, temp);\n        result.splice(index,\
    \ 0, min);\n        result.splice(index + 2, 0, max);\n        index += 2;\n \
    \       temp = [];\n        for(var i = 0; i < lst.length; i++){\n           \
    \ if(lst[i] != min && lst[i] != max){\n                temp.push(lst[i]);\n  \
    \          }\n        }\n    }\n    return result;\n}\n", "    if(lst.length ==\
    \ 0) return [];\n    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n\
    \    var new_lst = [];\n    var i = 0;\n    while(new_lst.length < lst.length){\n\
    \        if(i % 2 == 0){\n            new_lst.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        }\n        else{\n       \
    \     new_lst.push(max);\n            lst.splice(lst.indexOf(max), 1);\n     \
    \       max = Math.max(...lst);\n        }\n        i++;\n    }\n    return new_lst;\n\
    }\n", "    if(lst.length == 0) return [];\n    var min = Math.min(...lst);\n \
    \   var max = Math.max(...lst);\n    var min_index = lst.indexOf(min);\n    var\
    \ max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if\
    \ (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var new_lst = [];\n   \
    \ var i = 0;\n    while (i < lst.length) {\n        new_lst.push(min);\n     \
    \   new_lst.push(max);\n        i += 2;\n    }\n    return new_lst;\n}\n", " \
    \   if (lst.length === 0) {\n        return [];\n    }\n    let sorted = lst.sort(function(a,\
    \ b){return a-b});\n    let result = [];\n    let i = 0;\n    let j = sorted.length\
    \ - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n        i++;\n\
    \        if (i <= j) {\n            result.push(sorted[j]);\n            j--;\n\
    \        }\n    }\n    return result;\n}\n", "    var result = [];\n    var min\
    \ = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n   \
    \ var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n \
    \   var min_max = [min, max];\n    var max_min = [max, min];\n    var min_max_index\
    \ = [min_index, max_index];\n    var max_min_index = [max_index, min_index];\n\
    \    var min_max_index_sorted = min_max_index.sort();\n    var max_min_index_sorted\
    \ = max_min_index.sort();\n    var min_max_sorted = min_max.sort();\n    var max_min_sorted\
    \ = max_min.sort();\n    var min_max_sorted_reversed = min_max_sorted.reverse();\n\
    \    var max_min_sorted_reversed = max_min_sorted.reverse();\n    if (lst.length\
    \ === 0){\n        return [];\n    }\n    else if (lst.length === 1){\n      \
    \  return lst;\n    }\n    else if (lst.length === 2){\n        return min_max_sorted;\n\
    \    }\n    else if (lst.length === 3){\n        if (min_index < max_index){\n\
    \            return min_max_sorted_reversed.concat(lst[1]);\n        }\n     \
    \   else if (min_index > max_index){\n            return max_min_sorted_reversed.concat(lst[1]);\n\
    \        }\n    }\n    else if (lst.length === 4){\n        if (min_index < max_index){\n\
    \            return min_max_sorted_reversed.concat(lst[2], lst[3]);\n        }\n\
    \        else if (min_index > max_index){\n            return max_min_sorted_reversed.concat(lst[2],\
    \ lst[3]);\n        }\n    }\n    else if (lst.length === 5){", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var result = [];\n    var i = 0;\n\
    \    while (lst.length > 0) {\n        if (i % 2 == 0) {\n            result.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ lst);\n        } else {\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        }\n        i++;\n\
    \    }\n    return result;\n}\n", "    if (lst.length == 0) return [];\n    var\
    \ res = [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    res.push(min);\n    res.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index,\
    \ 1);\n    var i = 0;\n    while (lst.length > 0) {\n        if (i % 2 == 0) {\n\
    \            var min = Math.min.apply(null, lst);\n            var min_index =\
    \ lst.indexOf(min);\n            res.push(min);\n            lst.splice(min_index,\
    \ 1);\n        } else {\n            var max = Math.max.apply(null, lst);\n  \
    \          var max_index = lst.indexOf(max);\n            res.push(max);\n   \
    \         lst.splice(max_index, 1);\n        }\n        i++;\n    }\n    return\
    \ res;\n}\n", "    if (lst.length == 0) {\n        return lst;\n    }\n    var\
    \ sorted = lst.sort(function(a, b){return a-b});\n    var result = [];\n    var\
    \ i = 0;\n    var j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        i++;\n        if (i <= j) {\n            result.push(sorted[j]);\n  \
    \          j--;\n        }\n    }\n    return result;\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var result = [min];\n    var i\
    \ = 0;\n    while (result.length < lst.length) {\n        if (i % 2 == 0) {\n\
    \            result.push(max);\n        } else {\n            result.push(min);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index,\
    \ 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if (lst.length\
    \ == 0){\n        return [];\n    }\n    else if (lst.length == 1){\n        return\
    \ lst;\n    }\n    else {\n        var min = Math.min.apply(null, lst);\n    \
    \    var max = Math.max.apply(null, lst);\n        var min_index = lst.indexOf(min);\n\
    \        var max_index = lst.indexOf(max);\n        var new_lst = [];\n      \
    \  new_lst.push(min);\n        new_lst.push(max);\n        lst.splice(min_index,\
    \ 1);\n        lst.splice(max_index - 1, 1);\n        return new_lst.concat(strange_sort_list(lst));\n\
    \    }\n}\n", "    let lst_len = lst.length;\n    let new_lst = [];\n    let min\
    \ = Math.min(...lst);\n    let max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n\
    \    let max_index = lst.indexOf(max);\n    new_lst.push(min);\n    new_lst.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index, 1);\n    for (let i\
    \ = 0; i < lst_len - 2; i++){\n        let min = Math.min(...lst);\n        let\
    \ max = Math.max(...lst);\n        let min_index = lst.indexOf(min);\n       \
    \ let max_index = lst.indexOf(max);\n        new_lst.push(min);\n        new_lst.push(max);\n\
    \        lst.splice(min_index, 1);\n        lst.splice(max_index, 1);\n    }\n\
    \    return new_lst;\n}", "    if(lst.length === 0){\n        return lst;\n  \
    \  }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let\
    \ result = [];\n    let i = 0;\n    while(lst.length > 0){\n        if(i % 2 ===\
    \ 0){\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        }\n        else{\n       \
    \     result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n      \
    \      max = Math.max(...lst);\n        }\n        i++;\n    }\n    return result;\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return [min, max].concat(strange_sort_list(lst));\n}\n", "   \
    \ if(lst.length == 0){\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    var i = 0;\n\
    \    while(i < lst.length){\n        if(i % 2 == 0){\n            new_lst.push(min);\n\
    \            lst.splice(min_index, 1);\n            min = Math.min.apply(null,\
    \ lst);\n            min_index = lst.indexOf(min);\n        }\n        else{\n\
    \            new_lst.push(max);\n            lst.splice(max_index, 1);\n     \
    \       max = Math.max.apply(null, lst);\n            max_index = lst.indexOf(max);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    if (lst.length === 1) {\n        return\
    \ lst;\n    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    let\
    \ new_lst_2 = lst.filter(function(item) {\n        return item !== min && item\
    \ !== max;\n    });\n    return new_lst.concat(strange_sort_list(new_lst_2));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var result = [];\n    var\
    \ i = 0;\n    while (lst.length > 0) {\n        if (i % 2 == 0) {\n          \
    \  result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n         \
    \   min = Math.min.apply(null, lst);\n        } else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max.apply(null,\
    \ lst);\n        }\n        i++;\n    }\n    return result;\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n    let\
    \ max = Math.max(...lst);\n    let new_lst = [];\n    let i = 0;\n    while (lst.length\
    \ > 0) {\n        if (i % 2 === 0) {\n            new_lst.push(min);\n       \
    \     lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        } else {\n            new_lst.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return new_lst;\n}\n", "    if(lst.length == 0){\n        return [];\n   \
    \ }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0) return [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var res = [];\n    var\
    \ i = 0;\n    while (res.length < lst.length){\n        if (i % 2 == 0){\n   \
    \         res.push(min);\n            lst.splice(lst.indexOf(min), 1);\n     \
    \       min = Math.min.apply(null, lst);\n        }\n        else {\n        \
    \    res.push(max);\n            lst.splice(lst.indexOf(max), 1);\n          \
    \  max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n    return\
    \ res;\n}\n", "    if(lst.length == 0) return [];\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n    let\
    \ max_index = lst.indexOf(max);\n    let new_lst = [];\n    let i = 0;\n    while(new_lst.length\
    \ != lst.length){\n        if(i % 2 == 0){\n            new_lst.push(min);\n \
    \           lst.splice(min_index, 1);\n            min = Math.min(...lst);\n \
    \           min_index = lst.indexOf(min);\n        }\n        else{\n        \
    \    new_lst.push(max);\n            lst.splice(max_index, 1);\n            max\
    \ = Math.max(...lst);\n            max_index = lst.indexOf(max);\n        }\n\
    \        i++;\n    }\n    return new_lst;\n}\n", "    if (lst.length == 0) {\n\
    \        return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var\
    \ max = Math.max.apply(null, lst);\n    var result = [];\n    var i = 0;\n   \
    \ while (lst.length > 0) {\n        if (i % 2 == 0) {\n            result.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ lst);\n        } else {\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        }\n        i++;\n\
    \    }\n    return result;\n}\n", "    if(lst.length == 0){\n        return [];\n\
    \    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_list = [];\n    new_list.push(min);\n    new_list.push(max);\n  \
    \  lst.splice(min_index, 1);\n    lst.splice(max_index, 1);\n    return new_list.concat(strange_sort_list(lst));\n\
    }\n", "    if(lst.length == 0){\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var new_lst = [];\n   \
    \ var i = 0;\n    while(lst.length > 0){\n        if(i % 2 == 0){\n          \
    \  new_lst.push(min);\n            lst.splice(lst.indexOf(min), 1);\n        \
    \    min = Math.min.apply(null, lst);\n        }else{\n            new_lst.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max.apply(null,\
    \ lst);\n        }\n        i++;\n    }\n    return new_lst;\n}\n", "    if (lst.length\
    \ == 0) return [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [];\n    var i = 0;\n    while (result.length < lst.length){\n\
    \        if (i % 2 == 0){\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else{\n\
    \            result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n\
    \            max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return result;\n}\n", "    var new_lst = [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    new_lst.push(min);\n    new_lst.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index, 1);\n    for (var i\
    \ = 0; i < lst.length; i++){\n        var min = Math.min.apply(null, lst);\n \
    \       var max = Math.max.apply(null, lst);\n        var min_index = lst.indexOf(min);\n\
    \        var max_index = lst.indexOf(max);\n        new_lst.push(min);\n     \
    \   new_lst.push(max);\n        lst.splice(min_index, 1);\n        lst.splice(max_index,\
    \ 1);\n    }\n    return new_lst;\n}\n", "    if (lst.length == 0) {\n       \
    \ return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if(lst.length == 0){\n        return [];\n    }\n    if(lst.length\
    \ == 1){\n        return lst;\n    }\n    var new_list = [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var lst_copy = lst.slice();\n    lst_copy.splice(min_index,\
    \ 1);\n    lst_copy.splice(max_index - 1, 1);\n    new_list.push(min);\n    new_list.push(max);\n\
    \    return new_list.concat(strange_sort_list(lst_copy));\n}\n", "    var min\
    \ = Math.min(...lst);\n    var max = Math.max(...lst);\n    var new_lst = [];\n\
    \    var i = 0;\n    var j = lst.length - 1;\n    while (i < lst.length){\n  \
    \      new_lst.push(min);\n        new_lst.push(max);\n        i++;\n        j--;\n\
    \    }\n    return new_lst;\n}\n", "    if(lst.length == 0){\n        return [];\n\
    \    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [];\n    var i = 0;\n    while(lst.length > 0){\n  \
    \      if(i % 2 == 0){\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else{\n\
    \            result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n\
    \            max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return result;\n}\n", "    if(lst.length == 0){\n        return [];\n   \
    \ }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_list = [];\n    new_list.push(min);\n    new_list.push(max);\n  \
    \  lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    return new_list.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if\
    \ (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_list = [];\n    if (min_index\
    \ < max_index) {\n        new_list.push(min);\n        new_list.push(max);\n \
    \       lst.splice(min_index, 1);\n        lst.splice(max_index - 1, 1);\n   \
    \ } else {\n        new_list.push(max);\n        new_list.push(min);\n       \
    \ lst.splice(max_index, 1);\n        lst.splice(min_index - 1, 1);\n    }\n  \
    \  return new_list.concat(strange_sort_list(lst));\n}\n", "    if(lst.length ==\
    \ 0){\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n \
    \   var max = Math.max.apply(null, lst);\n    var min_idx = lst.indexOf(min);\n\
    \    var max_idx = lst.indexOf(max);\n    var new_lst = [];\n    var i = 0;\n\
    \    while(new_lst.length < lst.length){\n        if(i % 2 == 0){\n          \
    \  new_lst.push(min);\n            lst.splice(min_idx, 1);\n            min =\
    \ Math.min.apply(null, lst);\n            min_idx = lst.indexOf(min);\n      \
    \  }\n        else{\n            new_lst.push(max);\n            lst.splice(max_idx,\
    \ 1);\n            max = Math.max.apply(null, lst);\n            max_idx = lst.indexOf(max);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n", "    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let result = [];\n    let i = 0;\n    while\
    \ (result.length < lst.length){\n        if (i % 2 === 0){\n            result.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        } else {\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return result;\n}\n", "    if (lst.length == 0) {\n        return [];\n  \
    \  }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var lst_min = lst.slice(0, min_index).concat(lst.slice(min_index + 1));\n\
    \    var lst_max = lst.slice(0, max_index).concat(lst.slice(max_index + 1));\n\
    \    var result = [min];\n    if (lst_min.length > 0) {\n        result = result.concat(strange_sort_list(lst_min));\n\
    \    }\n    result = result.concat(max);\n    if (lst_max.length > 0) {\n    \
    \    result = result.concat(strange_sort_list(lst_max));\n    }\n    return result;\n\
    }\n", "    if (lst.length === 0) {\n        return [];\n    }\n    if (lst.length\
    \ === 1) {\n        return lst;\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if(lst.length\
    \ === 0){\n        return [];\n    }\n    var min = Math.min(...lst);\n    var\
    \ max = Math.max(...lst);\n    var new_lst = [];\n    var lst_length = lst.length;\n\
    \    var i = 0;\n    while(i < lst_length){\n        new_lst.push(min);\n    \
    \    new_lst.push(max);\n        i += 2;\n    }\n    return new_lst;\n}\n", " \
    \   if (lst.length === 0) {\n        return [];\n    }\n    var sorted = lst.sort(function(a,\
    \ b) {\n        return a - b;\n    });\n    var result = [];\n    var i = 0;\n\
    \    var j = sorted.length - 1;\n    while (i < j) {\n        result.push(sorted[i]);\n\
    \        result.push(sorted[j]);\n        i++;\n        j--;\n    }\n    if (i\
    \ === j) {\n        result.push(sorted[i]);\n    }\n    return result;\n}\n",
  "    if(lst.length === 0) return [];\n    let sorted = lst.sort((a,b) => a-b);\n\
    \    let result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n    while(i\
    \ < j){\n        result.push(sorted[i]);\n        result.push(sorted[j]);\n  \
    \      i++;\n        j--;\n    }\n    if(i === j) result.push(sorted[i]);\n  \
    \  return result;\n}\n", "    if (lst.length == 0){\n        return [];\n    }\n\
    \    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [];\n    var i = 0;\n    while (lst.length > 0){\n \
    \       if (i % 2 == 0){\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else {\n\
    \            result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n\
    \            max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return result;\n}\n", "    if(lst.length == 0) return [];\n    var min =\
    \ Math.min(...lst);\n    var max = Math.max(...lst);\n    var res = [];\n    var\
    \ i = 0;\n    while(res.length < lst.length){\n        if(i%2 == 0){\n       \
    \     res.push(min);\n            lst.splice(lst.indexOf(min), 1);\n         \
    \   min = Math.min(...lst);\n        }\n        else{\n            res.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return res;\n}\n", "    if(lst.length ===\
    \ 0) return [];\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let res = [];\n    let i = 0;\n    while(res.length < lst.length){\n    \
    \    if(i % 2 === 0){\n            res.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        } else {\n            res.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return res;\n}\n", "    let result = [];\n\
    \    let sorted = lst.sort((a, b) => a - b);\n    let min = sorted[0];\n    let\
    \ max = sorted[sorted.length - 1];\n    let i = 0;\n    while (i < sorted.length){\n\
    \        if (i % 2 === 0){\n            result.push(min);\n            min = sorted[i\
    \ + 1];\n        } else {\n            result.push(max);\n            max = sorted[sorted.length\
    \ - i - 1];\n        }\n        i++;\n    }\n    return result;\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    var min = lst[0];\n    var max = lst[0];\n\
    \    var min_index = 0;\n    var max_index = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] < min){\n            min = lst[i];\n            min_index\
    \ = i;\n        }\n        if(lst[i] > max){\n            max = lst[i];\n    \
    \        max_index = i;\n        }\n    }\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var result = [];\n    result.push(min);\n\
    \    result.push(max);\n    var index = lst.indexOf(min);\n    lst.splice(index,\
    \ 1);\n    index = lst.indexOf(max);\n    lst.splice(index, 1);\n    var i = 0;\n\
    \    while(lst.length != 0){\n        if(i % 2 == 0){\n            min = Math.min.apply(null,\
    \ lst);\n            result.push(min);\n            index = lst.indexOf(min);\n\
    \            lst.splice(index, 1);\n        }\n        else{\n            max\
    \ = Math.max.apply(null, lst);\n            result.push(max);\n            index\
    \ = lst.indexOf(max);\n            lst.splice(index, 1);\n        }\n        i++;\n\
    \    }\n    return result;\n}\n", "    if(lst.length == 0){\n        return [];\n\
    \    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    for(var i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 == 0){\n            new_lst.push(min);\n            lst.splice(min_index,\
    \ 1);\n            min = Math.min.apply(null, lst);\n            min_index = lst.indexOf(min);\n\
    \        }\n        else{\n            new_lst.push(max);\n            lst.splice(max_index,\
    \ 1);\n            max = Math.max.apply(null, lst);\n            max_index = lst.indexOf(max);\n\
    \        }\n    }\n    return new_lst;\n}\n", "    if(lst.length === 0){\n   \
    \     return [];\n    }\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let new_lst = [];\n    let i = 0;\n    while(new_lst.length < lst.length){\n\
    \        if(i % 2 === 0){\n            new_lst.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        }\n        else{\n       \
    \     new_lst.push(max);\n            lst.splice(lst.indexOf(max), 1);\n     \
    \       max = Math.max(...lst);\n        }\n        i++;\n    }\n    return new_lst;\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n    let\
    \ max_index = lst.indexOf(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return [min, max, ...strange_sort_list(lst)];\n}\n", "    if(lst.length\
    \ == 0) return [];\n    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n\
    \    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    var i = 0;\n    while(lst.length != 0){\n        if(i\
    \ % 2 == 0){\n            new_lst.push(min);\n            lst.splice(min_index,\
    \ 1);\n            min = Math.min(...lst);\n            min_index = lst.indexOf(min);\n\
    \        }\n        else{\n            new_lst.push(max);\n            lst.splice(max_index,\
    \ 1);\n            max = Math.max(...lst);\n            max_index = lst.indexOf(max);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    let min = Math.min(...lst);\n    let\
    \ max = Math.max(...lst);\n    let result = [];\n    let i = 0;\n    while (lst.length\
    \ > 0) {\n        if (i % 2 == 0) {\n            result.push(min);\n         \
    \   lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n  \
    \      } else {\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return result;\n}\n", "    if (lst.length == 0) {\n        return [];\n  \
    \  }\n    var min = lst[0];\n    var max = lst[0];\n    var min_index = 0;\n \
    \   var max_index = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if\
    \ (lst[i] < min) {\n            min = lst[i];\n            min_index = i;\n  \
    \      }\n        if (lst[i] > max) {\n            max = lst[i];\n           \
    \ max_index = i;\n        }\n    }\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    var new_lst_2 = [];\n    for (var i = 0; i < lst.length;\
    \ i++) {\n        if (i != min_index && i != max_index) {\n            new_lst_2.push(lst[i]);\n\
    \        }\n    }\n    var new_lst_3 = strange_sort_list(new_lst_2);\n    return\
    \ new_lst.concat(new_lst_3);\n}\n", "    if (lst.length == 0){\n        return\
    \ [];\n    }\n    else{\n        var min = Math.min.apply(null, lst);\n      \
    \  var max = Math.max.apply(null, lst);\n        var new_lst = [];\n        var\
    \ i = 0;\n        while (i < lst.length){\n            if (i % 2 == 0){\n    \
    \            new_lst.push(min);\n                lst.splice(lst.indexOf(min),\
    \ 1);\n                min = Math.min.apply(null, lst);\n            }\n     \
    \       else{\n                new_lst.push(max);\n                lst.splice(lst.indexOf(max),\
    \ 1);\n                max = Math.max.apply(null, lst);\n            }\n     \
    \       i++;\n        }\n        return new_lst;\n    }\n}\n", "    if (lst.length\
    \ === 0) {\n        return [];\n    }\n    lst.sort(function(a, b){return a-b});\n\
    \    var result = [];\n    var i = 0;\n    var j = lst.length - 1;\n    while\
    \ (i <= j) {\n        result.push(lst[i]);\n        if (i !== j) {\n         \
    \   result.push(lst[j]);\n        }\n        i++;\n        j--;\n    }\n    return\
    \ result;\n}", "    if (lst.length == 0) {\n        return [];\n    }\n    var\
    \ min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n\
    \    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    return\
    \ [min].concat(strange_sort_list(lst.reverse())).concat([max]);\n}\n", "    var\
    \ lst_sorted = lst.sort(function(a, b){return a-b});\n    var lst_result = [];\n\
    \    var lst_max = lst_sorted.length;\n    var lst_min = 0;\n    var lst_index\
    \ = 0;\n    while (lst_index < lst_max){\n        lst_result.push(lst_sorted[lst_min]);\n\
    \        lst_min++;\n        lst_result.push(lst_sorted[lst_max-1]);\n       \
    \ lst_max--;\n        lst_index++;\n    }\n    return lst_result;\n}\n", "   \
    \ if (lst.length == 0){\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    lst.sort(function(a, b){return a-b});\n\
    \    var res = [];\n    var i = 0;\n    var j = lst.length - 1;\n    while(i <=\
    \ j){\n        res.push(lst[i]);\n        if(i != j){\n            res.push(lst[j]);\n\
    \        }\n        i++;\n        j--;\n    }\n    return res;\n}\n", "    if\
    \ (lst.length == 0) {\n        return lst;\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var new_lst = [];\n   \
    \ var i = 0;\n    while (lst.length > 0) {\n        if (i % 2 == 0) {\n      \
    \      new_lst.push(min);\n            lst.splice(lst.indexOf(min), 1);\n    \
    \        min = Math.min.apply(null, lst);\n        } else {\n            new_lst.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max.apply(null,\
    \ lst);\n        }\n        i++;\n    }\n    return new_lst;\n}\n", "    var result\
    \ = [];\n    var temp = [];\n    var i = 0;\n    var j = 0;\n    var k = 0;\n\
    \    var min = 0;\n    var max = 0;\n    var min_index = 0;\n    var max_index\
    \ = 0;\n    if (lst.length == 0){\n        return [];\n    }\n    for (i = 0;\
    \ i < lst.length; i++){\n        temp.push(lst[i]);\n    }\n    while (temp.length\
    \ > 0){\n        min = temp[0];\n        max = temp[0];\n        for (j = 0; j\
    \ < temp.length; j++){\n            if (temp[j] < min){\n                min =\
    \ temp[j];\n                min_index = j;\n            }\n            if (temp[j]\
    \ > max){\n                max = temp[j];\n                max_index = j;\n  \
    \          }\n        }\n        if (k % 2 == 0){\n            result.push(min);\n\
    \            temp.splice(min_index, 1);\n        }\n        else{\n          \
    \  result.push(max);\n            temp.splice(max_index, 1);\n        }\n    \
    \    k++;\n    }\n    return result;\n}\n", "    if (lst.length === 0){\n    \
    \    return [];\n    }\n    var sorted = lst.sort(function(a, b){return a-b});\n\
    \    var result = [];\n    var i = 0;\n    while (sorted.length > 0){\n      \
    \  result.push(sorted[i]);\n        sorted.splice(i, 1);\n        i = sorted.length\
    \ - 1;\n    }\n    return result;\n}\n", "    if (lst.length == 0) {\n       \
    \ return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var new_lst = [];\n    var i = 0;\n    while (lst.length > 0) {\n\
    \        if (i % 2 == 0) {\n            new_lst.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        } else {\n      \
    \      new_lst.push(max);\n            lst.splice(lst.indexOf(max), 1);\n    \
    \        max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n  \
    \  return new_lst;\n}\n", "    if (lst.length == 0) {\n        return [];\n  \
    \  }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    if (lst.length == 0) {\n       \
    \ return new_lst;\n    }\n    if (lst.length == 1) {\n        new_lst.push(lst[0]);\n\
    \        return new_lst;\n    }\n    var min = Math.min.apply(null, lst);\n  \
    \  var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    new_lst.push(min);\n    new_lst.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    if (lst.length\
    \ == 0) {\n        return new_lst;\n    }\n    if (lst.length == 1) {\n      \
    \  new_lst.push(lst[0]);\n        return new_lst;\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    new_lst.push(min);\n    new_lst.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    if (lst.length\
    \ == 0) {\n        return new_lst;\n   ", "    let result = [];\n    let min =\
    \ Math.min(...lst);\n    let max = Math.max(...lst);\n    let min_index = lst.indexOf(min);\n\
    \    let max_index = lst.indexOf(max);\n    let min_count = 0;\n    let max_count\
    \ = 0;\n    let i = 0;\n    while (i < lst.length){\n        if (min_count < max_count){\n\
    \            result.push(min);\n            min_count++;\n            lst.splice(min_index,\
    \ 1);\n            min = Math.min(...lst);\n            min_index = lst.indexOf(min);\n\
    \        }\n        else{\n            result.push(max);\n            max_count++;\n\
    \            lst.splice(max_index, 1);\n            max = Math.max(...lst);\n\
    \            max_index = lst.indexOf(max);\n        }\n        i++;\n    }\n \
    \   return result;\n}\n", "    if (lst.length == 0) {\n        return [];\n  \
    \  }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var res = [];\n    res.push(min);\n    res.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index, 1);\n    return res.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0){\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var new_lst = [];\n   \
    \ var i = 0;\n    while (i < lst.length){\n        if (i % 2 == 0){\n        \
    \    new_lst.push(min);\n            lst.splice(lst.indexOf(min), 1);\n      \
    \      min = Math.min.apply(null, lst);\n        }\n        else {\n         \
    \   new_lst.push(max);\n            lst.splice(lst.indexOf(max), 1);\n       \
    \     max = Math.max.apply(null, lst);\n        }\n        i += 1;\n    }\n  \
    \  return new_lst;\n}\n", "    if (lst.length == 0) {\n        return [];\n  \
    \  }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var new_lst = [];\n   \
    \ var i = 0;\n    while (i < lst.length) {\n        if (i % 2 == 0) {\n      \
    \      new_lst.push(min);\n            lst.splice(lst.indexOf(min), 1);\n    \
    \        min = Math.min.apply(null, lst);\n        } else {\n            new_lst.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max.apply(null,\
    \ lst);\n        }\n        i++;\n    }\n    return new_lst;\n}\n", "    if (lst.length\
    \ == 0) return [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [min];\n    var lst = lst.filter(function(item){\n \
    \       return item != min;\n    });\n    while (lst.length > 0){\n        result.push(max);\n\
    \        lst = lst.filter(function(item){\n            return item != max;\n \
    \       });\n        if (lst.length == 0) break;\n        result.push(Math.min.apply(null,\
    \ lst));\n        lst = lst.filter(function(item){\n            return item !=\
    \ Math.min.apply(null, lst);\n        });\n        if (lst.length == 0) break;\n\
    \        result.push(Math.max.apply(null, lst));\n        lst = lst.filter(function(item){\n\
    \            return item != Math.max.apply(null, lst);\n        });\n    }\n \
    \   return result;\n}\n", "    if(lst.length === 0) return lst;\n    var new_lst\
    \ = [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var min_removed = lst.slice(0, min_index).concat(lst.slice(min_index + 1));\n\
    \    var max_removed = min_removed.slice(0, max_index).concat(min_removed.slice(max_index\
    \ + 1));\n    new_lst.push(min);\n    new_lst.push(max);\n    return new_lst.concat(strange_sort_list(max_removed));\n\
    }\n", "    if(lst.length == 0){\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var result = [];\n    var\
    \ i = 0;\n    while(i < lst.length){\n        result.push(min);\n        lst.splice(lst.indexOf(min),\
    \ 1);\n        if(lst.length == 0){\n            break;\n        }\n        result.push(max);\n\
    \        lst.splice(lst.indexOf(max), 1);\n        min = Math.min.apply(null,\
    \ lst);\n        max = Math.max.apply(null, lst);\n        i += 2;\n    }\n  \
    \  return result;\n}\n", "    if(lst.length === 0){\n        return [];\n    }\n\
    \    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var result\
    \ = [min];\n    var i = 0;\n    while(lst.length > 0){\n        if(i % 2 === 0){\n\
    \            result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n\
    \            max = Math.max(...lst);\n        }\n        else{\n            result.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var result = [];\n    var i = 0;\n\
    \    while (i < lst.length) {\n        result.push(min);\n        min = Math.min.apply(null,\
    \ lst);\n        lst.splice(lst.indexOf(min), 1);\n        result.push(max);\n\
    \        max = Math.max.apply(null, lst);\n        lst.splice(lst.indexOf(max),\
    \ 1);\n        i += 2;\n    }\n    return result;\n}\n", "    if(lst.length ===\
    \ 0) return [];\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n\
    \    let result = [min];\n    let i = 0;\n    while(result.length !== lst.length){\n\
    \        if(i % 2 === 0){\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        } else {\n            result.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    var i = 0;\n\
    \    while(i < lst.length){\n        if(i % 2 == 0){\n            new_lst.push(min);\n\
    \            lst.splice(min_index, 1);\n            min = Math.min.apply(null,\
    \ lst);\n            min_index = lst.indexOf(min);\n        }\n        else{\n\
    \            new_lst.push(max);\n            lst.splice(max_index, 1);\n     \
    \       max = Math.max.apply(null, lst);\n            max_index = lst.indexOf(max);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var result = [];\n    var i = 0;\n\
    \    while (i < lst.length) {\n        if (i % 2 == 0) {\n            result.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ lst);\n        } else {\n            result.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        }\n        i++;\n\
    \    }\n    return result;\n}\n", "    if(lst.length == 0) return [];\n    var\
    \ min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var new_lst =\
    \ [];\n    var i = 0;\n    while(lst.length > 0){\n        if(i % 2 == 0){\n \
    \           new_lst.push(min);\n            lst.splice(lst.indexOf(min), 1);\n\
    \            min = Math.min(...lst);\n        }\n        else{\n            new_lst.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n", "    let result =\
    \ [];\n    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let\
    \ min_index = lst.indexOf(min);\n    let max_index = lst.indexOf(max);\n    result.push(min);\n\
    \    result.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index,\
    \ 1);\n    while (lst.length > 0){\n        min = Math.min(...lst);\n        max\
    \ = Math.max(...lst);\n        min_index = lst.indexOf(min);\n        max_index\
    \ = lst.indexOf(max);\n        result.push(min);\n        result.push(max);\n\
    \        lst.splice(min_index, 1);\n        lst.splice(max_index, 1);\n    }\n\
    \    return result;\n}\n", "    if(lst.length == 0){\n        return [];\n   \
    \ }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var res = [];\n    var i = 0;\n    while(lst.length > 0){\n     \
    \   if(i % 2 == 0){\n            res.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else{\n\
    \            res.push(max);\n            lst.splice(lst.indexOf(max), 1);\n  \
    \          max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return res;\n}\n", "    if (lst.length == 0) return [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if\
    \ (lst.length == 0) return [];\n    var min = Math.min.apply(null, lst);\n   \
    \ var max = Math.max.apply(null, lst);\n    var result = [];\n    var i = 0;\n\
    \    while (i < lst.length) {\n        result.push(min);\n        result.push(max);\n\
    \        i += 2;\n    }\n    return result;\n}\n", "    if(lst.length == 0){\n\
    \        return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var\
    \ max = Math.max.apply(null, lst);\n    var res = [];\n    var i = 0;\n    while(lst.length\
    \ > 0){\n        if(i % 2 == 0){\n            res.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else{\n\
    \            res.push(max);\n            lst.splice(lst.indexOf(max), 1);\n  \
    \          max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return res;\n}\n", "    if(lst.length === 0){\n        return [];\n    }\n\
    \    let min = Math.min(...lst);\n    let max = Math.max(...lst);\n    let result\
    \ = [];\n    let i = 0;\n    while(lst.length > 0){\n        if(i % 2 === 0){\n\
    \            result.push(min);\n            lst.splice(lst.indexOf(min), 1);\n\
    \            min = Math.min(...lst);\n        }\n        else{\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max(...lst);\n\
    \        }\n        i++;\n    }\n    return result;\n}\n", "    if(lst.length\
    \ == 0) return lst;\n    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n\
    \    var res = [min];\n    var lst_copy = lst.slice();\n    lst_copy.splice(lst_copy.indexOf(min),\
    \ 1);\n    var i = 0;\n    while(lst_copy.length > 0){\n        if(i % 2 == 0){\n\
    \            res.push(Math.max(...lst_copy));\n            lst_copy.splice(lst_copy.indexOf(Math.max(...lst_copy)),\
    \ 1);\n        }\n        else{\n            res.push(Math.min(...lst_copy));\n\
    \            lst_copy.splice(lst_copy.indexOf(Math.min(...lst_copy)), 1);\n  \
    \      }\n        i++;\n    }\n    return res;\n}\n", "    if (lst.length ===\
    \ 0) {\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var new_lst = [];\n    var i =\
    \ 0;\n    while (new_lst.length < lst.length) {\n        if (i % 2 === 0) {\n\
    \            new_lst.push(min);\n            lst.splice(lst.indexOf(min), 1);\n\
    \            min = Math.min.apply(null, lst);\n        } else {\n            new_lst.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = Math.max.apply(null,\
    \ lst);\n        }\n        i++;\n    }\n    return new_lst;\n}\n", "    if (lst.length\
    \ == 0) return [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [min];\n    var new_lst2 = [];\n    if (min_index == max_index)\
    \ {\n        for (var i = 0; i < lst.length; i++) {\n            new_lst.push(lst[i]);\n\
    \        }\n        return new_lst;\n    }\n    for (var i = 0; i < lst.length;\
    \ i++) {\n        if (i != min_index && i != max_index) {\n            new_lst2.push(lst[i]);\n\
    \        }\n    }\n    new_lst.push(max);\n    var new_lst3 = strange_sort_list(new_lst2);\n\
    \    for (var i = 0; i < new_lst3.length; i++) {\n        new_lst.push(new_lst3[i]);\n\
    \    }\n    return new_lst;\n}\n", "    if (lst.length === 0) {\n        return\
    \ [];\n    }\n    lst.sort(function(a, b){return a-b});\n    var result = [];\n\
    \    var i = 0;\n    var j = lst.length - 1;\n    while (i <= j) {\n        result.push(lst[i]);\n\
    \        if (i !== j) {\n            result.push(lst[j]);\n        }\n       \
    \ i++;\n        j--;\n    }\n    return result;\n}\n", "    if(lst.length == 0){\n\
    \        return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var\
    \ max = Math.max.apply(null, lst);\n    var new_lst = [];\n    var i = 0;\n  \
    \  while(i < lst.length){\n        if(i % 2 == 0){\n            new_lst.push(min);\n\
    \            lst.splice(lst.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ lst);\n        }\n        else{\n            new_lst.push(max);\n          \
    \  lst.splice(lst.indexOf(max), 1);\n            max = Math.max.apply(null, lst);\n\
    \        }\n        i++;\n    }\n    return new_lst;\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    if(lst.length == 0){\n        return new_lst;\n    }\n    var\
    \ new_min = Math.min.apply(null, lst);\n    var new_max = Math.max.apply(null,\
    \ lst);\n    var new_min_index = lst.indexOf(new_min);\n    var new_max_index\
    \ = lst.indexOf(new_max);\n    new_lst.push(new_min);\n    new_lst.push(new_max);\n\
    \    lst.splice(new_min_index, 1);\n    lst.splice(new_max_index - 1, 1);\n  \
    \  if(lst.length == 0){\n        return new_lst;\n    }\n    var new_new_min =\
    \ Math.min.apply(null, lst);\n    var new_new_max = Math.max.apply(null, lst);\n\
    \    var new_new_min_index = lst.indexOf(new_new_min);\n    var new_new_max_index\
    \ = lst.indexOf(new_new_max);\n    new_lst.push(new_new_min);\n    new_lst.push(new_new_max);\n\
    \    lst.splice(new_new_min_index, 1);\n    lst.splice(new_new_max_index - 1,\
    \ 1);\n    if(lst.length == 0){\n        return new_lst;\n    }\n    var new_new_new_min\
    \ = Math.min.apply(", "    if (lst.length == 0) {\n        return [];\n    }\n\
    \    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    let sorted = lst.sort((a, b) => a - b);\n    let result = [];\n   \
    \ let i = 0;\n    let j = sorted.length - 1;\n    while (i <= j) {\n        result.push(sorted[i]);\n\
    \        if (i !== j) {\n            result.push(sorted[j]);\n        }\n    \
    \    i++;\n        j--;\n    }\n    return result;\n}\n", "    var min = Math.min(...lst);\n\
    \    var max = Math.max(...lst);\n    var new_lst = [];\n    var i = 0;\n    while\
    \ (i < lst.length){\n        new_lst.push(min);\n        new_lst.push(max);\n\
    \        i += 2;\n    }\n    return new_lst;\n}", "    if(lst.length == 0){\n\
    \        return [];\n    }\n    if(lst.length == 1){\n        return lst;\n  \
    \  }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if(lst.length == 0) return [];\n    var min = Math.min(...lst);\n \
    \   var max = Math.max(...lst);\n    var new_lst = [];\n    var i = 0;\n    while(lst.length\
    \ > 0){\n        new_lst.push(min);\n        lst.splice(lst.indexOf(min), 1);\n\
    \        if(lst.length == 0) break;\n        new_lst.push(max);\n        lst.splice(lst.indexOf(max),\
    \ 1);\n    }\n    return new_lst;\n}\n", "    if (lst.length == 0){\n        return\
    \ [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var new_lst = [];\n    var i = 0;\n    while (i < lst.length){\n\
    \        if (i % 2 == 0){\n            new_lst.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else{\n\
    \            new_lst.push(max);\n            lst.splice(lst.indexOf(max), 1);\n\
    \            max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return new_lst;\n}\n", "    if (lst.length == 0) return [];\n    var min\
    \ = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n   \
    \ var res = [min];\n    var i = 0;\n    while (lst.length > 1) {\n        if (i\
    \ % 2 == 0) {\n            res.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, lst);\n        } else {\n      \
    \      res.push(min);\n            lst.splice(lst.indexOf(min), 1);\n        \
    \    min = Math.min.apply(null, lst);\n        }\n        i++;\n    }\n    res.push(lst[0]);\n\
    \    return res;\n}\n", "    if (lst.length == 0) {\n        return [];\n    }\n\
    \    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    return\
    \ [min, max].concat(strange_sort_list(lst));\n}\n", "    if (lst.length == 0)\
    \ return [];\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var res = [];\n    var i = 0;\n    while (res.length < lst.length){\n\
    \        if (i % 2 == 0){\n            res.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else {\n\
    \            res.push(max);\n            lst.splice(lst.indexOf(max), 1);\n  \
    \          max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
