name: HumanEval_70_strange_sort_list
language: js
prompt: "//Given array of integers, return array in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1,\
  \ 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n\
  \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4,\
  \ 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2,\
  \ 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["    if(lst.length === 0){\n        return lst;\n    }\n    var min\
    \ = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n   \
    \ var result = [];\n    var i = 0;\n    while(lst.length > 0){\n        if(i %\
    \ 2 === 0){\n            result.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(null, lst);\n        }\n        else{\n\
    \            result.push(max);\n            lst.splice(lst.indexOf(max), 1);\n\
    \            max = Math.max.apply(null, lst);\n        }\n        i++;\n    }\n\
    \    return result;\n}\n", "    if (lst.length === 0){\n        return [];\n \
    \   }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var minIndex = lst.indexOf(min);\n    var maxIndex = lst.indexOf(max);\n\
    \    var newList = [];\n    newList.push(min);\n    newList.push(max);\n    lst.splice(minIndex,\
    \ 1);\n    lst.splice(maxIndex - 1, 1);\n    if (lst.length === 0){\n        return\
    \ newList;\n    }\n    return newList.concat(strange_sort_list(lst));\n}\n", " \
    \   if (lst.length == 0) {\n        return [];\n    }\n    lst.sort(function(a,\
    \ b){return a-b});\n    var result = [];\n    var i = 0;\n    var j = lst.length\
    \ - 1;\n    while (i < j) {\n        result.push(lst[i]);\n        result.push(lst[j]);\n\
    \        i++;\n        j--;\n    }\n    if (i == j) {\n        result.push(lst[i]);\n\
    \    }\n    return result;\n}\n", "    if (lst.length == 0) {\n        return\
    \ [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var result = [];\n    var i = 0;\n    while (i < lst.length) {\n\
    \        if (i % 2 == 0) {\n            result.push(min);\n            min = Math.min.apply(null,\
    \ lst.filter(function(x) { return x > min; }));\n        } else {\n          \
    \  result.push(max);\n            max = Math.max.apply(null, lst.filter(function(x)\
    \ { return x < max; }));\n        }\n        i++;\n    }\n    return result;\n\
    }\n", "    if (lst.length == 0) return [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    var lst_1 = lst.slice(0, min_index).concat(lst.slice(min_index + 1));\n \
    \   var lst_2 = lst_1.slice(0, max_index - 1).concat(lst_1.slice(max_index));\n\
    \    new_lst.push(max);\n    var lst_3 = lst_2.slice(0, max_index - 1).concat(lst_2.slice(max_index));\n\
    \    var lst_4 = lst_3.slice(0, min_index).concat(lst_3.slice(min_index + 1));\n\
    \    new_lst = new_lst.concat(strange_sort_list(lst_4));\n    return new_lst;\n\
    }\n", "    if(lst.length === 0) return [];\n    let sorted = lst.sort((a,b) =>\
    \ a-b);\n    let result = [];\n    let i = 0;\n    let j = sorted.length - 1;\n\
    \    while(i <= j){\n        result.push(sorted[i]);\n        i++;\n        if(i\
    \ <= j){\n            result.push(sorted[j]);\n            j--;\n        }\n \
    \   }\n    return result;\n}\n", "    if(lst.length === 0){\n        return [];\n\
    \    }\n    if(lst.length === 1){\n        return lst;\n    }\n    var min = Math.min(...lst);\n\
    \    var max = Math.max(...lst);\n    var minIndex = lst.indexOf(min);\n    var\
    \ maxIndex = lst.indexOf(max);\n    var newLst = [];\n    newLst.push(min);\n\
    \    newLst.push(max);\n    lst.splice(minIndex, 1);\n    lst.splice(maxIndex\
    \ - 1, 1);\n    return newLst.concat(strange_sort_list(lst));\n}\n", "    if (lst.length\
    \ == 0) {\n        return [];\n    }\n    if (lst.length == 1) {\n        return\
    \ lst;\n    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    var new_lst_2 = [];\n    for (var i = 0; i < lst.length;\
    \ i++) {\n        if (i == min_index) {\n            new_lst.push(min);\n    \
    \    }\n        else if (i == max_index) {\n            new_lst.push(max);\n \
    \       }\n        else {\n            new_lst_2.push(lst[i]);\n        }\n  \
    \  }\n    return new_lst.concat(strange_sort_list(new_lst_2));\n}\n", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    var min = Math.min.apply(null, lst);\n\
    \    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    var\
    \ result = [];\n    var lst_copy = lst.slice();\n    var min_index = 0;\n    var\
    \ max_index = 0;\n    for (var i = 0; i < lst.length; i++){\n        min_index\
    \ = lst_copy.indexOf(Math.min.apply(null, lst_copy));\n        max_index = lst_copy.indexOf(Math.max.apply(null,\
    \ lst_copy));\n        result.push(lst_copy[min_index]);\n        result.push(lst_copy[max_index]);\n\
    \        lst_copy.splice(min_index, 1);\n        lst_copy.splice(max_index - 1,\
    \ 1);\n    }\n    return result;\n}\n", "    if(lst.length == 0){\n        return\
    \ [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null,\
    \ lst);\n    var min_index = lst.indexOf(min);\n    var max_index = lst.indexOf(max);\n\
    \    var new_lst = [];\n    new_lst.push(min);\n    new_lst.push(max);\n    lst.splice(min_index,\
    \ 1);\n    lst.splice(max_index - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    var new_lst_2\
    \ = [];\n    for (var i = 0; i < lst.length; i++) {\n        if (i == min_index)\
    \ {\n            new_lst.push(min);\n        } else if (i == max_index) {\n  \
    \          new_lst.push(max);\n        } else {\n            new_lst_2.push(lst[i]);\n\
    \        }\n    }\n    return new_lst.concat(strange_sort_list(new_lst_2));\n\
    }\n", "    if (lst.length == 0) {\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    var i = 0;\n\
    \    while (i < lst.length) {\n        if (i % 2 == 0) {\n            new_lst.push(min);\n\
    \            lst.splice(min_index, 1);\n            min = Math.min.apply(null,\
    \ lst);\n            min_index = lst.indexOf(min);\n        } else {\n       \
    \     new_lst.push(max);\n            lst.splice(max_index, 1);\n            max\
    \ = Math.max.apply(null, lst);\n            max_index = lst.indexOf(max);\n  \
    \      }\n        i++;\n    }\n    return new_lst;\n}\n", "    if (lst.length\
    \ == 0) {\n        return lst;\n    }\n    var res = [];\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    res.push(min);\n    res.push(max);\n\
    \    lst.splice(min_index, 1);\n    lst.splice(max_index - 1, 1);\n    return\
    \ res.concat(strange_sort_list(lst));\n}\n", "    if (lst.length == 0) {\n   \
    \     return [];\n    }\n    var min = Math.min.apply(null, lst);\n    var max\
    \ = Math.max.apply(null, lst);\n    var result = [min];\n    var i = 0;\n    while\
    \ (i < lst.length) {\n        if (lst[i] != min) {\n            result.push(lst[i]);\n\
    \        }\n        i++;\n    }\n    i = 0;\n    while (i < lst.length) {\n  \
    \      if (lst[i] != max) {\n            result.push(lst[i]);\n        }\n   \
    \     i++;\n    }\n    return result;\n}\n", "    if(lst.length == 0) return [];\n\
    \    var min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var res\
    \ = [];\n    var i = 0;\n    while(res.length < lst.length){\n        if(i % 2\
    \ == 0){\n            res.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min(...lst);\n        }\n        else{\n       \
    \     res.push(max);\n            lst.splice(lst.indexOf(max), 1);\n         \
    \   max = Math.max(...lst);\n        }\n        i++;\n    }\n    return res;\n\
    }\n", "    if(lst.length === 0){\n        return [];\n    }\n    var min = Math.min(...lst);\n\
    \    var max = Math.max(...lst);\n    var new_lst = [];\n    var i = 0;\n    while(new_lst.length\
    \ < lst.length){\n        if(i % 2 === 0){\n            new_lst.push(min);\n \
    \           lst.splice(lst.indexOf(min), 1);\n            min = Math.min(...lst);\n\
    \        }\n        else{\n            new_lst.push(max);\n            lst.splice(lst.indexOf(max),\
    \ 1);\n            max = Math.max(...lst);\n        }\n        i++;\n    }\n \
    \   return new_lst;\n}\n", "    if (lst.length == 0) return [];\n    var min =\
    \ Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n    var\
    \ new_lst = [];\n    var i = 0;\n    while (i < lst.length) {\n        new_lst.push(min);\n\
    \        new_lst.push(max);\n        i += 2;\n    }\n    return new_lst;\n}\n",
  "    if(lst.length == 0){\n        return [];\n    }\n    var min = Math.min.apply(null,\
    \ lst);\n    var max = Math.max.apply(null, lst);\n    var min_index = lst.indexOf(min);\n\
    \    var max_index = lst.indexOf(max);\n    var new_lst = [];\n    new_lst.push(min);\n\
    \    new_lst.push(max);\n    lst.splice(min_index, 1);\n    lst.splice(max_index\
    \ - 1, 1);\n    return new_lst.concat(strange_sort_list(lst));\n}\n", "    if(lst.length\
    \ === 0){\n        return [];\n    }\n    var min = Math.min(...lst);\n    var\
    \ max = Math.max(...lst);\n    var new_lst = [];\n    var i = 0;\n    while(i\
    \ < lst.length){\n        new_lst.push(min);\n        new_lst.push(max);\n   \
    \     i += 2;\n    }\n    return new_lst;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
