{
  "language": "php",
  "name": "HumanEval_46_fib4",
  "results": [
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn 2;\n\t}\n\tif ($n == 3) {\n\t\treturn 0;\n\t}\n\t$a = 0;\n\t$b = 0;\n\t$c = 2;\n\t$d = 0;\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$e = $a + $b + $c + $d;\n\t\t$a = $b;\n\t\t$b = $c;\n\t\t$c = $d;\n\t\t$d = $e;\n\t}\n\treturn $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4_n_1 = 0;\n    $fib4_n_2 = 0;\n    $fib4_n_3 = 2;\n    $fib4_n_4 = 0;\n    $fib4_n = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_n = $fib4_n_1 + $fib4_n_2 + $fib4_n_3 + $fib4_n_4;\n        $fib4_n_1 = $fib4_n_2;\n        $fib4_n_2 = $fib4_n_3;\n        $fib4_n_3 = $fib4_n_4;\n        $fib4_n_4 = $fib4_n;\n    }\n    return $fib4_n;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fibs = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fibs[$i % 4] = $fibs[($i - 1) % 4] + $fibs[($i - 2) % 4] + $fibs[($i - 3) % 4] + $fibs[($i - 4) % 4];\n    }\n    return $fibs[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4_n_1 = 0;\n    $fib4_n_2 = 0;\n    $fib4_n_3 = 2;\n    $fib4_n_4 = 0;\n    $fib4_n = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_n = $fib4_n_1 + $fib4_n_2 + $fib4_n_3 + $fib4_n_4;\n        $fib4_n_1 = $fib4_n_2;\n        $fib4_n_2 = $fib4_n_3;\n        $fib4_n_3 = $fib4_n_4;\n        $fib4_n_4 = $fib4_n;\n    }\n    return $fib4_n;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    if ($n == 0) {\n        return $a;\n    } else if ($n == 1) {\n        return $b;\n    } else if ($n == 2) {\n        return $c;\n    } else if ($n == 3) {\n        return $d;\n    } else {\n        for ($i = 4; $i <= $n; $i++) {\n            $e = $a + $b + $c + $d;\n            $a = $b;\n            $b = $c;\n            $c = $d;\n            $d = $e;\n        }\n        return $e;\n    }\n}\n\necho fib4(5);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "4",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n  $fib4 = array(0, 0, 2, 0);\n  for ($i = 4; $i <= $n; $i++) {\n    $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n  }\n  return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    if ($n < 4) {\n        return $fib4[$n];\n    }\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30)\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpoi1azhwm.php on line 67\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(10) . PHP_EOL;\necho fib4(20) . PHP_EOL;\necho fib4(30) . PHP_EOL;\necho fib4(40) . PHP_EOL;\necho fib4(50) . PHP_EOL;\necho fib4(60) . PHP_EOL;\necho fib4(70) . PHP_EOL;\necho fib4(80) . PHP_EOL;\necho fib4(90) . PHP_EOL;\necho fib4(100) . PHP_EOL;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "104\n73552\n52080824\n36877489824\n26112283777288\n18489636016979440\n1.3092176959938E+19\n9.2703337909376E+21\n6.56415574418E+24\n4.6479599985895E+27\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n193506050\n372994904\n718970794\n1385860764\n2671332512\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4_n_minus_1 = 0;\n    $fib4_n_minus_2 = 0;\n    $fib4_n_minus_3 = 2;\n    $fib4_n_minus_4 = 0;\n    $fib4_n = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_n = $fib4_n_minus_1 + $fib4_n_minus_2 + $fib4_n_minus_3 + $fib4_n_minus_4;\n        $fib4_n_minus_4 = $fib4_n_minus_3;\n        $fib4_n_minus_3 = $fib4_n_minus_2;\n        $fib4_n_minus_2 = $fib4_n_minus_1;\n        $fib4_n_minus_1 = $fib4_n;\n    }\n    return $fib4_n;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8g29ihp7.php:43\nStack trace:\n#0 /tmp/tmp8g29ihp7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8g29ihp7.php on line 43\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $d;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9hhe48l.php:29\nStack trace:\n#0 /tmp/tmpm9hhe48l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm9hhe48l.php on line 29\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n193506050\n372994904\n718970794\n1385860764\n2671332512\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(4);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "2",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = $fib[($i - 1) % 4] + $fib[($i - 2) % 4] + $fib[($i - 3) % 4] + $fib[($i - 4) % 4];\n    }\n    return $fib[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n  if ($n < 0) {\n    return -1;\n  }\n  if ($n == 0) {\n    return 0;\n  }\n  if ($n == 1) {\n    return 0;\n  }\n  if ($n == 2) {\n    return 2;\n  }\n  if ($n == 3) {\n    return 0;\n  }\n  $a = 0;\n  $b = 0;\n  $c = 2;\n  $d = 0;\n  for ($i = 4; $i <= $n; $i++) {\n    $e = $a + $b + $c + $d;\n    $a = $b;\n    $b = $c;\n    $c = $d;\n    $d = $e;\n  }\n  return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpqt19i94u.php on line 53\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(4);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "2",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n === 0) {\n        return 0;\n    }\n    if ($n === 1) {\n        return 0;\n    }\n    if ($n === 2) {\n        return 2;\n    }\n    if ($n === 3) {\n        return 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n  $fib4 = array(0, 0, 2, 0);\n  for ($i = 4; $i <= $n; $i++) {\n    $fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n  }\n  return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4_n_1 = 0;\n    $fib4_n_2 = 0;\n    $fib4_n_3 = 2;\n    $fib4_n_4 = 0;\n    $fib4_n = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_n = $fib4_n_1 + $fib4_n_2 + $fib4_n_3 + $fib4_n_4;\n        $fib4_n_1 = $fib4_n_2;\n        $fib4_n_2 = $fib4_n_3;\n        $fib4_n_3 = $fib4_n_4;\n        $fib4_n_4 = $fib4_n;\n    }\n    return $fib4_n;\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) .\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpyys7mqzo.php on line 59\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4_n_minus_1 = 0;\n    $fib4_n_minus_2 = 0;\n    $fib4_n_minus_3 = 2;\n    $fib4_n_minus_4 = 0;\n    $fib4_n = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_n = $fib4_n_minus_1 + $fib4_n_minus_2 + $fib4_n_minus_3 + $fib4_n_minus_4;\n        $fib4_n_minus_4 = $fib4_n_minus_3;\n        $fib4_n_minus_3 = $fib4_n_minus_2;\n        $fib4_n_minus_2 = $fib4_n_minus_1;\n        $fib4_n_minus_1 = $fib4_n;\n    }\n    return $fib4_n;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8g29ihp7.php:43\nStack trace:\n#0 /tmp/tmp8g29ihp7.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp8g29ihp7.php on line 43\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n  $fib4 = [0, 0, 2, 0];\n  for ($i = 4; $i <= $n; $i++) {\n    $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n  }\n  return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    if ($n < 4) {\n        return $fib4[$n];\n    }\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(4);\necho \"\\n\";\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\necho fib4(8);\necho \"\\n\";\necho fib4(9);\necho \"\\n\";\necho fib4(10);\necho \"\\n\";\necho fib4(11);\necho \"\\n\";\necho fib4(12);\necho \"\\n\";\necho fib4(13);\necho \"\\n\";\necho fib4(14);\necho \"\\n\";\necho fib4(15);\necho \"\\n\";\necho fib4(16);\necho \"\\n\";\necho fib4(17);\necho \"\\n\";\necho fib4(18);\necho \"\\n\";\necho fib4(19);\necho \"\\n\";\necho fib4(20);\necho \"\\n\";\necho fib4(21);\necho \"\\n\";\necho fib4(22);\necho \"\\n\";\necho fib4(23);\necho \"\\n\";\necho fib4(24);\necho \"\\n\";\necho fib4(25);\necho \"\\n\";\necho fib4(26);\necho \"\\n\";\necho fib4(27);\necho \"\\n\";\necho fib4(28);\necho \"\\n\";\necho fib4(29);\necho \"\\n\";\necho fib4(30);\necho \"\\n\";\necho fib4(31);\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30)\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpoi1azhwm.php on line 67\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    } else {\n        $fib4 = [0, 0, 2, 0];\n        for ($i = 4; $i <= $n; $i++) {\n            $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n        }\n        return $fib4[$n % 4];\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34)\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmp77fn8usy.php on line 67\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(10) . PHP_EOL;\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "104\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    if ($n < 4) {\n        return $fib4[$n];\n    }\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\necho fib4(4);\necho \"\\n\";\necho fib4(5);\necho \"\\n\";\necho fib4(6);\necho \"\\n\";\necho fib4(7);\necho \"\\n\";\necho fib4(8);\necho \"\\n\";\necho fib4(9);\necho \"\\n\";\necho fib4(10);\necho \"\\n\";\necho fib4(11);\necho \"\\n\";\necho fib4(12);\necho \"\\n\";\necho fib4(13);\necho \"\\n\";\necho fib4(14);\necho \"\\n\";\necho fib4(15);\necho \"\\n\";\necho fib4(16);\necho \"\\n\";\necho fib4(17);\necho \"\\n\";\necho fib4(18);\necho \"\\n\";\necho fib4(19);\necho \"\\n\";\necho fib4(20);\necho \"\\n\";\necho fib4(21);\necho \"\\n\";\necho fib4(22);\necho \"\\n\";\necho fib4(23);\necho \"\\n\";\necho fib4(24);\necho \"\\n\";\necho fib4(25);\necho \"\\n\";\necho fib4(26);\necho \"\\n\";\necho fib4(27);\necho \"\\n\";\necho fib4(28);\necho \"\\n\";\necho fib4(29);\necho \"\\n\";\necho fib4(30);\necho \"\\n\";\necho fib4(31);\necho \"\\n\";\necho fib4(32);\necho \"\\n\";\necho fib4(33);\necho \"\\n\";\necho fib4(34);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n193506050\n372994904\n718970794",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(10);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "104",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpafbr7hkf.php on line 59\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . PHP_EOL;\necho fib4(1) . PHP_EOL;\necho fib4(2) . PHP_EOL;\necho fib4(3) . PHP_EOL;\necho fib4(4) . PHP_EOL;\necho fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\necho fib4(8) . PHP_EOL;\necho fib4(9) . PHP_EOL;\necho fib4(10) . PHP_EOL;\necho fib4(11) . PHP_EOL;\necho fib4(12) . PHP_EOL;\necho fib4(13) . PHP_EOL;\necho fib4(14) . PHP_EOL;\necho fib4(15) . PHP_EOL;\necho fib4(16) . PHP_EOL;\necho fib4(17) . PHP_EOL;\necho fib4(18) . PHP_EOL;\necho fib4(19) . PHP_EOL;\necho fib4(20) . PHP_EOL;\necho fib4(21) . PHP_EOL;\necho fib4(22) . PHP_EOL;\necho fib4(23) . PHP_EOL;\necho fib4(24) . PHP_EOL;\necho fib4(25) . PHP_EOL;\necho fib4(26) . PHP_EOL;\necho fib4(27) . PHP_EOL;\necho fib4(28) . PHP_EOL;\necho fib4(29) . PHP_EOL;\necho fib4(30) . PHP_EOL;\necho fib4\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpadt4cg_i.php on line 49\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(10);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "104",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(4);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "2",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $d;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9hhe48l.php:29\nStack trace:\n#0 /tmp/tmpm9hhe48l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm9hhe48l.php on line 29\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n193506050\n372994904\n718970794\n1385860764\n2671332512\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4_0 = 0;\n    $fib4_1 = 0;\n    $fib4_2 = 2;\n    $fib4_3 = 0;\n    $fib4_n = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_n = $fib4_0 + $fib4_1 + $fib4_2 + $fib4_3;\n        $fib4_0 = $fib4_1;\n        $fib4_1 = $fib4_2;\n        $fib4_2 = $fib4_3;\n        $fib4_3 = $fib4_n;\n    }\n    return $fib4_n;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30)\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpoi1azhwm.php on line 67\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $d;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9hhe48l.php:29\nStack trace:\n#0 /tmp/tmpm9hhe48l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm9hhe48l.php on line 29\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n193506050\n372994904\n718970794\n1385860764\n2671332512\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4_n_1 = 0;\n    $fib4_n_2 = 0;\n    $fib4_n_3 = 2;\n    $fib4_n_4 = 0;\n    $fib4_n = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_n = $fib4_n_1 + $fib4_n_2 + $fib4_n_3 + $fib4_n_4;\n        $fib4_n_1 = $fib4_n_2;\n        $fib4_n_2 = $fib4_n_3;\n        $fib4_n_3 = $fib4_n_4;\n        $fib4_n_4 = $fib4_n;\n    }\n    return $fib4_n;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n  $fib4 = [0, 0, 2, 0];\n  for ($i = 4; $i <= $n; $i++) {\n    $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n  }\n  return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n\tif ($n < 0) {\n\t\treturn -1;\n\t}\n\tif ($n == 0) {\n\t\treturn 0;\n\t}\n\tif ($n == 1) {\n\t\treturn 0;\n\t}\n\tif ($n == 2) {\n\t\treturn 2;\n\t}\n\tif ($n == 3) {\n\t\treturn 0;\n\t}\n\t$fib4 = array(0, 0, 2, 0);\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n\t}\n\treturn $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    if ($n == 0) {\n        return $a;\n    } else if ($n == 1) {\n        return $b;\n    } else if ($n == 2) {\n        return $c;\n    } else if ($n == 3) {\n        return $d;\n    }\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $n1 = 0;\n    $n2 = 0;\n    $n3 = 2;\n    $n4 = 0;\n    $result = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $result = $n1 + $n2 + $n3 + $n4;\n        $n1 = $n2;\n        $n2 = $n3;\n        $n3 = $n4;\n        $n4 = $result;\n    }\n    return $result;\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4_n_minus_1 = 0;\n    $fib4_n_minus_2 = 0;\n    $fib4_n_minus_3 = 2;\n    $fib4_n_minus_4 = 0;\n    $fib4_n = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_n = $fib4_n_minus_1 + $fib4_n_minus_2 + $fib4_n_minus_3 + $fib4_n_minus_4;\n        $fib4_n_minus_4 = $fib4_n_minus_3;\n        $fib4_n_minus_3 = $fib4_n_minus_2;\n        $fib4_n_minus_2 = $fib4_n_minus_1;\n        $fib4_n_minus_1 = $fib4_n;\n    }\n    return $fib4_n;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp2zosd45.php:46\nStack trace:\n#0 /tmp/tmpp2zosd45.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpp2zosd45.php on line 46\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n  $fib4 = [0, 0, 2, 0];\n  for ($i = 4; $i <= $n; $i++) {\n    $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n  }\n  return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4_n_1 = 0;\n    $fib4_n_2 = 0;\n    $fib4_n_3 = 2;\n    $fib4_n_4 = 0;\n    $fib4_n = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_n = $fib4_n_1 + $fib4_n_2 + $fib4_n_3 + $fib4_n_4;\n        $fib4_n_1 = $fib4_n_2;\n        $fib4_n_2 = $fib4_n_3;\n        $fib4_n_3 = $fib4_n_4;\n        $fib4_n_4 = $fib4_n;\n    }\n    return $fib4_n;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27)\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpyach0xji.php on line 60\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 4) {\n        return $n == 2 ? 2 : 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 0;\n    $d = 2;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34)\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmp1yk8anha.php on line 62\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i % 4] = $fib[($i - 1) % 4] + $fib[($i - 2) % 4] + $fib[($i - 3) % 4] + $fib[($i - 4) % 4];\n    }\n    return $fib[$n % 4];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpan6h1e_b.php on line 54\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4_array = array(0, 0, 2, 0);\n    if ($n < 4) {\n        return $fib4_array[$n];\n    }\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_array[$i] = $fib4_array[$i - 1] + $fib4_array[$i - 2] + $fib4_array[$i - 3] + $fib4_array[$i - 4];\n    }\n    return $fib4_array[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(10);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "104",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\";\necho fib4(37) . \"\\n\";\necho fib4(38) . \"\\n\";\necho fib4(39) . \"\\n\";\necho fib4(40) . \"\\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpxa3rc6fa.php on line 59\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpafbr7hkf.php on line 59\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    if ($n < 4) {\n        return $fib4[$n];\n    }\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmp1jqbkniq.php on line 53\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n193506050\n372994904\n718970794\n1385860764\n2671332512\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $d;\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpxg1077xk.php on line 66\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30)\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpoi1azhwm.php on line 67\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(4);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "2",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $d;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9hhe48l.php:29\nStack trace:\n#0 /tmp/tmpm9hhe48l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm9hhe48l.php on line 29\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n193506050\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $d;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9hhe48l.php:29\nStack trace:\n#0 /tmp/tmpm9hhe48l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm9hhe48l.php on line 29\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n193506050\n372994904\n718970794\n1385860764\n2671332512\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fibs = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fibs[$i % 4] = $fibs[($i - 1) % 4] + $fibs[($i - 2) % 4] + $fibs[($i - 3) % 4] + $fibs[($i - 4) % 4];\n    }\n    return $fibs[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n193506050\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\necho fib4(0) . PHP_EOL;\necho fib4(1) . PHP_EOL;\necho fib4(2) . PHP_EOL;\necho fib4(3) . PHP_EOL;\necho fib4(4) . PHP_EOL;\necho fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\necho fib4(8) . PHP_EOL;\necho fib4(9) . PHP_EOL;\necho fib4(10) . PHP_EOL;\necho fib4(11) . PHP_EOL;\necho fib4(12) . PHP_EOL;\necho fib4(13) . PHP_EOL;\necho fib4(14) . PHP_EOL;\necho fib4(15) . PHP_EOL;\necho fib4(16) . PHP_EOL;\necho fib4(17) . PHP_EOL;\necho fib4(18) . PHP_EOL;\necho fib4(19) . PHP_EOL;\necho fib4(20) . PHP_EOL;\necho fib4(21) . PHP_EOL;\necho fib4(22) . PHP_EOL;\necho fib4(\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpnn7v0ibn.php on line 56\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    } else {\n        $fib4_n_1 = 0;\n        $fib4_n_2 = 0;\n        $fib4_n_3 = 2;\n        $fib4_n_4 = 0;\n        $fib4_n = 0;\n        for ($i = 4; $i <= $n; $i++) {\n            $fib4_n = $fib4_n_1 + $fib4_n_2 + $fib4_n_3 + $fib4_n_4;\n            $fib4_n_1 = $fib4_n_2;\n            $fib4_n_2 = $fib4_n_3;\n            $fib4_n_3 = $fib4_n_4;\n            $fib4_n_4 = $fib4_n;\n        }\n        return $fib4_n;\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4_n_1 = 0;\n    $fib4_n_2 = 0;\n    $fib4_n_3 = 2;\n    $fib4_n_4 = 0;\n    $fib4_n = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4_n = $fib4_n_1 + $fib4_n_2 + $fib4_n_3 + $fib4_n_4;\n        $fib4_n_1 = $fib4_n_2;\n        $fib4_n_2 = $fib4_n_3;\n        $fib4_n_3 = $fib4_n_4;\n        $fib4_n_4 = $fib4_n;\n    }\n    return $fib4_n;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    if ($n < 4) {\n        return $fib4[$n];\n    }\n    $fib4[4] = 2;\n    for ($i = 5; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $d;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9hhe48l.php:29\nStack trace:\n#0 /tmp/tmpm9hhe48l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm9hhe48l.php on line 29\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpafbr7hkf.php on line 59\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    } else {\n        $fib4 = [0, 0, 2, 0];\n        for ($i = 4; $i <= $n; $i++) {\n            $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n        }\n        return $fib4[$n % 4];\n    }\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpj6csik97.php on line 57\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n\t$nums = [0, 0, 2, 0];\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$nums[$i % 4] = $nums[($i - 1) % 4] + $nums[($i - 2) % 4] + $nums[($i - 3) % 4] + $nums[($i - 4) % 4];\n\t}\n\treturn $nums[$n % 4];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n193506050\n372994904\n718970794\n1385860764\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 2) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n    }\n    return $d;\n}\n\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\";\necho fib4(37) . \"\\n\";\necho fib4(38) .\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpj7a3hlq7.php on line 64\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    } else {\n        $fib4 = [0, 0, 2, 0];\n        for ($i = 4; $i <= $n; $i++) {\n            $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n        }\n        return $fib4[$n % 4];\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $d;\n}\n\necho fib4(10);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "200\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_546z7jb.php:30\nStack trace:\n#0 /tmp/tmp_546z7jb.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp_546z7jb.php on line 30\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpbqkl__4c.php on line 59\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30)\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpoi1azhwm.php on line 67\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n193506050\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n  $fib4 = [0, 0, 2, 0];\n  for ($i = 4; $i <= $n; $i++) {\n    $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n  }\n  return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpafbr7hkf.php on line 59\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    } else {\n        $a = 0;\n        $b = 0;\n        $c = 2;\n        $d = 0;\n        for ($i = 4; $i <= $n; $i++) {\n            $e = $a + $b + $c + $d;\n            $a = $b;\n            $b = $c;\n            $c = $d;\n            $d = $e;\n        }\n        return $e;\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(10);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "104",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(5);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "4",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\";\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "0\n0\n2\n0\n2\n4\n8\n14\n28\n54\n104\n200\n386\n744\n1434\n2764\n5328\n10270\n19796\n38158\n73552\n141776\n273282\n526768\n1015378\n1957204\n3772632\n7271982\n14017196\n27019014\n52080824\n100389016\n193506050\n372994904\n718970794\n1385860764\n2671332512\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . PHP_EOL;\necho fib4(1) . PHP_EOL;\necho fib4(2) . PHP_EOL;\necho fib4(3) . PHP_EOL;\necho fib4(4) . PHP_EOL;\necho fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\necho fib4(8) . PHP_EOL;\necho fib4(9) . PHP_EOL;\necho fib4(10) . PHP_EOL;\necho fib4(11) . PHP_EOL;\necho fib4(12) . PHP_EOL;\necho fib4(13) . PHP_EOL;\necho fib4(14) . PHP_EOL;\necho fib4(15) . PHP_EOL;\necho fib4(16) . PHP_EOL;\necho fib4(17) . PHP_EOL;\necho fib4(18) . PHP_EOL;\necho fib4(19) . PHP_EOL;\necho fib4(20) . PHP_EOL;\necho fib4(21) . PHP_EOL;\necho fib4(22) . PHP_EOL;\necho fib4(23) . PHP_EOL;\necho fib4(24) . PHP_EOL;\necho fib4(25) . PHP_EOL;\necho fib4(26) . PHP_EOL;\necho fib4(27) . PHP_EOL;\necho fib4(28) . PHP_EOL;\necho fib4(29) . PHP_EOL;\necho fib4(30) . PHP_EOL;\necho fib4\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpadt4cg_i.php on line 49\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(5);\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "4",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $d;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9hhe48l.php:29\nStack trace:\n#0 /tmp/tmpm9hhe48l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm9hhe48l.php on line 29\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(10);\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "104",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\necho fib4(0) . PHP_EOL;\necho fib4(1) . PHP_EOL;\necho fib4(2) . PHP_EOL;\necho fib4(3) . PHP_EOL;\necho fib4(4) . PHP_EOL;\necho fib4(5) . PHP_EOL;\necho fib4(6) . PHP_EOL;\necho fib4(7) . PHP_EOL;\necho fib4(8) . PHP_EOL;\necho fib4(9) . PHP_EOL;\necho fib4(10) . PHP_EOL;\necho fib4(11) . PHP_EOL;\necho fib4(12) . PHP_EOL;\necho fib4(13) . PHP_EOL;\necho fib4(14) . PHP_EOL;\necho fib4(15) . PHP_EOL;\necho fib4(16) . PHP_EOL;\necho fib4(17) . PHP_EOL;\necho fib4(18) . PHP_EOL;\necho fib4(19) . PHP_EOL;\necho fib4(20) . PHP_EOL;\necho fib4(21) . PHP_EOL;\necho fib4(22) . PHP_EOL;\necho fib4(23) . PHP_EOL;\necho fib4(24) . PHP_EOL;\necho fib4(25) . PHP_EOL;\necho fib4(26) . PHP_EOL;\necho fib4(27) . PHP_EOL;\necho fib4(28) . PHP_EOL;\necho fib4(29) . PHP_EOL;\necho fib4(30) . PHP_EOL;\necho fib4\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmpadt4cg_i.php on line 49\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n\t$fib4 = [0, 0, 2, 0];\n\tfor ($i = 4; $i <= $n; $i++) {\n\t\t$fib4[$i] = $fib4[$i-1] + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4];\n\t}\n\treturn $fib4[$n];\n}\n\necho fib4(0) . \"\\n\";\necho fib4(1) . \"\\n\";\necho fib4(2) . \"\\n\";\necho fib4(3) . \"\\n\";\necho fib4(4) . \"\\n\";\necho fib4(5) . \"\\n\";\necho fib4(6) . \"\\n\";\necho fib4(7) . \"\\n\";\necho fib4(8) . \"\\n\";\necho fib4(9) . \"\\n\";\necho fib4(10) . \"\\n\";\necho fib4(11) . \"\\n\";\necho fib4(12) . \"\\n\";\necho fib4(13) . \"\\n\";\necho fib4(14) . \"\\n\";\necho fib4(15) . \"\\n\";\necho fib4(16) . \"\\n\";\necho fib4(17) . \"\\n\";\necho fib4(18) . \"\\n\";\necho fib4(19) . \"\\n\";\necho fib4(20) . \"\\n\";\necho fib4(21) . \"\\n\";\necho fib4(22) . \"\\n\";\necho fib4(23) . \"\\n\";\necho fib4(24) . \"\\n\";\necho fib4(25) . \"\\n\";\necho fib4(26) . \"\\n\";\necho fib4(27) . \"\\n\";\necho fib4(28) . \"\\n\";\necho fib4(29) . \"\\n\";\necho fib4(30) . \"\\n\";\necho fib4(31) . \"\\n\";\necho fib4(32) . \"\\n\";\necho fib4(33) . \"\\n\";\necho fib4(34) . \"\\n\";\necho fib4(35) . \"\\n\";\necho fib4(36) . \"\\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nParse error: syntax error in /tmp/tmp4ov66zle.php on line 59\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n == 0) {\n        return 0;\n    } else if ($n == 1) {\n        return 0;\n    } else if ($n == 2) {\n        return 2;\n    } else if ($n == 3) {\n        return 0;\n    } else {\n        $a = 0;\n        $b = 0;\n        $c = 2;\n        $d = 0;\n        for ($i = 4; $i <= $n; $i++) {\n            $e = $a + $b + $c + $d;\n            $a = $b;\n            $b = $c;\n            $c = $d;\n            $d = $e;\n        }\n        return $e;\n    }\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = array(0, 0, 2, 0);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return -1;\n    }\n    if ($n == 0) {\n        return 0;\n    }\n    if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return 2;\n    }\n    if ($n == 3) {\n        return 0;\n    }\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 4; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $e;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 255,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i = 3; $i <= $n; $i++) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $e;\n    }\n    return $d;\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "Exception",
      "stderr": "",
      "stdout": "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm9hhe48l.php:29\nStack trace:\n#0 /tmp/tmpm9hhe48l.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm9hhe48l.php on line 29\n",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i] = $fib4[$i - 1] + $fib4[$i - 2] + $fib4[$i - 3] + $fib4[$i - 4];\n    }\n    return $fib4[$n];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    },
    {
      "exit_code": 0,
      "program": "<?php\n// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n// fib4(0) -> 0\n// fib4(1) -> 0\n// fib4(2) -> 2\n// fib4(3) -> 0\n// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n// Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\nfunction fib4($n) {\n    if ($n < 0) {\n        return 0;\n    }\n    $fib4 = [0, 0, 2, 0];\n    for ($i = 4; $i <= $n; $i++) {\n        $fib4[$i % 4] = $fib4[($i - 1) % 4] + $fib4[($i - 2) % 4] + $fib4[($i - 3) % 4] + $fib4[($i - 4) % 4];\n    }\n    return $fib4[$n % 4];\n}\n\nfunction candidate(...$args) {\n    return fib4(...$args);\n}\n\nfunction test(): void {\n    if (candidate(5) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28) { throw new Exception(\"Test failed!\"); }\n    if (candidate(10) !== 104) { throw new Exception(\"Test failed!\"); }\n    if (candidate(12) !== 386) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1659730666
    }
  ]
}