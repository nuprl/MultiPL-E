name: HumanEval_132_is_nested
language: js
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return True if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\n// is_nested('[[]]') \u279E True\n// is_nested('[]]]]]]][[[[[]') \u279E\
  \ False\n// is_nested('[][]') \u279E False\n// is_nested('[]') \u279E False\n//\
  \ is_nested('[[][]]') \u279E True\n// is_nested('[[]][[') \u279E True\nfunction\
  \ is_nested(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
  []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
  []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
  []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
  [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
  [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
  \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
  ]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["    let bracketCount = 0;\n    let openBracketCount = 0;\n    let closeBracketCount\
    \ = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] == '[')\
    \ openBracketCount++;\n        else if(string[i] == ']') closeBracketCount++;\n\
    \        else if(string[i] == '[') bracketCount++;\n        else if(string[i]\
    \ == ']') bracketCount--;\n        if(bracketCount === 0 && closeBracketCount\
    \ === 0 && openBracketCount === 0){\n            return true;\n        }\n   \
    \ }\n    return false;\n}\n", "    \n    // Write your code here\n    \n}\n",
  "    let brackets = string.split('');\n    let open_brackets = 0;\n    let closed_brackets\
    \ = 0;\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i]\
    \ == '['){\n            open_brackets++;\n        }\n        if(brackets[i] ==\
    \ ']'){\n            closed_brackets++;\n        }\n    }\n    if(open_brackets\
    \ == closed_brackets){\n        return true;\n    }\n    return false;\n}\n",
  "    let stack = [];\n    let brackets = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] == '[') stack[stack.length] = i;\n        else if(string[i]\
    \ == ']') brackets--;\n        else if(string[i] == '[' && brackets == 0) return\
    \ true;\n        else if(string[i] == ']' && brackets == 0) return false;\n  \
    \  }\n    return false;\n}\n", "    \n    // Your code here\n    \n}\n", "   \
    \ let stack = [];\n    let open_brackets = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] == '['){\n            stack.push('[');\n       \
    \     open_brackets++;\n        }else if(string[i] == ']'){\n            open_brackets--;\n\
    \            if(open_brackets == 0){\n                stack.pop();\n         \
    \   }\n        }\n    }\n    return stack.length == 0;\n}\n", "    let brackets\
    \ = string.split(']').length - 1;\n    let bracketsNesting = 0;\n    for(let i\
    \ = 0; i < string.length; i++){\n        if(string[i] == '[' && string[i+1] ==\
    \ '['){\n            bracketsNesting++;\n        }\n        else if(string[i]\
    \ == ']' && string[i+1] == ']'){\n            bracketsNesting--;\n        }\n\
    \        if(bracketsNesting < 0){\n            return false;\n        }\n    }\n\
    \    return bracketsNesting == 0;\n}\n", "    let stack = [];\n    let brackets\
    \ = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] == '['){\n\
    \            stack.push('[');\n            brackets++;\n        }\n        else\
    \ if(string[i] == ']'){\n            brackets--;\n        }\n        else if(string[i]\
    \ == '[' && brackets == 0){\n            stack.push(']');\n        }\n       \
    \ else if(string[i] == ']' && brackets == 0){\n            stack.push('[');\n\
    \        }\n    }\n    return stack.length == 0;\n}\n", "    let brackets = string.match(/\\\
    [.*?\\]/g);\n    if(brackets == null){\n        return false;\n    }\n    let\
    \ brackets_length = brackets.length;\n    for(let i = 0; i < brackets_length;\
    \ i++){\n        let bracket = brackets[i];\n        let open_bracket = bracket.match(/\\\
    [/);\n        let close_bracket = bracket.match(/\\]/);\n        if(open_bracket\
    \ == null || close_bracket == null){\n            return false;\n        }\n \
    \       if(open_bracket[0].length != close_bracket[0].length){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    let bracketsCount = 0;\n\
    \    let openingBracketsCount = 0;\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '['){\n            openingBracketsCount++;\n       \
    \ }\n        if(string[i] === ']'){\n            bracketsCount++;\n        }\n\
    \        if(openingBracketsCount === bracketsCount){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n", "    string = string.replace(/\\s+/g,'');\n\
    \    var brackets = string.match(/\\[.*?\\]/g);\n    \n    if(brackets == null){\n\
    \        return false;\n    }\n    \n    for(var i=0; i<brackets.length; i++){\n\
    \        var bracket = brackets[i];\n        var open_bracket = bracket.match(/\\\
    [/);\n        var close_bracket = bracket.match(/\\]/);\n        \n        if(open_bracket\
    \ == null || close_bracket == null){\n            return false;\n        }\n \
    \       \n        if(open_bracket[0].length != close_bracket[0].length){\n   \
    \         return false;\n        }\n    }\n    \n    return true;\n}\n", "   \
    \ let open_brackets = 0;\n    let close_brackets = 0;\n    for(let i = 0; i <\
    \ string.length; i++){\n        if(string[i] == '[') open_brackets++;\n      \
    \  if(string[i] == ']') close_brackets++;\n        if(open_brackets > close_brackets)\
    \ return false;\n    }\n    return open_brackets > close_brackets;\n}\n", "  \
    \  let open_brackets = string.match(/\\[/g);\n    let close_brackets = string.match(/\\\
    ]/g);\n    let open_brackets_count = open_brackets ? open_brackets.length : 0;\n\
    \    let close_brackets_count = close_brackets ? close_brackets.length : 0;\n\
    \    let brackets_count = open_brackets_count + close_brackets_count;\n    return\
    \ brackets_count > 0;\n}\n", "  if(string.length < 2) return false;\n  if(string[0]\
    \ === '[' && string[string.length-1] === ']') return true;\n  if(string[0] ===\
    \ '[' && string[string.length-1] === ']') return true;\n  if(string[0] === '['\
    \ && string[string.length-1] === ']') return true;\n  if(string[0] === '[' &&\
    \ string[string.length-1] === ']') return true;\n  if(string[0] === '[' && string[string.length-1]\
    \ === ']') return true;\n  if(string[0] === '[' && string[string.length-1] ===\
    \ ']') return true;\n  if(string[0] === '[' && string[string.length-1] === ']')\
    \ return true;\n  if(string[0] === '[' && string[string.length-1] === ']') return\
    \ true;\n  if(string[0] === '[' && string[string.length-1] === ']') return true;\n\
    \  if(string[0] === '[' && string[string.length-1] === ']') return true;\n  if(string[0]\
    \ === '[' && string[string.length-1] === ']') return true;\n  if(string[0] ===\
    \ '[' && string[string.length-1] === ']') return true;\n  if(string[0] === '['\
    \ && string[string.length-1] === ']') return true;\n  if(string[0] === '[' &&\
    \ string[string.length-1] === ']') return true;\n  if(string[0] === '[' && string[string.length-1]\
    \ === ']') return true;\n  if(string[0] === '[' && string[string.length-1] ===\
    \ ']') return true;\n  if(string[0] === '[' && string[string.length-1] === ']')\
    \ return true;\n  if(string[0] === '[' && string[string.length-1] === ']') return\
    \ true;\n  if(string[0] === '[' && string[string.length-1] === ']') return true;\n\
    \  if(string[0] === '[' && string[string.length-1] === ']') return true;\n  if(string[0]\
    \ === '[' && string[string.length-1] === ']') return true;\n  if(string[0] ===\
    \ '[' && string[string.length-1] === ']') return true;\n  if(string[0] === '['\
    \ && string[string.length-1] === ']') return true;\n  if(string[0] === '[' &&\
    \ string[string.length-1] === ']') return true;\n  if(string[0] === '[' && string[string.length-1]\
    \ === ']') return true;\n  if(string[0] === '[' && string[string.length-1] ===\
    \ ']') return true;\n  if(string[0] === '[' && string[string.length-1] === ']')\
    \ return true;\n  if(string[0] === '[' && string[string.length-1] === ']') return\
    \ true;", "    // Your code here\n}\n", "    string = string.replace(/\\s+/g,'');\n\
    \    var brackets = string.match(/\\[.*?\\]/g);\n    return brackets !== null;\n\
    }\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n    \
    \    if(stack.length == 0 && string[i] == '['){\n            stack.push('[');\n\
    \        }\n        else if(stack.length == 0 && string[i] == ']'){\n        \
    \    stack.push(']');\n        }\n        else if(string[i] == '[' && stack.length\
    \ != 0){\n            stack.push('[');\n        }\n        else if(string[i] ==\
    \ ']' && stack.length != 0){\n            stack.push(']');\n        }\n      \
    \  else if(string[i] == '[' && stack.length == 0){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && stack.length == 0){\n        \
    \    stack.push(']');\n        }\n        else if(string[i] == '[' && stack.length\
    \ != 0 && string[i - 1] == ']' && string[i + 1] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && stack.length != 0 && string[i\
    \ - 1] == ']' && string[i + 1] == '['){\n            stack.push(']');\n      \
    \  }\n        else if(string[i] == '[' && stack.length == 0 && string[i - 1] ==\
    \ ']' && string[i + 1] == '['){\n            stack.push('[');\n        }\n   \
    \     else if(string[i] == ']' && stack.length == 0 && string[i - 1] == ']' &&\
    \ string[i + 1] == '['){\n            stack.push(']');\n        }\n        else\
    \ if(string[i] == '[' && stack.length != 0 && string[i - 1] == ']' && string[i\
    \ + 1] == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == ']' && stack.length != 0 && string[i - 1] == ']' && string[i + 1] == '['){\n\
    \            stack.push(']');\n        }\n        else if(string[i] == '[' &&\
    \ stack.length == 0 && string[i - 1] == ']' && string[i + 1] == '['){\n      \
    \      stack.push('[');\n        }\n        else if(string[i] == ']' && stack.length\
    \ == 0 && string[i - 1] == ']' && string[i + 1] == '['){\n            stack.push(']');\n\
    \        }\n        else if(string[i] == '[' && stack.length != 0 && string[i\
    \ - 1] == ']' && string[i + 1] == '['){\n            stack.push('[');\n      \
    \  }\n        else if(string[i] == ']' && stack.length != 0 && string[i - 1] ==\
    \ ']' && string[i + 1] == '['){\n            stack.push(']');\n        }\n   \
    \     else if(string[i] == '[' && stack.length == 0 && string[i - 1] == ']' &&\
    \ string[i + 1] == '['){\n            stack.push('[');\n        }\n        else\
    \ if(string[i] == ']' && stack.length == 0 && string[i - 1] == ']' && string[i\
    \ + 1] == '['){\n            stack.push(']');\n        }", "    \n    // Your\
    \ code here\n    \n}\n", "    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '[' && stack.length === 0){\n            stack.push(i);\n\
    \        }\n        else if(string[i] === ']' && stack.length > 0){\n        \
    \    stack.pop();\n        }\n        else if(stack.length > 0 && string[i] ===\
    \ '[' && stack[stack.length - 1] === i){\n            stack.pop();\n        }\n\
    \        else if(stack.length > 0 && string[i] === ']' && stack[stack.length -\
    \ 1] === i){\n            stack.push(i);\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    let bracketsCount = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] == '['){\n            bracketsCount++;\n       \
    \ }\n        if(string[i] == ']'){\n            bracketsCount--;\n        }\n\
    \        if(bracketsCount < 0){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "    \n    // Create a variable called 'count' that holds\
    \ the number of brackets in the string.\n    // The variable should be initialized\
    \ to 0.\n    let count = 0;\n    \n    // Create a variable called 'open' that\
    \ holds the number of open brackets in the string.\n    // The variable should\
    \ be initialized to 0.\n    let open = 0;\n    \n    // Create a variable called\
    \ 'close' that holds the number of close brackets in the string.\n    // The variable\
    \ should be initialized to 0.\n    let close = 0;\n    \n    // Create a variable\
    \ called 'result' that holds the result of the function.\n    // The variable\
    \ should be initialized to False.\n    let result = false;\n    \n    // Create\
    \ a variable called 'stack' that holds the stack of open brackets.\n    // The\
    \ variable should be initialized to an empty array.\n    let stack = [];\n   \
    \ \n    // Create a variable called 'index' that holds the index of the next character\
    \ in the string.\n    // The variable should be initialized to 0.\n    let index\
    \ = 0;\n    \n    // While the index variable is less than the length of the string,\
    \ continue looping until \n    // the index variable reaches the end of the string.\n\
    \    while(index < string.length){\n        // If the character at the index variable\
    \ is a left bracket, increment the count variable.\n        // If the character\
    \ at the index variable is a right bracket, decrement the count variable.\n  \
    \      // If the character at the index variable is a left bracket and count is\
    \ greater than 0, \n        // push the character at the index variable onto the\
    \ stack.\n        // If the character at the index variable is a right bracket\
    \ and count is less than 0, \n        // pop the character at the index variable\
    \ from the stack.\n        // If the character at the index variable is a left\
    \ bracket and count is equal to 0, \n        // push the character at the index\
    \ variable onto the stack.\n        // If the character at the index variable\
    \ is a right bracket and count is equal to 0, \n        // pop the character at\
    \ the index variable from the stack.\n        if(string[index] === '['){\n   \
    \         count++;\n            if(count > 0){\n                stack.push(string[index]);\n\
    \            }\n        }\n        else if(string[index] === ']'){\n         \
    \   count--;\n            if(count < 0){\n                stack.pop();\n     \
    \       }\n        }\n        else if(string[index] === '[' && count > 0){\n \
    \           stack.push(string[index]);\n        }\n        else if(string[index]\
    \ === ']' && count < 0){\n            stack.pop();\n        }\n        else if(string[index]\
    \ === '[' && count === 0){\n            stack.push(string[index]);\n        }\n\
    \        else if(string[index] === ']' && count === 0){\n            stack.pop();\n\
    \        }\n        \n        // Increment the index variable.\n        index++;\n\
    \    }\n    \n    // If the count variable is greater than 0, the string contains ",
  "    let stack = [];\n    for (let i = 0; i < string.length; i++){\n        if (stack.length\
    \ == 0){\n            if (string[i] == '[' || string[i] == '{' || string[i] ==\
    \ '('){\n                stack.push(string[i]);\n            }\n        }\n  \
    \      else if (stack[stack.length - 1] == '[' && string[i] == '['){\n       \
    \     stack.push(string[i]);\n        }\n        else if (stack[stack.length -\
    \ 1] == '{' && string[i] == '{'){\n            stack.push(string[i]);\n      \
    \  }\n        else if (stack[stack.length - 1] == '(' && string[i] == '('){\n\
    \            stack.push(string[i]);\n        }\n        else if (stack[stack.length\
    \ - 1] == '[' && string[i] == '{'){\n            stack.push(string[i]);\n    \
    \    }\n        else if (stack[stack.length - 1] == '(' && string[i] == '['){\n\
    \            stack.push(string[i]);\n        }\n        else if (stack[stack.length\
    \ - 1] == '{' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if (stack[stack.length - 1] == '[' && string[i] == '('){\n\
    \            stack.push(string[i]);\n        }\n        else if (stack[stack.length\
    \ - 1] == '[' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if (stack[stack.length - 1] == '{' && string[i] == '('){\n\
    \            stack.push(string[i]);\n        }\n        else if (stack[stack.length\
    \ - 1] == '{' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if (stack[stack.length - 1] == '(' && string[i] == '['){\n\
    \            stack.push(string[i]);\n        }\n        else if (stack[stack.length\
    \ - 1] == '(' && string[i] == '{'){\n            stack.push(string[i]);\n    \
    \    }\n        else if (stack[stack.length - 1] == '[' && string[i] == '{'){\n\
    \            stack.push(string[i]);\n        }\n        else if (stack[stack.length\
    \ - 1] == '[' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if (stack[stack.length - 1] == '{' && string[i] == '['){\n\
    \            stack.push(string[i]);\n        }\n        else if (stack[stack.length\
    \ - 1] == '{' && string[i] == '{'){\n            stack.push(string[i]);\n    \
    \    }\n        else if (stack[stack.length - 1] == '(' && string[i] == '['){\n\
    \            stack.push(string[i]);\n        }\n        else if (stack[stack.length\
    \ - 1] == '(' && string[i] == '{'){\n            stack.push(string[i]);\n    \
    \    }\n        else if (stack[stack.length - 1] == '[' && string[i] == '['){\n\
    \            stack.push(string[i]);\n        }\n        else if (stack[stack.length\
    \ - 1] == '[' && string[i] == '{')", "    let stack = [];\n    let brackets =\
    \ 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] == '[')\
    \ brackets++;\n        if(string[i] == ']') brackets--;\n        if(string[i]\
    \ == '[' && brackets == 0) stack.push('[');\n        if(string[i] == ']' && brackets\
    \ == 0) stack.pop();\n    }\n    return stack.length == 0;\n}\n", "    let stack\
    \ = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] ===\
    \ '['){\n            stack.push(i);\n        }\n        else if(string[i] ===\
    \ ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                let top = stack.pop();\n  \
    \              if(top === i){\n                    return true;\n            \
    \    }\n                else{\n                    return false;\n           \
    \     }\n            }\n        }\n    }\n}\n", "    // Your code here\n}\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ a string with all the characters in lower case.\n\nExample\n'Hello World' \u279E\
    \ 'hello world'\n\n\n</text>\n<cell>", "    let stack = [];\n    for(let i = 0;\
    \ i < string.length; i++){\n        if(string[i] === '[' && stack.length){\n \
    \           stack.push(string[i]);\n        }\n        else if(string[i] === ']'\
    \ && stack.length){\n            stack.pop();\n        }\n        else if(string[i]\
    \ === '[' && stack.length === 0){\n            return false;\n        }\n    \
    \    else if(string[i] === ']' && stack.length === 0){\n            return false;\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let brackets_count\
    \ = string.split('[').length - 1;\n    let open_brackets_count = string.split('(').length\
    \ - 1;\n    let close_brackets_count = string.split(')').length - 1;\n    let\
    \ open_brackets_count = open_brackets_count + close_brackets_count;\n    return\
    \ brackets_count === open_brackets_count;\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(stack.length == 0){\n          \
    \  stack.push(string[i]);\n        }\n        else if(stack[stack.length - 1]\
    \ == '[' && string[i] == '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(stack[stack.length - 1] == '[' && string[i] == ']'){\n      \
    \      stack.pop();\n        }\n        else if(stack[stack.length - 1] == '{'\
    \ && string[i] == '{'){\n            stack.push(string[i]);\n        }\n     \
    \   else if(stack[stack.length - 1] == '{' && string[i] == ')'){\n           \
    \ stack.pop();\n        }\n        else if(stack[stack.length - 1] == '[' && string[i]\
    \ == '['){\n            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == ']'){\n            stack.pop();\n        }\n   \
    \     else if(stack[stack.length - 1] == '{' && string[i] == '{'){\n         \
    \   stack.push(string[i]);\n        }\n        else if(stack[stack.length - 1]\
    \ == '{' && string[i] == ')'){\n            stack.pop();\n        }\n        else\
    \ if(stack[stack.length - 1] == '[' && string[i] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '[' && string[i] == ']'){\n\
    \            stack.pop();\n        }\n        else if(stack[stack.length - 1]\
    \ == '{' && string[i] == '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(stack[stack.length - 1] == '{' && string[i] == ']'){\n      \
    \      stack.pop();\n        }\n        else if(stack[stack.length - 1] == '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == ']'){\n            stack.pop();\n        }\n        else if(stack[stack.length\
    \ - 1] == '{'){\n            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '}'){\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n", "    let brackets = string.match(/\\[.*?\\]/g);\n    let brackets_length\
    \ = brackets.length;\n    let nesting = 0;\n    for(let i = 0; i < brackets_length;\
    \ i++){\n        if(brackets[i].match(/\\[.*?\\]/)){\n            nesting++;\n\
    \        }\n        if(brackets[i].match(/\\[.*?\\]/)){\n            nesting--;\n\
    \        }\n        if(nesting === 0){\n            return true;\n        }\n\
    \    }\n    return false;\n}\n", "    let brackets_count = string.match(/\\[/g).length\n\
    \    let brackets_count_nested = string.match(/\\[/g).reduce((acc, cur) => acc\
    \ + (cur == '[' ? 1 : 0), 0)\n    return brackets_count == brackets_count_nested\n\
    }\n", "    string = string.replace(/\\[/g,\"\");\n    string = string.replace(/\\\
    ]/g,\"\");\n    string = string.replace(/\\]\\[/g,\"\");\n    string = string.replace(/\\\
    ]\\]\\[/g,\"\");\n    string = string.replace(/\\]\\]\\]\\[/g,\"\");\n    string\
    \ = string.replace(/\\]\\]\\]\\]\\[/g,\"\");\n    string = string.replace(/\\\
    ]\\]\\]\\]\\]\\[/g,\"\");\n    string = string.replace(/\\]\\]\\]\\]\\]\\]\\[/g,\"\
    \");\n    string = string.replace(/\\]\\]\\]\\]\\]\\]\\]\\[/g,\"\");\n    string\
    \ = string.replace(/\\]\\]\\]\\]\\]\\]\\]\\]\\[/g,\"\");\n    string = string.replace(/\\\
    ]\\]\\]\\]\\]\\]\\]\\]\\]\\[/g,\"\");\n    string = string.replace(/\\]\\]\\]\\\
    ]\\]\\]\\]\\]\\]\\]\\[/g,\"\");\n    string = string.replace(/\\]\\]\\]\\]\\]\\\
    ]\\]\\]\\]\\]\\]\\[/g,\"\");\n    string = string.replace(/\\]\\]\\]\\]\\]\\]\\\
    ]\\]\\]\\]\\]\\]\\]\\[/g,\"\");\n    string = string.replace(/\\]\\]\\]\\]\\]\\\
    ]\\]\\]\\]\\]\\]\\]\\]\\]\\[/g,\"\");\n    string = string.replace(/\\]\\]\\]\\\
    ]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\[/g,\"\");\n    string = string.replace(/\\\
    ]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\[/g,\"\");\n    string = string.replace(/\\\
    ]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\[/g,\"\");\n    string\
    \ = string.replace(/\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\]\\\
    ]\\]\\]\\[/g,\"\");\n    string = string.replace(/\\]\\", "    let brackets_count\
    \ = string.match(/\\[/g).length\n    let open_brackets_count = string.match(/\\\
    (/g).length\n    let closed_brackets_count = string.match(/\\)/g).length\n   \
    \ let open_brackets_count = open_brackets_count - brackets_count\n    let closed_brackets_count\
    \ = closed_brackets_count - brackets_count\n    return open_brackets_count > 0\
    \ && closed_brackets_count > 0\n}\n", "    let brackets = string.match(/\\[.*?\\\
    ]/g);\n    return brackets !== null;\n}\n", "    \n    // Create a stack to hold\
    \ the brackets\n    var stack = [];\n    \n    // Iterate through the string and\
    \ push each bracket onto the stack\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == '[' || string[i] == '('){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ']' || string[i] == ')'){\n         \
    \   var open_bracket = stack.pop();\n            if(open_bracket == '[' || open_bracket\
    \ == '('){\n                return false;\n            }\n        }\n    }\n \
    \   \n    // If the stack is empty then the string contains no nested brackets\n\
    \    return stack.length == 0;\n}\n", "    \n    // Your code goes here\n    \n\
    }\n", "    let brackets = string.match(/\\[.*?\\]/g);\n    return brackets ? brackets.some(x\
    \ => is_nested(x)) : false;\n}\n", "    // Your code here\n}\n</cell>\n<cell>\n\
    # Test your function\nis_nested
  "    // Your code here\n}\n", "    var brackets = string.match(/\\[.*?\\]/g);\n\
    \    if(brackets){\n        brackets.forEach(function(bracket){\n            var\
    \ brackets = bracket.match(/\\[.*?\\]/g);\n            if(brackets){\n       \
    \         brackets.forEach(function(bracket){\n                    if(bracket.match(/\\\
    [.*?\\]/g)){\n                        return true;\n                    }\n  \
    \              });\n            }\n        });\n    }\n    return false;\n}\n",
  "    \n    // Create a stack to keep track of brackets\n    var stack = [];\n  \
    \  \n    // Iterate through the string and push brackets onto the stack\n    for(var\
    \ i = 0; i < string.length; i++){\n        if(string[i] == '['){\n           \
    \ stack.push('[');\n        }\n        else if(string[i] == ']'){\n          \
    \  stack.pop();\n        }\n        else if(stack.length && stack[stack.length-1]\
    \ == '['){\n            stack.pop();\n        }\n    }\n    \n    // Return True\
    \ if and only if there is a valid subsequence of brackets \n    // where at least\
    \ one bracket in the subsequence is nested.\n    return stack.length == 0;\n}\n",
  "    \n    let brackets = string.match(/\\[.*?\\]/g);\n    \n    if(brackets){\n\
    \        let brackets_length = brackets.length;\n        let nested_brackets =\
    \ 0;\n        \n        for(let i = 0; i < brackets_length; i++){\n          \
    \  if(brackets[i].match(/\\[.*?\\]/)){\n                nested_brackets++;\n \
    \           }\n        }\n        \n        return nested_brackets > 0;\n    }\n\
    \    \n    return false;\n}\n", "  if(string.length <= 0)\n    return false;\n\
    \  \n  if(string[0] == '[')\n    return is_nested(string.substr(1));\n  \n  if(string[string.length-1]\
    \ == ']')\n    return is_nested(string.substr(0,string.length-1));\n  \n  return\
    \ false;\n}\n", "    \n    // Your code here\n    \n}\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input which contains only square\
    \ brackets.\nThe function should return True if and only if there is a valid subsequence\
    \ of brackets \nwhere at least one bracket in the subsequence is nested.\nis_nested('[[]]')\
    \ \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E\
    \ False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\nis_nested('[[[]]') \u279E True\nis_nested('[[[]][]]') \u279E True\n\
    is_nested('[[[]][][]]') \u279E True\nis_nested('[[[]][][][]]') \u279E True\nis_nested('[[[]][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][]]') \u279E True\nis_nested('[[[]][][][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][][][]]') \u279E True\nis_nested('[[[]][][][][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][][][]]') \u279E True\nis_nested('[[[]][][][][][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][][][][][]]') \u279E True\nis_nested('[[[]][][][][][][][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][][][][][][]]') \u279E True\nis_nested('[[[]][][][][][][][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][][][][][][][]]') \u279E True\nis_nested('[[[]][][][][][][][][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][][][][][][][][]]') \u279E True", "   \
    \ let bracketsCount = 0;\n    for(let i = 0; i < string.length; i++){\n      \
    \  if(string[i] == '['){\n            bracketsCount++;\n        }\n        if(string[i]\
    \ == ']'){\n            bracketsCount--;\n        }\n        if(bracketsCount\
    \ < 0){\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    let brackets = string.match(/\\[.*?\\]/g);\n    if(brackets == null){\n   \
    \     return false;\n    }\n    let brackets_length = brackets.length;\n    let\
    \ nesting = 0;\n    for(let i = 0; i < brackets_length; i++){\n        if(brackets[i].match(/\\\
    [/)){\n            nesting++;\n        }\n        else if(brackets[i].match(/\\\
    ]/)){\n            nesting--;\n        }\n        if(nesting < 0){\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n", "    let bracketCount\
    \ = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] == '['){\n\
    \            bracketCount++;\n        }\n        else if(string[i] == ']'){\n\
    \            bracketCount--;\n        }\n        if(bracketCount < 0){\n     \
    \       return false;\n        }\n    }\n    return bracketCount == 0;\n}\n",
  "    \n    // Your code goes here\n    \n}\n", "    let brackets = string.match(/\\\
    [.*?\\]/g);\n    let nested = brackets.some(x => x.match(/\\[.*?\\]/).length >\
    \ 1);\n    return nested;\n}\n", "    let brackets = string.match(/\\[.*?\\]/g);\n\
    \    return brackets !== null;\n}\n", "    // Your code here\n}\n</cell>\n<cell>\n\
    # Test your function\nis_nested
  "    let brackets = string.match(/\\[.*?\\]/g);\n    if(brackets){\n        let\
    \ nested = false;\n        for(let i = 0; i < brackets.length; i++){\n       \
    \     if(brackets[i].match(/\\[.*?\\]/)){\n                nested = true;\n  \
    \          }\n        }\n        return nested;\n    }\n    return false;\n}\n",
  "    // Your code here\n}\n", "    let stack = [];\n    let opening_brackets = 0;\n\
    \    for(let i = 0; i < string.length; i++){\n        if(string[i] == '['){\n\
    \            stack.push(string[i]);\n            opening_brackets++;\n       \
    \ }\n        else if(string[i] == ']'){\n            opening_brackets--;\n   \
    \         if(opening_brackets == 0){\n                stack.pop();\n         \
    \   }\n        }\n    }\n    return stack.length == 0;\n}\n", "    let brackets\
    \ = string.split(']').length - 1;\n    let open_brackets = string.split('[').length\
    \ - 1;\n    return brackets === open_brackets;\n}\n", "    string = string.replace(/\\\
    s+/g,' ');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/\\\
    [/g,'').replace(/\\]/g,'');\n    string = string.replace(/\\]\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');\n    string\
    \ = string.replace(/\\]/g,'');\n    string = string.replace(/\\[/g,'');", "  \
    \  let brackets = string.match(/\\[.*?\\]/g);\n    return brackets !== null;\n\
    }\n", "    \n    // Create a stack to keep track of brackets\n    let stack =\
    \ [];\n    \n    // Iterate through each character in the string\n    for(let\
    \ i = 0; i < string.length; i++){\n        \n        // If the character is a\
    \ bracket, push it to the stack\n        if(string[i] == \"[\"){\n           \
    \ stack.push(\"[\");\n        }\n        \n        // If the character is a bracket,\
    \ pop from the stack\n        else if(string[i] == \"]\"){\n            \n   \
    \         // If there are still brackets in the stack\n            if(stack.length){\n\
    \                \n                // Pop from the stack\n                stack.pop();\n\
    \                \n                // If the stack is empty, return True\n   \
    \             if(stack.length == 0){\n                    return true;\n     \
    \           }\n            }\n            \n            // If the stack is empty,\
    \ return False\n            else{\n                return false;\n           \
    \ }\n        }\n        \n        // If the character is not a bracket, return\
    \ False\n        else{\n            return false;\n        }\n    }\n}\n", " \
    \   let stack = [];\n    let brackets = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] == '[') stack[stack.length] = i;\n        if(string[i]\
    \ == ']') stack.pop();\n        if(stack.length == 0 && string[i] == '[') brackets++;\n\
    \        if(stack.length == 0 && string[i] == ']') brackets--;\n    }\n    return\
    \ brackets == 0;\n}\n", "    // Your code here\n}\n", "    \n    // Your code\
    \ here\n    \n}\n", "    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(stack.length > 0 && stack[stack.length - 1] === string[i]){\n\
    \            stack.pop();\n        }\n        else if(stack.length === 0){\n \
    \           stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] === string[i]){\n            stack.push(string[i]);\n        }\n      \
    \  else if(stack[stack.length - 1] !== string[i]){\n            return false;\n\
    \        }\n    }\n    return stack.length === 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(stack.length == 0){\n\
    \            stack.push(string[i]);\n        }\n        else if(string[i] == '['\
    \ && stack[stack.length-1] != ']'){\n            stack.push(string[i]);\n    \
    \    }\n        else if(string[i] == ']' && stack[stack.length-1] == '['){\n \
    \           stack.pop();\n        }\n    }\n    return stack.length == 0;\n}\n",
  "\tlet brackets = string.match(/\\[.*?\\]/g);\n\tif(brackets === null){\n\t\treturn\
    \ false;\n\t}\n\tlet nesting = 0;\n\tfor(let i = 0; i < brackets.length; i++){\n\
    \t\tif(brackets[i].match(/\\[.*?\\]/)){\n\t\t\tnesting++;\n\t\t}\n\t\telse{\n\t\
    \t\tnesting--;\n\t\t}\n\t\tif(nesting === 0){\n\t\t\treturn true;\n\t\t}\n\t}\n\
    \treturn false;\n}\n", "    \n    // Your code here\n    \n}\n", "    let brackets\
    \ = string.match(/\\[.*?\\]/g);\n    if(brackets === null){\n        return false;\n\
    \    }\n    let nested = false;\n    for(let i = 0; i < brackets.length; i++){\n\
    \        let bracket = brackets[i];\n        let open = bracket.match(/\\[/g);\n\
    \        let close = bracket.match(/\\]/g);\n        if(open === null || close\
    \ === null){\n            return false;\n        }\n        if(open.length !==\
    \ close.length){\n            return false;\n        }\n        if(open.length\
    \ < 2){\n            return false;\n        }\n        if(open[0] === close[0]){\n\
    \            nested = true;\n        }\n    }\n    return nested;\n}\n", "   \
    \ \n    // Your code here\n    \n}\n", "    let open_brackets = 0;\n    let closed_brackets\
    \ = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] == '[')\
    \ open_brackets++;\n        if(string[i] == ']') closed_brackets++;\n        if(string[i]\
    \ == '[' && string[i+1] == ']') closed_brackets++;\n        if(string[i] == '['\
    \ && string[i+1] != ']') open_brackets++;\n        if(string[i] == ']' && string[i-1]\
    \ != ']') open_brackets++;\n    }\n    return open_brackets == closed_brackets;\n\
    }\n", "    let brackets_count = string.split(']').length - 1;\n    let brackets_count_nested\
    \ = string.split(']').filter(x => x === '[').length - 1;\n    return brackets_count\
    \ === brackets_count_nested;\n}\n", "    let open_brackets = string.match(/\\\
    [/g);\n    let close_brackets = string.match(/\\]/g);\n    let open_parenthesis\
    \ = string.match(/\\(/g);\n    let close_parenthesis = string.match(/\\)/g);\n\
    \    let open_curly = string.match(/\\{/g);\n    let close_curly = string.match(/\\\
    }/g);\n    let open_curly_brackets = string.match(/\\{|\\}/g);\n    let close_curly_brackets\
    \ = string.match(/\\{|\\}|\\)|\\)/g);\n    let open_curly_brackets_brackets =\
    \ string.match(/\\{|\\}|\\(|\\)/g);\n    let close_curly_brackets_brackets = string.match(/\\\
    {|\\}|\\(|\\)|\\)/g);\n    let open_curly_brackets_curly = string.match(/\\{|\\\
    }|\\(|\\)/g);\n    let close_curly_brackets_curly = string.match(/\\{|\\}|\\(|\\\
    )|\\)/g);\n    let open_curly_curly = string.match(/\\{|\\}/g);\n    let close_curly_curly\
    \ = string.match(/\\{|\\}|\\)/g);\n    let open_curly_curly_brackets = string.match(/\\\
    {|\\}|\\(|\\)/g);\n    let close_curly_curly_brackets = string.match(/\\{|\\}|\\\
    (|\\)|\\)/g);\n    let open_curly_curly_curly = string.match(/\\{|\\}|\\(|\\)/g);\n\
    \    let close_curly_curly_curly = string.match(/\\{|\\}|\\(|\\)|\\)/g);\n   \
    \ let open_curly_curly_curly_brackets = string.match(/\\{|\\}|\\(|\\)|\\)/g);\n\
    \    let close_curly_curly_curly_brackets = string.match(/\\{|\\}|\\(|\\)|\\)|\\\
    )/g);\n    let open_curly_curly_curly_curly = string.match(/\\{|\\}|\\(|\\)|\\\
    )/g);\n    let close_curly_curly_curly_curly = string.match(/\\{|\\}|\\(|\\)|\\\
    )|\\)/g);\n    let open_curly_curly_curly_curly_brackets = string.match(/\\{|\\\
    }|\\(|\\)|\\)|\\)/g);\n    let close_curly_curly_curly_curly_brackets = string.match(/\\\
    {|\\}|\\(|\\)|\\)|\\)|\\)/g);\n    let open_curly_curly_curly_curly_curly = string.match(/\\\
    {|\\}|\\(|\\)|\\", "    let brackets = string.match(/\\[.*?\\]/g);\n    let brackets_count\
    \ = brackets.length;\n    \n    if(brackets_count === 0){\n        return false;\n\
    \    }\n    \n    let open_brackets = brackets.filter(x => x === '[');\n    let\
    \ close_brackets = brackets.filter(x => x === ']');\n    \n    let open_count\
    \ = open_brackets.length;\n    let close_count = close_brackets.length;\n    \n\
    \    if(open_count === close_count){\n        return true;\n    }\n    \n    return\
    \ false;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] == '[' && string[i+1] == '[' && stack.length == 0){\n  \
    \          stack.push('[');\n        }\n        else if(string[i] == '[' && string[i+1]\
    \ == '[' && stack.length == 1){\n            stack.push('[');\n        }\n   \
    \     else if(string[i] == '[' && string[i+1] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && string[i+1] == ']' && stack.length\
    \ == 0){\n            stack.push(']');\n        }\n        else if(string[i] ==\
    \ ']' && string[i+1] == ']' && stack.length == 1){\n            stack.push(']');\n\
    \        }\n        else if(string[i] == ']' && string[i+1] == ']'){\n       \
    \     stack.push(']');\n        }\n        else if(string[i] == '[' && string[i+1]\
    \ == ']' && stack.length == 2){\n            stack.push(']');\n        }\n   \
    \     else if(string[i] == '[' && string[i+1] == ']'){\n            stack.push(']');\n\
    \        }\n        else if(string[i] == ']' && string[i+1] == '[' && stack.length\
    \ == 2){\n            stack.push(']');\n        }\n        else if(string[i] ==\
    \ ']' && string[i+1] == '['){\n            stack.push(']');\n        }\n     \
    \   else if(string[i] == '[' && string[i+1] == ']' && stack.length == 3){\n  \
    \          stack.push(']');\n        }\n        else if(string[i] == '[' && string[i+1]\
    \ == ']'){\n            stack.push(']');\n        }\n        else if(string[i]\
    \ == ']' && string[i+1] == '[' && stack.length == 3){\n            stack.push(']');\n\
    \        }\n        else if(string[i] == ']' && string[i+1] == '['){\n       \
    \     stack.push(']');\n        }\n        else if(string[i] == '[' && string[i+1]\
    \ == ']' && stack.length == 4){\n            stack.push(']');\n        }\n   \
    \     else if(string[i] == '[' && string[i+1] == ']'){\n            stack.push(']');\n\
    \        }\n        else if(string[i] == ']' && string[i+1] == '[' && stack.length\
    \ == 4){\n            stack.push(']');\n        }\n        else if(string[i] ==\
    \ ']' && string[i+1] == '['){\n            stack.push(']');\n        }\n     \
    \   else if(string[i] == '[' && string[i+1] == ']' && stack.length == 5){\n  \
    \          stack.push(']');\n        }\n        else if(string[i] == '[' && string[i+1]\
    \ == ']'){\n            stack.push(']');\n        }\n        else if(string[i]\
    \ == ']' && string[i+1] == '[' && stack.length == 5){\n            stack.push(']');\n\
    \        }\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] == '[' && string[i+1] == '[' && string[i+2] == '['){\n \
    \           stack.push('[');\n        }\n        else if(string[i] == '[' && string[i+1]\
    \ == '[' && string[i+2] == '['){\n            stack.push('[');\n        }\n  \
    \      else if(string[i] == '[' && string[i+1] == '[' && string[i+2] == '['){\n\
    \            stack.push('[');\n        }\n        else if(string[i] == '[' &&\
    \ string[i+1] == '[' && string[i+2] == '['){\n            stack.push('[');\n \
    \       }\n        else if(string[i] == '[' && string[i+1] == '[' && string[i+2]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == '[' && string[i+1] == '[' && string[i+2] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == '[' && string[i+1] == '[' && string[i+2]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == '[' && string[i+1] == '[' && string[i+2] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == '[' && string[i+1] == '[' && string[i+2]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == '[' && string[i+1] == '[' && string[i+2] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == '[' && string[i+1] == '[' && string[i+2]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == '[' && string[i+1] == '[' && string[i+2] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == '[' && string[i+1] == '[' && string[i+2]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == '[' && string[i+1] == '[' && string[i+2] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == '[' && string[i+1] == '[' && string[i+2]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == '[' && string[i+1] == '[' && string[i+2] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == '[' && string[i+1] == '[' && string[i+2]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == '[' && string[i+1] == '[' && string[i+2] == '['){\n            stack.push('['",
  "    \n    // Your code here\n    \n}\n", "    let stack = [];\n    let opening_brackets\
    \ = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] == '[')\
    \ opening_brackets++;\n        if(string[i] == ']') opening_brackets--;\n    \
    \    if(opening_brackets == 0){\n            stack.push(string[i]);\n        }\n\
    \    }\n    return stack.length == 0;\n}\n", "    var brackets = string.match(/\\\
    [.*?\\]/g);\n    if(brackets == null) return false;\n    var brackets_length =\
    \ brackets.length;\n    for(var i=0; i<brackets_length; i++){\n        var bracket\
    \ = brackets[i];\n        var open_bracket = bracket.match(/\\[/);\n        var\
    \ close_bracket = bracket.match(/\\]/);\n        if(open_bracket == null || close_bracket\
    \ == null) return false;\n        if(open_bracket[0].length != close_bracket[0].length)\
    \ return false;\n    }\n    return true;\n}\n", "    let brackets = string.split('');\n\
    \    let stack = [];\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i]\
    \ === '[' || brackets[i] === '{' || brackets[i] === '('){\n            stack.push(brackets[i]);\n\
    \        }\n        else if(brackets[i] === ']' || brackets[i] === '}' || brackets[i]\
    \ === ')'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            else{\n                let top = stack.pop();\n  \
    \              if(top !== brackets[i]){\n                    return false;\n \
    \               }\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "    let stack = [];\n    let brackets = 0;\n    for(let i = 0; i\
    \ < string.length; i++){\n        if(string[i] == '['){\n            stack.push(i);\n\
    \            brackets++;\n        }\n        else if(string[i] == ']'){\n    \
    \        brackets--;\n        }\n        else if(string[i] == '[' && brackets\
    \ == 0){\n            stack.push(i);\n        }\n        else if(string[i] ==\
    \ ']' && brackets == 0){\n            if(stack.length == 0){\n               \
    \ return false;\n            }\n            else{\n                let top = stack.pop();\n\
    \                if(top != i){\n                    return false;\n          \
    \      }\n            }\n        }\n    }\n    return brackets == 0;\n}\n", " \
    \   \n    // Your code here\n    \n}\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\nis_nested('[[]]') \u279E\
    \ True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E False\n\
    is_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\n\n\n</text>\n<cell>", "    let brackets = string.match(/\\[.*?\\\
    ]/g);\n    if(brackets == null){\n        return false;\n    }\n    let count\
    \ = 0;\n    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i].match(/\\\
    [.*?\\]/) == null){\n            return false;\n        }\n        count += brackets[i].match(/\\\
    [.*?\\]/).length;\n    }\n    return count > 0;\n}\n", "    \n    // Your code\
    \ goes here\n    \n}\n", "    let stack = [];\n    let brackets = 0;\n    let\
    \ open_brackets = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ == '['){\n            stack.push(i);\n            open_brackets++;\n       \
    \ }\n        else if(string[i] == ']'){\n            open_brackets--;\n      \
    \  }\n        else if(open_brackets == 0 && stack.length == 0){\n            return\
    \ false;\n        }\n    }\n    return stack.length == 0;\n}\n", "\tlet brackets_stack\
    \ = []\n\tlet open_brackets = 0\n\tlet closed_brackets = 0\n\tlet open_brackets_count\
    \ = 0\n\tlet closed_brackets_count = 0\n\tlet open_brackets_count_max = 0\n\t\
    let closed_brackets_count_max = 0\n\tlet open_brackets_count_min = 0\n\tlet closed_brackets_count_min\
    \ = 0\n\tlet open_brackets_count_min_index = 0\n\tlet closed_brackets_count_min_index\
    \ = 0\n\tlet open_brackets_count_max_index = 0\n\tlet closed_brackets_count_max_index\
    \ = 0\n\tlet open_brackets_count_min_index = 0\n\tlet closed_brackets_count_min_index\
    \ = 0\n\tlet open_brackets_count_max_index = 0\n\tlet closed_brackets_count_max_index\
    \ = 0\n\tlet open_brackets_count_min_index = 0\n\tlet closed_brackets_count_min_index\
    \ = 0\n\tlet open_brackets_count_max_index = 0\n\tlet closed_brackets_count_max_index\
    \ = 0\n\tlet open_brackets_count_min_index = 0\n\tlet closed_brackets_count_min_index\
    \ = 0\n\tlet open_brackets_count_max_index = 0\n\tlet closed_brackets_count_max_index\
    \ = 0\n\tlet open_brackets_count_min_index = 0\n\tlet closed_brackets_count_min_index\
    \ = 0\n\tlet open_brackets_count_max_index = 0\n\tlet closed_brackets_count_max_index\
    \ = 0\n\tlet open_brackets_count_min_index = 0\n\tlet closed_brackets_count_min_index\
    \ = 0\n\tlet open_brackets_count_max_index = 0\n\tlet closed_brackets_count_max_index\
    \ = 0\n\tlet open_brackets_count_min_index = 0\n\tlet closed_brackets_count_min_index\
    \ = 0\n\tlet open_brackets_count_max_index = 0\n\tlet closed_brackets_count_max_index\
    \ = 0\n\tlet open_brackets_count_min_index = 0\n\tlet closed_brackets_count_min_index\
    \ = 0\n\tlet open_brackets_count_max_index = 0\n\tlet closed_brackets_count_max_index\
    \ = 0\n\tlet open_brackets_count_min_index = 0\n\tlet closed_brackets_count_min_index\
    \ = 0\n\tlet open_brackets_count_max_index = 0\n\tlet closed_brackets_count_max_index\
    \ = 0\n\tlet open_brackets_count_min_index = 0\n\tlet closed_bracket", "    let\
    \ stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(stack.length\
    \ == 0 && string[i] == '['){\n            stack.push('[');\n        }\n      \
    \  else if(stack.length == 0 && string[i] == '{'){\n            stack.push('{');\n\
    \        }\n        else if(stack.length == 0 && string[i] == '('){\n        \
    \    stack.push('(');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == ']'){\n            stack.push(']');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == '}'){\n            stack.push('}');\n        }\n      \
    \  else if(stack.length == 0 && string[i] == ')'){\n            stack.push(')');\n\
    \        }\n        else if(stack.length == 0 && string[i] == ','){\n        \
    \    stack.push(',');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '\"'){\n            stack.push('\"');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == '\\''){\n            stack.push('\\'');\n        }\n  \
    \      else if(stack.length == 0 && string[i] == '\\\\'){\n            stack.push('\\\
    \\');\n        }\n        else if(stack.length == 0 && string[i] == '\\n'){\n\
    \            stack.push('\\n');\n        }\n        else if(stack.length == 0\
    \ && string[i] == '\\r'){\n            stack.push('\\r');\n        }\n       \
    \ else if(stack.length == 0 && string[i] == '\\t'){\n            stack.push('\\\
    t');\n        }\n        else if(stack.length == 0 && string[i] == ' '){\n   \
    \         stack.push(' ');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '\\r'){\n            stack.push('\\r');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == '\\n'){\n            stack.push('\\n');\n        }\n  \
    \      else if(stack.length == 0 && string[i] == '\\t'){\n            stack.push('\\\
    t');\n        }\n        else if(stack.length == 0 && string[i] == ' '){\n   \
    \         stack.push(' ');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '\"'){\n            stack.push('\"');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == '\\''){\n            stack.push('\\'');\n        }\n  \
    \      else if(stack.length == 0 && string[i] == '\\\\'){\n            stack.push('\\\
    \\');\n        }\n        else if(stack.length == 0 && string[i] == '['){\n  \
    \          stack.push('[');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '{'){\n            stack.push('{');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == '('){\n            stack.push('(');\n        }\n      \
    \  else if(stack.length == 0 && string[i] == ']')", "    let brackets = string.split(']');\n\
    \    let bracketsCount = brackets.length;\n    for(let i = 0; i < bracketsCount;\
    \ i++){\n        let bracketsNesting = brackets[i].split('[').length;\n      \
    \  if(bracketsNesting > 1){\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n", "    let brackets = string.match(/\\[.*?\\]/g);\n    return brackets\
    \ !== null;\n}\n", "  if(string.length<=1){\n    return false;\n  }\n  if(string[0]!='['){\n\
    \    return false;\n  }\n  let stack=[];\n  let index=0;\n  while(index<string.length){\n\
    \    if(string[index]=='['){\n      stack.push(string[index]);\n      index++;\n\
    \    }else if(string[index]==']'){\n      if(stack.length==0){\n        return\
    \ false;\n      }\n      if(stack[stack.length-1]!='['){\n        return false;\n\
    \      }\n      stack.pop();\n      index++;\n    }else{\n      index++;\n   \
    \ }\n  }\n  return true;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] == '[' && stack.length == 0){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && stack.length != 0){\n        \
    \    stack.pop();\n        }\n        else if(string[i] == '[' && stack.length\
    \ != 0){\n            stack.push('[');\n        }\n        else if(string[i] ==\
    \ ']' && stack.length == 0){\n            stack.push(']');\n        }\n    }\n\
    \    return stack.length == 0;\n}\n", "    \n    let stack = [];\n    \n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] == '['){\n           \
    \ stack.push(i);\n        }\n        else if(string[i] == ']'){\n            if(stack.length\
    \ == 0){\n                return false;\n            }\n            else{\n  \
    \              let top = stack.pop();\n                if(top != i){\n       \
    \             return false;\n                }\n            }\n        }\n   \
    \ }\n    \n    return stack.length == 0;\n}\n", "    let stack = [];\n    for(let\
    \ i=0; i<string.length; i++){\n        if(string[i] == '[' && stack.length ==\
    \ 0){\n            stack.push('[');\n        }\n        else if(string[i] == ']'\
    \ && stack.length == 1){\n            stack.push(']');\n        }\n        else\
    \ if(string[i] == '[' && stack.length == 1){\n            stack.push('[');\n \
    \       }\n        else if(string[i] == ']' && stack.length == 0){\n         \
    \   stack.push(']');\n        }\n        else if(string[i] == '[' && stack.length\
    \ == 1){\n            stack.push('[');\n        }\n        else if(string[i] ==\
    \ ']' && stack.length == 1){\n            stack.push(']');\n        }\n      \
    \  else if(string[i] == '[' && stack.length == 0){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && stack.length == 0){\n        \
    \    stack.push(']');\n        }\n        else if(string[i] == '[' && stack.length\
    \ == 0){\n            stack.push('[');\n        }\n        else if(string[i] ==\
    \ ']' && stack.length == 0){\n            stack.push(']');\n        }\n      \
    \  else if(string[i] == '[' && stack.length == 1){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && stack.length == 1){\n        \
    \    stack.push(']');\n        }\n        else if(string[i] == '[' && stack.length\
    \ == 1){\n            stack.push('[');\n        }\n        else if(string[i] ==\
    \ ']' && stack.length == 1){\n            stack.push(']');\n        }\n      \
    \  else if(string[i] == '[' && stack.length == 1){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && stack.length == 1){\n        \
    \    stack.push(']');\n        }\n        else if(string[i] == '[' && stack.length\
    \ == 0){\n            stack.push('[');\n        }\n        else if(string[i] ==\
    \ ']' && stack.length == 0){\n            stack.push(']');\n        }\n      \
    \  else if(string[i] == '[' && stack.length == 0){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && stack.length == 0){\n        \
    \    stack.push(']');\n        }\n        else if(string[i] == '[' && stack.length\
    \ == 0){\n            stack.push('[');\n        }\n        else if(string[i] ==\
    \ ']' && stack.length == 0){\n            stack.push(']');\n        }\n      \
    \  else if(string[i] == '[' && stack.length == 0){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && stack.length == 0){\n        \
    \    stack.push(']');\n        }\n        else if(string[i] == '[' && stack",
  "    let brackets = string.match(/\\[.*?\\]/g);\n    return brackets && brackets.some(bracket\
    \ => is_nested(bracket));\n}\n", "    \n    let brackets = string.match(/\\[.*?\\\
    ]/g);\n    \n    if(brackets == null){\n        return false;\n    }\n    \n \
    \   let brackets_count = brackets.length;\n    \n    for(let i = 0; i < brackets_count;\
    \ i++){\n        let current_bracket = brackets[i];\n        let next_bracket\
    \ = brackets[i+1];\n        \n        if(current_bracket == next_bracket){\n \
    \           brackets_count -= 1;\n        }\n        \n        if(brackets_count\
    \ == 0){\n            return true;\n        }\n    }\n    \n    return false;\n\
    }\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n    \
    \    if(stack.length == 0){\n            if(string[i] == '[' || string[i] == '{'){\n\
    \                stack.push(string[i]);\n            }\n        }\n        else\
    \ if(stack[stack.length - 1] == '[' && string[i] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '{' && string[i] == '{'){\n\
    \            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == '{'){\n            stack.push(string[i]);\n    \
    \    }\n        else if(stack[stack.length - 1] == '{' && string[i] == '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if(stack[stack.length - 1] == '[' && string[i] == '{'){\n\
    \            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '{' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if(stack[stack.length - 1] == '[' && string[i] == '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '{' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if(stack[stack.length - 1] == '[' && string[i] == '{'){\n\
    \            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '{' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '{'){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '{'){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '{'){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '{'){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '{'){\n            stack.",
  "    let brackets = string.match(/\\[.*?\\]/g);\n    if(brackets == null){\n   \
    \     return false;\n    }\n    let brackets_length = brackets.length;\n    let\
    \ nesting = 0;\n    for(let i = 0; i < brackets_length; i++){\n        let bracket\
    \ = brackets[i];\n        if(bracket == '['){\n            nesting++;\n      \
    \  }\n        if(bracket == ']'){\n            nesting--;\n        }\n       \
    \ if(nesting == 0){\n            return true;\n        }\n    }\n    return false;\n\
    }\n", "    let brackets = string.match(/\\[.*?\\]/g);\n    let nesting = false;\n\
    \    for(let i = 0; i < brackets.length; i++){\n        if(brackets[i].match(/\\\
    [.*?\\]/)){\n            nesting = true;\n        }\n    }\n    return nesting;\n\
    }\n", "    let brackets_count = string.split('[').length - 1;\n    let brackets_open\
    \ = string.split('[').length - 1;\n    let brackets_closed = string.split(']').length\
    \ - 1;\n    let brackets_nested = brackets_count - brackets_open - brackets_closed;\n\
    \    return brackets_nested > 0;\n}\n", "    string = string.replace(/\\s+/g,\
    \ '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(stack.length == 0){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] == stack[stack.length-1]){\n\
    \            stack.pop();\n        }\n        else if(string[i] != stack[stack.length-1]){\n\
    \            return false;\n        }\n    }\n    return stack.length == 0;\n\
    }\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n    \
    \    if(string[i] == '['){\n            stack.push('[');\n        }\n        else\
    \ if(string[i] == ']'){\n            stack.pop();\n        }\n        else if(stack.length\
    \ == 0){\n            return false;\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n", "    \n    // Your code here\n    \n}\n", "    let brackets_count\
    \ = string.match(/\\[/g).length\n    let open_brackets_count = string.match(/\\\
    (/g).length\n    let close_brackets_count = string.match(/\\)/g).length\n    let\
    \ is_nested = brackets_count >= open_brackets_count && brackets_count >= close_brackets_count\n\
    \    return is_nested\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(stack.length > 0 && stack[stack.length-1] == string[i]){\n\
    \            stack.pop();\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == ']'){\n            stack.push(']');\n        }\n      \
    \  else if(stack.length > 0 && string[i] == '['){\n            stack.push('[');\n\
    \        }\n        else if(stack.length > 0 && string[i] == ']'){\n         \
    \   stack.push(']');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == ']'){\n            stack.push(']');\n        }\n      \
    \  else if(stack.length > 0 && string[i] == '['){\n            stack.push('[');\n\
    \        }\n        else if(stack.length > 0 && string[i] == ']'){\n         \
    \   stack.push(']');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == ']'){\n            stack.push(']');\n        }\n      \
    \  else if(stack.length > 0 && string[i] == '['){\n            stack.push('[');\n\
    \        }\n        else if(stack.length > 0 && string[i] == ']'){\n         \
    \   stack.push(']');\n        }\n        else if(stack.length > 0 && string[i]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(stack.length\
    \ > 0 && string[i] == ']'){\n            stack.push(']');\n        }\n       \
    \ else if(stack.length > 0 && string[i] == '['){\n            stack.push('[');\n\
    \        }\n        else if(stack.length > 0 && string[i] == ']'){\n         \
    \   stack.push(']');\n        }\n        else if(stack.length > 0 && string[i]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(stack.length\
    \ > 0 && string[i] == ']'){\n            stack.push(']');\n        }\n       \
    \ else if(stack.length > 0 && string[i] == '['){\n            stack.push('[');\n\
    \        }\n        else if(stack.length > 0 && string[i] == ']'){\n         \
    \   stack.push(']');\n        }\n        else if(stack.length > 0 && string[i]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(stack.length\
    \ > 0 && string[i] == ']'){\n            stack.push(']');\n        }\n       \
    \ else if(stack.length > 0 && string[i] == '['){\n            stack.push('[');\n\
    \        }\n        else if(stack.length > 0 && string[i] == ']'){\n         \
    \   stack.push(']');\n        }\n        else if(stack.length > ", "    let open_brackets\
    \ = string.match(/\\[/g);\n    let close_brackets = string.match(/\\]/g);\n  \
    \  let open_brackets_count = open_brackets ? open_brackets.length : 0;\n    let\
    \ close_brackets_count = close_brackets ? close_brackets.length : 0;\n    let\
    \ brackets_count = open_brackets_count + close_brackets_count;\n    let brackets_count_valid\
    \ = brackets_count > 0 && brackets_count < string.length && open_brackets_count\
    \ === close_brackets_count;\n    return brackets_count_valid;\n}\n", "    let\
    \ brackets = string.match(/\\[.*?\\]/g);\n    let nests = string.match(/\\[.*?\\\
    ]/g);\n    return brackets && nests && brackets.length == nests.length;\n}\n",
  "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(stack.length\
    \ == 0){\n            stack.push(string[i]);\n        }\n        else if(stack[stack.length-1]\
    \ == string[i]){\n            stack.pop();\n        }\n        else if(stack[stack.length-1]\
    \ != string[i]){\n            return false;\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n", "    let bracketsCount = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] == '['){\n            bracketsCount++;\n       \
    \ }\n        else if(string[i] == ']'){\n            bracketsCount--;\n      \
    \  }\n        if(bracketsCount < 0){\n            return false;\n        }\n \
    \   }\n    return bracketsCount == 0;\n}\n", "    // Your code here\n}\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input which contains\
    \ only square brackets.\nThe function should return True if and only if there\
    \ is a valid subsequence of brackets \nwhere at least one bracket in the subsequence\
    \ is nested.\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E\
    \ False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\nis_nested('[[][]]')\
    \ \u279E True\nis_nested('[[]][[') \u279E True\n\n\n</text>\n<cell>", "    let\
    \ stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(stack.length\
    \ == 0){\n            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if(stack[stack.length - 1] == '[' && string[i] == ']'){\n\
    \            stack.pop();\n        }\n        else if(stack[stack.length - 1]\
    \ == '[' && string[i] == ']' && stack[stack.length - 1] == '['){\n           \
    \ stack.pop();\n        }\n        else if(stack[stack.length - 1] == '[' && string[i]\
    \ == ']' && stack[stack.length - 1] == '['){\n            stack.pop();\n     \
    \   }\n        else if(stack[stack.length - 1] == '[' && string[i] == ']' && stack[stack.length\
    \ - 1] == '['){\n            stack.pop();\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == ']' && stack[stack.length - 1] == '['){\n      \
    \      stack.pop();\n        }\n        else if(stack[stack.length - 1] == '['\
    \ && string[i] == ']' && stack[stack.length - 1] == '['){\n            stack.pop();\n\
    \        }\n        else if(stack[stack.length - 1] == '[' && string[i] == ']'\
    \ && stack[stack.length - 1] == '['){\n            stack.pop();\n        }\n \
    \       else if(stack[stack.length - 1] == '[' && string[i] == ']' && stack[stack.length\
    \ - 1] == '['){\n            stack.pop();\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == ']' && stack[stack.length - 1] == '['){\n      \
    \      stack.pop();\n        }\n        else if(stack[stack.length - 1] == '['\
    \ && string[i] == ']' && stack[stack.length - 1] == '['){\n            stack.pop();\n\
    \        }\n        else if(stack[stack.length - 1] == '[' && string[i] == ']'\
    \ && stack[stack.length - 1] == '['){\n            stack.pop();\n        }\n \
    \       else if(stack[stack.length - 1] == '[' && string[i] == ']' && stack[stack.length\
    \ - 1] == '['){\n            stack.pop();\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == ']' && stack[stack.length - 1] == '['){\n      \
    \      stack.pop();\n        }\n        else if(stack[stack.length - 1] == '['\
    \ && string[i] == ']' && stack[stack.length - 1] == '['){\n            stack.pop();\n\
    \        }\n        else if(stack[stack.length - 1] == '[' && string[i] == ']'\
    \ && stack[stack.length - 1] == '['){\n            stack.pop();\n        }\n \
    \       else if(", "    let stack = [];\n    let brackets = 0;\n    for(let i\
    \ = 0; i < string.length; i++){\n        if(string[i] == '['){\n            stack.push(i);\n\
    \            brackets++;\n        }\n        else if(string[i] == ']'){\n    \
    \        brackets--;\n            if(brackets == 0){\n                let index\
    \ = stack.pop();\n                if(index == i){\n                    return\
    \ true;\n                }\n            }\n        }\n    }\n    return false;\n\
    }\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n    \
    \    if(stack.length == 0 && string[i] == '[') stack.push('[');\n        else\
    \ if(stack.length == 0 && string[i] == ']') stack.push(']');\n        else if(stack.length\
    \ == 0 && string[i] == '[') stack.push('[');\n        else if(stack.length ==\
    \ 0 && string[i] == ']') stack.push(']');\n        else if(string[i] == '[') stack.push('[');\n\
    \        else if(string[i] == ']') stack.push(']');\n        else if(string[i]\
    \ == '[' && stack[stack.length-1] == '[') stack.push('[');\n        else if(string[i]\
    \ == ']' && stack[stack.length-1] == '[') stack.push(']');\n        else if(string[i]\
    \ == '[' && stack[stack.length-1] == '[') stack.push('[');\n        else if(string[i]\
    \ == ']' && stack[stack.length-1] == '[') stack.push(']');\n        else if(string[i]\
    \ == '[' && stack[stack.length-1] == '[') stack.push('[');\n        else if(string[i]\
    \ == ']' && stack[stack.length-1] == '[') stack.push(']');\n        else if(string[i]\
    \ == '[' && stack[stack.length-1] == '[') stack.push('[');\n        else if(string[i]\
    \ == ']' && stack[stack.length-1] == '[') stack.push(']');\n        else if(string[i]\
    \ == '[' && stack[stack.length-1] == '[') stack.push('[');\n        else if(string[i]\
    \ == ']' && stack[stack.length-1] == '[') stack.push(']');\n        else if(string[i]\
    \ == '[' && stack[stack.length-1] == '[') stack.push('[');\n        else if(string[i]\
    \ == ']' && stack[stack.length-1] == '[') stack.push(']');\n        else if(string[i]\
    \ == '[' && stack[stack.length-1] == '[') stack.push('[');\n        else if(string[i]\
    \ == ']' && stack[stack.length-1] == '[') stack.push(']');\n        else if(string[i]\
    \ == '[' && stack[stack.length-1] == '[') stack.push('[');\n        else if(string[i]\
    \ == ']' && stack[stack.length-1] == '[') stack.push(']');\n        else if(string[i]\
    \ == '[' && stack[stack.length-1] == '[') stack.push('[');\n        else if(string[i]\
    \ == ']' && stack[stack.length-1] == '[') stack.push(']');\n        else if(string[i]\
    \ == '[' && stack[stack.length-1] == '[') stack.push('[');\n        else if(string[i]\
    \ == ']' && stack[stack.length-1] == '[') stack.push(']');\n        else if(string[i]\
    \ == '[' && stack[stack.length-1] == '[') stack.push('[');\n        else if(string[i]\
    \ == ']", "    let stack = [];\n    for (let i = 0; i < string.length; i++){\n\
    \        if (stack.length == 0){\n            if (string[i] == '['){\n       \
    \         stack.push('[');\n            }\n            else if (string[i] == '{'){\n\
    \                stack.push('{');\n            }\n            else if (string[i]\
    \ == '('){\n                stack.push('(');\n            }\n            else\
    \ if (string[i] == '['){\n                stack.push('[');\n            }\n  \
    \          else if (string[i] == '{'){\n                stack.push('{');\n   \
    \         }\n            else if (string[i] == '('){\n                stack.push('(');\n\
    \            }\n            else if (string[i] == '['){\n                stack.push('[');\n\
    \            }\n            else if (string[i] == '{'){\n                stack.push('{');\n\
    \            }\n            else if (string[i] == '('){\n                stack.push('(');\n\
    \            }\n            else if (string[i] == '['){\n                stack.push('[');\n\
    \            }\n            else if (string[i] == '{'){\n                stack.push('{');\n\
    \            }\n            else if (string[i] == '('){\n                stack.push('(');\n\
    \            }\n            else if (string[i] == '['){\n                stack.push('[');\n\
    \            }\n            else if (string[i] == '{'){\n                stack.push('{');\n\
    \            }\n            else if (string[i] == '('){\n                stack.push('(');\n\
    \            }\n            else if (string[i] == '['){\n                stack.push('[');\n\
    \            }\n            else if (string[i] == '{'){\n                stack.push('{');\n\
    \            }\n            else if (string[i] == '('){\n                stack.push('(');\n\
    \            }\n            else if (string[i] == '['){\n                stack.push('[');\n\
    \            }\n            else if (string[i] == '{'){\n                stack.push('{');\n\
    \            }\n            else if (string[i] == '('){\n                stack.push('(');\n\
    \            }\n            else if (string[i] == '['){\n                stack.push('[');\n\
    \            }\n            else if (string[i] == '{'){\n                stack.push('{');\n\
    \            }\n            else if (string[i] == '('){\n                stack.push('(');\n\
    \            }\n            else if (string[i] == '['){\n                stack.push('[');\n\
    \            }\n            else if (string[i] == '{'){\n                stack.push('{');\n\
    \            }\n            else if (string[i] == '('){\n                stack.push('(');\n\
    \            }\n            else if (string[i] == '['){\n                stack.push('[');\n\
    \            }\n            else if (string[i] == '{'){\n                stack.push('{');\n\
    \            }\n            else if (string[i] == '('){\n                stack.",
  "    let stack = [];\n    let brackets = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] == '['){\n            stack.push(i);\n         \
    \   brackets++;\n        }\n        else if(string[i] == ']'){\n            brackets--;\n\
    \        }\n        if(brackets == 0){\n            if(stack.length == 0){\n \
    \               return false;\n            }\n            else{\n            \
    \    let top = stack.pop();\n                if(string[top] == '['){\n       \
    \             stack.push(top);\n                }\n                else if(string[top]\
    \ == ']'){\n                    stack.push(top);\n                }\n        \
    \    }\n        }\n    }\n    return stack.length == 0;\n}\n", "    // Your code\
    \ here\n}\n</cell>\n<cell>\n# Test your function\nis_nested('[][]')\n</cell>\n\
    <text>\nStep 4: Find a substring that is a palindrome\nWrite a function that takes\
    \ in a string and returns the palindrome of that string. \nA palindrome is a word\
    \ or phrase that is the same forwards and backwards. \nFor example \u201Cradar\u201D\
    \ is a palindrome while \u201Cradar\u201D and \u201Cnardar\u201D are not.\n\n\
    For this problem, we will define a palindrome to be a substring that is the same\
    \ forwards and backwards.\n\nStep 4.1: Write a function that takes in a string\
    \ and returns the palindrome of that string.\nStep 4.2: Test your function with\
    \ the following strings:\n\n\"A man, a plan, a canal: Panama\"\n\"Never odd or\
    \ even\"\n\"A man, a plan, a canal: Panama, Never odd or even\"\n\n\n</text>\n\
    <cell>\n# Step 4.1: Write a function that takes in a string and returns the palindrome\
    \ of that string.\n# Step 4.2: Test your function with the following strings:\n\
    # \"A man, a plan, a canal: Panama\"\n# \"Never odd or even\"\n# \"A man, a plan,\
    \ a canal: Panama, Never odd or even\"\n\ndef palindrome(string):\n    # Your\
    \ code here\n    pass\n\npalindrome(\"A man, a plan, a canal: Panama\")\n</cell>\n\
    <cell>\npalindrome(\"Never odd or even\")\n</cell>\n<cell>\npalindrome(\"A man,\
    \ a plan, a canal: Panama, Never odd or even\")\n</cell>\n<text>\nStep 5: Find\
    \ a substring that is a palindrome of a given length\nWrite a function that takes\
    \ in a string and returns the palindrome of that string of a given length. \n\
    A palindrome is a word or phrase that is the same forwards and backwards. \nFor\
    \ example \u201Cradar\u201D is a palindrome while \u201Cradar\u201D and \u201C\
    nardar\u201D are not.\n\nFor this problem, we will define a palindrome to be a\
    \ substring that is the same forwards and backwards.\n\nStep 5.1: Write a function\
    \ that takes in a string and returns the palindrome of that string of a given\
    \ length.\nStep 5.2: Test your function with the following strings:\n\n\"A man,\
    \ a plan, a canal: Panama\"\n\"Never odd or ", "    // Your code here\n}\n", " \
    \   \n    // Your code here\n    \n}\n", "    let stack = [];\n    let brackets\
    \ = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] == '['){\n\
    \            stack.push('[');\n            brackets++;\n        }else if(string[i]\
    \ == ']'){\n            brackets--;\n            if(brackets == 0){\n        \
    \        stack.pop();\n            }\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n", "    let bracketCount = 0;\n    let openBracketCount = 0;\n   \
    \ let closeBracketCount = 0;\n    for(let i = 0; i < string.length; i++){\n  \
    \      if(string[i] == '['){\n            openBracketCount++;\n        }\n   \
    \     if(string[i] == ']'){\n            closeBracketCount++;\n        }\n   \
    \     if(string[i] == '{'){\n            bracketCount++;\n        }\n        if(string[i]\
    \ == '}'){\n            bracketCount--;\n        }\n    }\n    if(openBracketCount\
    \ > closeBracketCount){\n        return true;\n    }\n    if(openBracketCount\
    \ < closeBracketCount){\n        return false;\n    }\n    if(bracketCount ==\
    \ 0){\n        return false;\n    }\n}\n", "\tlet brackets = string.match(/\\\
    [.*?\\]/g);\n\tlet brackets_count = brackets.length;\n\tlet nested_brackets =\
    \ 0;\n\tfor(let i = 0; i < brackets_count - 1; i++){\n\t\tif(brackets[i + 1].match(/\\\
    [.*?\\]/)){\n\t\t\tnested_brackets++;\n\t\t}\n\t}\n\treturn (nested_brackets ==\
    \ brackets_count - 1);\n}\n", "    string = string.replace(/\\[|\\]/g,'');\n \
    \   var stack = [];\n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ == '[' && stack.length == 0){\n            stack.push('[');\n        }\n   \
    \     else if(string[i] == ']' && stack.length != 0){\n            stack.pop();\n\
    \        }\n        else if(string[i] == '[' && stack.length != 0){\n        \
    \    stack.push('[');\n        }\n        else if(string[i] == ']' && stack.length\
    \ == 0){\n            stack.push(']');\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n", "    let brackets_count = string.split(']').length - 1;\n    let\
    \ brackets_count_nested = 0;\n    for(let i = 0; i < string.length; i++){\n  \
    \      if(string[i] == '['){\n            brackets_count_nested++;\n        }\n\
    \        if(string[i] == ']'){\n            brackets_count_nested--;\n       \
    \ }\n        if(brackets_count_nested < 0){\n            return false;\n     \
    \   }\n    }\n    return brackets_count == 0;\n}\n", "    let bracketCount = 0;\n\
    \    let openBracketCount = 0;\n    let closeBracketCount = 0;\n    for(let i\
    \ = 0; i < string.length; i++){\n        if(string[i] == '['){\n            openBracketCount++;\n\
    \        }\n        if(string[i] == ']'){\n            closeBracketCount++;\n\
    \        }\n        if(string[i] == '['){\n            bracketCount++;\n     \
    \   }\n        if(string[i] == ']'){\n            bracketCount--;\n        }\n\
    \        if(bracketCount === 0){\n            if(openBracketCount === closeBracketCount){\n\
    \                return true;\n            }\n        }\n    }\n    return false;\n\
    }\n", "    // Your code here\n}\n", "    let bracketCount = 0;\n    let openBracketCount\
    \ = 0;\n    let closeBracketCount = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === '['){\n            openBracketCount++;\n   \
    \     }\n        else if(string[i] === ']'){\n            closeBracketCount++;\n\
    \        }\n        else if(string[i] === '['){\n            bracketCount++;\n\
    \        }\n        else if(string[i] === ']'){\n            bracketCount--;\n\
    \        }\n        else if(string[i] === '{'){\n            openBracketCount++;\n\
    \        }\n        else if(string[i] === '}'){\n            closeBracketCount++;\n\
    \        }\n        else if(string[i] === '{'){\n            bracketCount++;\n\
    \        }\n        else if(string[i] === '}'){\n            bracketCount--;\n\
    \        }\n    }\n    return bracketCount === 0 && openBracketCount === closeBracketCount;\n\
    }\n", "    let brackets_count = string.replace(/[\\[\\]]/g,'').length;\n    let\
    \ open_brackets_count = string.split('[').length - 1;\n    let closed_brackets_count\
    \ = string.split(']').length - 1;\n    let open_brackets_count = open_brackets_count\
    \ - closed_brackets_count;\n    return open_brackets_count === brackets_count;\n\
    }\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n    \
    \    if(stack.length > 0 && stack[stack.length - 1] === string[i]){\n        \
    \    stack.pop();\n        }\n        else if(string[i] === '[' && stack.length\
    \ === 0){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ === ']' && stack.length > 0){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] === '[' && stack.length > 0){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] === ']' && stack.length > 0){\n        \
    \    stack.push(string[i]);\n        }\n    }\n    return stack.length === 0;\n\
    }\n", "    \n    // Your code here\n    \n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(stack.length == 0){\n          \
    \  stack.push(string[i]);\n        }\n        else if(stack[stack.length - 1]\
    \ == string[i]){\n            stack.pop();\n        }\n        else if(string[i]\
    \ == '[' && stack.length != 0){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] == ']' && stack.length != 0){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == '[' && stack.length == 0){\n        \
    \    stack.push(string[i]);\n        }\n        else if(string[i] == ']' && stack.length\
    \ == 0){\n            stack.push(string[i]);\n        }\n        else if(string[i]\
    \ == '[' && stack[stack.length - 1] != string[i]){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ']' && stack[stack.length - 1] != string[i]){\n\
    \            stack.push(string[i]);\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n", "    // Your code here\n}\n", "    let brackets = string.match(/\\\
    [.*?\\]/g);\n    let nesting = false;\n    \n    for(let i = 0; i < brackets.length;\
    \ i++){\n        let bracket = brackets[i];\n        let open_brackets = bracket.match(/\\\
    [/g);\n        let close_brackets = bracket.match(/\\]/g);\n        \n       \
    \ if(open_brackets.length > 0 && close_brackets.length > 0){\n            nesting\
    \ = true;\n            break;\n        }\n    }\n    \n    return nesting;\n}\n",
  "    let brackets_count = string.split('[').length - 1;\n    let brackets_count_nested\
    \ = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] ===\
    \ '['){\n            brackets_count_nested++;\n        }\n        if(string[i]\
    \ === ']'){\n            brackets_count_nested--;\n        }\n        if(brackets_count_nested\
    \ === 0 && brackets_count === 0){\n            return true;\n        }\n    }\n\
    \    return false;\n}\n", "    let brackets = string.match(/\\[.*?\\]/g);\n  \
    \  if(brackets == null){\n        return false;\n    }\n    let brackets_length\
    \ = brackets.length;\n    let open_brackets = 0;\n    let close_brackets = 0;\n\
    \    for(let i = 0; i < brackets_length; i++){\n        let bracket = brackets[i];\n\
    \        if(bracket == '['){\n            open_brackets++;\n        }\n      \
    \  if(bracket == ']'){\n            close_brackets++;\n        }\n    }\n    if(open_brackets\
    \ == close_brackets){\n        return true;\n    }\n    return false;\n}\n", " \
    \   let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(stack.length\
    \ == 0){\n            if(string[i] == '[' || string[i] == '{'){\n            \
    \    stack.push(string[i]);\n            }\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if(stack[stack.length - 1] == '{' && string[i] == '{'){\n\
    \            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == '{'){\n            stack.push(string[i]);\n    \
    \    }\n        else if(stack[stack.length - 1] == '{' && string[i] == '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if(stack[stack.length - 1] == '{' && string[i] == '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if(stack[stack.length - 1] == '[' && string[i] == '{'){\n\
    \            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '{' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '{'){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '{'){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '{'){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '{'){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[", "    let stack = [];\n    for(let i = 0;\
    \ i < string.length; i++){\n        if(stack.length == 0){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '[' && string[i] == '['){\n\
    \            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == ']'){\n            stack.pop();\n        }\n   \
    \     else if(stack[stack.length - 1] == '[' && string[i] == ']' && stack[stack.length\
    \ - 1] == '['){\n            stack.pop();\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == ']' && stack[stack.length - 1] == '['){\n      \
    \      stack.push(string[i]);\n        }\n        else if(stack[stack.length -\
    \ 1] == '[' && string[i] == ']' && stack[stack.length - 1] == '['){\n        \
    \    stack.pop();\n        }\n        else if(stack[stack.length - 1] == '[' &&\
    \ string[i] == ']' && stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '[' && string[i] == ']'\
    \ && stack[stack.length - 1] == '['){\n            stack.pop();\n        }\n \
    \       else if(stack[stack.length - 1] == '[' && string[i] == ']' && stack[stack.length\
    \ - 1] == '['){\n            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == ']' && stack[stack.length - 1] == '['){\n      \
    \      stack.pop();\n        }\n        else if(stack[stack.length - 1] == '['\
    \ && string[i] == ']' && stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '[' && string[i] == ']'\
    \ && stack[stack.length - 1] == '['){\n            stack.pop();\n        }\n \
    \       else if(stack[stack.length - 1] == '[' && string[i] == ']' && stack[stack.length\
    \ - 1] == '['){\n            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == ']' && stack[stack.length - 1] == '['){\n      \
    \      stack.pop();\n        }\n        else if(stack[stack.length - 1] == '['\
    \ && string[i] == ']' && stack[stack.length - 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '[' && string[i] == ']'\
    \ && stack[stack.length - 1] == '['){\n            stack.pop();\n        }\n \
    \       else if(stack[stack.length - 1] == '[' && string[i] == ']' && stack[stack.length\
    \ - 1] == '['){\n            stack.push(", "\tlet brackets = string.match(/\\\
    [.*?\\]/g);\n\tif(brackets == null){\n\t\treturn false;\n\t}\n\tlet nested = false;\n\
    \tfor(let i = 0; i < brackets.length; i++){\n\t\tif(brackets[i].match(/\\[.*?\\\
    ]/)){\n\t\t\tnested = true;\n\t\t}\n\t}\n\treturn nested;\n}\n", "    \n    //\
    \ Your code here\n    \n}\n", "    string = string.replace(/\\[|\\]/g,'');\n \
    \   var brackets = string.split('');\n    var nested = false;\n    var nesting\
    \ = 0;\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i]\
    \ == '[' && brackets[i+1] == '[' && brackets[i+2] == '[' && brackets[i+3] == '['){\n\
    \            nesting++;\n        }\n        if(brackets[i] == '[' && brackets[i+1]\
    \ == '[' && brackets[i+2] == '['){\n            nesting++;\n        }\n      \
    \  if(brackets[i] == '[' && brackets[i+1] == '[' && brackets[i+2] == '['){\n \
    \           nesting++;\n        }\n        if(brackets[i] == '[' && brackets[i+1]\
    \ == '[' && brackets[i+2] == '['){\n            nesting++;\n        }\n      \
    \  if(brackets[i] == '[' && brackets[i+1] == '[' && brackets[i+2] == '['){\n \
    \           nesting++;\n        }\n        if(brackets[i] == '[' && brackets[i+1]\
    \ == '[' && brackets[i+2] == '['){\n            nesting++;\n        }\n      \
    \  if(brackets[i] == '[' && brackets[i+1] == '[' && brackets[i+2] == '['){\n \
    \           nesting++;\n        }\n        if(brackets[i] == '[' && brackets[i+1]\
    \ == '[' && brackets[i+2] == '['){\n            nesting++;\n        }\n      \
    \  if(brackets[i] == '[' && brackets[i+1] == '[' && brackets[i+2] == '['){\n \
    \           nesting++;\n        }\n        if(brackets[i] == '[' && brackets[i+1]\
    \ == '[' && brackets[i+2] == '['){\n            nesting++;\n        }\n      \
    \  if(brackets[i] == '[' && brackets[i+1] == '[' && brackets[i+2] == '['){\n \
    \           nesting++;\n        }\n        if(brackets[i] == '[' && brackets[i+1]\
    \ == '[' && brackets[i+2] == '['){\n            nesting++;\n        }\n      \
    \  if(brackets[i] == '[' && brackets[i+1] == '[' && brackets[i+2] == '['){\n \
    \           nesting++;\n        }\n        if(brackets[i] == '[' && brackets[i+1]\
    \ == '[' && brackets[i+2] == '['){\n            nesting++;\n        }\n      \
    \  if(brackets[i] == '[' && brackets[i+1] == '[' && brackets[i+2] == '['){\n \
    \           nesting++;\n        }\n        if(brackets[i] == '[' && brackets[i+1]\
    \ == '[' && brackets[i+2]", "    var open_brackets = 0,\n        closed_brackets\
    \ = 0;\n    \n    for(var i = 0; i < string.length; i++){\n        if(string[i]\
    \ == '['){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == ']'){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '['){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == ']'){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '{'){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == '}'){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '{'){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == '}'){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '('){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == ')'){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '('){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == ')'){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '<'){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == '>'){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '<'){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == '>'){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '\"'){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == \"'\"){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '\"'){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == \"'\"){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '+'){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == '-'){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '+'){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == '-'){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '*'){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == '/'){\n            closed_brackets++;\n        }\n        else if(string[i]\
    \ == '*'){\n            open_brackets++;\n        }\n        else if(string[i]\
    \ == '/'){\n", "    \n    // Your code here\n    \n}\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input which contains only square\
    \ brackets.\nThe function should return True if and only if there is a valid subsequence\
    \ of brackets \nwhere at least one bracket in the subsequence is nested.\nis_nested('[[]]')\
    \ \u279E True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E\
    \ False\nis_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\nis_nested('[[[]]') \u279E True\nis_nested('[[[]][]]') \u279E True\n\
    is_nested('[[[]][][]]') \u279E True\nis_nested('[[[]][][][]]') \u279E True\nis_nested('[[[]][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][]]') \u279E True\nis_nested('[[[]][][][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][][][]]') \u279E True\nis_nested('[[[]][][][][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][][][][]]') \u279E True\nis_nested('[[[]][][][][][][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][][][][][][]]') \u279E True\nis_nested('[[[]][][][][][][][][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][][][][][][][]]') \u279E True\nis_nested('[[[]][][][][][][][][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][][][][][][][]]') \u279E True\nis_nested('[[[]][][][][][][][][][][][][]]')\
    \ \u279E True\nis_nested('[[[]][][][][][][][][][][][][]", "    let stack = [];\n\
    \    for(let i=0; i<string.length; i++){\n        if(string[i] == '['){\n    \
    \        stack.push(string[i]);\n        }\n        else if(string[i] == ']'){\n\
    \            if(stack.length == 0){\n                return false;\n         \
    \   }\n            else{\n                stack.pop();\n            }\n      \
    \  }\n    }\n    return stack.length == 0;\n}\n", "    let stack = [];\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(stack.length == 0 && string[i] ==\
    \ '['){\n            stack.push('[');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == ']'){\n            stack.push(']');\n        }\n      \
    \  else if(stack.length == 0 && string[i] == '{'){\n            stack.push('{');\n\
    \        }\n        else if(stack.length == 0 && string[i] == '}'){\n        \
    \    stack.push('}');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '('){\n            stack.push('(');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == ')'){\n            stack.push(')');\n        }\n      \
    \  else if(stack.length == 0 && string[i] == '\"'){\n            stack.push('\"\
    ');\n        }\n        else if(stack.length == 0 && string[i] == '\\''){\n  \
    \          stack.push(\"'\");\n        }\n        else if(stack.length == 0 &&\
    \ string[i] == '\\\\'){\n            stack.push('\\\\');\n        }\n        else\
    \ if(stack.length == 0 && string[i] == '\\n'){\n            stack.push('\\n');\n\
    \        }\n        else if(stack.length == 0 && string[i] == '\\t'){\n      \
    \      stack.push('\\t');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '\\r'){\n            stack.push('\\r');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == '\\b'){\n            stack.push('\\b');\n        }\n  \
    \      else if(stack.length == 0 && string[i] == '\\f'){\n            stack.push('\\\
    f');\n        }\n        else if(stack.length == 0 && string[i] == '\\v'){\n \
    \           stack.push('\\v');\n        }\n        else if(stack.length == 0 &&\
    \ string[i] == '\\0'){\n            stack.push('\\0');\n        }\n        else\
    \ if(stack.length == 0 && string[i] == '\\1'){\n            stack.push('\\1');\n\
    \        }\n        else if(stack.length == 0 && string[i] == '\\2'){\n      \
    \      stack.push('\\2');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '\\3'){\n            stack.push('\\3');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == '\\4'){\n            stack.push('\\4');\n        }\n  \
    \      else if(stack.length == 0 && string[i] == '\\5'){\n            stack.push('\\\
    5');\n        }\n        else if(stack.length == 0 && string[i] == '\\6'){\n \
    \           stack.push('\\6');\n        }\n        else if(stack.length == 0 &&\
    \ string[i] == '\\7'){\n            stack.push('\\7');\n        }\n        else\
    \ if(stack.length == 0 && string[i] == '\\8'){\n            stack.push('\\8",
  "    string = string.replace(/\\s+/g,' ');\n    string = string.replace(/[\\[\\\
    ]]/g,'');\n    string = string.replace(/[\\[\\]]+/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,'');\n    string = string.replace(/[\\\
    [\\]]/g,'');\n    string = string.replace(/[\\[\\]]/g,", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(stack.length == 0){\n\
    \            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == string[i]){\n            stack.pop();\n        }\n        else if(string[i]\
    \ == '[' && string[i + 1] == '['){\n            stack.push(string[i]);\n     \
    \   }\n        else if(string[i] == ']' && string[i - 1] == ']'){\n          \
    \  stack.push(string[i]);\n        }\n        else if(string[i] == ']' && string[i\
    \ + 1] == ']'){\n            stack.pop();\n        }\n        else if(string[i]\
    \ == '[' && string[i + 1] == ']'){\n            stack.pop();\n        }\n    \
    \    else if(string[i] == '[' && string[i + 1] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(string[i] == ']' && string[i - 1] == ']'){\n     \
    \       stack.push(string[i]);\n        }\n        else if(string[i] == ']' &&\
    \ string[i - 1] == '['){\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length == 0;\n}\n", "    let stack = [];\n    let brackets = 0;\n    for(let\
    \ i = 0; i < string.length; i++){\n        if(string[i] == '[') brackets++;\n\
    \        if(string[i] == ']') brackets--;\n        if(brackets < 0) return false;\n\
    \        stack.push(string[i]);\n    }\n    return brackets == 0;\n}\n", "   \
    \ let brackets = string.split(']').length - 1;\n    let open_brackets = string.split('[').length\
    \ - 1;\n    return brackets === open_brackets;\n}\n", "    let bracketsCount =\
    \ 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] == '['){\n\
    \            bracketsCount++;\n        }\n        else if(string[i] == ']'){\n\
    \            bracketsCount--;\n        }\n        if(bracketsCount < 0){\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n", "    let stack\
    \ = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i] ==\
    \ '[' && stack.length == 0){\n            stack.push('[');\n        }\n      \
    \  else if(string[i] == ']' && stack.length > 0){\n            stack.pop();\n\
    \        }\n        else if(stack.length > 0 && string[i] == '['){\n         \
    \   stack.push('[');\n        }\n        else if(stack.length > 0 && string[i]\
    \ == ']'){\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n", "    var brackets_count = string.match(/\\[/g).length;\n    var\
    \ open_brackets_count = string.match(/\\(/g).length;\n    var close_brackets_count\
    \ = string.match(/\\)/g).length;\n    var open_brackets_count = open_brackets_count\
    \ + close_brackets_count;\n    var close_brackets_count = close_brackets_count\
    \ + open_brackets_count;\n    var open_brackets_count = open_brackets_count +\
    \ close_brackets_count;\n    var close_brackets_count = close_brackets_count +\
    \ open_brackets_count;\n    var open_brackets_count = open_brackets_count + close_brackets_count;\n\
    \    var close_brackets_count = close_brackets_count + open_brackets_count;\n\
    \    var open_brackets_count = open_brackets_count + close_brackets_count;\n \
    \   var close_brackets_count = close_brackets_count + open_brackets_count;\n \
    \   var open_brackets_count = open_brackets_count + close_brackets_count;\n  \
    \  var close_brackets_count = close_brackets_count + open_brackets_count;\n  \
    \  var open_brackets_count = open_brackets_count + close_brackets_count;\n   \
    \ var close_brackets_count = close_brackets_count + open_brackets_count;\n   \
    \ var open_brackets_count = open_brackets_count + close_brackets_count;\n    var\
    \ close_brackets_count = close_brackets_count + open_brackets_count;\n    var\
    \ open_brackets_count = open_brackets_count + close_brackets_count;\n    var close_brackets_count\
    \ = close_brackets_count + open_brackets_count;\n    var open_brackets_count =\
    \ open_brackets_count + close_brackets_count;\n    var close_brackets_count =\
    \ close_brackets_count + open_brackets_count;\n    var open_brackets_count = open_brackets_count\
    \ + close_brackets_count;\n    var close_brackets_count = close_brackets_count\
    \ + open_brackets_count;\n    var open_brackets_count = open_brackets_count +\
    \ close_brackets_count;\n    var close_brackets_count = close_brackets_count +\
    \ open_brackets_count;\n    var open_brackets_count = open", "    \n    // Create\
    \ a stack to hold the brackets\n    var stack = [];\n    \n    // Iterate through\
    \ each character in the string\n    for(var i = 0; i < string.length; i++){\n\
    \        \n        // If the character is a bracket, push it to the stack\n  \
    \      if(string[i] == '['){\n            stack.push('[');\n        }\n      \
    \  else if(string[i] == ']'){\n            \n            // If the stack is empty,\
    \ then the string is not nested\n            if(stack.length == 0){\n        \
    \        return false;\n            }\n            \n            // Pop the last\
    \ bracket from the stack\n            var last = stack.pop();\n            \n\
    \            // If the last bracket in the stack is a closing bracket, then the\
    \ string is not nested\n            if(last == ']'){\n                return false;\n\
    \            }\n        }\n        \n        // If the character is not a bracket,\
    \ push it to the stack\n        else{\n            stack.push(string[i]);\n  \
    \      }\n    }\n    \n    // If the stack is empty, then the string is not nested\n\
    \    if(stack.length == 0){\n        return false;\n    }\n    \n    // Pop the\
    \ last bracket from the stack\n    var last = stack.pop();\n    \n    // If the\
    \ last bracket in the stack is a closing bracket, then the string is not nested\n\
    \    if(last == ']'){\n        return false;\n    }\n    \n    // If the stack\
    \ is empty, then the string is not nested\n    if(stack.length == 0){\n      \
    \  return false;\n    }\n    \n    // Pop the last bracket from the stack\n  \
    \  var last = stack.pop();\n    \n    // If the last bracket in the stack is a\
    \ closing bracket, then the string is not nested\n    if(last == ']'){\n     \
    \   return false;\n    }\n    \n    // If the stack is empty, then the string\
    \ is not nested\n    if(stack.length == 0){\n        return false;\n    }\n  \
    \  \n    // Pop the last bracket from the stack\n    var last = stack.pop();\n\
    \    \n    // If the last bracket in the stack is a closing bracket, then the\
    \ string is not nested\n    if(last == ']'){\n        return false;\n    }\n \
    \   \n    // If the stack is empty, then the string is not nested\n    if(stack.length\
    \ == 0){\n        return false;\n    }\n    \n    // Pop the last bracket from\
    \ the stack\n    var last = stack.pop();\n    \n    // If the last bracket in\
    \ the stack is a closing bracket, then the string is not nested\n    if(last ==\
    \ ']'){\n        return false;\n    }\n    \n    // If the stack is empty, then\
    \ the string is not nested\n    if(stack.length == 0){\n        return false;\n\
    \    }\n    \n    // Pop the last bracket from the stack\n    var last = stack.pop();\n\
    \    \n    // If the last bracket in the stack is a closing bracket, then the\
    \ string is not nested\n    if(last == ']')", "    // Your code here\n}\n", " \
    \   let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(string[i]\
    \ == '[' && stack.length == 0){\n            stack.push(i);\n        }\n     \
    \   else if(string[i] == ']' && stack.length != 0){\n            stack.pop();\n\
    \        }\n    }\n    return stack.length != 0;\n}\n", "    let stack = [];\n\
    \    for(let i = 0; i < string.length; i++){\n        if(stack.length == 0 &&\
    \ string[i] == '['){\n            stack.push('[');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == ']'){\n            stack.push(']');\n        }\n      \
    \  else if(stack.length == 0 && string[i] == '{'){\n            stack.push('{');\n\
    \        }\n        else if(stack.length == 0 && string[i] == '}'){\n        \
    \    stack.push('}');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '('){\n            stack.push('(');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == ')'){\n            stack.push(')');\n        }\n      \
    \  else if(stack.length == 0 && string[i] == '\"'){\n            stack.push('\"\
    ');\n        }\n        else if(stack.length == 0 && string[i] == \"'\"){\n  \
    \          stack.push(\"'\");\n        }\n        else if(stack.length == 0 &&\
    \ string[i] == '\\\\'){\n            stack.push('\\\\');\n        }\n        else\
    \ if(stack.length == 0 && string[i] == '\\n'){\n            stack.push('\\n');\n\
    \        }\n        else if(stack.length == 0 && string[i] == '\\t'){\n      \
    \      stack.push('\\t');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '\\r'){\n            stack.push('\\r');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == '\\b'){\n            stack.push('\\b');\n        }\n  \
    \      else if(stack.length == 0 && string[i] == '\\f'){\n            stack.push('\\\
    f');\n        }\n        else if(stack.length == 0 && string[i] == '\\v'){\n \
    \           stack.push('\\v');\n        }\n        else if(stack.length == 0 &&\
    \ string[i] == '\\a'){\n            stack.push('\\a');\n        }\n        else\
    \ if(stack.length == 0 && string[i] == '\\e'){\n            stack.push('\\e');\n\
    \        }\n        else if(stack.length == 0 && string[i] == '\\s'){\n      \
    \      stack.push('\\s');\n        }\n        else if(stack.length == 0 && string[i]\
    \ == '\\1'){\n            stack.push('\\1');\n        }\n        else if(stack.length\
    \ == 0 && string[i] == '\\0'){\n            stack.push('\\0');\n        }\n  \
    \      else if(stack.length == 0 && string[i] == '\\9'){\n            stack.push('\\\
    9');\n        }\n        else if(stack.length == 0 && string[i] == '\\v'){\n \
    \           stack.push('\\v');\n        }\n        else if(stack.length == 0 &&\
    \ string[i] == '\\1'){\n            stack.push('\\1');\n        }\n        else\
    \ if(stack.length == 0 && string[i] == '\\0'){\n            ", "    let brackets\
    \ = string.match(/\\[.*?\\]/g);\n    return brackets ? brackets.every(bracket\
    \ => is_nested(bracket)) : false;\n}\n", "    // Your code here\n}\n</cell>\n\
    <cell>\n# Test your function\nis_nested
  "    let brackets_count = string.match(/\\[/g).length\n    let open_brackets_count\
    \ = string.match(/\\(/g).length\n    let close_brackets_count = string.match(/\\\
    )/g).length\n    let open_brackets_count = string.match(/\\[/g).length\n    let\
    \ close_brackets_count = string.match(/\\]/g).length\n    let open_brackets_count\
    \ = string.match(/\\(/g).length\n    let close_brackets_count = string.match(/\\\
    )/g).length\n    let open_brackets_count = string.match(/\\[/g).length\n    let\
    \ close_brackets_count = string.match(/\\]/g).length\n    let open_brackets_count\
    \ = string.match(/\\(/g).length\n    let close_brackets_count = string.match(/\\\
    )/g).length\n    let open_brackets_count = string.match(/\\[/g).length\n    let\
    \ close_brackets_count = string.match(/\\]/g).length\n    let open_brackets_count\
    \ = string.match(/\\(/g).length\n    let close_brackets_count = string.match(/\\\
    )/g).length\n    let open_brackets_count = string.match(/\\[/g).length\n    let\
    \ close_brackets_count = string.match(/\\]/g).length\n    let open_brackets_count\
    \ = string.match(/\\(/g).length\n    let close_brackets_count = string.match(/\\\
    )/g).length\n    let open_brackets_count = string.match(/\\[/g).length\n    let\
    \ close_brackets_count = string.match(/\\]/g).length\n    let open_brackets_count\
    \ = string.match(/\\(/g).length\n    let close_brackets_count = string.match(/\\\
    )/g).length\n    let open_brackets_count = string.match(/\\[/g).length\n    let\
    \ close_brackets_count = string.match(/\\]/g).length\n    let open_brackets_count\
    \ = string.match(/\\(/g).length\n    let close_brackets_count = string.match(/\\\
    )/g).length\n    let open_brackets_count = string.match(/\\[/g).length\n    let\
    \ close_brackets_count = string.match(/\\]/g).length\n    let open_brackets_count\
    \ = string.match(/\\(/g).length\n    let close_brackets_count = string.match(/\\\
    )/g).length\n    let open_brackets_count = string.match(/\\[/g).length\n    let\
    \ close_brackets_count = string.match(/\\]/g).length\n    let open_brackets_count\
    \ = string.match(/\\(/g).length\n    let close_bracket", "    // Your code here\n\
    }\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ which contains only square brackets.\nThe function should return True if and\
    \ only if there is a valid subsequence of brackets \nwhere at least one bracket\
    \ in the subsequence is nested.\nis_nested('[[]]') \u279E True\nis_nested('[]]]]]]][[[[[]')\
    \ \u279E False\nis_nested('[][]') \u279E False\nis_nested('[]') \u279E False\n\
    is_nested('[[][]]') \u279E True\nis_nested('[[]][[') \u279E True\n\n\n</text>\n\
    <cell>", "    let bracketCount = 0;\n    let openBracketCount = 0;\n    let closeBracketCount\
    \ = 0;\n    for(let i = 0; i < string.length; i++){\n        if(string[i] == '['){\n\
    \            openBracketCount++;\n        }\n        else if(string[i] == ']'){\n\
    \            closeBracketCount++;\n        }\n        else if(string[i] == '{'){\n\
    \            openBracketCount++;\n        }\n        else if(string[i] == '}'){\n\
    \            closeBracketCount++;\n        }\n        else if(string[i] == '('){\n\
    \            openBracketCount++;\n        }\n        else if(string[i] == ')'){\n\
    \            closeBracketCount++;\n        }\n        else if(string[i] == '['){\n\
    \            bracketCount++;\n        }\n        else if(string[i] == ']'){\n\
    \            bracketCount--;\n        }\n        else if(string[i] == '{'){\n\
    \            bracketCount--;\n        }\n        else if(string[i] == '}'){\n\
    \            bracketCount--;\n        }\n        else if(string[i] == '('){\n\
    \            bracketCount--;\n        }\n        else if(string[i] == ')'){\n\
    \            bracketCount--;\n        }\n    }\n    return bracketCount >= openBracketCount\
    \ && bracketCount <= closeBracketCount;\n}\n", "    let bracketsCount = 0;\n \
    \   for(let i = 0; i < string.length; i++){\n        if(string[i] == '['){\n \
    \           bracketsCount++;\n        }\n        else if(string[i] == ']'){\n\
    \            bracketsCount--;\n        }\n    }\n    return bracketsCount > 0;\n\
    }\n", "    let brackets = string.match(/\\[.*?\\]/g);\n    \n    if(brackets ==\
    \ null){\n        return false;\n    }\n    \n    let brackets_length = brackets.length;\n\
    \    \n    for(let i = 0; i < brackets_length; i++){\n        let bracket = brackets[i];\n\
    \        let brackets_length = bracket.length;\n        \n        if(brackets_length\
    \ == 0){\n            return false;\n        }\n        \n        let open_brackets\
    \ = bracket.match(/\\[/g);\n        let close_brackets = bracket.match(/\\]/g);\n\
    \        \n        if(open_brackets == null || close_brackets == null){\n    \
    \        return false;\n        }\n        \n        let open_length = open_brackets.length;\n\
    \        let close_length = close_brackets.length;\n        \n        if(open_length\
    \ == close_length){\n            return false;\n        }\n        \n        let\
    \ open_length = open_brackets.length;\n        let close_length = close_brackets.length;\n\
    \        \n        for(let j = 0; j < open_length; j++){\n            let open_bracket\
    \ = open_brackets[j];\n            let close_bracket = close_brackets[j];\n  \
    \          \n            if(open_bracket != close_bracket){\n                return\
    \ false;\n            }\n        }\n    }\n    \n    return true;\n}\n", "   \
    \ let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(stack.length\
    \ == 0){\n            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == string[i]){\n            stack.pop();\n        }\n        else if(stack.length\
    \ == 1 && stack[stack.length - 1] == '['){\n            return true;\n       \
    \ }\n        else if(stack.length == 1 && stack[stack.length - 1] == '{'){\n \
    \           return false;\n        }\n        else if(stack.length == 1 && stack[stack.length\
    \ - 1] == '('){\n            return false;\n        }\n        else if(stack.length\
    \ == 1 && stack[stack.length - 1] == '['){\n            return false;\n      \
    \  }\n        else if(stack.length == 1 && stack[stack.length - 1] == '{'){\n\
    \            return false;\n        }\n        else if(stack.length == 1 && stack[stack.length\
    \ - 1] == '('){\n            return false;\n        }\n        else if(stack.length\
    \ == 1 && stack[stack.length - 1] == '['){\n            return false;\n      \
    \  }\n        else if(stack.length == 1 && stack[stack.length - 1] == '{'){\n\
    \            return false;\n        }\n        else if(stack.length == 1 && stack[stack.length\
    \ - 1] == '('){\n            return false;\n        }\n        else if(stack.length\
    \ == 1 && stack[stack.length - 1] == '['){\n            return false;\n      \
    \  }\n        else if(stack.length == 1 && stack[stack.length - 1] == '{'){\n\
    \            return false;\n        }\n        else if(stack.length == 1 && stack[stack.length\
    \ - 1] == '('){\n            return false;\n        }\n        else if(stack.length\
    \ == 1 && stack[stack.length - 1] == '['){\n            return false;\n      \
    \  }\n        else if(stack.length == 1 && stack[stack.length - 1] == '{'){\n\
    \            return false;\n        }\n        else if(stack.length == 1 && stack[stack.length\
    \ - 1] == '('){\n            return false;\n        }\n        else if(stack.length\
    \ == 1 && stack[stack.length - 1] == '['){\n            return false;\n      \
    \  }\n        else if(stack.length == 1 && stack[stack.length - 1] == '{'){\n\
    \            return false;\n        }\n        else if(stack.length == 1 && stack[stack.length\
    \ - 1] == '('){\n            return false;\n        }\n        else if(stack.length\
    \ == 1 && stack[stack.length - 1] == '['){\n            return false;\n      \
    \  }\n        else if(stack.length == 1 && stack[stack.length - 1] == '{'){\n\
    \            return false;\n        }\n        else if(stack.length == 1 && stack[stack.length\
    \ - 1] == '('){\n            return false;\n        }\n        else if(stack.length\
    \ == 1 && stack[stack.length - 1] == '['){\n            return false;\n      \
    \  }\n        else if(stack.length == 1 && stack[stack.length", "    let stack\
    \ = [];\n    let brackets = 0;\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] == '['){\n            stack.push(i);\n            brackets++;\n\
    \        }\n        else if(string[i] == ']'){\n            brackets--;\n    \
    \        if(brackets == 0){\n                stack.pop();\n            }\n   \
    \     }\n    }\n    return stack.length == 0;\n}\n", "    \n    // Your code here\n\
    \    \n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '[' && stack.length === 0){\n            stack.push(i);\n\
    \        }\n        else if(string[i] === ']' && stack.length > 0){\n        \
    \    stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n", " \
    \   string = string.replace(/\\s+/g, '');\n    string = string.replace(/[\\[\\\
    ]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/[\\\
    [\\]]/g, '');\n    string = string.replace(/[\\[\\]]/g, '');\n    string = string.replace(/",
  "    let brackets = string.match(/\\[.*?\\]/g);\n    if(brackets == null){\n   \
    \     return false;\n    }\n    let nestedBrackets = brackets.filter(function(bracket){\n\
    \        return bracket.match(/\\[.*?\\]/);\n    });\n    return nestedBrackets.length\
    \ == 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] == '[' && string[i+1] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == '[' && string[i+1] == '{'){\n       \
    \     stack.push('{');\n        }\n        else if(string[i] == '{' && string[i+1]\
    \ == '{'){\n            stack.push('}');\n        }\n        else if(string[i]\
    \ == '}' && string[i+1] == '}'){\n            stack.pop();\n        }\n      \
    \  else if(string[i] == '[' && string[i+1] == '['){\n            stack.pop();\n\
    \        }\n        else if(string[i] == '{' && string[i+1] == '{'){\n       \
    \     stack.pop();\n        }\n        else if(string[i] == '}' && string[i+1]\
    \ == '}'){\n            stack.pop();\n        }\n        else if(string[i] ==\
    \ '[' && string[i+1] == '{'){\n            stack.push('{');\n        }\n     \
    \   else if(string[i] == '}' && string[i+1] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == '[' && string[i+1] == '['){\n       \
    \     stack.push('[');\n        }\n        else if(string[i] == '{' && string[i+1]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == '}' && string[i+1] == '{'){\n            stack.push('}');\n        }\n  \
    \      else if(string[i] == '[' && string[i+1] == '{'){\n            stack.push('{');\n\
    \        }\n        else if(string[i] == '}' && string[i+1] == '['){\n       \
    \     stack.push('}');\n        }\n        else if(string[i] == '[' && string[i+1]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == '{' && string[i+1] == '{'){\n            stack.push('{');\n        }\n  \
    \      else if(string[i] == '}' && string[i+1] == '{'){\n            stack.push('}');\n\
    \        }\n        else if(string[i] == '[' && string[i+1] == '['){\n       \
    \     stack.push('[');\n        }\n        else if(string[i] == '{' && string[i+1]\
    \ == '['){\n            stack.push('{');\n        }\n        else if(string[i]\
    \ == '}' && string[i+1] == '{'){\n            stack.push('}');\n        }\n  \
    \      else if(string[i] == '{' && string[i+1] == '['){\n            stack.push('{');\n\
    \        }\n        else if(string[i] == '[' && string[i+1] == '{'){\n       \
    \     stack.push('{');\n        }\n        else if(string[i] == '}' && string[i+1]\
    \ == '['){\n            stack.push('}');\n        }\n", "    // Your code here\n\
    }\n", "    var brackets = string.match(/\\[.*?\\]/g);\n    if(brackets == null){\n\
    \        return false;\n    }\n    for(var i = 0; i < brackets.length; i++){\n\
    \        var bracket = brackets[i];\n        var brackets = bracket.match(/\\\
    [.*?\\]/g);\n        if(brackets == null){\n            return false;\n      \
    \  }\n        for(var j = 0; j < brackets.length; j++){\n            var nestedBrackets\
    \ = brackets[j].match(/\\[.*?\\]/g);\n            if(nestedBrackets == null){\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n", "    // Your code here\n}\n</cell>\n<cell>\n# Test your code\nis_nested('[][]')\n\
    </cell>\n<text>\nStep 3: Write a function that takes a string as input and returns\
    \ True if and only if there is a valid subsequence of brackets where the last\
    \ bracket is nested.\nis_last_nested('[[]]') \u279E True\nis_last_nested('[]][]]')\
    \ \u279E True\nis_last_nested('[]][][]') \u279E False\nis_last_nested('[]][]')\
    \ \u279E False\nis_last_nested('[]]') \u279E False\nis_last_nested('[][][]') \u279E\
    \ True\nis_last_nested('[][]') \u279E False\nis_last_nested('[]') \u279E False\n\
    is_last_nested('[[][]]') \u279E True\nis_last_nested('[[]][[') \u279E True\nHint:\
    \ You may want to use recursion to solve this problem.\n\n\n</text>\n<cell>\n\
    # UNQ_C3 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: is_last_nested\n\
    def is_last_nested(string):\n    \n    # Your code here\n    \n    \n</cell>\n\
    <cell>\n# Test your code\nis_last_nested('[][]')\n</cell>\n<text>\nStep 4: Write\
    \ a function that takes a string as input and returns True if and only if there\
    \ is a valid subsequence of brackets where the middle bracket is nested.\nis_middle_nested('[[]]')\
    \ \u279E True\nis_middle_nested('[]][]]') \u279E True\nis_middle_nested('[]][][]')\
    \ \u279E True\nis_middle_nested('[]][]') \u279E True\nis_middle_nested('[]]')\
    \ \u279E True\nis_middle_nested('[][][]') \u279E True\nis_middle_nested('[][]')\
    \ \u279E True\nis_middle_nested('[]') \u279E True\nis_middle_nested('[[][]]')\
    \ \u279E True\nis_middle_nested('[[]][[') \u279E True\nHint: You may want to use\
    \ recursion to solve this problem.\n\n\n</text>\n<cell>\n# UNQ_C4 (UNIQUE CELL\
    \ IDENTIFIER, DO NOT EDIT)\n# GRADED FUNCTION: is_middle_nested\ndef is_middle_nested(string):\n\
    \    \n    # Your code here\n    \n    \n</", "    let open_brackets = string.match(/\\\
    [/g);\n    let close_brackets = string.match(/\\]/g);\n    let open_parenthesis\
    \ = string.match(/\\(/g);\n    let close_parenthesis = string.match(/\\)/g);\n\
    \    let open_curly = string.match(/\\{/g);\n    let close_curly = string.match(/\\\
    }/g);\n    let open_angled = string.match(/\\</g);\n    let close_angled = string.match(/\\\
    >/g);\n    let open_angled_brackets = string.match(/\\<\\>/g);\n    let close_angled_brackets\
    \ = string.match(/\\<\\>\\>/g);\n    let open_angled_brackets_2 = string.match(/\\\
    <\\>\\>\\>/g);\n    let close_angled_brackets_2 = string.match(/\\<\\>\\>\\>\\\
    >/g);\n    let open_angled_brackets_3 = string.match(/\\<\\>\\>\\>\\>\\>/g);\n\
    \    let close_angled_brackets_3 = string.match(/\\<\\>\\>\\>\\>\\>\\>/g);\n \
    \   let open_angled_brackets_4 = string.match(/\\<\\>\\>\\>\\>\\>\\>\\>/g);\n\
    \    let close_angled_brackets_4 = string.match(/\\<\\>\\>\\>\\>\\>\\>\\>\\>/g);\n\
    \    let open_angled_brackets_5 = string.match(/\\<\\>\\>\\>\\>\\>\\>\\>\\>/g);\n\
    \    let close_angled_brackets_5 = string.match(/\\<\\>\\>\\>\\>\\>\\>\\>\\>\\\
    >/g);\n    let open_angled_brackets_6 = string.match(/\\<\\>\\>\\>\\>\\>\\>\\\
    >\\>\\>\\>/g);\n    let close_angled_brackets_6 = string.match(/\\<\\>\\>\\>\\\
    >\\>\\>\\>\\>\\>\\>\\>/g);\n    let open_angled_brackets_7 = string.match(/\\\
    <\\>\\>\\>\\>\\>\\>\\>\\>\\>\\>\\>/g);\n    let close_angled_brackets_7 = string.match(/\\\
    <\\>\\>\\>\\>\\>\\>\\>\\>\\>\\>\\>\\>\\>/g);\n    let open_angled_brackets_8 =\
    \ string.match(/\\<\\>\\>\\>\\>\\>\\>\\>\\", "    \n    // Your code here\n  \
    \  \n}\n", "    let brackets = string.match(/\\[.*?\\]/g);\n    let nested = false;\n\
    \    for(let i = 0; i < brackets.length; i++){\n        let bracket = brackets[i];\n\
    \        let open_bracket = bracket.match(/\\[/);\n        let close_bracket =\
    \ bracket.match(/\\]/);\n        if(open_bracket != null && close_bracket != null){\n\
    \            nested = true;\n        }\n    }\n    return nested;\n}\n", "   \
    \ let brackets = string.match(/\\[.*?\\]/g);\n    if(brackets){\n        let brackets_length\
    \ = brackets.length;\n        let nesting = 0;\n        for(let i = 0; i < brackets_length;\
    \ i++){\n            if(brackets[i].match(/\\[.*?\\]/)){\n                nesting++;\n\
    \            }\n            else{\n                nesting--;\n            }\n\
    \            if(nesting === 0){\n                return true;\n            }\n\
    \        }\n    }\n    return false;\n}\n", "    \n    // Your code here\n   \
    \ \n}\n", "  if(string.length <= 0){\n    return false;\n  }\n  if(string[0] ===\
    \ '[' && string[string.length-1] === ']'){\n    return true;\n  }\n  if(string[0]\
    \ === '[' && string[string.length-1] === ']' && is_nested(string.substr(1, string.length-2))){\n\
    \    return true;\n  }\n  return false;\n}\n", "    let brackets = string.match(/\\\
    [.*?\\]/g);\n    return brackets !== null;\n}\n", "    let stack = [];\n    for\
    \ (let i = 0; i < string.length; i++){\n        if (stack.length == 0){\n    \
    \        if (string[i] == '[' || string[i] == '{'){\n                stack.push(string[i]);\n\
    \            }\n        }\n        else if (stack.length == 1 && string[i] ==\
    \ '[' && string[i - 1] == '[' && string[i + 1] == ']'){\n            stack.push(string[i]);\n\
    \        }\n        else if (stack.length == 2 && string[i] == '[' && string[i\
    \ - 1] == '{' && string[i - 2] == '{' && string[i + 1] == ']'){\n            stack.push(string[i]);\n\
    \        }\n        else if (stack.length == 3 && string[i] == '[' && string[i\
    \ - 1] == '{' && string[i - 2] == '{' && string[i - 3] == '[' && string[i + 1]\
    \ == ']'){\n            stack.push(string[i]);\n        }\n        else if (stack.length\
    \ == 4 && string[i] == '[' && string[i - 1] == '{' && string[i - 2] == '{' &&\
    \ string[i - 3] == '[' && string[i - 4] == '{' && string[i + 1] == ']'){\n   \
    \         stack.push(string[i]);\n        }\n        else if (stack.length ==\
    \ 5 && string[i] == '[' && string[i - 1] == '{' && string[i - 2] == '{' && string[i\
    \ - 3] == '[' && string[i - 4] == '{' && string[i - 5] == '[' && string[i + 1]\
    \ == ']'){\n            stack.push(string[i]);\n        }\n        else if (stack.length\
    \ == 6 && string[i] == '[' && string[i - 1] == '{' && string[i - 2] == '{' &&\
    \ string[i - 3] == '[' && string[i - 4] == '{' && string[i - 5] == '[' && string[i\
    \ - 6] == '{' && string[i + 1] == ']'){\n            stack.push(string[i]);\n\
    \        }\n        else if (stack.length == 7 && string[i] == '[' && string[i\
    \ - 1] == '{' && string[i - 2] == '{' && string[i - 3] == '[' && string[i - 4]\
    \ == '{' && string[i - 5] == '[' && string[i - 6] == '{' && string[i - 7] == '['\
    \ && string[i + 1] == ']'){\n            stack.push(string[i]);\n        }\n \
    \       else if (stack.length == 8 && string[i] == '[' && string[i - 1] == '{'\
    \ && string[i - 2] == '{' && string[i - 3] == '[' && string[i - 4] == '{' && string[i\
    \ - 5] == '[' && string[i - 6] == '{' && string[i - 7] == '[' && string[i - 8]\
    \ == '{' && string[i + 1] == ']'){\n            stack.push(string[i]);\n     \
    \   }\n        else if (stack.length == 9 && string[i] == '[' && string[i - 1]\
    \ == '{' && string[i - 2] == '{' && string[i - ", "  if(string.length < 2) return\
    \ false;\n  \n  let open_brackets = 0;\n  let closed_brackets = 0;\n  \n  for(let\
    \ i = 0; i < string.length; i++){\n    if(string[i] == '[') open_brackets++;\n\
    \    else if(string[i] == ']') closed_brackets++;\n    else if(string[i] == '['\
    \ && closed_brackets > open_brackets) return false;\n  }\n  \n  return open_brackets\
    \ == closed_brackets;\n}\n", "    let brackets = string.match(/\\[.*?\\]/g);\n\
    \    let nested = false;\n    for(let i=0; i<brackets.length; i++){\n        let\
    \ bracket = brackets[i];\n        let open_bracket = bracket.match(/\\[/);\n \
    \       let close_bracket = bracket.match(/\\]/);\n        if(open_bracket &&\
    \ close_bracket){\n            nested = true;\n        }\n    }\n    return nested;\n\
    }\n", "    \n    // Create a stack to keep track of brackets.\n    let stack =\
    \ [];\n    \n    // Iterate through the string and push brackets to the stack.\n\
    \    for(let i = 0; i < string.length; i++){\n        \n        // If the current\
    \ character is a bracket, push it to the stack.\n        if(string[i] == '[' ||\
    \ string[i] == '{'){\n            stack.push(string[i]);\n        }\n        \n\
    \        // If the current character is a brace, pop the stack and return True\
    \ if there is \n        // a matching closing bracket on the stack.\n        else\
    \ if(string[i] == '}' || string[i] == ']'){\n            \n            // If the\
    \ stack is empty, return False.\n            if(stack.length == 0){\n        \
    \        return false;\n            }\n            \n            // Otherwise,\
    \ pop the stack and return True.\n            else{\n                let open_bracket\
    \ = stack.pop();\n                if(open_bracket == '[' || open_bracket == '{'){\n\
    \                    return true;\n                }\n            }\n        }\n\
    \    }\n    \n    // If the stack is empty, return False.\n    if(stack.length\
    \ == 0){\n        return false;\n    }\n    \n    // Otherwise, return True.\n\
    \    else{\n        return true;\n    }\n}\n", "    \n    // Your code here\n\
    \    \n}\n", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a string as input which contains only square brackets.\nThe function\
    \ should return True if and only if there is a valid subsequence of brackets \n\
    where at least one bracket in the subsequence is nested.\nis_nested('[[]]') \u279E\
    \ True\nis_nested('[]]]]]]][[[[[]') \u279E False\nis_nested('[][]') \u279E False\n\
    is_nested('[]') \u279E False\nis_nested('[[][]]') \u279E True\nis_nested('[[]][[')\
    \ \u279E True\nThe function should return False if the string contains any other\
    \ brackets.\nis_nested('[[[]]') \u279E False\nis_nested('[][[[]]') \u279E False\n\
    is_nested
  "    let bracketCount = 0;\n    for(let i = 0; i < string.length; i++){\n      \
    \  if(string[i] == '['){\n            bracketCount++;\n        }\n        else\
    \ if(string[i] == ']'){\n            bracketCount--;\n        }\n        if(bracketCount\
    \ < 0){\n            return false;\n        }\n    }\n    return bracketCount\
    \ == 0;\n}\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] === '[' && string[i+1] === '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] === ']' && string[i+1] === ']'){\n     \
    \       stack.pop();\n        }\n        else if(string[i] === '[' && string[i+1]\
    \ === '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ === ']' && string[i+1] === ']'){\n            stack.pop();\n        }\n    \
    \    else if(string[i] === '[' && string[i+1] === '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] === ']' && string[i+1] === ']'){\n     \
    \       stack.pop();\n        }\n        else if(string[i] === '[' && string[i+1]\
    \ === '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ === ']' && string[i+1] === ']'){\n            stack.pop();\n        }\n    \
    \    else if(string[i] === '[' && string[i+1] === '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] === ']' && string[i+1] === ']'){\n     \
    \       stack.pop();\n        }\n        else if(string[i] === '[' && string[i+1]\
    \ === '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ === ']' && string[i+1] === ']'){\n            stack.pop();\n        }\n    \
    \    else if(string[i] === '[' && string[i+1] === '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] === ']' && string[i+1] === ']'){\n     \
    \       stack.pop();\n        }\n        else if(string[i] === '[' && string[i+1]\
    \ === '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ === ']' && string[i+1] === ']'){\n            stack.pop();\n        }\n    \
    \    else if(string[i] === '[' && string[i+1] === '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] === ']' && string[i+1] === ']'){\n     \
    \       stack.pop();\n        }\n        else if(string[i] === '[' && string[i+1]\
    \ === '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ === ']' && string[i+1] === ']'){\n            stack.pop();\n        }\n    \
    \    else if(string[i] === '[' && string[i+1] === '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] === ']' && string[i+1] === ']'){\n     \
    \       stack.pop();\n        }\n        else if(string[i] === '[' && string[i+1]\
    \ === '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ === ", "\tlet brackets_count = string.replace(/[\\[\\]]/g,\"\").length;\n\t\
    let open_brackets_count = string.match(/\\[/g).length;\n\tlet closed_brackets_count\
    \ = string.match(/\\]/g).length;\n\treturn (open_brackets_count === closed_brackets_count\
    \ && brackets_count === open_brackets_count + 1);\n}\n", "    var bracketsCount\
    \ = 0;\n    var openBracketsCount = 0;\n    var closeBracketsCount = 0;\n    for(var\
    \ i=0; i<string.length; i++){\n        if(string[i] == '['){\n            openBracketsCount++;\n\
    \        }\n        else if(string[i] == ']'){\n            closeBracketsCount++;\n\
    \        }\n        else if(string[i] == '{'){\n            bracketsCount++;\n\
    \        }\n        else if(string[i] == '}'){\n            bracketsCount--;\n\
    \        }\n    }\n    return bracketsCount == 0 && openBracketsCount == closeBracketsCount;\n\
    }\n", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n    \
    \    if(stack.length == 0){\n            stack.push(string[i]);\n        }\n \
    \       else if(stack[stack.length - 1] == string[i]){\n            stack.pop();\n\
    \        }\n        else{\n            return false;\n        }\n    }\n    return\
    \ stack.length == 0;\n}\n", "    \n    // Iterate through the string and keep\
    \ track of whether a bracket is open\n    var brackets_open = false;\n    \n \
    \   // Iterate through the string and keep track of whether a bracket is closed\n\
    \    var brackets_closed = false;\n    \n    // Iterate through the string and\
    \ keep track of whether a bracket is nested\n    var brackets_nested = false;\n\
    \    \n    // Iterate through the string and keep track of whether a bracket is\
    \ unnested\n    var brackets_unnested = false;\n    \n    // Iterate through the\
    \ string and keep track of whether a bracket is open\n    var brackets_open =\
    \ false;\n    \n    // Iterate through the string and keep track of whether a\
    \ bracket is closed\n    var brackets_closed = false;\n    \n    // Iterate through\
    \ the string and keep track of whether a bracket is nested\n    var brackets_nested\
    \ = false;\n    \n    // Iterate through the string and keep track of whether\
    \ a bracket is unnested\n    var brackets_unnested = false;\n    \n    // Iterate\
    \ through the string and keep track of whether a bracket is open\n    var brackets_open\
    \ = false;\n    \n    // Iterate through the string and keep track of whether\
    \ a bracket is closed\n    var brackets_closed = false;\n    \n    // Iterate\
    \ through the string and keep track of whether a bracket is nested\n    var brackets_nested\
    \ = false;\n    \n    // Iterate through the string and keep track of whether\
    \ a bracket is unnested\n    var brackets_unnested = false;\n    \n    // Iterate\
    \ through the string and keep track of whether a bracket is open\n    var brackets_open\
    \ = false;\n    \n    // Iterate through the string and keep track of whether\
    \ a bracket is closed\n    var brackets_closed = false;\n    \n    // Iterate\
    \ through the string and keep track of whether a bracket is nested\n    var brackets_nested\
    \ = false;\n    \n    // Iterate through the string and keep track of whether\
    \ a bracket is unnested\n    var brackets_unnested = false;\n    \n    // Iterate\
    \ through the string and keep track of whether a bracket is open\n    var brackets_open\
    \ = false;\n    \n    // Iterate through the string and keep track of whether\
    \ a bracket is closed\n    var brackets_closed = false;\n    \n    // Iterate\
    \ through the string and keep track of whether a bracket is nested\n    var brackets_nested\
    \ = false;\n    \n    // Iterate through the string and keep track of whether\
    \ a bracket is unnested\n    var brackets_unnested = false;\n    \n    // Iterate\
    \ through the string and keep track of whether a bracket is open\n    var brackets_open\
    \ = false;\n    \n    // Iterate through the string and keep track of whether\
    \ a bracket is closed\n    var brackets_closed = false;\n    \n    // Iterate\
    \ through the string and keep track of whether a bracket is nested\n    var bracket",
  "    let brackets = string.match(/\\[.*?\\]/g);\n    let nesting = false;\n    for(let\
    \ i = 0; i < brackets.length; i++){\n        let bracket = brackets[i];\n    \
    \    let brackets = bracket.match(/\\[.*?\\]/g);\n        if(brackets.length ==\
    \ 0){\n            nesting = false;\n        }\n        else{\n            nesting\
    \ = true;\n        }\n    }\n    return nesting;\n}\n", "\tlet stack = [];\n\t\
    let open_brackets = 0;\n\tlet closed_brackets = 0;\n\tfor(let i = 0; i < string.length;\
    \ i++){\n\t\tif(string[i] == '['){\n\t\t\topen_brackets++;\n\t\t\tstack.push(string[i]);\n\
    \t\t}\n\t\telse if(string[i] == ']'){\n\t\t\tclosed_brackets++;\n\t\t\topen_brackets--;\n\
    \t\t}\n\t\telse if(open_brackets == 0 && closed_brackets == 0){\n\t\t\t//We found\
    \ a bracket\n\t\t\tif(stack.length == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    \telse{\n\t\t\t\t//We found a nested bracket\n\t\t\t\tlet current_bracket = stack.pop();\n\
    \t\t\t\tif(current_bracket == '['){\n\t\t\t\t\topen_brackets++;\n\t\t\t\t}\n\t\
    \t\t\telse if(current_bracket == ']'){\n\t\t\t\t\tclosed_brackets++;\n\t\t\t\t\
    }\n\t\t\t\telse if(current_bracket == '{'){\n\t\t\t\t\topen_brackets++;\n\t\t\t\
    \t}\n\t\t\t\telse if(current_bracket == '}'){\n\t\t\t\t\tclosed_brackets++;\n\t\
    \t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn open_brackets == 0 && closed_brackets ==\
    \ 0;\n}\n", "    \n    // Create a stack to keep track of brackets\n    var stack\
    \ = [];\n    \n    // Iterate through the string and add brackets to the stack\n\
    \    for(var i = 0; i < string.length; i++){\n        if(string[i] == '['){\n\
    \            stack.push('[');\n        }\n        else if(string[i] == ']'){\n\
    \            \n            // Pop the last bracket from the stack\n          \
    \  var last = stack.pop();\n            \n            // If the stack is empty\
    \ or if the last bracket is not an opening bracket\n            if(stack.length\
    \ == 0 || last != ']'){\n                return false;\n            }\n      \
    \  }\n    }\n    \n    // If the stack is empty then the string contains no nested\
    \ brackets\n    return stack.length == 0;\n}\n", "    let open_brackets = 0;\n\
    \    let close_brackets = 0;\n    for(let i = 0; i < string.length; i++){\n  \
    \      if(string[i] == '[') open_brackets++;\n        if(string[i] == ']') close_brackets++;\n\
    \        if(open_brackets > close_brackets) return false;\n    }\n    return open_brackets\
    \ > close_brackets;\n}\n", "    let bracketsCount = 0;\n    let openingBracketsCount\
    \ = 0;\n    let closingBracketsCount = 0;\n    for(let i = 0; i < string.length;\
    \ i++){\n        if(string[i] == '['){\n            openingBracketsCount++;\n\
    \        }\n        else if(string[i] == ']'){\n            closingBracketsCount++;\n\
    \        }\n        else if(string[i] == '{'){\n            openingBracketsCount++;\n\
    \        }\n        else if(string[i] == '}'){\n            closingBracketsCount++;\n\
    \        }\n        else if(string[i] == '('){\n            openingBracketsCount++;\n\
    \        }\n        else if(string[i] == ')'){\n            closingBracketsCount++;\n\
    \        }\n        else if(string[i] == '[' && openingBracketsCount > closingBracketsCount){\n\
    \            bracketsCount++;\n        }\n        else if(string[i] == ']' &&\
    \ openingBracketsCount > closingBracketsCount){\n            bracketsCount++;\n\
    \        }\n        else if(string[i] == '{' && openingBracketsCount > closingBracketsCount){\n\
    \            bracketsCount++;\n        }\n        else if(string[i] == '}' &&\
    \ openingBracketsCount > closingBracketsCount){\n            bracketsCount++;\n\
    \        }\n        else if(string[i] == '(' && openingBracketsCount > closingBracketsCount){\n\
    \            bracketsCount++;\n        }\n        else if(string[i] == ')' &&\
    \ openingBracketsCount > closingBracketsCount){\n            bracketsCount++;\n\
    \        }\n    }\n    return bracketsCount > 0;\n}\n", "    let stack = [];\n\
    \    for(let i=0; i<string.length; i++){\n        if(stack.length == 0){\n   \
    \         stack.push(string[i]);\n        }\n        else if(stack[stack.length-1]\
    \ == '[' && string[i] == '['){\n            stack.push('[');\n        }\n    \
    \    else if(stack[stack.length-1] == '[' && string[i] == ']'){\n            stack.pop();\n\
    \        }\n        else if(stack[stack.length-1] == '[' && string[i] == ']' &&\
    \ stack[stack.length-2] == '['){\n            stack.pop();\n        }\n      \
    \  else if(stack[stack.length-1] == '[' && string[i] == ']' && stack[stack.length-2]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(stack[stack.length-1]\
    \ == '[' && string[i] == ']' && stack[stack.length-2] == '['){\n            stack.push('[');\n\
    \        }\n        else if(stack[stack.length-1] == '[' && string[i] == ']' &&\
    \ stack[stack.length-2] == '['){\n            stack.push('[');\n        }\n  \
    \      else if(stack[stack.length-1] == '[' && string[i] == ']' && stack[stack.length-2]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(stack[stack.length-1]\
    \ == '[' && string[i] == ']' && stack[stack.length-2] == '['){\n            stack.push('[');\n\
    \        }\n        else if(stack[stack.length-1] == '[' && string[i] == ']' &&\
    \ stack[stack.length-2] == '['){\n            stack.push('[');\n        }\n  \
    \      else if(stack[stack.length-1] == '[' && string[i] == ']' && stack[stack.length-2]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(stack[stack.length-1]\
    \ == '[' && string[i] == ']' && stack[stack.length-2] == '['){\n            stack.push('[');\n\
    \        }\n        else if(stack[stack.length-1] == '[' && string[i] == ']' &&\
    \ stack[stack.length-2] == '['){\n            stack.push('[');\n        }\n  \
    \      else if(stack[stack.length-1] == '[' && string[i] == ']' && stack[stack.length-2]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(stack[stack.length-1]\
    \ == '[' && string[i] == ']' && stack[stack.length-2] == '['){\n            stack.push('[');\n\
    \        }\n        else if(stack[stack.length-1] == '[' && string[i] == ']' &&\
    \ stack[stack.length-2] == '['){\n            stack.push('[');\n        }\n  \
    \      else if(stack[stack.length-1] == '[' && string[i] == ']' && stack[stack.length-2]\
    \ == '[", "  if(string.length < 2)\n    return false;\n  \n  if(string[0] == '['\
    \ && string[string.length-1] == ']')\n    return true;\n  \n  var openBrackets\
    \ = 0;\n  var closeBrackets = 0;\n  var openBracketsStack = [];\n  var closeBracketsStack\
    \ = [];\n  \n  for(var i = 1; i < string.length; i++){\n    if(string[i] == '[')\n\
    \      openBracketsStack.push(openBrackets);\n    else if(string[i] == ']')\n\
    \      closeBracketsStack.push(closeBrackets);\n    \n    if(string[i] == '[')\n\
    \      openBrackets++;\n    else if(string[i] == ']')\n      closeBrackets++;\n\
    \    \n    if(openBracketsStack.length == closeBracketsStack.length){\n      if(openBracketsStack[openBracketsStack.length-1]\
    \ == closeBracketsStack[closeBracketsStack.length-1])\n        return true;\n\
    \    }\n  }\n  \n  return false;\n}\n", "    let stack = [];\n    for(let i =\
    \ 0; i < string.length; i++){\n        if(string[i] == '[' && stack.length ==\
    \ 0){\n            stack.push(i);\n        }\n        else if(string[i] == ']'\
    \ && stack.length > 0){\n            if(stack[stack.length-1] == i){\n       \
    \         stack.pop();\n            }\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n", "    let brackets = string.match(/\\[.*?\\]/g);\n    let nested\
    \ = false;\n    for(let i = 0; i < brackets.length; i++){\n        let bracket\
    \ = brackets[i];\n        let brackets = bracket.match(/\\[.*?\\]/g);\n      \
    \  if(brackets.length == 0){\n            nested = false;\n        }\n       \
    \ else{\n            nested = true;\n        }\n    }\n    return nested;\n}\n",
  "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n        if(stack.length\
    \ == 0){\n            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == '['){\n            stack.push(string[i]);\n    \
    \    }\n        else if(stack[stack.length - 1] == '[' && string[i] == ']'){\n\
    \            stack.pop();\n        }\n        else if(stack[stack.length - 1]\
    \ == '{' && string[i] == '{'){\n            stack.push(string[i]);\n        }\n\
    \        else if(stack[stack.length - 1] == '{' && string[i] == ')'){\n      \
    \      stack.pop();\n        }\n        else if(stack[stack.length - 1] == '['\
    \ && string[i] == '['){\n            stack.push(string[i]);\n        }\n     \
    \   else if(stack[stack.length - 1] == '[' && string[i] == ']'){\n           \
    \ stack.pop();\n        }\n        else if(stack[stack.length - 1] == '{' && string[i]\
    \ == '{'){\n            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '{' && string[i] == ')'){\n            stack.pop();\n        }\n   \
    \     else if(stack[stack.length - 1] == '[' && string[i] == '['){\n         \
    \   stack.push(string[i]);\n        }\n        else if(stack[stack.length - 1]\
    \ == '[' && string[i] == ']'){\n            stack.pop();\n        }\n        else\
    \ if(stack[stack.length - 1] == '{' && string[i] == '['){\n            stack.push(string[i]);\n\
    \        }\n        else if(stack[stack.length - 1] == '{' && string[i] == ']'){\n\
    \            stack.pop();\n        }\n        else if(stack[stack.length - 1]\
    \ == '[' && string[i] == '{'){\n            stack.push(string[i]);\n        }\n\
    \        else if(stack[stack.length - 1] == '[' && string[i] == '}'){\n      \
    \      stack.pop();\n        }\n        else if(stack[stack.length - 1] == '{'\
    \ && string[i] == '['){\n            stack.push(string[i]);\n        }\n     \
    \   else if(stack[stack.length - 1] == '{' && string[i] == ']'){\n           \
    \ stack.pop();\n        }\n        else if(stack[stack.length - 1] == '[' && string[i]\
    \ == '{'){\n            stack.push(string[i]);\n        }\n        else if(stack[stack.length\
    \ - 1] == '[' && string[i] == '}'){\n            stack.pop();\n        }\n   \
    \     else if(stack[stack.length - 1] == '{' && string[i] == '['){\n         \
    \   stack.push(string[i]);\n        }\n        else if(stack[stack.length - 1]\
    \ == '{' && string[i] == ']'){\n            stack.pop();\n        }\n        else\
    \ if(stack[", "    let stack = [];\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] == '[' && string[i+1] == '[' && stack.length == 0){\n  \
    \          stack.push('[');\n        }\n        else if(string[i] == '[' && string[i+1]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == ']' && string[i+1] == ']' && stack.length == 1){\n            stack.push(']');\n\
    \        }\n        else if(string[i] == ']' && string[i+1] == ']'){\n       \
    \     stack.push(']');\n        }\n        else if(string[i] == '[' && string[i+1]\
    \ == ']' && stack.length == 1){\n            stack.push(']');\n        }\n   \
    \     else if(string[i] == '[' && string[i+1] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && string[i+1] == '['){\n       \
    \     stack.push('[');\n        }\n        else if(string[i] == ']' && string[i+1]\
    \ == ']'){\n            stack.push(']');\n        }\n        else if(string[i]\
    \ == '[' && string[i+1] == ']'){\n            stack.push('[');\n        }\n  \
    \      else if(string[i] == '[' && string[i+1] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && string[i+1] == '['){\n       \
    \     stack.push('[');\n        }\n        else if(string[i] == ']' && string[i+1]\
    \ == ']'){\n            stack.push(']');\n        }\n        else if(string[i]\
    \ == '[' && string[i+1] == '['){\n            stack.push('[');\n        }\n  \
    \      else if(string[i] == '[' && string[i+1] == ']'){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == '[' && string[i+1] == '['){\n       \
    \     stack.push('[');\n        }\n        else if(string[i] == ']' && string[i+1]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == ']' && string[i+1] == ']'){\n            stack.push(']');\n        }\n  \
    \      else if(string[i] == '[' && string[i+1] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && string[i+1] == ']'){\n       \
    \     stack.push(']');\n        }\n        else if(string[i] == '[' && string[i+1]\
    \ == '['){\n            stack.push('[');\n        }\n        else if(string[i]\
    \ == ']' && string[i+1] == ']'){\n            stack.push(']');\n        }\n  \
    \      else if(string[i] == '[' && string[i+1] == '['){\n            stack.push('[');\n\
    \        }\n        else if(string[i] == ']' && string[i+1] == ']'){\n       \
    \     ", "    let brackets = string.split(']');\n    let brackets_count = brackets.length;\n\
    \    let brackets_open = brackets.filter(x => x[0] == '[');\n    let brackets_close\
    \ = brackets.filter(x => x[0] == ']');\n    let brackets_open_count = brackets_open.length;\n\
    \    let brackets_close_count = brackets_close.length;\n    let open_brackets_count\
    \ = brackets_open_count + brackets_close_count;\n    let close_brackets_count\
    \ = brackets_open_count - brackets_close_count;\n    let open_brackets_open =\
    \ brackets_open.filter(x => x[0] == '[');\n    let open_brackets_close = brackets_open.filter(x\
    \ => x[0] == ']');\n    let close_brackets_open = brackets_close.filter(x => x[0]\
    \ == '[');\n    let close_brackets_close = brackets_close.filter(x => x[0] ==\
    \ ']');\n    let open_brackets_open_count = open_brackets_open.length;\n    let\
    \ open_brackets_close_count = open_brackets_close.length;\n    let close_brackets_open_count\
    \ = close_brackets_open.length;\n    let close_brackets_close_count = close_brackets_close.length;\n\
    \    let open_brackets_close_open = open_brackets_close.filter(x => x[0] == '[');\n\
    \    let open_brackets_close_close = open_brackets_close.filter(x => x[0] == ']');\n\
    \    let close_brackets_close_open = close_brackets_close.filter(x => x[0] ==\
    \ '[');\n    let close_brackets_close_close = close_brackets_close.filter(x =>\
    \ x[0] == ']');\n    let open_brackets_close_open_count = open_brackets_close_open.length;\n\
    \    let open_brackets_close_close_count = open_brackets_close_close.length;\n\
    \    let close_brackets_close_open_count = close_brackets_close_open.length;\n\
    \    let close_brackets_close_close_count = close_brackets_close_close.length;\n\
    \    let open_brackets_close_close_open = open_brackets_close_close.filter(x =>\
    \ x[0] == '[');\n    let open_brackets_close_close_close = open_brackets_close_close.filter(x\
    \ => x[0] == ']');\n    let close_brackets_close_close_open = close_brackets_close_close.filter(x\
    \ => x[0] == '[');\n    let close_brackets_close_close_close = close_brackets_close_close.filter(x ",
  "    let stack = [];\n    for (let i = 0; i < string.length; i++){\n        if (stack.length\
    \ == 0){\n            if (string[i] == '[' || string[i] == '{' || string[i] ==\
    \ '('){\n                stack.push(string[i]);\n            }\n        }\n  \
    \      else if (stack[stack.length - 1] == '[' && string[i] == '[' || stack[stack.length\
    \ - 1] == '{' && string[i] == '{' || stack[stack.length - 1] == '(' && string[i]\
    \ == '('){\n            stack.push(string[i]);\n        }\n        else if (stack[stack.length\
    \ - 1] == string[i] && string[i] != '[' && string[i] != '{' && string[i] != '('){\n\
    \            stack.pop();\n        }\n        else if (stack[stack.length - 1]\
    \ != string[i] && string[i] != '[' && string[i] != '{' && string[i] != '('){\n\
    \            return false;\n        }\n    }\n    return stack.length == 0;\n\
    }\n", "    \n    // Your code here\n    \n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
