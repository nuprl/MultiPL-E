name: HumanEval_6_parse_nested_parens
language: js
results:
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    for(var i=0; i<paren_string.length; i++){\n\
    \        if(paren_string[i] == '('){\n            paren_count++;\n        }else\
    \ if(paren_string[i] == ')'){\n            paren_count--;\n        }\n       \
    \ if(paren_count == 0){\n            nested_parens.push(paren_count);\n      \
    \  }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0, 0, 0, 0 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpo7njmbwu.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpo7njmbwu.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var level = 0;\n    var paren_level = 0;\n    var paren_level_count\
    \ = 0;\n    var paren_level_count_max = 0;\n    var paren_level_count_max_index\
    \ = 0;\n    var paren_level_count_max_index2 = 0;\n    var paren_level_count_max_index3\
    \ = 0;\n    var paren_level_count_max_index4 = 0;\n    var paren_level_count_max_index5\
    \ = 0;\n    var paren_level_count_max_index6 = 0;\n    var paren_level_count_max_index7\
    \ = 0;\n    var paren_level_count_max_index8 = 0;\n    var paren_level_count_max_index9\
    \ = 0;\n    var paren_level_count_max_index10 = 0;\n    var paren_level_count_max_index11\
    \ = 0;\n    var paren_level_count_max_index12 = 0;\n    var paren_level_count_max_index13\
    \ = 0;\n    var paren_level_count_max_index14 = 0;\n    var paren_level_count_max_index15\
    \ = 0;\n    var paren_level_count_max_index16 = 0;\n    var paren_level_count_max_index17\
    \ = 0;\n    var paren_level_count_max_index18 = 0;\n    var paren_level_count_max_index19\
    \ = 0;\n    var paren_level_count_max_index20 = 0;\n    var paren_level_count_max_index21\
    \ = 0;\n    var paren_level_count_max_index22 = 0;\n    var paren_level_count_max_index23\
    \ = 0;\n    var paren_level_count_max_index24 = 0;\n    var paren_level_count_max_index25\
    \ = 0;\n    var paren_level_count_max_index26 = 0;\n    var paren_level_count_max_index27\
    \ = 0;\n    var paren_level_count_max_index28 = 0;\n    var paren_level_count_max_index29\
    \ = 0;\n    var paren_level_count_max_index30 = 0;\n    var paren_level_count_max_index31\
    \ = 0;\n    var paren_level_count_max_index32 = 0;\n    var paren_level_count_max_index33\
    \ = 0;\n    var paren_level_count_max_index34 = 0;\n    var paren_level_count_max_index35\
    \ = 0;\n    var paren_level_count_max_index36 = 0;\n    var paren_level_count_max_index37\
    \ = 0;\n    var paren_level_count_max_index38 = 0;\n    var paren_level_count_max_index39\
    \ = 0;\n    var paren_level_count_max_index40 = 0;\n    var paren_level_count_max_index41\
    \ = 0;\n    var paren_level_count_max_index42 = 0;\n    var paren_level_count_max_index43\
    \ = 0;\n    var paren_level_count_max_index44 = 0;\n    var paren_level_count_max_index45\
    \ = 0;\n    var paren_level_count_max_index46 = 0;\n    var paren_level_count_max_index47\
    \ = 0;\n    var paren_level_count_max_index48 = 0;\n    var paren_level_count_max_index\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwuw7zil4.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_nesting\
    \ = 0;\n    for(var i=0; i<paren_string.length; i++){\n        var c = paren_string[i];\n\
    \        if(c == '('){\n            paren_stack.push(paren_level);\n         \
    \   paren_level++;\n            paren_nesting++;\n        }\n        else if(c\
    \ == ')'){\n            paren_level--;\n            paren_nesting--;\n       \
    \ }\n        if(paren_nesting == 0){\n            nested_parens.push(paren_stack);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 0, 1, 1, 0, 1, 2, 0, 0, 1, 2, 1, 1 ],\n\
    \  [ 0, 1, 1, 0, 1, 2, 0, 0, 1, 2, 1, 1 ],\n  [ 0, 1, 1, 0, 1, 2, 0, 0, 1, 2,\
    \ 1, 1 ],\n  [ 0, 1, 1, 0, 1, 2, 0, 0, 1, 2, 1, 1 ],\n  [ 0, 1, 1, 0, 1, 2, 0,\
    \ 0, 1, 2, 1, 1 ],\n  [ 0, 1, 1, 0, 1, 2, 0, 0, 1, 2, 1, 1 ],\n  [ 0, 1, 1, 0,\
    \ 1, 2, 0, 0, 1, 2, 1, 1 ] ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmp31dyna1x.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp31dyna1x.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    [\n      0, 1, 1, 0, 1,\n      2,\
    \ 0, 0, 1, 2,\n      1, 1\n    ],\n    [\n      0, 1, 1, 0, 1,\n      2, 0, 0,\
    \ 1, 2,\n      1, 1\n    ],\n    [\n      0, 1, 1, 0, 1,\n      2, 0, 0, 1, 2,\n\
    \      1, 1\n    ],\n    [\n      0, 1, 1, 0, 1,\n      2, 0, 0, 1, 2,\n     \
    \ 1, 1\n    ],\n    [\n      0, 1, 1, 0, 1,\n      2, 0, 0, 1, 2,\n      1, 1\n\
    \    ],\n    [\n      0, 1, 1, 0, 1,\n      2, 0, 0, 1, 2,\n      1, 1\n    ],\n\
    \    [\n      0, 1, 1, 0, 1,\n      2, 0, 0, 1, 2,\n      1, 1\n    ]\n  ],\n\
    \  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    var c = paren_string[i];\n    if(c == '('){\n      paren_stack.push(paren_level);\n\
    \      paren_level++;\n    }\n    else if(c == ')'){\n      paren_level = paren_stack.pop();\n\
    \    }\n    else if(c == ' ' && paren_stack.length){\n      paren_level = paren_stack[paren_stack.length-1];\n\
    \    }\n    nested_parens.push(paren_level);\n  }\n  return nested_parens;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0,\
    \ 0, 1, 0, 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmpx4cdzo8e.js:32:10)\n    at Object.<anonymous> (/tmp/tmpx4cdzo8e.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2, 1, 0, 0, 1,\n    2, 3,\
    \ 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2, 1,\n    2, 1, 0\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count2\
    \ = [];\n    var paren_level_stack_count3 = [];\n    var paren_level_stack_count4\
    \ = [];\n    var paren_level_stack_count5 = [];\n    var paren_level_stack_count6\
    \ = [];\n    var paren_level_stack_count7 = [];\n    var paren_level_stack_count8\
    \ = [];\n    var paren_level_stack_count9 = [];\n    var paren_level_stack_count10\
    \ = [];\n    var paren_level_stack_count11 = [];\n    var paren_level_stack_count12\
    \ = [];\n    var paren_level_stack_count13 = [];\n    var paren_level_stack_count14\
    \ = [];\n    var paren_level_stack_count15 = [];\n    var paren_level_stack_count16\
    \ = [];\n    var paren_level_stack_count17 = [];\n    var paren_level_stack_count18\
    \ = [];\n    var paren_level_stack_count19 = [];\n    var paren_level_stack_count20\
    \ = [];\n    var paren_level_stack_count21 = [];\n    var paren_level_stack_count22\
    \ = [];\n    var paren_level_stack_count23 = [];\n    var paren_level_stack_count24\
    \ = [];\n    var paren_level_stack_count25 = [];\n    var paren_level_stack_count26\
    \ = [];\n    var paren_level_stack_count27 = [];\n    var paren_level_stack_count28\
    \ = [];\n    var paren_level_stack_count29 = [];\n    var paren_level_stack_count30\
    \ = [];\n    var paren_level_stack_count31 = [];\n    var paren_level_stack_count32\
    \ = [];\n    var paren_level_stack_count33 = [];\n    var paren_level_stack_count34\
    \ = [];\n    var paren_level_stack_count35 = [];\n    var paren_level_stack_count36\
    \ = [];\n    var paren_level_stack_count37 = [];\n    var paren_level_stack_count38\
    \ = [];\n    var paren_level_stack_count39 = [];\n    var paren_level_stack_count40\
    \ = [];\n    var paren_level_stack_count41 = [];\n    var paren_level_stack_count42\
    \ = [];\n    var paren_level_stack_count43 = [];\n    var paren_level_stack_count44\
    \ = [];\n    var paren_level_stack_count45 = [];\n    var paren_level_stack_count46\
    \ = [];\n    var paren_level_stack_count47 = [];\n    var paren_level_stack_count48\
    \ = [];\n    var paren_level_stack_count49 = [];\n    var paren_level_stack_count50\
    \ = [];\n    var paren_level_stack_count51 = [];\n    var paren_level_stack_count52\
    \ = [];\n    var paren_level_stack_count53 = [];\n    var paren_level_\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpp04mvnnl.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_levels\
    \ = [];\n  var paren_level = 0;\n  var paren_level_count = 0;\n  var paren_level_stack\
    \ = [];\n  var paren_level_stack_pointer = 0;\n  var paren_level_stack_pointer_max\
    \ = 0;\n  var paren_level_stack_pointer_max_index = 0;\n  var paren_level_stack_pointer_max_index2\
    \ = 0;\n  var paren_level_stack_pointer_max_index3 = 0;\n  var paren_level_stack_pointer_max_index4\
    \ = 0;\n  var paren_level_stack_pointer_max_index5 = 0;\n  var paren_level_stack_pointer_max_index6\
    \ = 0;\n  var paren_level_stack_pointer_max_index7 = 0;\n  var paren_level_stack_pointer_max_index8\
    \ = 0;\n  var paren_level_stack_pointer_max_index9 = 0;\n  var paren_level_stack_pointer_max_index10\
    \ = 0;\n  var paren_level_stack_pointer_max_index11 = 0;\n  var paren_level_stack_pointer_max_index12\
    \ = 0;\n  var paren_level_stack_pointer_max_index13 = 0;\n  var paren_level_stack_pointer_max_index14\
    \ = 0;\n  var paren_level_stack_pointer_max_index15 = 0;\n  var paren_level_stack_pointer_max_index16\
    \ = 0;\n  var paren_level_stack_pointer_max_index17 = 0;\n  var paren_level_stack_pointer_max_index18\
    \ = 0;\n  var paren_level_stack_pointer_max_index19 = 0;\n  var paren_level_stack_pointer_max_index20\
    \ = 0;\n  var paren_level_stack_pointer_max_index21 = 0;\n  var paren_level_stack_pointer_max_index22\
    \ = 0;\n  var paren_level_stack_pointer_max_index23 = 0;\n  var paren_level_stack_pointer_max_index24\
    \ = 0;\n  var paren_level_stack_pointer_max_index25 = 0;\n  var paren_level_stack_pointer_max_index26\
    \ = 0;\n  var paren_level_stack_pointer_max_index27 = 0;\n  var paren_level_stack_pointer_max_index28\
    \ = 0;\n  var paren_level_stack_pointer_max_index29 = 0;\n  var paren_level_stack_pointer_max_index30\
    \ = 0;\n  var paren_level_stack_pointer_max_index31 = 0;\n  var paren_level_stack_pointer_max_index32\
    \ = 0;\n  var paren_level_stack_pointer_max_index33 = 0;\n  var paren_level_stack_pointer_max_index34\
    \ = 0;\n  var paren_level_stack_pointer_max_index35 = 0;\n  var paren_level_stack_pointer_max_index36\
    \ = 0;\n  var paren_level_stack_pointer_max_index37 = 0;\n  var paren_level_stack_pointer_max_index38\
    \ = 0;\n  var paren_level_stack_pointer_max_index39 = 0;\n  var paren_level_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4hexqdvm.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    for(var i=0; i<paren_string.length; i++){\n\
    \        var c = paren_string[i];\n        if(c == '('){\n            paren_stack.push(level);\n\
    \            level++;\n        }\n        else if(c == ')'){\n            level\
    \ = paren_stack.pop();\n        }\n    }\n    return paren_stack;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmpsf7i8c5u.js:27:10)\n    at Object.<anonymous> (/tmp/tmpsf7i8c5u.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level = 0;\n\
    \tvar paren_stack = [];\n\tvar paren_levels = [];\n\tvar paren_levels_index =\
    \ [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tif(paren_string[i] ==\
    \ '('){\n\t\t\tparen_stack.push(paren_string[i]);\n\t\t\tparen_levels.push(level);\n\
    \t\t\tparen_levels_index.push(paren_string.length);\n\t\t}\n\t\telse if(paren_string[i]\
    \ == ')'){\n\t\t\tparen_levels[paren_levels_index[paren_stack.length-1]] = paren_levels[paren_levels_index[paren_stack.length-1]-1]\
    \ + 1;\n\t\t\tif(paren_levels[paren_levels_index[paren_stack.length-1]] == level){\n\
    \t\t\t\tparen_stack.pop();\n\t\t\t\tparen_levels.pop();\n\t\t\t\tparen_levels_index.pop();\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn paren_levels;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , NaN, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\n\nshould equal\n\n[ 2,\
    \ 3, 1, 3 ]\n    at test (/tmp/tmpbrzko1b9.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbrzko1b9.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, <25\
    \ empty items>, NaN, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_levels =\
    \ [];\n  var paren_level_counter = 0;\n  var paren_level_counters = [];\n  var\
    \ paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n \
    \ var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6r04xkxq.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var nested_paren_level = 0;\n  var paren_level = 0;\n  var paren_stack\
    \ = [];\n  var paren_stack_str = '';\n  var paren_stack_pos = 0;\n  var paren_stack_len\
    \ = paren_string.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_string.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len = paren_string.length;\n\
    \  var paren_stack_top = -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len\
    \ = paren_string.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_string.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len = paren_string.length;\n\
    \  var paren_stack_top = -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len\
    \ = paren_string.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_string.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len = paren_string.length;\n\
    \  var paren_stack_top = -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len\
    \ = paren_string.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_string.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len = paren_string.length;\n\
    \  var paren_stack_top = -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len\
    \ = paren_string.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_string.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len = paren_string.length;\n\
    \  var paren_stack_top = -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len\
    \ = paren_string.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_string.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len = paren_string.length;\n\
    \  var paren_stack_top = -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len\
    \ = paren_string.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_string.length;\n  var paren_stack_top =\
    \ -1;\n  var \nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpb_gxmzze.js:73\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_level = [];\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char === '('){\n    \
    \        paren_stack.push(level);\n            paren_level.push(0);\n        }\n\
    \        else if(char === ')'){\n            level = paren_stack.pop();\n    \
    \        paren_level[level] = paren_level[level] - 1;\n        }\n    }\n    return\
    \ paren_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]\n\
    \nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmp043vqgmh.js:29:10)\n  \
    \  at Object.<anonymous> (/tmp/tmp043vqgmh.js:34:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    -12,\
    \ 0, 0, 0, 0,\n      0, 0, 0, 0, 0,\n      0, 0\n  ],\n  expected: [ 2, 3, 1,\
    \ 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_char;\n    var paren_level_string;\n    var paren_level_char;\n\
    \    var paren_level_char_count;\n    var paren_level_char_count_string;\n   \
    \ var paren_level_char_string;\n    var paren_level_char_count_string;\n    var\
    \ paren_level_char_count_string;\n    var paren_level_char_count_string;\n   \
    \ var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_string;\n    var paren_level_char_count_string;\n\
    \    var paren_level_char_count_\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpk4hjfjz7.js:83\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_nesting_levels = [];\n    var paren_levels_string = '';\n\
    \    var paren_nesting_levels_string = '';\n    var paren_levels_string_index\
    \ = 0;\n    var paren_nesting_levels_string_index = 0;\n    var paren_levels_string_indexes\
    \ = [];\n    var paren_nesting_levels_string_indexes = [];\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_nesting_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\n    var paren_levels_string_indexes_index\
    \ = 0;\n    var paren_levels_string_indexes_index = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4ks151xq.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_index\
    \ = [];\n    var paren_levels_index_len = 0;\n    var paren_levels_index_max =\
    \ 0;\n    var paren_levels_index_max_index = 0;\n    var paren_levels_index_max_index2\
    \ = 0;\n    var paren_levels_index_max_index3 = 0;\n    var paren_levels_index_max_index4\
    \ = 0;\n    var paren_levels_index_max_index5 = 0;\n    var paren_levels_index_max_index6\
    \ = 0;\n    var paren_levels_index_max_index7 = 0;\n    var paren_levels_index_max_index8\
    \ = 0;\n    var paren_levels_index_max_index9 = 0;\n    var paren_levels_index_max_index10\
    \ = 0;\n    var paren_levels_index_max_index11 = 0;\n    var paren_levels_index_max_index12\
    \ = 0;\n    var paren_levels_index_max_index13 = 0;\n    var paren_levels_index_max_index14\
    \ = 0;\n    var paren_levels_index_max_index15 = 0;\n    var paren_levels_index_max_index16\
    \ = 0;\n    var paren_levels_index_max_index17 = 0;\n    var paren_levels_index_max_index18\
    \ = 0;\n    var paren_levels_index_max_index19 = 0;\n    var paren_levels_index_max_index20\
    \ = 0;\n    var paren_levels_index_max_index21 = 0;\n    var paren_levels_index_max_index22\
    \ = 0;\n    var paren_levels_index_max_index23 = 0;\n    var paren_levels_index_max_index24\
    \ = 0;\n    var paren_levels_index_max_index25 = 0;\n    var paren_levels_index_max_index26\
    \ = 0;\n    var paren_levels_index_max_index27 = 0;\n    var paren_levels_index_max_index28\
    \ = 0;\n    var paren_levels_index_max_index29 = 0;\n    var paren_levels_index_max_index30\
    \ = 0;\n    var paren_levels_index_max_index31 = 0;\n    var paren_levels_index_max_index32\
    \ = 0;\n    var paren_levels_index_max_index33 = 0;\n    var paren_levels_index_max_index34\
    \ = 0;\n    var paren_levels_index_max_index35 = 0;\n    var paren_levels_index_max_index36\
    \ = 0;\n    var paren_levels_index_max_index37 = 0;\n    var paren_levels_index_max_index38\
    \ = 0;\n    var paren_levels_index_max_index39 = 0;\n    var paren_levels_index_max_index40\
    \ = 0;\n    var paren_levels_index_max_index41 = 0;\n    var paren_levels_index_max_index42\
    \ = 0;\n    var paren_levels_index_max_index43 = 0;\n    var \nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprdomr8t_.js:57\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_levels\
    \ = [];\n  var paren_level = 0;\n  var paren_level_count = 0;\n  var paren_level_stack\
    \ = [];\n  var paren_level_stack_count = 0;\n  var paren_level_stack_pointer =\
    \ 0;\n  var paren_level_stack_pointer_max = 0;\n  var paren_level_stack_pointer_min\
    \ = 0;\n  var paren_level_stack_pointer_max_count = 0;\n  var paren_level_stack_pointer_min_count\
    \ = 0;\n  var paren_level_stack_pointer_max_count_minus_one = 0;\n  var paren_level_stack_pointer_min_count_minus_one\
    \ = 0;\n  var paren_level_stack_pointer_max_count_minus_one_minus_one = 0;\n \
    \ var paren_level_stack_pointer_min_count_minus_one_minus_one = 0;\n  var paren_level_stack_pointer_max_count_minus_one_minus_one_minus_one\
    \ = 0;\n  var paren_level_stack_pointer_min_count_minus_one_minus_one_minus_one\
    \ = 0;\n  var paren_level_stack_pointer_max_count_minus_one_minus_one_minus_one_minus_one\
    \ = 0;\n  var paren_level_stack_pointer_max_count_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = 0;\n  var paren_level_stack_pointer_max_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = 0;\n  var paren_level_stack_pointer_max_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = 0;\n  var paren_level_stack_pointer_max_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = 0;\n  var paren_level_stack_pointer_max_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = 0;\n  var paren_level_stack_pointer_max_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = 0;\n  var paren_level_stack_pointer_max_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one\
    \ = 0;\n  var paren_level_stack_pointer_max_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprrv18jre.js:42\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_string\
    \ = '';\n    var paren_levels_string_length = 0;\n    var paren_levels_string_char;\n\
    \    var paren_levels_string_char_length;\n    var paren_levels_string_char_char_length;\n\
    \    var paren_levels_string_char_char_char_length;\n    var paren_levels_string_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_length;\n    var paren_levels_string_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_length;\n    var\
    \ paren_levels_string_char_char_char_char_char_char_char_char_length;\n    var\
    \ paren_levels_string_char_char_char_char_char_char_char_char_char_length;\n \
    \   var paren_levels_string_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_char_length;\n\
    \    var paren_levels_string_char_char_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpydh01327.js:47\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_count\
    \ = 0;\n\tvar nested_paren_level = 0;\n\tvar paren_level = 0;\n\tvar paren_stack\
    \ = [];\n\tvar paren_stack_pointer = 0;\n\tvar paren_stack_pointer_max = 0;\n\t\
    var paren_stack_pointer_max_index = 0;\n\tvar paren_stack_pointer_max_index2 =\
    \ 0;\n\tvar paren_stack_pointer_max_index3 = 0;\n\tvar paren_stack_pointer_max_index4\
    \ = 0;\n\tvar paren_stack_pointer_max_index5 = 0;\n\tvar paren_stack_pointer_max_index6\
    \ = 0;\n\tvar paren_stack_pointer_max_index7 = 0;\n\tvar paren_stack_pointer_max_index8\
    \ = 0;\n\tvar paren_stack_pointer_max_index9 = 0;\n\tvar paren_stack_pointer_max_index10\
    \ = 0;\n\tvar paren_stack_pointer_max_index11 = 0;\n\tvar paren_stack_pointer_max_index12\
    \ = 0;\n\tvar paren_stack_pointer_max_index13 = 0;\n\tvar paren_stack_pointer_max_index14\
    \ = 0;\n\tvar paren_stack_pointer_max_index15 = 0;\n\tvar paren_stack_pointer_max_index16\
    \ = 0;\n\tvar paren_stack_pointer_max_index17 = 0;\n\tvar paren_stack_pointer_max_index18\
    \ = 0;\n\tvar paren_stack_pointer_max_index19 = 0;\n\tvar paren_stack_pointer_max_index20\
    \ = 0;\n\tvar paren_stack_pointer_max_index21 = 0;\n\tvar paren_stack_pointer_max_index22\
    \ = 0;\n\tvar paren_stack_pointer_max_index23 = 0;\n\tvar paren_stack_pointer_max_index24\
    \ = 0;\n\tvar paren_stack_pointer_max_index25 = 0;\n\tvar paren_stack_pointer_max_index26\
    \ = 0;\n\tvar paren_stack_pointer_max_index27 = 0;\n\tvar paren_stack_pointer_max_index28\
    \ = 0;\n\tvar paren_stack_pointer_max_index29 = 0;\n\tvar paren_stack_pointer_max_index30\
    \ = 0;\n\tvar paren_stack_pointer_max_index31 = 0;\n\tvar paren_stack_pointer_max_index32\
    \ = 0;\n\tvar paren_stack_pointer_max_index33 = 0;\n\tvar paren_stack_pointer_max_index34\
    \ = 0;\n\tvar paren_stack_pointer_max_index35 = 0;\n\tvar paren_stack_pointer_max_index36\
    \ = 0;\n\tvar paren_stack_pointer_max_index37 = 0;\n\tvar paren_stack_pointer_max_index38\
    \ = 0;\n\tvar paren_stack_pointer_max_index39 = 0;\n\tvar paren_stack_pointer_max_index40\
    \ = 0;\n\tvar paren_stack_pointer_max_index41 = 1;\n\tvar paren_stack_pointer_max_index42\
    \ = 1;\n\tvar paren_stack_pointer_max_index43 = 1;\n\tvar paren\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3p5nlio_.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_len\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_level_counter_len = 0;\n\
    \    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_counter_len_len = 0;\n    var paren_level_counter_len_len\
    \ = 0;\n    var paren_level_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfd7px11e.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] == '('){\n            paren_count++;\n   \
    \     }else if(paren_string[i] == ')'){\n            paren_count--;\n        }\n\
    \        if(paren_count == 0){\n            nested_parens.push(paren_count);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0, 0, 0, 0 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpqz_wv0qv.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqz_wv0qv.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n\
    \    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string_count2\
    \ = 0;\n    var paren_level_stack_string_count3 = 0;\n    var paren_level_stack_string_count4\
    \ = 0;\n    var paren_level_stack_string_count5 = 0;\n    var paren_level_stack_string_count6\
    \ = 0;\n    var paren_level_stack_string_count7 = 0;\n    var paren_level_stack_string_count8\
    \ = 0;\n    var paren_level_stack_string_count9 = 0;\n    var paren_level_stack_string_count10\
    \ = 0;\n    var paren_level_stack_string_count11 = 0;\n    var paren_level_stack_string_count12\
    \ = 0;\n    var paren_level_stack_string_count13 = 0;\n    var paren_level_stack_string_count14\
    \ = 0;\n    var paren_level_stack_string_count15 = 0;\n    var paren_level_stack_string_count16\
    \ = 0;\n    var paren_level_stack_string_count17 = 0;\n    var paren_level_stack_string_count18\
    \ = 0;\n    var paren_level_stack_string_count19 = 0;\n    var paren_level_stack_string_count20\
    \ = 0;\n    var paren_level_stack_string_count21 = 0;\n    var paren_level_stack_string_count22\
    \ = 0;\n    var paren_level_stack_string_count23 = 0;\n    var paren_level_stack_string_count24\
    \ = 0;\n    var paren_level_stack_string_count25 = 0;\n    var paren_level_stack_string_count26\
    \ = 0;\n    var paren_level_stack_string_count27 = 0;\n    var paren_level_stack_string_count28\
    \ = 0;\n    var paren_level_stack_string_count29 = 0;\n    var paren_level_stack_string_count30\
    \ = 0;\n    var paren_level_stack_string_count31 = 0;\n    var paren_level_stack_string_count32\
    \ = 0;\n    var paren_level_stack_string_count33 = 0;\n    var paren_level_stack_string_count34\
    \ = 0;\n    var paren_level_stack_string_count35 = 0;\n    var paren_level_stack_string_count36\
    \ = 0;\n    var paren_level_stack_string_count37 = 0;\n    var paren_level_stack_string_count38\
    \ = 0;\n    var paren_level_stack_string_count39 = 0;\n    var paren_level_stack_string_count40\
    \ = 0;\n    var paren_level_stack_string_count41 = 0;\n    var paren_level_stack_string_count42\
    \ = 0;\n    var paren_level_stack_string_count43 = 0;\n    var paren_level_stack_string_count44\
    \ = 0;\n    var paren_level_stack_string_count45 = 0;\n    var paren_level_stack_string_count46\
    \ = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsw_r0v0d.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = '';\n    var paren_level_string = '';\n \
    \   var paren_level_string_count = 0;\n    var paren_level_counter = 0;\n    var\
    \ paren_level_counter_string = '';\n    var paren_level_counter_string_count =\
    \ 0;\n    var paren_level_counter_string_count2 = 0;\n    var paren_level_counter_string_count3\
    \ = 0;\n    var paren_level_counter_string_count4 = 0;\n    var paren_level_counter_string_count5\
    \ = 0;\n    var paren_level_counter_string_count6 = 0;\n    var paren_level_counter_string_count7\
    \ = 0;\n    var paren_level_counter_string_count8 = 0;\n    var paren_level_counter_string_count9\
    \ = 0;\n    var paren_level_counter_string_count10 = 0;\n    var paren_level_counter_string_count11\
    \ = 0;\n    var paren_level_counter_string_count12 = 0;\n    var paren_level_counter_string_count13\
    \ = 0;\n    var paren_level_counter_string_count14 = 0;\n    var paren_level_counter_string_count15\
    \ = 0;\n    var paren_level_counter_string_count16 = 0;\n    var paren_level_counter_string_count17\
    \ = 0;\n    var paren_level_counter_string_count18 = 0;\n    var paren_level_counter_string_count19\
    \ = 0;\n    var paren_level_counter_string_count20 = 0;\n    var paren_level_counter_string_count21\
    \ = 0;\n    var paren_level_counter_string_count22 = 0;\n    var paren_level_counter_string_count23\
    \ = 0;\n    var paren_level_counter_string_count24 = 0;\n    var paren_level_counter_string_count25\
    \ = 0;\n    var paren_level_counter_string_count26 = 0;\n    var paren_level_counter_string_count27\
    \ = 0;\n    var paren_level_counter_string_count28 = 0;\n    var paren_level_counter_string_count29\
    \ = 0;\n    var paren_level_counter_string_count30 = 0;\n    var paren_level_counter_string_count31\
    \ = 0;\n    var paren_level_counter_string_count32 = 0;\n    var paren_level_counter_string_count33\
    \ = 0;\n    var paren_level_counter_string_count34 = 0;\n    var paren_level_counter_string_count35\
    \ = 0;\n    var paren_level_counter_string_count36 = 0;\n    var paren_level_counter_string_count37\
    \ = 0;\n    var paren_level_counter_string_count38 = 0;\n    var paren_level_counter_string_count39\
    \ = 0;\n    var paren_level_counter_string_count40 = 0;\n    var paren_level_counter_string_count41\
    \ = 0;\n    var paren_level_counter_string_count42 = 0;\n    var paren_level_counter_string_count43\
    \ = 0;\n    var paren_level_counter_string_count44 = 0;\n    var paren_level_counter_string_count45\
    \ = 0;\n    var paren_level_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpli_jjacy.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = 0;\n    var paren_level_stack_count2\
    \ = 0;\n    var paren_level_stack_count3 = 0;\n    var paren_level_stack_count4\
    \ = 0;\n    var paren_level_stack_count5 = 0;\n    var paren_level_stack_count6\
    \ = 0;\n    var paren_level_stack_count7 = 0;\n    var paren_level_stack_count8\
    \ = 0;\n    var paren_level_stack_count9 = 0;\n    var paren_level_stack_count10\
    \ = 0;\n    var paren_level_stack_count11 = 0;\n    var paren_level_stack_count12\
    \ = 0;\n    var paren_level_stack_count13 = 0;\n    var paren_level_stack_count14\
    \ = 0;\n    var paren_level_stack_count15 = 0;\n    var paren_level_stack_count16\
    \ = 0;\n    var paren_level_stack_count17 = 0;\n    var paren_level_stack_count18\
    \ = 0;\n    var paren_level_stack_count19 = 0;\n    var paren_level_stack_count20\
    \ = 0;\n    var paren_level_stack_count21 = 0;\n    var paren_level_stack_count22\
    \ = 0;\n    var paren_level_stack_count23 = 0;\n    var paren_level_stack_count24\
    \ = 0;\n    var paren_level_stack_count25 = 0;\n    var paren_level_stack_count26\
    \ = 0;\n    var paren_level_stack_count27 = 0;\n    var paren_level_stack_count28\
    \ = 0;\n    var paren_level_stack_count29 = 0;\n    var paren_level_stack_count30\
    \ = 0;\n    var paren_level_stack_count31 = 0;\n    var paren_level_stack_count32\
    \ = 0;\n    var paren_level_stack_count33 = 0;\n    var paren_level_stack_count34\
    \ = 0;\n    var paren_level_stack_count35 = 0;\n    var paren_level_stack_count36\
    \ = 0;\n    var paren_level_stack_count37 = 0;\n    var paren_level_stack_count38\
    \ = 0;\n    var paren_level_stack_count39 = 0;\n    var paren_level_stack_count40\
    \ = 0;\n    var paren_level_stack_count41 = 0;\n    var paren_level_stack_count42\
    \ = 0;\n    var paren_level_stack_count43 = 0;\n    var paren_level_stack_count44\
    \ = 0;\n    var paren_level_stack_count45 = 0;\n    var paren_level_stack_count46\
    \ = 0;\n    var paren_level_stack_count47 = 0;\n    var paren_level_stack_count48\
    \ = 0;\n    var paren_level_stack_count49 = 0;\n    var paren_level_stack_count50\
    \ = 0;\n    var paren_level_stack_count51 = 0;\n    var paren_level_stack_count52\
    \ = 0;\n    var paren_level_stack_count53 = 0;\n    var paren_level_stack_count54\
    \ = 0;\n    var paren_level_stack_count55\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1afbbxxk.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_level\
    \ = 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\
    \t\tvar c = paren_string[i];\n\t\tif(c == '('){\n\t\t\tparen_stack.push(c);\n\t\
    \t}else if(c == ')'){\n\t\t\tnested_level--;\n\t\t\twhile(paren_stack.length >\
    \ 0){\n\t\t\t\tif(paren_stack.pop() == '('){\n\t\t\t\t\tnested_level++;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t}\n\treturn nested_level;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n  \
    \  at test (/tmp/tmpltps_y9u.js:30:10)\n    at Object.<anonymous> (/tmp/tmpltps_y9u.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_groups\
    \ = [];\n    var paren_group_level = 0;\n    var paren_group_nesting = 0;\n  \
    \  var paren_group_groups = [];\n    var paren_group_group_level = 0;\n    var\
    \ paren_group_group_nesting = 0;\n    var paren_group_group_groups = [];\n   \
    \ var paren_group_group_group_level = 0;\n    var paren_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\n    var paren_group_group_group_group_nesting\
    \ = 0;\n    var paren_group_group_group_group_groups = [];\n    var paren_group_group_group_group_level\
    \ = 0;\n    var paren_group_group_group_group_nesting = 0;\n    var paren_group_group_group_group_groups\
    \ = [];\n    var paren_group_group_group_group_level = 0;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpciv99zt7.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_char;\n    var paren_char_count = 0;\n    for(var i = 0;\
    \ i < paren_string.length; i++){\n        paren_char = paren_string[i];\n    \
    \    paren_char_count++;\n        if(paren_char === '('){\n            paren_stack.push(paren_level);\n\
    \            paren_level++;\n        }else if(paren_char === ')'){\n         \
    \   paren_level = paren_stack.pop();\n        }\n        if(paren_char_count ===\
    \ 2){\n            nested_parens.push(paren_level);\n        }\n    }\n    return\
    \ nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmpa020o7de.js:34:10)\n    at Object.<anonymous> (/tmp/tmpa020o7de.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level_string = '';\n \
    \   var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level = 0;\n    var paren_level_string\
    \ = '';\n    var paren_level_stack = [];\n    var paren_level\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpd7hkbwdu.js:94\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var max_level\
    \ = 0;\n  var level = 0;\n  var paren_stack = [];\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    var c = paren_string[i];\n    if(c == '('){\n      paren_stack.push(level);\n\
    \      level++;\n    }\n    else if(c == ')'){\n      level = paren_stack.pop();\n\
    \    }\n    else if(paren_stack.length){\n      level = paren_stack[paren_stack.length-1];\n\
    \    }\n    if(level > max_level){\n      max_level = level;\n    }\n  }\n  return\
    \ max_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n  \
    \  at test (/tmp/tmpptjr8e1d.js:34:10)\n    at Object.<anonymous> (/tmp/tmpptjr8e1d.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    if(paren_string[i] == '('){\n      paren_level++;\n      if(paren_level\
    \ > nested_parens.length){\n        nested_parens.push(paren_level);\n      }\n\
    \    }\n    else if(paren_string[i] == ')'){\n      paren_level--;\n      if(paren_level\
    \ < 0){\n        throw new Error('Unbalanced parenthesis');\n      }\n      if(paren_level\
    \ < nested_parens.length){\n        nested_parens[paren_level] = nested_parens[paren_level]\
    \ + 1;\n      }\n    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 8, 5 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmp63ys1tqs.js:35:10)\n    at Object.<anonymous> (/tmp/tmp63ys1tqs.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, 8, 5 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = 0;\n    var paren_level_stack_len =\
    \ 0;\n    var paren_level_stack_index = 0;\n    var paren_level_stack_string =\
    \ '';\n    var paren_level_stack_last_index = 0;\n    var paren_level_stack_last_string\
    \ = '';\n    var paren_level_stack_last_paren_level = 0;\n    var paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_count = 0;\n    var\
    \ paren_level_stack_last_paren_level_stack_len = 0;\n    var paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_string = '';\n    var\
    \ paren_level_stack_last_paren_level_stack_last_index = 0;\n    var paren_level_stack_last_paren_level_stack_last_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level = 0;\n\
    \    var paren_level_stack_last_paren_level_stack_last_paren_level_stack = [];\n\
    \    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_count\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_len\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_count\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_len\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = '';\n    for(var i = 0; i < paren_string.length; i++){\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphd24k4e9.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  for(var i = 0; i < paren_string.length; i++){\n\
    \    if(paren_string[i] == '('){\n      paren_count++;\n    }else if(paren_string[i]\
    \ == ')'){\n      paren_count--;\n    }\n    if(paren_count == 0){\n      nested_parens.push(paren_count);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0, 0, 0, 0 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpog00n6v2.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpog00n6v2.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char === '('){\n            paren_stack.push(paren_count);\n     \
    \       paren_count++;\n        }else if(char === ')'){\n            paren_count\
    \ = paren_stack.pop();\n        }else if(char === ' ' && paren_count > 0){\n \
    \           nested_parens.push(paren_level);\n            paren_level = 0;\n \
    \       }else if(char === ' ' && paren_count === 0){\n            nested_parens.push(paren_level);\n\
    \            paren_level = 0;\n        }else if(char === ')' && paren_count >\
    \ 0){\n            paren_level--;\n        }else if(char === '(' && paren_count\
    \ === 0){\n            paren_level++;\n        }\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmpugtg7kng.js:38:10)\n    at Object.<anonymous> (/tmp/tmpugtg7kng.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_stack\
    \ = [];\n    var paren_levels_stack_index = 0;\n    var paren_levels_stack_index2\
    \ = 0;\n    var paren_levels_stack_index3 = 0;\n    var paren_levels_stack_index4\
    \ = 0;\n    var paren_levels_stack_index5 = 0;\n    var paren_levels_stack_index6\
    \ = 0;\n    var paren_levels_stack_index7 = 0;\n    var paren_levels_stack_index8\
    \ = 0;\n    var paren_levels_stack_index9 = 0;\n    var paren_levels_stack_index10\
    \ = 0;\n    var paren_levels_stack_index11 = 0;\n    var paren_levels_stack_index12\
    \ = 0;\n    var paren_levels_stack_index13 = 0;\n    var paren_levels_stack_index14\
    \ = 0;\n    var paren_levels_stack_index15 = 0;\n    var paren_levels_stack_index16\
    \ = 0;\n    var paren_levels_stack_index17 = 0;\n    var paren_levels_stack_index18\
    \ = 0;\n    var paren_levels_stack_index19 = 0;\n    var paren_levels_stack_index20\
    \ = 0;\n    var paren_levels_stack_index21 = 0;\n    var paren_levels_stack_index22\
    \ = 0;\n    var paren_levels_stack_index23 = 0;\n    var paren_levels_stack_index24\
    \ = 0;\n    var paren_levels_stack_index25 = 0;\n    var paren_levels_stack_index26\
    \ = 0;\n    var paren_levels_stack_index27 = 0;\n    var paren_levels_stack_index28\
    \ = 0;\n    var paren_levels_stack_index29 = 0;\n    var paren_levels_stack_index30\
    \ = 0;\n    var paren_levels_stack_index31 = 0;\n    var paren_levels_stack_index32\
    \ = 0;\n    var paren_levels_stack_index33 = 0;\n    var paren_levels_stack_index34\
    \ = 0;\n    var paren_levels_stack_index35 = 0;\n    var paren_levels_stack_index36\
    \ = 0;\n    var paren_levels_stack_index37 = 0;\n    var paren_levels_stack_index38\
    \ = 0;\n    var paren_levels_stack_index39 = 0;\n    var paren_levels_stack_index40\
    \ = 0;\n    var paren_levels_stack_index41 = 1;\n    var paren_levels_stack_index42\
    \ = 1;\n    var paren_levels_stack_index43 = 1;\n    var paren_levels_stack_index44\
    \ = 1;\n    var paren_levels_stack_index45 = 1;\n    var paren_levels_stack_index46\
    \ = 1;\n    var paren_levels_stack_index47 = 1;\n    var paren_levels_stack_index48\
    \ = 1;\n    var paren_levels_stack_index49 = 1;\n    var \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppynvlzgz.js:61\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  for(var i=0; i<paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if(char == '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    }\n    else if(char == ')'){\n      paren_count = paren_stack.pop();\n  \
    \  }\n    else if(char == ' ' && paren_count > 0){\n      paren_level++;\n   \
    \ }\n    else if(char == ' ' && paren_count < 0){\n      paren_level--;\n    }\n\
    \    if(paren_level == 0){\n      nested_parens.push(paren_count);\n    }\n  }\n\
    \  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0,\
    \ 0, 1, 0, 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmpx1bq8jyk.js:38:10)\n    at Object.<anonymous> (/tmp/tmpx1bq8jyk.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2, 1, 0, 0, 1,\n    2, 3,\
    \ 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2, 1,\n    2, 1, 0\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level = 0;\n\
    \tvar paren_stack = [];\n\tvar paren_levels = [];\n\tvar paren_levels_index =\
    \ [];\n\tvar paren_level_counter = 0;\n\tvar paren_level_counter_index = 0;\n\t\
    var paren_level_counter_index2 = 0;\n\tvar paren_level_counter_index3 = 0;\n\t\
    var paren_level_counter_index4 = 0;\n\tvar paren_level_counter_index5 = 0;\n\t\
    var paren_level_counter_index6 = 0;\n\tvar paren_level_counter_index7 = 0;\n\t\
    var paren_level_counter_index8 = 0;\n\tvar paren_level_counter_index9 = 0;\n\t\
    var paren_level_counter_index10 = 0;\n\tvar paren_level_counter_index11 = 0;\n\
    \tvar paren_level_counter_index12 = 0;\n\tvar paren_level_counter_index13 = 0;\n\
    \tvar paren_level_counter_index14 = 0;\n\tvar paren_level_counter_index15 = 0;\n\
    \tvar paren_level_counter_index16 = 0;\n\tvar paren_level_counter_index17 = 0;\n\
    \tvar paren_level_counter_index18 = 0;\n\tvar paren_level_counter_index19 = 0;\n\
    \tvar paren_level_counter_index20 = 0;\n\tvar paren_level_counter_index21 = 0;\n\
    \tvar paren_level_counter_index22 = 0;\n\tvar paren_level_counter_index23 = 0;\n\
    \tvar paren_level_counter_index24 = 0;\n\tvar paren_level_counter_index25 = 0;\n\
    \tvar paren_level_counter_index26 = 0;\n\tvar paren_level_counter_index27 = 0;\n\
    \tvar paren_level_counter_index28 = 0;\n\tvar paren_level_counter_index29 = 0;\n\
    \tvar paren_level_counter_index30 = 0;\n\tvar paren_level_counter_index31 = 0;\n\
    \tvar paren_level_counter_index32 = 0;\n\tvar paren_level_counter_index33 = 0;\n\
    \tvar paren_level_counter_index34 = 0;\n\tvar paren_level_counter_index35 = 0;\n\
    \tvar paren_level_counter_index36 = 0;\n\tvar paren_level_counter_index37 = 0;\n\
    \tvar paren_level_counter_index38 = 0;\n\tvar paren_level_counter_index39 = 0;\n\
    \tvar paren_level_counter_index40 = 0;\n\tvar paren_level_counter_index41 = 1;\n\
    \tvar paren_level_counter_index42 = 1;\n\tvar paren_level_counter_index43 = 1;\n\
    \tvar paren_level_counter_index44 = 1;\n\tvar paren_level_counter_index45 = 1;\n\
    \tvar paren_level_counter_index46 = 1;\n\tvar paren_level_counter_index47 = 1;\n\
    \tvar paren_level_counter_index48 = 1;\n\tvar paren_level_counter_index49 = 1;\n\
    \tvar paren_level_counter_index50 = 1;\n\tvar paren_level_counter_index51 = 1;\n\
    \tvar paren_level_counter_index52 = 1;\n\tvar paren_level_counter_index53 = 1;\n\
    \tvar paren_level_counter_index\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprjwpou6k.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_stack\
    \ = [];\n  var paren_level = 0;\n  var paren_nesting = 0;\n  var paren_levels\
    \ = [];\n  var paren_nesting_levels = [];\n  var paren_levels_string = '';\n \
    \ paren_string = paren_string.trim();\n  paren_string = paren_string.replace(/\\\
    (/g, '');\n  paren_string = paren_string.replace(/\\)/g, '');\n  paren_string\
    \ = paren_string.replace(/ /g, '');\n  paren_string = paren_string.replace(/\\\
    s+/g, '');\n  paren_string = paren_string.split(' ');\n  for(var i = 0; i < paren_string.length;\
    \ i++){\n    if(paren_string[i] == '('){\n      paren_stack.push(paren_level);\n\
    \      paren_level++;\n      paren_nesting++;\n      paren_levels.push(paren_level);\n\
    \      paren_nesting_levels.push(paren_nesting);\n    }\n    else if(paren_string[i]\
    \ == ')'){\n      paren_level--;\n      paren_nesting--;\n      paren_levels_string\
    \ += paren_levels_string ? ', ' : '';\n      paren_levels_string += paren_levels[paren_stack.pop()];\n\
    \      paren_levels_string += paren_nesting_levels[paren_stack.pop()];\n    }\n\
    \  }\n  return paren_levels_string;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n''\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmp9lm0vg7h.js:43:10)\n    at Object.<anonymous> (/tmp/tmp9lm0vg7h.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '',\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    for(var i\
    \ = 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n \
    \       if(char === '('){\n            nested_parens.push(paren_stack);\n    \
    \        paren_stack.push(char);\n            nested_level++;\n        }\n   \
    \     else if(char === ')'){\n            nested_level--;\n            var last_paren\
    \ = paren_stack.pop();\n            if(nested_level === 0){\n                nested_parens.push(last_paren);\n\
    \            }\n        }\n    }\n    return nested_parens;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [], [], [], '(', [], [], [], '(', [],\
    \ '(', [], [], [], [], [], '(' ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test\
    \ (/tmp/tmpp9cz17pn.js:33:10)\n    at Object.<anonymous> (/tmp/tmpp9cz17pn.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    [], [],  [], '(', [], [],\n    [],\
    \ '(', [], '(', [], [],\n    [], [],  [], '('\n  ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_pointer = 0;\n    var paren_stack_pointer_max = 0;\n\
    \    var paren_stack_pointer_max_index = 0;\n    var paren_stack_pointer_max_value\
    \ = 0;\n    var paren_stack_pointer_max_value_length = 0;\n    var paren_stack_pointer_max_value_length_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value = 0;\n    var paren_stack_pointer_max_value_length_value_length\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_index = 0;\n\
    \    var paren_stack_pointer_max_value_length_value_length_value = 0;\n    var\
    \ paren_stack_pointer_max_value_length_value_length_value_length = 0;\n    var\
    \ paren_stack_pointer_max_value_length_value_length_value_length_index = 0;\n\
    \    var paren_stack_pointer_max_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value_length\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value_length\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_index\
    \ = 0;\n    var paren_stack_pointer_max_value_length_value_length_value_length_value_length_value_length_value_length_value_length_value\
    \ = 0;\n    var paren_stack_pointer_max_value_length\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkg6eainn.js:50\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_levels\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_nesting_level\
    \ = 0;\n\tvar paren_nesting_level_max = 0;\n\tvar paren_nesting_level_max_index\
    \ = 0;\n\tvar paren_nesting_level_max_index2 = 0;\n\tvar paren_nesting_level_max_index3\
    \ = 0;\n\tvar paren_nesting_level_max_index4 = 0;\n\tvar paren_nesting_level_max_index5\
    \ = 0;\n\tvar paren_nesting_level_max_index6 = 0;\n\tvar paren_nesting_level_max_index7\
    \ = 0;\n\tvar paren_nesting_level_max_index8 = 0;\n\tvar paren_nesting_level_max_index9\
    \ = 0;\n\tvar paren_nesting_level_max_index10 = 0;\n\tvar paren_nesting_level_max_index11\
    \ = 0;\n\tvar paren_nesting_level_max_index12 = 0;\n\tvar paren_nesting_level_max_index13\
    \ = 0;\n\tvar paren_nesting_level_max_index14 = 0;\n\tvar paren_nesting_level_max_index15\
    \ = 0;\n\tvar paren_nesting_level_max_index16 = 0;\n\tvar paren_nesting_level_max_index17\
    \ = 0;\n\tvar paren_nesting_level_max_index18 = 0;\n\tvar paren_nesting_level_max_index19\
    \ = 0;\n\tvar paren_nesting_level_max_index20 = 0;\n\tvar paren_nesting_level_max_index21\
    \ = 0;\n\tvar paren_nesting_level_max_index22 = 0;\n\tvar paren_nesting_level_max_index23\
    \ = 0;\n\tvar paren_nesting_level_max_index24 = 0;\n\tvar paren_nesting_level_max_index25\
    \ = 0;\n\tvar paren_nesting_level_max_index26 = 0;\n\tvar paren_nesting_level_max_index27\
    \ = 0;\n\tvar paren_nesting_level_max_index28 = 0;\n\tvar paren_nesting_level_max_index29\
    \ = 0;\n\tvar paren_nesting_level_max_index30 = 0;\n\tvar paren_nesting_level_max_index31\
    \ = 0;\n\tvar paren_nesting_level_max_index32 = 0;\n\tvar paren_nesting_level_max_index33\
    \ = 0;\n\tvar paren_nesting_level_max_index34 = 0;\n\tvar paren_nesting_level_max_index35\
    \ = 0;\n\tvar paren_nesting_level_max_index36 = 0;\n\tvar paren_nesting_level_max_index37\
    \ = 0;\n\tvar paren_nesting_level_max_index38 = 0;\n\tvar paren_nesting_level_max_index39\
    \ = 0;\n\tvar paren_nesting_level_max_index40 = 0;\n\tvar paren_nesting_level_max_index41\
    \ = 0;\n\tvar paren_nesting_level_max_index42 = 0;\n\tvar paren_nesting_level_max_index43\
    \ = 0;\n\tvar paren_nesting_level_max_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvgp3fa86.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_levels = [];\n    var paren_level_counter\
    \ = 0;\n    var paren_level_max = 0;\n    var paren_level_max_counter = 0;\n \
    \   var paren_level_max_max = 0;\n    var paren_level_max_max_counter = 0;\n \
    \   var paren_level_max_max_max = 0;\n    var paren_level_max_max_max_counter\
    \ = 0;\n    var paren_level_max_max_max_max = 0;\n    var paren_level_max_max_max_max_counter\
    \ = 0;\n    var paren_level_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_counter\
    \ = 0;\n    var paren_level_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_counter\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_counter\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_counter\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_counter\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max = 0;\n    var\
    \ paren_level_max_max_max_max_max_max_max_max_counter = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_counter = 0;\n   \
    \ var paren_level_max_max_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_max_counter\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max = 0;\n   \
    \ var paren_level_max_max_max_max_max_max_max_max_max_counter = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_counter = 0;\n\
    \    var paren_level_max_max_max_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_counter\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max = 0;\n   \
    \ var paren_level_max_max_max_max_max_max_max_max_max_counter = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_counter = 0;\n\
    \    var paren_level_max_max_max_max_max_max_max_max_max_max = 0;\n    var paren_level_max_max_max_max_max_max_max_max_max_counter\
    \ = 0;\n    var paren\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpq450b511.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  for (var i = 0; i <\
    \ paren_string.length; i++){\n    if (paren_string[i] == '('){\n      paren_count++;\n\
    \      paren_level++;\n    }\n    else if (paren_string[i] == ')'){\n      paren_count--;\n\
    \      if (paren_count < 0){\n        throw 'Unbalanced parenthesis at index '\
    \ + i;\n      }\n      paren_level--;\n    }\n    if (paren_level == 0){\n   \
    \   nested_parens.push(paren_count);\n    }\n  }\n  return nested_parens;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0, 0, 0, 0 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmp_ssk1_9l.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_ssk1_9l.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_level\
    \ = 0;\n\tvar nested_parens = [];\n\tvar paren_count = 0;\n\tvar paren_stack =\
    \ [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tvar c = paren_string[i];\n\
    \t\tif(c == '('){\n\t\t\tparen_stack.push(paren_count);\n\t\t\tparen_count++;\n\
    \t\t}else if(c == ')'){\n\t\t\tparen_count = paren_stack.pop();\n\t\t}\n\t\tif(paren_count\
    \ > nested_level){\n\t\t\tnested_level = paren_count;\n\t\t}\n\t}\n\treturn nested_level;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n3\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n  \
    \  at test (/tmp/tmp8890c35_.js:31:10)\n    at Object.<anonymous> (/tmp/tmp8890c35_.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_index2\
    \ = 0;\n    var paren_level_stack_index3 = 0;\n    var paren_level_stack_index4\
    \ = 0;\n    var paren_level_stack_index5 = 0;\n    var paren_level_stack_index6\
    \ = 0;\n    var paren_level_stack_index7 = 0;\n    var paren_level_stack_index8\
    \ = 0;\n    var paren_level_stack_index9 = 0;\n    var paren_level_stack_index10\
    \ = 0;\n    var paren_level_stack_index11 = 0;\n    var paren_level_stack_index12\
    \ = 0;\n    var paren_level_stack_index13 = 0;\n    var paren_level_stack_index14\
    \ = 0;\n    var paren_level_stack_index15 = 0;\n    var paren_level_stack_index16\
    \ = 0;\n    var paren_level_stack_index17 = 0;\n    var paren_level_stack_index18\
    \ = 0;\n    var paren_level_stack_index19 = 0;\n    var paren_level_stack_index20\
    \ = 0;\n    var paren_level_stack_index21 = 0;\n    var paren_level_stack_index22\
    \ = 0;\n    var paren_level_stack_index23 = 0;\n    var paren_level_stack_index24\
    \ = 0;\n    var paren_level_stack_index25 = 0;\n    var paren_level_stack_index26\
    \ = 0;\n    var paren_level_stack_index27 = 0;\n    var paren_level_stack_index28\
    \ = 0;\n    var paren_level_stack_index29 = 0;\n    var paren_level_stack_index30\
    \ = 0;\n    var paren_level_stack_index31 = 0;\n    var paren_level_stack_index32\
    \ = 0;\n    var paren_level_stack_index33 = 0;\n    var paren_level_stack_index34\
    \ = 0;\n    var paren_level_stack_index35 = 0;\n    var paren_level_stack_index36\
    \ = 0;\n    var paren_level_stack_index37 = 0;\n    var paren_level_stack_index38\
    \ = 0;\n    var paren_level_stack_index39 = 0;\n    var paren_level_stack_index40\
    \ = 0;\n    var paren_level_stack_index41 = 1;\n    var paren_level_stack_index42\
    \ = 1;\n    var paren_level_stack_index43 = 1;\n    var paren_level_stack_index44\
    \ = 1;\n    var paren_level_stack_index45 = 1;\n    var paren_level_stack_index46\
    \ = 1;\n    var paren_level_stack_index47 = 1;\n    var paren_level_stack_index48\
    \ = 1;\n    var paren_level_stack_index49 = 1;\n    var paren_level_stack_index50\
    \ = 1;\n    var paren_level_stack_index51 = 1;\n    var paren_level_stack_index52\
    \ = 1;\n    var paren_level_stack_index53 = 1;\n    var paren_level_stack_index54\
    \ = 1;\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7jeubuxt.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level = 0;\n\
    \tvar paren_stack = [];\n\tvar paren_levels = [];\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == '('){\n\t\t\tparen_stack.push(paren_levels.length);\n\
    \t\t\tparen_levels.push(level);\n\t\t\tlevel++;\n\t\t}\n\t\telse if(paren_string[i]\
    \ == ')'){\n\t\t\tvar paren_level = paren_stack.pop();\n\t\t\tparen_levels.push(paren_level);\n\
    \t\t\tlevel--;\n\t\t}\n\t}\n\treturn paren_levels;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 1, 1, 3, 0, 0, 1, 2, 8, 7, 6, 0,\
    \ 12, 0, 1, 2, 16, 15, 1, 19, 1, 21, 14 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmpyfz3rz66.js:30:10)\n    at Object.<anonymous> (/tmp/tmpyfz3rz66.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    0,  1,  1, 1,  3,  0,  0,  1,\n  \
    \  2,  8,  7, 6,  0, 12,  0,  1,\n    2, 16, 15, 1, 19,  1, 21, 14\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_count\
    \ = 0;\n\tvar nested_paren_level = 0;\n\tvar paren_level = 0;\n\tvar paren_stack\
    \ = [];\n\tvar paren_stack_string = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_last_char\
    \ = '';\n\tvar paren_stack_last_char_level = 0;\n\tvar paren_stack_last_char_level_length\
    \ = 0;\n\tvar paren_stack_last_char_level_char = '';\n\tvar paren_stack_last_char_level_char_level\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_length = 0;\n\tvar paren_stack_last_char_level_char_level_char\
    \ = '';\n\tvar paren_stack_last_char_level_char_level_char_level = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_length\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char = '';\n\t\
    var paren_stack_last_char_level_char_level_char_level_char_level = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_length\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char\
    \ = '';\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_length\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_char\
    \ = '';\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_level\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_length\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_char_level\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_char_level_length\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_char_level_char\
    \ = '';\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_char_level_level\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_char_level_length\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_char_level_char_level\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_char_level_char_level_length\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_char_level_char_level_char\
    \ = '';\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_char_level_char_level_level\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_char_level_char_level_length\
    \ = 0;\n\tvar paren_stack_last_char_level_char_level_char_level_char_level_char_level_char_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprlmfawii.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count[0] = 0;\n    var paren_level_stack_count[1]\
    \ = 0;\n    var paren_level_stack_count[2] = 0;\n    var paren_level_stack_count[3]\
    \ = 0;\n    var paren_level_stack_count[4] = 0;\n    var paren_level_stack_count[5]\
    \ = 0;\n    var paren_level_stack_count[6] = 0;\n    var paren_level_stack_count[7]\
    \ = 0;\n    var paren_level_stack_count[8] = 0;\n    var paren_level_stack_count[9]\
    \ = 0;\n    var paren_level_stack_count[10] = 0;\n    var paren_level_stack_count[11]\
    \ = 0;\n    var paren_level_stack_count[12] = 0;\n    var paren_level_stack_count[13]\
    \ = 0;\n    var paren_level_stack_count[14] = 0;\n    var paren_level_stack_count[15]\
    \ = 0;\n    var paren_level_stack_count[16] = 0;\n    var paren_level_stack_count[17]\
    \ = 0;\n    var paren_level_stack_count[18] = 0;\n    var paren_level_stack_count[19]\
    \ = 0;\n    var paren_level_stack_count[20] = 0;\n    var paren_level_stack_count[21]\
    \ = 0;\n    var paren_level_stack_count[22] = 0;\n    var paren_level_stack_count[23]\
    \ = 0;\n    var paren_level_stack_count[24] = 0;\n    var paren_level_stack_count[25]\
    \ = 0;\n    var paren_level_stack_count[26] = 0;\n    var paren_level_stack_count[27]\
    \ = 0;\n    var paren_level_stack_count[28] = 0;\n    var paren_level_stack_count[29]\
    \ = 0;\n    var paren_level_stack_count[30] = 0;\n    var paren_level_stack_count[31]\
    \ = 0;\n    var paren_level_stack_count[32] = 0;\n    var paren_level_stack_count[33]\
    \ = 0;\n    var paren_level_stack_count[34] = 0;\n    var paren_level_stack_count[35]\
    \ = 0;\n    var paren_level_stack_count[36] = 0;\n    var paren_level_stack_count[37]\
    \ = 0;\n    var paren_level_stack_count[38] = 0;\n    var paren_level_stack_count[39]\
    \ = 0;\n    var paren_level_stack_count[40] = 0;\n    var paren_level_stack_count[41]\
    \ = 0;\n    var paren_level_stack_count[42] = 0;\n    var paren_level_stack_count[43]\
    \ = 0;\n    var paren_level_stack_count[44] = 0;\n    var paren_level_stack_count[45]\
    \ = 0;\n    var paren_level_stack_count[46] = 0;\n    var paren_level_stack_count[47]\
    \ = 0;\n    var paren_level_stack_count[48] = 0;\n    var paren_level_stack_count[49\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0k8hn3fu.js:11\n    var paren_level_stack_count[0] = 0;\n     \
    \                          ^\n\nSyntaxError: Unexpected token '['\n    at wrapSafe\
    \ (internal/modules/cjs/loader.js:979:16)\n    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level = 0;\n\
    \tvar paren_stack = [];\n\tvar paren_level = [];\n\tvar paren_level_stack = [];\n\
    \tvar paren_level_stack_index = 0;\n\tvar paren_level_stack_string = '';\n\tvar\
    \ paren_level_stack_string_index = 0;\n\tvar paren_level_stack_string_value =\
    \ '';\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack_string_value_index\
    \ = 0;\n\tvar paren_level_stack_string_value_index = 0;\n\tvar paren_level_stack\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8vb0h7o6.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    if(paren_string[i] == '('){\n      paren_stack.push(paren_level);\n\
    \      paren_level++;\n    }\n    else if(paren_string[i] == ')'){\n      paren_level\
    \ = paren_stack.pop();\n    }\n    else if(paren_string[i] == ' ' && paren_stack.length){\n\
    \      nested_parens.push(paren_level);\n      paren_level = 0;\n    }\n  }\n\
    \  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmpir9z2j0a.js:31:10)\n    at Object.<anonymous> (/tmp/tmpir9z2j0a.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_char;\n    var paren_level_count = 0;\n    for(var i = 0;\
    \ i < paren_string.length; i++){\n        paren_char = paren_string[i];\n    \
    \    if(paren_char === '('){\n            paren_stack.push(paren_level);\n   \
    \         paren_level++;\n        }else if(paren_char === ')'){\n            paren_level_count\
    \ = paren_stack.pop();\n            paren_level = paren_level_count;\n       \
    \ }\n        nested_parens.push(paren_level);\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0,\
    \ 0, 1, 0, 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmpi18mzefd.js:32:10)\n    at Object.<anonymous> (/tmp/tmpi18mzefd.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2, 1, 0, 0, 1,\n    2, 3,\
    \ 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2, 1,\n    2, 1, 0\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var nested_paren_groups = [];\n\
    \    var paren_groups = paren_string.split(\" \");\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        if(paren_group ===\
    \ \"()\"){\n            nested_paren_stack.push(nested_paren_level);\n       \
    \     nested_paren_level++;\n        }else if(paren_group === \"()\"){\n     \
    \       nested_paren_level--;\n        }\n        if(nested_paren_level === 0){\n\
    \            nested_paren_groups.push(nested_paren_stack);\n            nested_paren_stack\
    \ = [];\n        }\n    }\n    return nested_paren_groups;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [], [] ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmpeolxtiut.js:32:10)\n    at Object.<anonymous> (/tmp/tmpeolxtiut.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ [], [] ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpr2ixe2c7.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = '';\n    var paren_level_string = '';\n \
    \   var paren_level_counter = 0;\n    var paren_level_counter_string = '';\n \
    \   var paren_level_counter_string2 = '';\n    var paren_level_counter_string3\
    \ = '';\n    var paren_level_counter_string4 = '';\n    var paren_level_counter_string5\
    \ = '';\n    var paren_level_counter_string6 = '';\n    var paren_level_counter_string7\
    \ = '';\n    var paren_level_counter_string8 = '';\n    var paren_level_counter_string9\
    \ = '';\n    var paren_level_counter_string10 = '';\n    var paren_level_counter_string11\
    \ = '';\n    var paren_level_counter_string12 = '';\n    var paren_level_counter_string13\
    \ = '';\n    var paren_level_counter_string14 = '';\n    var paren_level_counter_string15\
    \ = '';\n    var paren_level_counter_string16 = '';\n    var paren_level_counter_string17\
    \ = '';\n    var paren_level_counter_string18 = '';\n    var paren_level_counter_string19\
    \ = '';\n    var paren_level_counter_string20 = '';\n    var paren_level_counter_string21\
    \ = '';\n    var paren_level_counter_string22 = '';\n    var paren_level_counter_string23\
    \ = '';\n    var paren_level_counter_string24 = '';\n    var paren_level_counter_string25\
    \ = '';\n    var paren_level_counter_string26 = '';\n    var paren_level_counter_string27\
    \ = '';\n    var paren_level_counter_string28 = '';\n    var paren_level_counter_string29\
    \ = '';\n    var paren_level_counter_string30 = '';\n    var paren_level_counter_string31\
    \ = '';\n    var paren_level_counter_string32 = '';\n    var paren_level_counter_string33\
    \ = '';\n    var paren_level_counter_string34 = '';\n    var paren_level_counter_string35\
    \ = '';\n    var paren_level_counter_string36 = '';\n    var paren_level_counter_string37\
    \ = '';\n    var paren_level_counter_string38 = '';\n    var paren_level_counter_string39\
    \ = '';\n    var paren_level_counter_string40 = '';\n    var paren_level_counter_string41\
    \ = '';\n    var paren_level_counter_string42 = '';\n    var paren_level_counter_string43\
    \ = '';\n    var paren_level_counter_string44 = '';\n    var paren_level_counter_string45\
    \ = '';\n    var paren_level_counter_string46 = '';\n    var paren_level_counter_string47\
    \ = '';\n    var paren_level_counter_string48 = '';\n    var paren_level_counter_string49\
    \ = '';\n    var paren_level_counter_string50 = '';\n    var paren_level_counter_string51\
    \ = '';\n    var paren_level_counter_string52\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpckl6us8c.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i =\
    \ 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n   \
    \     if(char === '('){\n            paren_stack.push(paren_level);\n        \
    \    paren_level++;\n        }else if(char === ')'){\n            paren_level--;\n\
    \            var popped_level = paren_stack.pop();\n            if(popped_level\
    \ === paren_level){\n                nested_parens.push(paren_level);\n      \
    \      }\n        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 1, 0, 2, 1, 0, 0, 2, 1, 1, 1, 0 ]\n\
    \nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpujfwhuy4.js:31:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpujfwhuy4.js:36:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 0, 2, 1,\n    0, 0, 2, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_level\
    \ = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n\
    \    var paren_level_stack_string = '';\n    var paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_string = '';\n    var paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_string = '';\n    var paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_string = '';\n    var\
    \ paren_level_stack_last_paren_level_stack_last_index = 0;\n    var paren_level_stack_last_paren_level_stack_last_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level = 0;\n\
    \    var paren_level_stack_last_paren_level_stack_last_paren_level_string = '';\n\
    \    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = '';\n    for(var i=0; i<paren_string.length; i++){\n        if(paren_string[i]\
    \ == '('){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \            paren_level_string = paren_level.toString();\n            paren_level_stack.push(paren_level_string);\n\
    \            paren_level_stack_index++;\n            paren_level_stack_string\
    \ += paren_level_string;\n            paren_level_stack_last_index = paren_level_string.length;\n\
    \            paren_level_stack_last_string = paren_level_string;\n           \
    \ paren_level_stack_last_paren_level = paren_level;\n            paren_level_stack_last_paren_level_string\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1fxqgh9c.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_levels_string = '';\n    var paren_levels_string_index\
    \ = 0;\n    var paren_levels_string_index2 = 0;\n    var paren_levels_string_index3\
    \ = 0;\n    var paren_levels_string_index4 = 0;\n    var paren_levels_string_index5\
    \ = 0;\n    var paren_levels_string_index6 = 0;\n    var paren_levels_string_index7\
    \ = 0;\n    var paren_levels_string_index8 = 0;\n    var paren_levels_string_index9\
    \ = 0;\n    var paren_levels_string_index10 = 0;\n    var paren_levels_string_index11\
    \ = 0;\n    var paren_levels_string_index12 = 0;\n    var paren_levels_string_index13\
    \ = 0;\n    var paren_levels_string_index14 = 0;\n    var paren_levels_string_index15\
    \ = 0;\n    var paren_levels_string_index16 = 0;\n    var paren_levels_string_index17\
    \ = 0;\n    var paren_levels_string_index18 = 0;\n    var paren_levels_string_index19\
    \ = 0;\n    var paren_levels_string_index20 = 0;\n    var paren_levels_string_index21\
    \ = 0;\n    var paren_levels_string_index22 = 0;\n    var paren_levels_string_index23\
    \ = 0;\n    var paren_levels_string_index24 = 0;\n    var paren_levels_string_index25\
    \ = 0;\n    var paren_levels_string_index26 = 0;\n    var paren_levels_string_index27\
    \ = 0;\n    var paren_levels_string_index28 = 0;\n    var paren_levels_string_index29\
    \ = 0;\n    var paren_levels_string_index30 = 0;\n    var paren_levels_string_index31\
    \ = 0;\n    var paren_levels_string_index32 = 0;\n    var paren_levels_string_index33\
    \ = 0;\n    var paren_levels_string_index34 = 0;\n    var paren_levels_string_index35\
    \ = 0;\n    var paren_levels_string_index36 = 0;\n    var paren_levels_string_index37\
    \ = 0;\n    var paren_levels_string_index38 = 0;\n    var paren_levels_string_index39\
    \ = 0;\n    var paren_levels_string_index40 = 0;\n    var paren_levels_string_index41\
    \ = 0;\n    var paren_levels_string_index42 = 0;\n    var paren_levels_string_index43\
    \ = 0;\n    var paren_levels_string_index44 = 0;\n    var paren_levels_string_index45\
    \ = 0;\n    var paren_levels_string_index46 = 0;\n    var paren_levels_string_index47\
    \ = 0;\n    var paren_levels_string_index48 = 0;\n    var paren_level\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppcjsaq8t.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var nested_paren_level = 0;\n  var nested_paren_stack = [];\n  var paren_stack\
    \ = [];\n  var paren_level = 0;\n  var paren_stack_string = '';\n  var paren_level_string\
    \ = '';\n  var paren_level_stack_string = '';\n  var paren_level_stack = [];\n\
    \  var paren_level_stack_pointer = 0;\n  var paren_level_stack_pointer_pointer\
    \ = 0;\n  var paren_level_stack_pointer_pointer_pointer = 0;\n  var paren_level_stack_pointer_pointer_pointer_pointer\
    \ = 0;\n  var paren_level_stack_pointer_pointer_pointer_pointer_pointer = 0;\n\
    \  var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer = 0;\n\
    \  var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n  var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n  var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpebp0k5am.js:35\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_count = 0;\n    var paren_stack\
    \ = [];\n    var paren_level = [];\n    var paren_level_count = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmyaly5mj.js:83\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_index2\
    \ = 0;\n    var paren_level_stack_index3 = 0;\n    var paren_level_stack_index4\
    \ = 0;\n    var paren_level_stack_index5 = 0;\n    var paren_level_stack_index6\
    \ = 0;\n    var paren_level_stack_index7 = 0;\n    var paren_level_stack_index8\
    \ = 0;\n    var paren_level_stack_index9 = 0;\n    var paren_level_stack_index10\
    \ = 0;\n    var paren_level_stack_index11 = 0;\n    var paren_level_stack_index12\
    \ = 0;\n    var paren_level_stack_index13 = 0;\n    var paren_level_stack_index14\
    \ = 0;\n    var paren_level_stack_index15 = 0;\n    var paren_level_stack_index16\
    \ = 0;\n    var paren_level_stack_index17 = 0;\n    var paren_level_stack_index18\
    \ = 0;\n    var paren_level_stack_index19 = 0;\n    var paren_level_stack_index20\
    \ = 0;\n    var paren_level_stack_index21 = 0;\n    var paren_level_stack_index22\
    \ = 0;\n    var paren_level_stack_index23 = 0;\n    var paren_level_stack_index24\
    \ = 0;\n    var paren_level_stack_index25 = 0;\n    var paren_level_stack_index26\
    \ = 0;\n    var paren_level_stack_index27 = 0;\n    var paren_level_stack_index28\
    \ = 0;\n    var paren_level_stack_index29 = 0;\n    var paren_level_stack_index30\
    \ = 0;\n    var paren_level_stack_index31 = 0;\n    var paren_level_stack_index32\
    \ = 0;\n    var paren_level_stack_index33 = 0;\n    var paren_level_stack_index34\
    \ = 0;\n    var paren_level_stack_index35 = 0;\n    var paren_level_stack_index36\
    \ = 0;\n    var paren_level_stack_index37 = 0;\n    var paren_level_stack_index38\
    \ = 0;\n    var paren_level_stack_index39 = 0;\n    var paren_level_stack_index40\
    \ = 0;\n    var paren_level_stack_index41 = 1;\n    var paren_level_stack_index42\
    \ = 1;\n    var paren_level_stack_index43 = 1;\n    var paren_level_stack_index44\
    \ = 1;\n    var paren_level_stack_index45 = 1;\n    var paren_level_stack_index46\
    \ = 1;\n    var paren_level_stack_index47 = 1;\n    var paren_level_stack_index48\
    \ = 1;\n    var paren_level_stack_index49 = 1;\n    var paren_level_stack_index50\
    \ = 1;\n    var paren_level_stack_index51 = 1;\n    var paren_level_stack_index52\
    \ = 1;\n    var paren_level_stack_index53 = 1;\n    var paren_level_stack_index54\
    \ = 1;\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwzur8ih_.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var nested_paren_level = 0;\n  var paren_level = 0;\n  var paren_stack\
    \ = [];\n  var paren_stack_pointer = 0;\n  var paren_stack_pointer_max = 0;\n\
    \  var paren_stack_pointer_max_index = 0;\n  var paren_stack_pointer_max_index2\
    \ = 0;\n  var paren_stack_pointer_max_index3 = 0;\n  var paren_stack_pointer_max_index4\
    \ = 0;\n  var paren_stack_pointer_max_index5 = 0;\n  var paren_stack_pointer_max_index6\
    \ = 0;\n  var paren_stack_pointer_max_index7 = 0;\n  var paren_stack_pointer_max_index8\
    \ = 0;\n  var paren_stack_pointer_max_index9 = 0;\n  var paren_stack_pointer_max_index10\
    \ = 0;\n  var paren_stack_pointer_max_index11 = 0;\n  var paren_stack_pointer_max_index12\
    \ = 0;\n  var paren_stack_pointer_max_index13 = 0;\n  var paren_stack_pointer_max_index14\
    \ = 0;\n  var paren_stack_pointer_max_index15 = 0;\n  var paren_stack_pointer_max_index16\
    \ = 0;\n  var paren_stack_pointer_max_index17 = 0;\n  var paren_stack_pointer_max_index18\
    \ = 0;\n  var paren_stack_pointer_max_index19 = 0;\n  var paren_stack_pointer_max_index20\
    \ = 0;\n  var paren_stack_pointer_max_index21 = 0;\n  var paren_stack_pointer_max_index22\
    \ = 0;\n  var paren_stack_pointer_max_index23 = 0;\n  var paren_stack_pointer_max_index24\
    \ = 0;\n  var paren_stack_pointer_max_index25 = 0;\n  var paren_stack_pointer_max_index26\
    \ = 0;\n  var paren_stack_pointer_max_index27 = 0;\n  var paren_stack_pointer_max_index28\
    \ = 0;\n  var paren_stack_pointer_max_index29 = 0;\n  var paren_stack_pointer_max_index30\
    \ = 0;\n  var paren_stack_pointer_max_index31 = 0;\n  var paren_stack_pointer_max_index32\
    \ = 0;\n  var paren_stack_pointer_max_index33 = 0;\n  var paren_stack_pointer_max_index34\
    \ = 0;\n  var paren_stack_pointer_max_index35 = 0;\n  var paren_stack_pointer_max_index36\
    \ = 0;\n  var paren_stack_pointer_max_index37 = 0;\n  var paren_stack_pointer_max_index38\
    \ = 0;\n  var paren_stack_pointer_max_index39 = 0;\n  var paren_stack_pointer_max_index40\
    \ = 0;\n  var paren_stack_pointer_max_index41 = 0;\n  var paren_stack_pointer_max_index42\
    \ = 0;\n  var paren_stack_pointer_max_index43 = 0;\n  var paren_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxewnr5o1.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    if(paren_string[i] == '('){\n      paren_stack.push(paren_level);\n\
    \      paren_level++;\n    }\n    else if(paren_string[i] == ')'){\n      paren_level\
    \ = paren_stack.pop();\n    }\n    else if(paren_string[i] == ' ' && paren_stack.length\
    \ > 0){\n      nested_parens.push(paren_level);\n      paren_level = 0;\n    }\n\
    \  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmpgp_5r4u7.js:31:10)\n    at Object.<anonymous> (/tmp/tmpgp_5r4u7.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcp_rbaeq.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_index\
    \ = [];\n    var paren_levels_index[0] = 0;\n    var paren_levels_index[1] = 0;\n\
    \    var paren_levels_index[2] = 0;\n    var paren_levels_index[3] = 0;\n    var\
    \ paren_levels_index[4] = 0;\n    var paren_levels_index[5] = 0;\n    var paren_levels_index[6]\
    \ = 0;\n    var paren_levels_index[7] = 0;\n    var paren_levels_index[8] = 0;\n\
    \    var paren_levels_index[9] = 0;\n    var paren_levels_index[10] = 0;\n   \
    \ var paren_levels_index[11] = 0;\n    var paren_levels_index[12] = 0;\n    var\
    \ paren_levels_index[13] = 0;\n    var paren_levels_index[14] = 0;\n    var paren_levels_index[15]\
    \ = 0;\n    var paren_levels_index[16] = 0;\n    var paren_levels_index[17] =\
    \ 0;\n    var paren_levels_index[18] = 0;\n    var paren_levels_index[19] = 0;\n\
    \    var paren_levels_index[20] = 0;\n    var paren_levels_index[21] = 0;\n  \
    \  var paren_levels_index[22] = 0;\n    var paren_levels_index[23] = 0;\n    var\
    \ paren_levels_index[24] = 0;\n    var paren_levels_index[25] = 0;\n    var paren_levels_index[26]\
    \ = 0;\n    var paren_levels_index[27] = 0;\n    var paren_levels_index[28] =\
    \ 0;\n    var paren_levels_index[29] = 0;\n    var paren_levels_index[30] = 0;\n\
    \    var paren_levels_index[31] = 0;\n    var paren_levels_index[32] = 0;\n  \
    \  var paren_levels_index[33] = 0;\n    var paren_levels_index[34] = 0;\n    var\
    \ paren_levels_index[35] = 0;\n    var paren_levels_index[36] = 0;\n    var paren_levels_index[37]\
    \ = 0;\n    var paren_levels_index[38] = 0;\n    var paren_levels_index[39] =\
    \ 0;\n    var paren_levels_index[40] = 0;\n    var paren_levels_index[41] = 0;\n\
    \    var paren_levels_index[42] = 0;\n    var paren_levels_index[43] = 0;\n  \
    \  var paren_levels_index[44] = 0;\n    var paren_levels_index[45] = 0;\n    var\
    \ paren_levels_index[46] = 0;\n    var paren_levels_index[47] = 0;\n    var paren_levels_index[48]\
    \ = 0;\n    var paren_levels_index[49] = 0;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpepkpdp5l.js:11\n    var paren_levels_index[0] = 0;\n          \
    \                ^\n\nSyntaxError: Unexpected token '['\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_char;\n\
    \  var paren_char_level;\n  var paren_char_level_stack = [];\n  var paren_char_level_stack_count\
    \ = 0;\n  var paren_char_level_stack_max = 0;\n  var paren_char_level_stack_max_index\
    \ = 0;\n  var paren_char_level_stack_max_count = 0;\n  var paren_char_level_stack_max_char;\n\
    \  var paren_char_level_stack_max_char_level;\n  var paren_char_level_stack_max_char_level_stack\
    \ = [];\n  var paren_char_level_stack_max_char_level_stack_count = 0;\n  var paren_char_level_stack_max_char_level_stack_max\
    \ = 0;\n  var paren_char_level_stack_max_char_level_stack_max_index = 0;\n  var\
    \ paren_char_level_stack_max_char_level_stack_max_count = 0;\n  var paren_char_level_stack_max_char_level_stack_max_char;\n\
    \  var paren_char_level_stack_max_char_level_stack_max_char_level;\n  var paren_char_level_stack_max_char_level_stack_max_char_level_stack\
    \ = [];\n  var paren_char_level_stack_max_char_level_stack_max_char_level_stack_count\
    \ = 0;\n  var paren_char_level_stack_max_char_level_stack_max_char_level_stack_max\
    \ = 0;\n  var paren_char_level_stack_max_char_level_stack_max_char_level_stack_max_index\
    \ = 0;\n  var paren_char_level_stack_max_char_level_stack_max_char_level_stack_max_count\
    \ = 0;\n  var paren_char_level_stack_max_char_level_stack_max_char_level_stack_max_char;\n\
    \  var paren_char_level_stack_max_char_level_stack_max_char_level_stack_max_char_level;\n\
    \  var paren_char_level_stack_max_char_level_stack_max_char_level_stack_max_char_level_stack\
    \ = [];\n  var paren_char_level_stack_max_char_level_stack_max_char_level_stack_max_char_level_stack_count\
    \ = 0;\n  for(var i=0; i<paren_string.length; i++){\n    paren_char = paren_string[i];\n\
    \    paren_char_level = paren_char.charCodeAt(0);\n    paren_char_level_stack_count\
    \ = 0;\n    paren_char_level_stack_max = 0;\n    paren_char_level_stack_max_index\
    \ = 0;\n    paren_char_level_stack_max_count = 0;\n    paren_char_level_stack_max_char\
    \ = '';\n    paren_char_level_stack_max_char_level = 0;\n    paren_char_level_stack_max_char_level_stack\
    \ = [];\n    paren_char_level_stack_max_char_level_stack_count = 0;\n    paren_char_level_stack_max_char_level_stack_max\
    \ = 0;\n    paren_char_level_stack_max_char_level_stack_max_index = 0;\n    paren_char_level_stack_max_char_level_stack_max_count\
    \ = 0;\n    paren_char_level_stack_max_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpm2j4qz6m.js:60\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = \"\";\n    var paren_level_string = \"\"\
    ;\n    var paren_level_counter = 0;\n    var paren_level_counter_string = \"\"\
    ;\n    var paren_level_counter_string2 = \"\";\n    var paren_level_counter_string3\
    \ = \"\";\n    var paren_level_counter_string4 = \"\";\n    var paren_level_counter_string5\
    \ = \"\";\n    var paren_level_counter_string6 = \"\";\n    var paren_level_counter_string7\
    \ = \"\";\n    var paren_level_counter_string8 = \"\";\n    var paren_level_counter_string9\
    \ = \"\";\n    var paren_level_counter_string10 = \"\";\n    var paren_level_counter_string11\
    \ = \"\";\n    var paren_level_counter_string12 = \"\";\n    var paren_level_counter_string13\
    \ = \"\";\n    var paren_level_counter_string14 = \"\";\n    var paren_level_counter_string15\
    \ = \"\";\n    var paren_level_counter_string16 = \"\";\n    var paren_level_counter_string17\
    \ = \"\";\n    var paren_level_counter_string18 = \"\";\n    var paren_level_counter_string19\
    \ = \"\";\n    var paren_level_counter_string20 = \"\";\n    var paren_level_counter_string21\
    \ = \"\";\n    var paren_level_counter_string22 = \"\";\n    var paren_level_counter_string23\
    \ = \"\";\n    var paren_level_counter_string24 = \"\";\n    var paren_level_counter_string25\
    \ = \"\";\n    var paren_level_counter_string26 = \"\";\n    var paren_level_counter_string27\
    \ = \"\";\n    var paren_level_counter_string28 = \"\";\n    var paren_level_counter_string29\
    \ = \"\";\n    var paren_level_counter_string30 = \"\";\n    var paren_level_counter_string31\
    \ = \"\";\n    var paren_level_counter_string32 = \"\";\n    var paren_level_counter_string33\
    \ = \"\";\n    var paren_level_counter_string34 = \"\";\n    var paren_level_counter_string35\
    \ = \"\";\n    var paren_level_counter_string36 = \"\";\n    var paren_level_counter_string37\
    \ = \"\";\n    var paren_level_counter_string38 = \"\";\n    var paren_level_counter_string39\
    \ = \"\";\n    var paren_level_counter_string40 = \"\";\n    var paren_level_counter_string41\
    \ = \"\";\n    var paren_level_counter_string42 = \"\";\n    var paren_level_counter_string43\
    \ = \"\";\n    var paren_level_counter_string44 = \"\";\n    var paren_level_counter_string45\
    \ = \"\";\n    var paren_level_counter_string46 = \"\";\n    var paren_level_counter_string47\
    \ = \"\";\n    var paren_level_counter_string48 = \"\";\n    var paren_level_counter_string49\
    \ = \"\";\n    var paren_level_counter_string50 = \"\";\n    var paren_level_counter_string51\
    \ = \"\";\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3om3qp44.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_stack_level\
    \ = 0;\n  var paren_stack_max = 0;\n  var paren_stack_max_index = 0;\n  var paren_stack_max_level\
    \ = 0;\n  var paren_stack_max_level_char = '';\n  var paren_stack_max_level_char_index\
    \ = 0;\n  var paren_stack_max_level_char_length = 0;\n  var paren_stack_max_level_char_length_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_char_length_value_index\
    \ = 0;\n  var paren_stack_max_level_char_length_value_index = 0;\n  var paren_stack_max_level_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6k5ohlgh.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = '';\n    var paren_level_string = '';\n \
    \   var paren_level_counter = 0;\n    var paren_level_counter_string = '';\n \
    \   var paren_level_counter_max = 0;\n    var paren_level_counter_max_string =\
    \ '';\n    var paren_level_counter_max_counter = 0;\n    var paren_level_counter_max_counter_string\
    \ = '';\n    var paren_level_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_string\
    \ = '';\n    var paren_level_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_string = '';\n   \
    \ var paren_level_counter_max_counter_max_counter_max = 0;\n    var paren_level_counter_max_counter_max_counter_max_string\
    \ = '';\n    var paren_level_counter_max_counter_max_counter_max = 0;\n    var\
    \ paren_level_counter_max_counter_max_counter_max_counter = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_string\
    \ = '';\n    var paren_level_counter_max_counter_max_counter_max_counter_max =\
    \ 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_string\
    \ = '';\n    var paren_level_counter_max_counter_max_counter_max_counter_max =\
    \ 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = '';\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = '';\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_string\
    \ = '';\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max_counter_max\
    \ = 0;\n    var paren_level_counter_max_counter_max_counter_max_counter_max_counter_max_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3qgrk1r0.js:57\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = '';\n    var paren_level_string = '';\n \
    \   var paren_level_counter = 0;\n    var paren_level_counter_string = '';\n \
    \   var paren_level_counter_string2 = '';\n    var paren_level_counter_string3\
    \ = '';\n    var paren_level_counter_string4 = '';\n    var paren_level_counter_string5\
    \ = '';\n    var paren_level_counter_string6 = '';\n    var paren_level_counter_string7\
    \ = '';\n    var paren_level_counter_string8 = '';\n    var paren_level_counter_string9\
    \ = '';\n    var paren_level_counter_string10 = '';\n    var paren_level_counter_string11\
    \ = '';\n    var paren_level_counter_string12 = '';\n    var paren_level_counter_string13\
    \ = '';\n    var paren_level_counter_string14 = '';\n    var paren_level_counter_string15\
    \ = '';\n    var paren_level_counter_string16 = '';\n    var paren_level_counter_string17\
    \ = '';\n    var paren_level_counter_string18 = '';\n    var paren_level_counter_string19\
    \ = '';\n    var paren_level_counter_string20 = '';\n    var paren_level_counter_string21\
    \ = '';\n    var paren_level_counter_string22 = '';\n    var paren_level_counter_string23\
    \ = '';\n    var paren_level_counter_string24 = '';\n    var paren_level_counter_string25\
    \ = '';\n    var paren_level_counter_string26 = '';\n    var paren_level_counter_string27\
    \ = '';\n    var paren_level_counter_string28 = '';\n    var paren_level_counter_string29\
    \ = '';\n    var paren_level_counter_string30 = '';\n    var paren_level_counter_string31\
    \ = '';\n    var paren_level_counter_string32 = '';\n    var paren_level_counter_string33\
    \ = '';\n    var paren_level_counter_string34 = '';\n    var paren_level_counter_string35\
    \ = '';\n    var paren_level_counter_string36 = '';\n    var paren_level_counter_string37\
    \ = '';\n    var paren_level_counter_string38 = '';\n    var paren_level_counter_string39\
    \ = '';\n    var paren_level_counter_string40 = '';\n    var paren_level_counter_string41\
    \ = '';\n    var paren_level_counter_string42 = '';\n    var paren_level_counter_string43\
    \ = '';\n    var paren_level_counter_string44 = '';\n    var paren_level_counter_string45\
    \ = '';\n    var paren_level_counter_string46 = '';\n    var paren_level_counter_string47\
    \ = '';\n    var paren_level_counter_string48 = '';\n    var paren_level_counter_string49\
    \ = '';\n    var paren_level_counter_string50 = '';\n    var paren_level_counter_string51\
    \ = '';\n    var paren_level_counter_string52\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpee0cylpf.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    paren_string\
    \ = paren_string.replace(/\\s+/g, '');\n    paren_string = paren_string.replace(/^\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+$/, '');\n    paren_string\
    \ = paren_string.replace(/^\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+$/, '');\n    paren_string = paren_string.replace(/^\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+$/, '');\n    paren_string = paren_string.replace(/^\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+$/, '');\n    paren_string\
    \ = paren_string.replace(/^\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+$/, '');\n    paren_string = paren_string.replace(/^\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+$/, '');\n    paren_string = paren_string.replace(/^\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+$/, '');\n    paren_string\
    \ = paren_string.replace(/^\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+$/, '');\n    paren_string = paren_string.replace(/^\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+$/, '');\n    paren_string = paren_string.replace(/^\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+$/, '');\n    paren_string\
    \ = paren_string.replace(/^\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+$/, '');\n    paren_string = paren_string.replace(/^\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+$/, '');\n    paren_string = paren_string.replace(/^\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+$/, '');\n    paren_string\
    \ = paren_string.replace(/^\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+$/, '');\n    paren_string = paren_string.replace(/^\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+$/, '');\n    paren_string = paren_string.replace(/^\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+$/, '');\n    paren_string\
    \ = paren_string.replace(/^\\s+/, '');\n    paren_string = paren_string.replace(/\\\
    s+$/, '');\n    paren_string = paren_string.replace(/^\\s+/, '');\n    paren_string\
    \ = paren_string.replace(/\\s+$/, '');\n    paren_string = paren_string.replace(/^\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\s+$/, '');\n    paren_string\
    \ = paren_string.replace(/^\\s+\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwdaw_xln.js:49\n    paren_string = paren_string.replace(/^\\s+\n\
    \                                        ^\n\nSyntaxError: Invalid regular expression:\
    \ missing /\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var max_level = 0;\n    var paren_stack = [];\n    var paren_level =\
    \ [];\n    var paren_level_stack = [];\n    var paren_level_stack_index = 0;\n\
    \    var paren_level_stack_string = '';\n    var paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_string = '';\n    var paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack = [];\n    var paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_string = '';\n    var\
    \ paren_level_stack_last_paren_level_stack_last_index = 0;\n    var paren_level_stack_last_paren_level_stack_last_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level = 0;\n\
    \    var paren_level_stack_last_paren_level_stack_last_paren_level_stack = [];\n\
    \    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = '';\n    \n    for(var i=0; i<paren_string.length; i++){\n        var char\
    \ = paren_string[i];\n        \n        if(char === '('){\n            paren_stack.push(paren_level.length);\n\
    \            paren_level.push(level);\n            paren_level_stack.push(paren_level_stack_index);\n\
    \            paren_level_stack_string += char;\n            paren_level_stack_index\
    \ += 1;\n        }\n        else if(char === ')'){\n            paren_level.pop();\n\
    \            paren_level_stack.pop();\n            paren_level_stack_string +=\
    \ char;\n            paren_level_stack_index -= 1;\n        }\n        else if(char\
    \ === ' '){\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6itmeltn.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  for(var i=0; i<paren_string.length; i++){\n    if(paren_string[i] == '('){\n\
    \      paren_stack.push(paren_count);\n      paren_count++;\n    }\n    else if(paren_string[i]\
    \ == ')'){\n      paren_count = paren_stack.pop();\n    }\n    else if(paren_string[i]\
    \ == ' ' && paren_stack.length){\n      paren_count = paren_stack[paren_stack.length-1];\n\
    \    }\n    else if(paren_string[i] == ' ' && paren_count == 0){\n      nested_parens.push(paren_level);\n\
    \      paren_level++;\n    }\n  }\n  return nested_parens;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmp_u1vzd3w.js:35:10)\n    at Object.<anonymous> (/tmp/tmp_u1vzd3w.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  for(var i=0; i<paren_string.length; i++){\n\
    \    if(paren_string[i] == '('){\n      paren_count++;\n    }else if(paren_string[i]\
    \ == ')'){\n      paren_count--;\n    }\n    if(paren_count == 0){\n      nested_parens.push(paren_count);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0, 0, 0, 0 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpumfhip9i.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpumfhip9i.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    var paren_stack_string = '';\n    var paren_level_string = '';\n \
    \   var paren_string = paren_string.replace(/\\s+/g, '');\n    var paren_array\
    \ = paren_string.split('');\n    var paren_array_length = paren_array.length;\n\
    \    for(var i = 0; i < paren_array_length; i++){\n        var current_char =\
    \ paren_array[i];\n        if(current_char == '('){\n            paren_stack.push(current_char);\n\
    \            paren_level++;\n            paren_level_string += current_char;\n\
    \        }else if(current_char == ')'){\n            paren_level--;\n        \
    \    paren_level_string += current_char;\n            paren_stack_string = paren_stack_string.slice(0,\
    \ paren_level_string.length);\n            if(paren_stack.length == 0){\n    \
    \            nested_paren_count += paren_level;\n            }\n        }else\
    \ if(current_char == ' '){\n            if(paren_stack.length == 0){\n       \
    \         nested_paren_count += paren_level;\n            }\n        }\n    }\n\
    \    return nested_paren_count;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n  \
    \  at test (/tmp/tmpc47dqmkn.js:43:10)\n    at Object.<anonymous> (/tmp/tmpc47dqmkn.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var opening_paren_level = 0;\n  var opening_paren_char\
    \ = '';\n  var opening_paren_char_count = 0;\n  var opening_paren_char_prev =\
    \ '';\n  var opening_paren_char_next = '';\n  var opening_paren_char_next_count\
    \ = 0;\n  var opening_paren_char_next_prev = '';\n  var opening_paren_char_next_next\
    \ = '';\n  var opening_paren_char_next_next_count = 0;\n  var opening_paren_char_next_next_prev\
    \ = '';\n  var opening_paren_char_next_next_next = '';\n  var opening_paren_char_next_next_next_count\
    \ = 0;\n  var opening_paren_char_next_next_next_prev = '';\n  var opening_paren_char_next_next_next_next\
    \ = '';\n  var opening_paren_char_next_next_next_next_count = 0;\n  var opening_paren_char_next_next_next_next_prev\
    \ = '';\n  var opening_paren_char_next_next_next_next_next = '';\n  var opening_paren_char_next_next_next_next_count\
    \ = 0;\n  var opening_paren_char_next_next_next_next_prev = '';\n  var opening_paren_char_next_next_next_next_next\
    \ = '';\n  var opening_paren_char_next_next_next_next_count = 0;\n  var opening_paren_char_next_next_next_next_prev\
    \ = '';\n  var opening_paren_char_next_next_next_next_next = '';\n  var opening_paren_char_next_next_next_next_count\
    \ = 0;\n  var opening_paren_char_next_next_next_next_prev = '';\n  var opening_paren_char_next_next_next_next_next\
    \ = '';\n  var opening_paren_char_next_next_next_next_count = 0;\n  var opening_paren_char_next_next_next_next_prev\
    \ = '';\n  var opening_paren_char_next_next_next_next_next = '';\n  var opening_paren_char_next_next_next_next_count\
    \ = 0;\n  var opening_paren_char_next_next_next_next_prev = '';\n  var opening_paren_char_next_next_next_next_next\
    \ = '';\n  var opening_paren_char_next_next_next_next_count = 0;\n  var opening_paren_char_next_next_next_next_prev\
    \ = '';\n  var opening_paren_char_next_next_next_next_next = '';\n  var opening_paren_char_next_next_next_next_count\
    \ = 0;\n  var opening_paren_char_next_next_next_next_prev = '';\n  var opening_paren_char_next_next_next_next_next\
    \ = '';\n  var opening_paren_char_next_next_next_next_count = 0;\n  var opening_paren_char_next_next_next_next_prev\
    \ = '';\n  var opening_paren_char_next_next_next_next_next = '';\n  var opening_paren_char_next_next_next_next_count\
    \ = 0;\n  var opening_paren_char_next_next_next_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7fd3miph.js:62\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_level_stack\
    \ = [];\n  var paren_level_stack_count = 0;\n  var paren_level_stack_string =\
    \ '';\n  var paren_level_stack_last_char = '';\n  var paren_level_stack_last_char_length\
    \ = 0;\n  var paren_level_stack_last_char_position = 0;\n  var paren_level_stack_last_char_position_index\
    \ = 0;\n  var paren_level_stack_last_char_position_index2 = 0;\n  var paren_level_stack_last_char_position_index3\
    \ = 0;\n  var paren_level_stack_last_char_position_index4 = 0;\n  var paren_level_stack_last_char_position_index5\
    \ = 0;\n  var paren_level_stack_last_char_position_index6 = 0;\n  var paren_level_stack_last_char_position_index7\
    \ = 0;\n  var paren_level_stack_last_char_position_index8 = 0;\n  var paren_level_stack_last_char_position_index9\
    \ = 0;\n  var paren_level_stack_last_char_position_index10 = 0;\n  var paren_level_stack_last_char_position_index11\
    \ = 0;\n  var paren_level_stack_last_char_position_index12 = 0;\n  var paren_level_stack_last_char_position_index13\
    \ = 0;\n  var paren_level_stack_last_char_position_index14 = 0;\n  var paren_level_stack_last_char_position_index15\
    \ = 0;\n  var paren_level_stack_last_char_position_index16 = 0;\n  var paren_level_stack_last_char_position_index17\
    \ = 0;\n  var paren_level_stack_last_char_position_index18 = 0;\n  var paren_level_stack_last_char_position_index19\
    \ = 0;\n  var paren_level_stack_last_char_position_index20 = 0;\n  var paren_level_stack_last_char_position_index21\
    \ = 0;\n  var paren_level_stack_last_char_position_index22 = 0;\n  var paren_level_stack_last_char_position_index23\
    \ = 0;\n  var paren_level_stack_last_char_position_index24 = 0;\n  var paren_level_stack_last_char_position_index25\
    \ = 0;\n  var paren_level_stack_last_char_position_index26 = 0;\n  var paren_level_stack_last_char_position_index27\
    \ = 0;\n  var paren_level_stack_last_char_position_index28 = 0;\n  var paren_level_stack_last_char_position_index29\
    \ = 0;\n  var paren_level_stack_last_char_position_index30 = 0;\n  var paren_level_stack_last_char_position_index31\
    \ = 0;\n  var paren_level_stack_last_char_position_index32 = 0;\n  var paren_level_stack_last_char_position_index33\
    \ = 0;\n  var paren_level_stack_last_char_position_index34 = 0;\n  var paren_level_stack_last_char_position_index35\
    \ = 0;\n  var paren_level_stack_last_char_position_index36 = 0;\n  var paren_level_stack_last_char_position_index37\
    \ = 0;\n  var paren_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpanx9i7zf.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = 0;\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char == '('){\n     \
    \       paren_stack.push(paren_level);\n            paren_level_stack.push(paren_level);\n\
    \            paren_level_stack_count++;\n        }else if(char == ')'){\n    \
    \        paren_level = paren_stack.pop();\n            paren_level_stack_count--;\n\
    \        }else if(char == ' ' && paren_level_stack_count > 0){\n            paren_level_stack_count--;\n\
    \        }else if(char == ' ' && paren_level_stack_count == 0){\n            nested_parens.push(paren_level);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmpxtszhjbf.js:35:10)\n    at Object.<anonymous> (/tmp/tmpxtszhjbf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_nesting_levels = [];\n    var paren_levels_length = 0;\n\
    \    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == '('){\n            paren_stack.push(paren_level);\n      \
    \      paren_level++;\n            paren_nesting++;\n            paren_levels.push(paren_level);\n\
    \            paren_nesting_levels.push(paren_nesting);\n            paren_levels_length++;\n\
    \        }else if(char == ')'){\n            paren_level--;\n            paren_nesting--;\n\
    \            paren_levels_length--;\n            paren_levels.push(paren_level);\n\
    \            paren_nesting_levels.push(paren_nesting);\n        }\n    }\n   \
    \ while(paren_stack.length > 0){\n        paren_levels.pop();\n        paren_nesting_levels.pop();\n\
    \    }\n    return paren_levels;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    var paren_level_counter\
    \ = 0;\n    var paren_level_counters = [];\n    var paren_level_counters_stack\
    \ = [];\n    var paren_level_counters_stack_index = 0;\n    var paren_level_counters_stack_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_indexes\
    \ = [];\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_counters_stack_indexes_index\
    \ = 0;\n    var paren_level_counters_stack_indexes_index = 0;\n    var paren_level_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp62xyrxlz.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_level_count = {};\n    var paren_level_count_stack = [];\n\
    \    var paren_level_count_stack_index = 0;\n    var paren_level_count_stack_index2\
    \ = 0;\n    var paren_level_count_stack_index3 = 0;\n    var paren_level_count_stack_index4\
    \ = 0;\n    var paren_level_count_stack_index5 = 0;\n    var paren_level_count_stack_index6\
    \ = 0;\n    var paren_level_count_stack_index7 = 0;\n    var paren_level_count_stack_index8\
    \ = 0;\n    var paren_level_count_stack_index9 = 0;\n    var paren_level_count_stack_index10\
    \ = 0;\n    var paren_level_count_stack_index11 = 0;\n    var paren_level_count_stack_index12\
    \ = 0;\n    var paren_level_count_stack_index13 = 0;\n    var paren_level_count_stack_index14\
    \ = 0;\n    var paren_level_count_stack_index15 = 0;\n    var paren_level_count_stack_index16\
    \ = 0;\n    var paren_level_count_stack_index17 = 0;\n    var paren_level_count_stack_index18\
    \ = 0;\n    var paren_level_count_stack_index19 = 0;\n    var paren_level_count_stack_index20\
    \ = 0;\n    var paren_level_count_stack_index21 = 0;\n    var paren_level_count_stack_index22\
    \ = 0;\n    var paren_level_count_stack_index23 = 0;\n    var paren_level_count_stack_index24\
    \ = 0;\n    var paren_level_count_stack_index25 = 0;\n    var paren_level_count_stack_index26\
    \ = 0;\n    var paren_level_count_stack_index27 = 0;\n    var paren_level_count_stack_index28\
    \ = 0;\n    var paren_level_count_stack_index29 = 0;\n    var paren_level_count_stack_index30\
    \ = 0;\n    var paren_level_count_stack_index31 = 0;\n    var paren_level_count_stack_index32\
    \ = 0;\n    var paren_level_count_stack_index33 = 0;\n    var paren_level_count_stack_index34\
    \ = 0;\n    var paren_level_count_stack_index35 = 0;\n    var paren_level_count_stack_index36\
    \ = 0;\n    var paren_level_count_stack_index37 = 0;\n    var paren_level_count_stack_index38\
    \ = 0;\n    var paren_level_count_stack_index39 = 0;\n    var paren_level_count_stack_index40\
    \ = 0;\n    var paren_level_count_stack_index41 = 0;\n    var paren_level_count_stack_index42\
    \ = 0;\n    var paren_level_count_stack_index43 = 0;\n    var paren_level_count_stack_index44\
    \ = 0;\n    var paren_level_count_stack_index45 = 0;\n    var paren_level_count_stack_index46\
    \ = 0;\n    var paren_level_count_stack_index47 = 0;\n    var paren_level_count_stack\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpca_xlezm.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_stack\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_nesting_max\
    \ = 0;\n\tvar paren_nesting_level = 0;\n\tvar paren_nesting_level_max = 0;\n\t\
    var paren_nesting_level_max_index = 0;\n\tvar paren_nesting_level_max_index2 =\
    \ 0;\n\tvar paren_nesting_level_max_index3 = 0;\n\tvar paren_nesting_level_max_index4\
    \ = 0;\n\tvar paren_nesting_level_max_index5 = 0;\n\tvar paren_nesting_level_max_index6\
    \ = 0;\n\tvar paren_nesting_level_max_index7 = 0;\n\tvar paren_nesting_level_max_index8\
    \ = 0;\n\tvar paren_nesting_level_max_index9 = 0;\n\tvar paren_nesting_level_max_index10\
    \ = 0;\n\tvar paren_nesting_level_max_index11 = 0;\n\tvar paren_nesting_level_max_index12\
    \ = 0;\n\tvar paren_nesting_level_max_index13 = 0;\n\tvar paren_nesting_level_max_index14\
    \ = 0;\n\tvar paren_nesting_level_max_index15 = 0;\n\tvar paren_nesting_level_max_index16\
    \ = 0;\n\tvar paren_nesting_level_max_index17 = 0;\n\tvar paren_nesting_level_max_index18\
    \ = 0;\n\tvar paren_nesting_level_max_index19 = 0;\n\tvar paren_nesting_level_max_index20\
    \ = 0;\n\tvar paren_nesting_level_max_index21 = 0;\n\tvar paren_nesting_level_max_index22\
    \ = 0;\n\tvar paren_nesting_level_max_index23 = 0;\n\tvar paren_nesting_level_max_index24\
    \ = 0;\n\tvar paren_nesting_level_max_index25 = 0;\n\tvar paren_nesting_level_max_index26\
    \ = 0;\n\tvar paren_nesting_level_max_index27 = 0;\n\tvar paren_nesting_level_max_index28\
    \ = 0;\n\tvar paren_nesting_level_max_index29 = 0;\n\tvar paren_nesting_level_max_index30\
    \ = 0;\n\tvar paren_nesting_level_max_index31 = 0;\n\tvar paren_nesting_level_max_index32\
    \ = 0;\n\tvar paren_nesting_level_max_index33 = 0;\n\tvar paren_nesting_level_max_index34\
    \ = 0;\n\tvar paren_nesting_level_max_index35 = 0;\n\tvar paren_nesting_level_max_index36\
    \ = 0;\n\tvar paren_nesting_level_max_index37 = 0;\n\tvar paren_nesting_level_max_index38\
    \ = 0;\n\tvar paren_nesting_level_max_index39 = 0;\n\tvar paren_nesting_level_max_index40\
    \ = 0;\n\tvar paren_nesting_level_max_index41 = 1;\n\tvar paren_nesting_level_max_index42\
    \ = 1;\n\tvar paren_nesting_level_max_index43 = 1;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprhnsc0sf.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_count\
    \ = 0;\n\tvar nested_paren_level = 0;\n\tvar paren_level = 0;\n\tvar paren_stack\
    \ = [];\n\tvar paren_stack_pointer = 0;\n\tvar paren_stack_pointer_max = 0;\n\t\
    var paren_stack_pointer_max_index = 0;\n\tvar paren_stack_pointer_max_index2 =\
    \ 0;\n\tvar paren_stack_pointer_max_index3 = 0;\n\tvar paren_stack_pointer_max_index4\
    \ = 0;\n\tvar paren_stack_pointer_max_index5 = 0;\n\tvar paren_stack_pointer_max_index6\
    \ = 0;\n\tvar paren_stack_pointer_max_index7 = 0;\n\tvar paren_stack_pointer_max_index8\
    \ = 0;\n\tvar paren_stack_pointer_max_index9 = 0;\n\tvar paren_stack_pointer_max_index10\
    \ = 0;\n\tvar paren_stack_pointer_max_index11 = 0;\n\tvar paren_stack_pointer_max_index12\
    \ = 0;\n\tvar paren_stack_pointer_max_index13 = 0;\n\tvar paren_stack_pointer_max_index14\
    \ = 0;\n\tvar paren_stack_pointer_max_index15 = 0;\n\tvar paren_stack_pointer_max_index16\
    \ = 0;\n\tvar paren_stack_pointer_max_index17 = 0;\n\tvar paren_stack_pointer_max_index18\
    \ = 0;\n\tvar paren_stack_pointer_max_index19 = 0;\n\tvar paren_stack_pointer_max_index20\
    \ = 0;\n\tvar paren_stack_pointer_max_index21 = 0;\n\tvar paren_stack_pointer_max_index22\
    \ = 0;\n\tvar paren_stack_pointer_max_index23 = 0;\n\tvar paren_stack_pointer_max_index24\
    \ = 0;\n\tvar paren_stack_pointer_max_index25 = 0;\n\tvar paren_stack_pointer_max_index26\
    \ = 0;\n\tvar paren_stack_pointer_max_index27 = 0;\n\tvar paren_stack_pointer_max_index28\
    \ = 0;\n\tvar paren_stack_pointer_max_index29 = 0;\n\tvar paren_stack_pointer_max_index30\
    \ = 0;\n\tvar paren_stack_pointer_max_index31 = 0;\n\tvar paren_stack_pointer_max_index32\
    \ = 0;\n\tvar paren_stack_pointer_max_index33 = 0;\n\tvar paren_stack_pointer_max_index34\
    \ = 0;\n\tvar paren_stack_pointer_max_index35 = 0;\n\tvar paren_stack_pointer_max_index36\
    \ = 0;\n\tvar paren_stack_pointer_max_index37 = 0;\n\tvar paren_stack_pointer_max_index38\
    \ = 0;\n\tvar paren_stack_pointer_max_index39 = 0;\n\tvar paren_stack_pointer_max_index40\
    \ = 0;\n\tvar paren_stack_pointer_max_index41 = 0;\n\tvar paren_stack_pointer_max_index42\
    \ = 0;\n\tvar paren_stack_pointer_max_index43 = 0;\n\tvar paren_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp78jp1xvr.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    for(var i = 0;\
    \ i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n      \
    \      paren_level++;\n        }\n        else if(paren_string[i] == ')'){\n \
    \           paren_level--;\n        }\n        if(paren_level == 0){\n       \
    \     nested_parens.push(paren_count);\n        }\n        paren_count++;\n  \
    \  }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 6, 12, 13, 15, 16, 26 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpy1vzttso.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy1vzttso.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     5,\
    \  6, 12, 13,\n    15, 16, 26\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_stack\
    \ = [];\n    var paren_levels_stack_index = 0;\n    var paren_levels_stack_indexes\
    \ = [];\n    var paren_levels_stack_indexes_index = 0;\n    var paren_levels_stack_indexes_length\
    \ = 0;\n    var paren_levels_stack_indexes_max = 0;\n    var paren_levels_stack_indexes_maxLength\
    \ = 0;\n    var paren_levels_stack_indexes_maxIndex = 0;\n    var paren_levels_stack_indexes_min\
    \ = 0;\n    var paren_levels_stack_indexes_minLength = 0;\n    var paren_levels_stack_indexes_minIndex\
    \ = 0;\n    var paren_levels_stack_indexes_sum = 0;\n    var paren_levels_stack_indexes_sumLength\
    \ = 0;\n    var paren_levels_stack_indexes_sumIndex = 0;\n    var paren_levels_stack_indexes_product\
    \ = 1;\n    var paren_levels_stack_indexes_productLength = 0;\n    var paren_levels_stack_indexes_productIndex\
    \ = 0;\n    var paren_levels_stack_indexes_productSum = 0;\n    var paren_levels_stack_indexes_productSumLength\
    \ = 0;\n    var paren_levels_stack_indexes_productSumIndex = 0;\n    var paren_levels_stack_indexes_productProduct\
    \ = 1;\n    var paren_levels_stack_indexes_productProductLength = 0;\n    var\
    \ paren_levels_stack_indexes_productProductIndex = 0;\n    var paren_levels_stack_indexes_productProductSum\
    \ = 0;\n    var paren_levels_stack_indexes_productProductSumLength = 0;\n    var\
    \ paren_levels_stack_indexes_productProductSumIndex = 0;\n    var paren_levels_stack_indexes_productProductProduct\
    \ = 1;\n    var paren_levels_stack_indexes_productProductProductLength = 0;\n\
    \    var paren_levels_stack_indexes_productProductProductIndex = 0;\n    var paren_levels_stack_indexes_productProductProductSum\
    \ = 0;\n    var paren_levels_stack_indexes_productProductProductSumLength = 0;\n\
    \    var paren_levels_stack_indexes_productProductProductSumIndex = 0;\n    var\
    \ paren_levels_stack_indexes_productProductProductProduct = 1;\n    var paren_levels_stack_indexes_productProductProductProductLength\
    \ = 0;\n    var paren_levels_stack_indexes_productProductProductProductIndex =\
    \ 0;\n    var paren_levels_stack_indexes_productProductProductProductSum = 0;\n\
    \    var paren_levels_stack_indexes_productProductProductProductSumLength = 0;\n\
    \    var paren_levels_stack_indexes_productProductProductProductSumIndex = 0;\n\
    \    var paren_levels_stack_indexes_productProductProductProductProduct = 1;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgzp2md75.js:59\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var paren_level = 0;\n    var paren_groups = [];\n    var paren_group_string\
    \ = '';\n    var paren_group_level = 0;\n    var paren_group_level_string = '';\n\
    \    var paren_group_level_array = [];\n    var paren_group_level_array_string\
    \ = '';\n    var paren_group_level_array_index = 0;\n    var paren_group_level_array_length\
    \ = 0;\n    var paren_group_level_array_current_index = 0;\n    var paren_group_level_array_current_length\
    \ = 0;\n    var paren_group_level_array_current_string = '';\n    var paren_group_level_array_current_level\
    \ = 0;\n    var paren_group_level_array_current_level_string = '';\n    var paren_group_level_array_current_level_array\
    \ = [];\n    var paren_group_level_array_current_level_array_string = '';\n  \
    \  var paren_group_level_array_current_level_array_index = 0;\n    var paren_group_level_array_current_level_array_length\
    \ = 0;\n    var paren_group_level_array_current_level_array_current_index = 0;\n\
    \    var paren_group_level_array_current_level_array_current_length = 0;\n   \
    \ var paren_group_level_array_current_level_array_current_string = '';\n    var\
    \ paren_group_level_array_current_level_array_current_level = 0;\n    var paren_group_level_array_current_level_array_current_level_string\
    \ = '';\n    var paren_group_level_array_current_level_array_current_level_array\
    \ = [];\n    var paren_group_level_array_current_level_array_current_level_array_string\
    \ = '';\n    var paren_group_level_array_current_level_array_current_level_array_index\
    \ = 0;\n    var paren_group_level_array_current_level_array_current_level_array_length\
    \ = 0;\n    var paren_group_level_array_current_level_array_current_level_array_current_index\
    \ = 0;\n    var paren_group_level_array_current_level_array_current_level_array_current_length\
    \ = 0;\n    var paren_group_level_array_current_level_array_current_level_array_current_string\
    \ = '';\n    var paren_group_level_array_current_level_array_current_level_array_current_level\
    \ = 0;\n    var paren_group_level_array_current_level_array_current_level_array_current_level_string\
    \ = '';\n    var paren_group_level_array_current_level_array_current_level_array_current_level_array\
    \ = [];\n    var paren_group_level_array_current_level_array_current_level_array_current_level_array_string\
    \ = '';\n    var paren_group_level_array_current_level_array_current_level_array_current_level_array_index\
    \ = 0;\n    var paren_group_level_array_current_level_array_current_level_array_current_level_array_length\
    \ = 0;\n    var paren_group_level_array_current_level_array_current_level_array_current_level_array_current_index\
    \ = 0;\n    var paren_group_level_array_current_level_array_current_level_array_current_level_array_current_length\
    \ = 0;\n    var paren_group_level_array_current_level_array_current_level_array_current_level_array_current_string\
    \ = '';\n    var paren_group_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpogvkbyph.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_levels\
    \ = []\n  var paren_level = 0\n  var paren_level_count = 0\n  var paren_level_char\
    \ = ''\n  var paren_level_char_count = 0\n  var paren_level_char_prev = ''\n \
    \ var paren_level_char_prev_count = 0\n  var paren_level_char_next = ''\n  var\
    \ paren_level_char_next_count = 0\n  var paren_level_char_next_prev = ''\n  var\
    \ paren_level_char_next_prev_count = 0\n  var paren_level_char_next_next = ''\n\
    \  var paren_level_char_next_next_count = 0\n  var paren_level_char_next_next_prev\
    \ = ''\n  var paren_level_char_next_next_prev_count = 0\n  var paren_level_char_next_next_next\
    \ = ''\n  var paren_level_char_next_next_next_count = 0\n  var paren_level_char_next_next_next_prev\
    \ = ''\n  var paren_level_char_next_next_next_prev_count = 0\n  var paren_level_char_next_next_next_next\
    \ = ''\n  var paren_level_char_next_next_next_next_count = 0\n  var paren_level_char_next_next_next_next_prev\
    \ = ''\n  var paren_level_char_next_next_next_next_prev_count = 0\n  var paren_level_char_next_next_next_next_next\
    \ = ''\n  var paren_level_char_next_next_next_next_next_count = 0\n  var paren_level_char_next_next_next_next_next_prev\
    \ = ''\n  var paren_level_char_next_next_next_next_next_prev_count = 0\n  var\
    \ paren_level_char_next_next_next_next_next_next = ''\n  var paren_level_char_next_next_next_next_next_next_count\
    \ = 0\n  var paren_level_char_next_next_next_next_next_next_prev = ''\n  var paren_level_char_next_next_next_next_next_next_prev_count\
    \ = 0\n  var paren_level_char_next_next_next_next_next_next_next = ''\n  var paren_level_char_next_next_next_next_next_next_next_count\
    \ = 0\n  var paren_level_char_next_next_next_next_next_next_next_prev = ''\n \
    \ var paren_level_char_next_next_next_next_next_next_next_prev_count = 0\n  var\
    \ paren_level_char_next_next_next_next_next_next_next_next = ''\n  var paren_level_char_next_next_next_next_next_next_next_next_count\
    \ = 0\n  var paren_level_char_next_next_next_next_next_next_next_next_prev = ''\n\
    \  var paren_level_char_next_next_next_next_next_next_next_next_prev_count = 0\n\
    \  var paren_level_char_next_next_next_next_next_next_next_next_next = ''\n  var\
    \ paren_level_char_next_next_next_next_next_next_next_next_next_count = 0\n  var\
    \ paren_level_char_next_next_next_next_next_next_next_next_next_prev = ''\n  var\
    \ paren_level_char_next_next_next_next_next_next_next_next_next_prev_count = 0\n\
    \  var \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpx0q0vvrs.js:51\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char === '('){\n            paren_stack.push(paren_count);\n     \
    \       paren_count++;\n        }else if(char === ')'){\n            paren_count\
    \ = paren_stack.pop();\n        }else if(char === ' ' && paren_stack.length >\
    \ 0){\n            paren_count = paren_stack.pop();\n        }else{\n        \
    \    paren_count = 0;\n        }\n        nested_parens.push(paren_count);\n \
    \   }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0,\
    \ 0, 1, 0, 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmp5q5ig1zt.js:33:10)\n    at Object.<anonymous> (/tmp/tmp5q5ig1zt.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2, 1, 0, 0, 1,\n    2, 3,\
    \ 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2, 1,\n    2, 1, 0\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_count = 0;\n    var paren_level\
    \ = 0;\n    var paren_levels = [];\n    var paren_level_counter = 0;\n    var\
    \ paren_level_counters = [];\n    var paren_level_counters_index = 0;\n    var\
    \ paren_level_counters_indexs = [];\n    var paren_level_counters_index = 0;\n\
    \    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren_level_counters_index\
    \ = 0;\n    var paren_level_counters_indexs = [];\n    var paren\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpw1sferup.js:77\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_level\
    \ = 0;\n  var nested_paren_stack = [];\n  var paren_stack = [];\n  var paren_level\
    \ = 0;\n  var paren_stack_string = '';\n  var paren_string = paren_string.replace(/\\\
    s+/g, '');\n  var paren_chars = paren_string.split('');\n  var paren_char;\n \
    \ var paren_char_i;\n  var paren_char_j;\n  var paren_char_k;\n  var paren_char_l;\n\
    \  var paren_char_m;\n  var paren_char_n;\n  var paren_char_o;\n  var paren_char_p;\n\
    \  var paren_char_q;\n  var paren_char_r;\n  var paren_char_s;\n  var paren_char_t;\n\
    \  var paren_char_u;\n  var paren_char_v;\n  var paren_char_w;\n  var paren_char_x;\n\
    \  var paren_char_y;\n  var paren_char_z;\n  var paren_char_A;\n  var paren_char_B;\n\
    \  var paren_char_C;\n  var paren_char_D;\n  var paren_char_E;\n  var paren_char_F;\n\
    \  var paren_char_G;\n  var paren_char_H;\n  var paren_char_I;\n  var paren_char_J;\n\
    \  var paren_char_K;\n  var paren_char_L;\n  var paren_char_M;\n  var paren_char_N;\n\
    \  var paren_char_O;\n  var paren_char_P;\n  var paren_char_Q;\n  var paren_char_R;\n\
    \  var paren_char_S;\n  var paren_char_T;\n  var paren_char_U;\n  var paren_char_V;\n\
    \  var paren_char_W;\n  var paren_char_X;\n  var paren_char_Y;\n  var paren_char_Z;\n\
    \  var paren_char_0;\n  var paren_char_1;\n  var paren_char_2;\n  var paren_char_3;\n\
    \  var paren_char_4;\n  var paren_char_5;\n  var paren_char_6;\n  var paren_char_7;\n\
    \  var paren_char_8;\n  var paren_char_9;\n  var paren_char_colon;\n  var paren_char_semicolon;\n\
    \  var paren_char_plus;\n  var paren_char_asterisk;\n  var paren_char_exclamation;\n\
    \  var paren_char_question;\n  var paren_char_exclamation_mark;\n  var paren_char_question_mark;\n\
    \  var paren_char_exclamation_mark_mark_1;\n  var paren_char_question_mark_1;\n\
    \  var paren_char_exclamation_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1u6i0gy5.js:90\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_index2\
    \ = 0;\n    var paren_level_stack_string_index3 = 0;\n    var paren_level_stack_string_index4\
    \ = 0;\n    var paren_level_stack_string_index5 = 0;\n    var paren_level_stack_string_index6\
    \ = 0;\n    var paren_level_stack_string_index7 = 0;\n    var paren_level_stack_string_index8\
    \ = 0;\n    var paren_level_stack_string_index9 = 0;\n    var paren_level_stack_string_index10\
    \ = 0;\n    var paren_level_stack_string_index11 = 0;\n    var paren_level_stack_string_index12\
    \ = 0;\n    var paren_level_stack_string_index13 = 0;\n    var paren_level_stack_string_index14\
    \ = 0;\n    var paren_level_stack_string_index15 = 0;\n    var paren_level_stack_string_index16\
    \ = 0;\n    var paren_level_stack_string_index17 = 0;\n    var paren_level_stack_string_index18\
    \ = 0;\n    var paren_level_stack_string_index19 = 0;\n    var paren_level_stack_string_index20\
    \ = 0;\n    var paren_level_stack_string_index21 = 0;\n    var paren_level_stack_string_index22\
    \ = 0;\n    var paren_level_stack_string_index23 = 0;\n    var paren_level_stack_string_index24\
    \ = 0;\n    var paren_level_stack_string_index25 = 0;\n    var paren_level_stack_string_index26\
    \ = 0;\n    var paren_level_stack_string_index27 = 0;\n    var paren_level_stack_string_index28\
    \ = 0;\n    var paren_level_stack_string_index29 = 0;\n    var paren_level_stack_string_index30\
    \ = 0;\n    var paren_level_stack_string_index31 = 0;\n    var paren_level_stack_string_index32\
    \ = 0;\n    var paren_level_stack_string_index33 = 0;\n    var paren_level_stack_string_index34\
    \ = 0;\n    var paren_level_stack_string_index35 = 0;\n    var paren_level_stack_string_index36\
    \ = 0;\n    var paren_level_stack_string_index37 = 0;\n    var paren_level_stack_string_index38\
    \ = 0;\n    var paren_level_stack_string_index39 = 0;\n    var paren_level_stack_string_index40\
    \ = 0;\n    var paren_level_stack_string_index41 = 0;\n    var paren_level_stack_string_index42\
    \ = 0;\n    var paren_level_stack_string_index43 = 0;\n    var paren_level_stack_string_index44\
    \ = 0;\n    var paren_level_stack_string_index45 = 0;\n    var paren_level_stack_string_index46\
    \ = 0;\n    var paren_level_stack_string_index47 = 0;\n    var paren_level_stack_string_index48\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn60njl1b.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_pointer\
    \ = 0;\n    var paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max_index\
    \ = 0;\n    var paren_stack_pointer_max_index2 = 0;\n    var paren_stack_pointer_max_index3\
    \ = 0;\n    var paren_stack_pointer_max_index4 = 0;\n    var paren_stack_pointer_max_index5\
    \ = 0;\n    var paren_stack_pointer_max_index6 = 0;\n    var paren_stack_pointer_max_index7\
    \ = 0;\n    var paren_stack_pointer_max_index8 = 0;\n    var paren_stack_pointer_max_index9\
    \ = 0;\n    var paren_stack_pointer_max_index10 = 0;\n    var paren_stack_pointer_max_index11\
    \ = 0;\n    var paren_stack_pointer_max_index12 = 0;\n    var paren_stack_pointer_max_index13\
    \ = 0;\n    var paren_stack_pointer_max_index14 = 0;\n    var paren_stack_pointer_max_index15\
    \ = 0;\n    var paren_stack_pointer_max_index16 = 0;\n    var paren_stack_pointer_max_index17\
    \ = 0;\n    var paren_stack_pointer_max_index18 = 0;\n    var paren_stack_pointer_max_index19\
    \ = 0;\n    var paren_stack_pointer_max_index20 = 0;\n    var paren_stack_pointer_max_index21\
    \ = 0;\n    var paren_stack_pointer_max_index22 = 0;\n    var paren_stack_pointer_max_index23\
    \ = 0;\n    var paren_stack_pointer_max_index24 = 0;\n    var paren_stack_pointer_max_index25\
    \ = 0;\n    var paren_stack_pointer_max_index26 = 0;\n    var paren_stack_pointer_max_index27\
    \ = 0;\n    var paren_stack_pointer_max_index28 = 0;\n    var paren_stack_pointer_max_index29\
    \ = 0;\n    var paren_stack_pointer_max_index30 = 0;\n    var paren_stack_pointer_max_index31\
    \ = 0;\n    var paren_stack_pointer_max_index32 = 0;\n    var paren_stack_pointer_max_index33\
    \ = 0;\n    var paren_stack_pointer_max_index34 = 0;\n    var paren_stack_pointer_max_index35\
    \ = 0;\n    var paren_stack_pointer_max_index36 = 0;\n    var paren_stack_pointer_max_index37\
    \ = 0;\n    var paren_stack_pointer_max_index38 = 0;\n    var paren_stack_pointer_max_index39\
    \ = 0;\n    var paren_stack_pointer_max_index40 = 0;\n    var paren_stack_pointer_max_index41\
    \ = 0;\n    var paren_stack_pointer_max_index42 = 0;\n    var paren_stack_pointer_max_index43\
    \ = 0;\n    var paren_stack_pointer_max_index44 = 0;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpggtw7mdw.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    paren_string\
    \ = paren_string.replace(/\\s+/g, '');\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char == '('){\n     \
    \       paren_stack.push(paren_level);\n            paren_level++;\n        }else\
    \ if(char == ')'){\n            paren_level = paren_stack.pop();\n        }\n\
    \        if(paren_level > 0){\n            nested_parens.push(paren_level);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 1, 2, 3, 2, 1, 1, 1, 2,\
    \ 3, 2, 1, 2, 1, 2, 1 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpnxb3bfhq.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnxb3bfhq.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2, 1, 1, 2,\n    3, 2, 1,\
    \ 1, 1, 2, 3,\n    2, 1, 2, 1, 2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_level_count\
    \ = 0;\n  var paren_level_max_count = 0;\n  var paren_level_max_count_index =\
    \ 0;\n  var paren_level_max_count_index2 = 0;\n  var paren_level_max_count_index3\
    \ = 0;\n  var paren_level_max_count_index4 = 0;\n  var paren_level_max_count_index5\
    \ = 0;\n  var paren_level_max_count_index6 = 0;\n  var paren_level_max_count_index7\
    \ = 0;\n  var paren_level_max_count_index8 = 0;\n  var paren_level_max_count_index9\
    \ = 0;\n  var paren_level_max_count_index10 = 0;\n  var paren_level_max_count_index11\
    \ = 0;\n  var paren_level_max_count_index12 = 0;\n  var paren_level_max_count_index13\
    \ = 0;\n  var paren_level_max_count_index14 = 0;\n  var paren_level_max_count_index15\
    \ = 0;\n  var paren_level_max_count_index16 = 0;\n  var paren_level_max_count_index17\
    \ = 0;\n  var paren_level_max_count_index18 = 0;\n  var paren_level_max_count_index19\
    \ = 0;\n  var paren_level_max_count_index20 = 0;\n  var paren_level_max_count_index21\
    \ = 0;\n  var paren_level_max_count_index22 = 0;\n  var paren_level_max_count_index23\
    \ = 0;\n  var paren_level_max_count_index24 = 0;\n  var paren_level_max_count_index25\
    \ = 0;\n  var paren_level_max_count_index26 = 0;\n  var paren_level_max_count_index27\
    \ = 0;\n  var paren_level_max_count_index28 = 0;\n  var paren_level_max_count_index29\
    \ = 0;\n  var paren_level_max_count_index30 = 0;\n  var paren_level_max_count_index31\
    \ = 0;\n  var paren_level_max_count_index32 = 0;\n  var paren_level_max_count_index33\
    \ = 0;\n  var paren_level_max_count_index34 = 0;\n  var paren_level_max_count_index35\
    \ = 0;\n  var paren_level_max_count_index36 = 0;\n  var paren_level_max_count_index37\
    \ = 0;\n  var paren_level_max_count_index38 = 0;\n  var paren_level_max_count_index39\
    \ = 0;\n  var paren_level_max_count_index40 = 0;\n  var paren_level_max_count_index41\
    \ = 0;\n  var paren_level_max_count_index42 = 0;\n  var paren_level_max_count_index43\
    \ = 0;\n  var paren_level_max_count_index44 = 0;\n  var paren_level_max_count_index45\
    \ = 0;\n  var paren_level_max_count_index46 = 0;\n  var paren_level_max_count_index47\
    \ = 0;\n  var paren_level_max_count_index48 = 0;\n  var paren_level_max_count_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphdevez6h.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_index2\
    \ = 0;\n    var paren_level_stack_index3 = 0;\n    var paren_level_stack_index4\
    \ = 0;\n    var paren_level_stack_index5 = 0;\n    var paren_level_stack_index6\
    \ = 0;\n    var paren_level_stack_index7 = 0;\n    var paren_level_stack_index8\
    \ = 0;\n    var paren_level_stack_index9 = 0;\n    var paren_level_stack_index10\
    \ = 0;\n    var paren_level_stack_index11 = 0;\n    var paren_level_stack_index12\
    \ = 0;\n    var paren_level_stack_index13 = 0;\n    var paren_level_stack_index14\
    \ = 0;\n    var paren_level_stack_index15 = 0;\n    var paren_level_stack_index16\
    \ = 0;\n    var paren_level_stack_index17 = 0;\n    var paren_level_stack_index18\
    \ = 0;\n    var paren_level_stack_index19 = 0;\n    var paren_level_stack_index20\
    \ = 0;\n    var paren_level_stack_index21 = 0;\n    var paren_level_stack_index22\
    \ = 0;\n    var paren_level_stack_index23 = 0;\n    var paren_level_stack_index24\
    \ = 0;\n    var paren_level_stack_index25 = 0;\n    var paren_level_stack_index26\
    \ = 0;\n    var paren_level_stack_index27 = 0;\n    var paren_level_stack_index28\
    \ = 0;\n    var paren_level_stack_index29 = 0;\n    var paren_level_stack_index30\
    \ = 0;\n    var paren_level_stack_index31 = 0;\n    var paren_level_stack_index32\
    \ = 0;\n    var paren_level_stack_index33 = 0;\n    var paren_level_stack_index34\
    \ = 0;\n    var paren_level_stack_index35 = 0;\n    var paren_level_stack_index36\
    \ = 0;\n    var paren_level_stack_index37 = 0;\n    var paren_level_stack_index38\
    \ = 0;\n    var paren_level_stack_index39 = 0;\n    var paren_level_stack_index40\
    \ = 0;\n    var paren_level_stack_index41 = 1;\n    var paren_level_stack_index42\
    \ = 1;\n    var paren_level_stack_index43 = 1;\n    var paren_level_stack_index44\
    \ = 1;\n    var paren_level_stack_index45 = 1;\n    var paren_level_stack_index46\
    \ = 1;\n    var paren_level_stack_index47 = 1;\n    var paren_level_stack_index48\
    \ = 1;\n    var paren_level_stack_index49 = 1;\n    var paren_level_stack_index50\
    \ = 1;\n    var paren_level_stack_index51 = 1;\n    var paren_level_stack_index52\
    \ = 1;\n    var paren_level_stack_index53 = 1;\n    var paren_level_stack_index54\
    \ = 1;\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt8a_hd94.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting = 0;\n\tvar paren_nesting_nesting_level =\
    \ 0;\n\tvar paren_nesting_nesting_nesting = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_nesting_level = 0;\n\tvar paren_nesting_nesting_nesting_level\
    \ = 0;\n\tvar paren_nesting_nesting_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7dqc4dry.js:60\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_level_count = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_pointer = 0;\n    var paren_level_stack_pointer_max\
    \ = 0;\n    var paren_level_stack_pointer_max_index = 0;\n    var paren_level_stack_pointer_max_index2\
    \ = 0;\n    var paren_level_stack_pointer_max_index3 = 0;\n    var paren_level_stack_pointer_max_index4\
    \ = 0;\n    var paren_level_stack_pointer_max_index5 = 0;\n    var paren_level_stack_pointer_max_index6\
    \ = 0;\n    var paren_level_stack_pointer_max_index7 = 0;\n    var paren_level_stack_pointer_max_index8\
    \ = 0;\n    var paren_level_stack_pointer_max_index9 = 0;\n    var paren_level_stack_pointer_max_index10\
    \ = 0;\n    var paren_level_stack_pointer_max_index11 = 0;\n    var paren_level_stack_pointer_max_index12\
    \ = 0;\n    var paren_level_stack_pointer_max_index13 = 0;\n    var paren_level_stack_pointer_max_index14\
    \ = 0;\n    var paren_level_stack_pointer_max_index15 = 0;\n    var paren_level_stack_pointer_max_index16\
    \ = 0;\n    var paren_level_stack_pointer_max_index17 = 0;\n    var paren_level_stack_pointer_max_index18\
    \ = 0;\n    var paren_level_stack_pointer_max_index19 = 0;\n    var paren_level_stack_pointer_max_index20\
    \ = 0;\n    var paren_level_stack_pointer_max_index21 = 0;\n    var paren_level_stack_pointer_max_index22\
    \ = 0;\n    var paren_level_stack_pointer_max_index23 = 0;\n    var paren_level_stack_pointer_max_index24\
    \ = 0;\n    var paren_level_stack_pointer_max_index25 = 0;\n    var paren_level_stack_pointer_max_index26\
    \ = 0;\n    var paren_level_stack_pointer_max_index27 = 0;\n    var paren_level_stack_pointer_max_index28\
    \ = 0;\n    var paren_level_stack_pointer_max_index29 = 0;\n    var paren_level_stack_pointer_max_index30\
    \ = 0;\n    var paren_level_stack_pointer_max_index31 = 0;\n    var paren_level_stack_pointer_max_index32\
    \ = 0;\n    var paren_level_stack_pointer_max_index33 = 0;\n    var paren_level_stack_pointer_max_index34\
    \ = 0;\n    var paren_level_stack_pointer_max_index35 = 0;\n    var paren_level_stack_pointer_max_index36\
    \ = 0;\n    var paren_level_stack_pointer_max_index37 = 0;\n    var paren_level_stack_pointer_max_index38\
    \ = 0;\n    var paren_level_stack_pointer_max_index39 = 0;\n    var paren_level_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_54z7vki.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_level\
    \ = 0;\n  var nested_paren_stack = [];\n  var paren_level = 0;\n  var paren_stack\
    \ = [];\n  for(var i=0; i<paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if(char == '('){\n      paren_stack.push(nested_paren_level);\n      nested_paren_level++;\n\
    \    }else if(char == ')'){\n      nested_paren_level = paren_stack.pop();\n \
    \   }else if(char == ' ' && nested_paren_stack.length > 0){\n      nested_paren_level\
    \ = paren_stack.pop();\n    }\n    nested_paren_stack.push(nested_paren_level);\n\
    \    paren_level++;\n  }\n  return nested_paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1,\n  2,\n  1,\n  2,\n  1,\n  0,\n  undefined,\n\
    \  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  undefined,\n  undefined,\n  NaN,\n\
    \  undefined,\n  undefined,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN,\n  NaN,\n  undefined ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n   \
    \ at test (/tmp/tmpgybqwyeu.js:32:10)\n    at Object.<anonymous> (/tmp/tmpgybqwyeu.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1,         2,         1,\n    2, \
    \        1,         0,\n    undefined, NaN,       NaN,\n    NaN,       NaN,  \
    \     NaN,\n    undefined, undefined, NaN,\n    undefined, undefined, NaN,\n \
    \   NaN,       NaN,       NaN,\n    NaN,       NaN,       NaN,\n    NaN,     \
    \  NaN,       undefined\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_nesting\
    \ = 0;\n  for(var i=0; i<paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if(char == '('){\n      paren_stack.push(paren_level);\n      paren_nesting++;\n\
    \    }\n    else if(char == ')'){\n      paren_nesting--;\n      if(paren_nesting\
    \ == 0){\n        nested_parens.push(paren_stack.pop());\n      }\n    }\n  }\n\
    \  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpztegeqdc.js:32:10)\n    at Object.<anonymous> (/tmp/tmpztegeqdc.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == '('){\n\t\t\tparen_stack.push(paren_level);\n\
    \t\t\tparen_level++;\n\t\t}else if(paren_string[i] == ')'){\n\t\t\tparen_level\
    \ = paren_stack.pop();\n\t\t}\n\t\tnested_parens.push(paren_level);\n\t}\n\treturn\
    \ nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0,\
    \ 0, 1, 0, 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmp6dkpbrpc.js:27:10)\n    at Object.<anonymous> (/tmp/tmp6dkpbrpc.js:32:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2, 1, 0, 0, 1,\n    2, 3,\
    \ 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2, 1,\n    2, 1, 0\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_level_stack = [];\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char === '('){\n    \
    \        paren_stack.push(paren_level);\n            paren_level++;\n        }else\
    \ if(char === ')'){\n            paren_level = paren_stack.pop();\n        }else\
    \ if(char === ' ' && paren_stack.length > 0){\n            paren_levels.push(paren_level);\n\
    \            paren_level = paren_stack.pop();\n        }\n    }\n    for(var i=0;\
    \ i<paren_levels.length; i++){\n        nested_parens.push(paren_levels[i]);\n\
    \    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmpd2720z7r.js:35:10)\n    at Object.<anonymous> (/tmp/tmpd2720z7r.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var nested_paren_stack = [];\n  \
    \  var paren_stack = [];\n    var paren_count = 0;\n    var paren_level = 0;\n\
    \    var paren_stack = [];\n    var paren_stack_string = '';\n    var paren_stack_string_count\
    \ = 0;\n    var paren_stack_level = 0;\n    var paren_stack_level_string = '';\n\
    \    var paren_stack_level_string_count = 0;\n    var paren_stack_level_counter\
    \ = 0;\n    var paren_stack_level_counter_string = '';\n    var paren_stack_level_counter_string_count\
    \ = 0;\n    var paren_stack_level_counter_counter = 0;\n    var paren_stack_level_counter_counter_string\
    \ = '';\n    var paren_stack_level_counter_counter_counter = 0;\n    var paren_stack_level_counter_counter_counter_string\
    \ = '';\n    var paren_stack_level_counter_counter_counter_counter = 0;\n    var\
    \ paren_stack_level_counter_counter_counter_counter_string = '';\n    var paren_stack_level_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_stack_level_counter_counter_counter_counter_counter_string\
    \ = '';\n    var paren_stack_level_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_string\
    \ = '';\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_string\
    \ = '';\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_string\
    \ = '';\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_string\
    \ = '';\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_string\
    \ = '';\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_string\
    \ = '';\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_string\
    \ = '';\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_string\
    \ = '';\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_stack_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9ru2q4jb.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  for(var i=0; i<paren_string.length; i++){\n    var c = paren_string[i];\n \
    \   if(c == '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    }\n    else if(c == ')'){\n      var current_paren_level = paren_stack.pop();\n\
    \      if(current_paren_level == 0){\n        nested_parens.push(paren_level);\n\
    \      }\n      paren_count--;\n    }\n  }\n  return nested_parens;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpdag2gn0l.js:33:10)\n    at Object.<anonymous> (/tmp/tmpdag2gn0l.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    for(var i=0; i<paren_string.length; i++){\n\
    \        if(paren_string[i] == '('){\n            paren_count++;\n        }\n\
    \        else if(paren_string[i] == ')'){\n            paren_count--;\n      \
    \  }\n        if(paren_count == 0){\n            nested_parens.push(paren_count);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0, 0, 0, 0 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpi71xiqke.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpi71xiqke.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var max_level\
    \ = 0;\n  var level = 0;\n  var paren_count = 0;\n  var paren_stack = [];\n  for(var\
    \ i=0; i<paren_string.length; i++){\n    var c = paren_string[i];\n    if(c ==\
    \ '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n    }\n \
    \   else if(c == ')'){\n      paren_count = paren_stack.pop();\n    }\n    else\
    \ if(c == ' '){\n      if(paren_stack.length > 0){\n        level = paren_stack[paren_stack.length-1];\n\
    \      }\n    }\n    else if(paren_stack.length > 0){\n      level = paren_stack[paren_stack.length-1];\n\
    \    }\n    if(level > max_level){\n      max_level = level;\n    }\n  }\n  return\
    \ max_level;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n  \
    \  at test (/tmp/tmpuakskj7w.js:40:10)\n    at Object.<anonymous> (/tmp/tmpuakskj7w.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var c = paren_string[i];\n        if(c\
    \ == '('){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(c == ')'){\n            paren_level = paren_stack.pop();\n\
    \        }\n        else if(paren_stack.length){\n            nested_parens.push(paren_level);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmpy_pidf87.js:31:10)\n    at Object.<anonymous> (/tmp/tmpy_pidf87.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i =\
    \ 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n   \
    \     if(char === '('){\n            paren_stack.push(paren_level);\n        \
    \    paren_level++;\n        }\n        else if(char === ')'){\n            paren_level\
    \ = paren_stack.pop();\n        }\n        else if(char === ' ' && paren_stack.length\
    \ === 0){\n            nested_parens.push(paren_level);\n        }\n    }\n  \
    \  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmpedtxvnbk.js:31:10)\n    at Object.<anonymous> (/tmp/tmpedtxvnbk.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == '('){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == ')'){\n            paren_level = paren_stack.pop();\n\
    \        }\n        nested_parens.push(paren_level);\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0,\
    \ 0, 1, 0, 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmp2htayvcv.js:28:10)\n    at Object.<anonymous> (/tmp/tmp2htayvcv.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2, 1, 0, 0, 1,\n    2, 3,\
    \ 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2, 1,\n    2, 1, 0\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_level_count = 0;\n    var paren_level_char\
    \ = '';\n    var paren_level_char_length = 0;\n    var paren_level_char_position\
    \ = 0;\n    var paren_level_char_array = [];\n    var paren_level_char_array_length\
    \ = 0;\n    var paren_level_char_array_position = 0;\n    var paren_level_char_array_element\
    \ = '';\n    var paren_level_char_array_element_length = 0;\n    var paren_level_char_array_element_position\
    \ = 0;\n    var paren_level_char_array_element_is_opening = true;\n    var paren_level_char_array_element_is_closing\
    \ = false;\n    var paren_level_char_array_element_is_opening_paren = false;\n\
    \    var paren_level_char_array_element_is_closing_paren = false;\n    var paren_level_char_array_element_is_opening_paren_or_closing\
    \ = false;\n    var paren_level_char_array_element_is_opening_paren_or_closing_paren\
    \ = false;\n    var paren_level_char_array_element_is_opening_paren_or_closing_paren_or_opening\
    \ = false;\n    var paren_level_char_array_element_is_opening_paren_or_closing_paren_or_opening_paren\
    \ = false;\n    var paren_level_char_array_element_is_opening_paren_or_closing_paren_or_opening_paren_or_closing\
    \ = false;\n    var paren_level_char_array_element_is_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren\
    \ = false;\n    var paren_level_char_array_element_is_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren_or_opening\
    \ = false;\n    var paren_level_char_array_element_is_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren_or_opening_paren\
    \ = false;\n    var paren_level_char_array_element_is_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren_or_opening_paren_or_closing\
    \ = false;\n    var paren_level_char_array_element_is_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren\
    \ = false;\n    var paren_level_char_array_element_is_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren_or_opening\
    \ = false;\n    var paren_level_char_array_element_is_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren_or_opening_paren_or_closing_paren_or_opening_paren\
    \ = false;\n    var paren_level_char_array_element_is_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsbdwbq9k.js:46\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_len = paren_stack.length;\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var c = paren_string[i];\n        if(c == '('){\n           \
    \ paren_nesting++;\n            paren_stack.push(paren_nesting);\n        }\n\
    \        else if(c == ')'){\n            paren_nesting--;\n            if(paren_nesting\
    \ == 0){\n                paren_stack.pop();\n            }\n        }\n     \
    \   else if(paren_nesting > 0){\n            paren_stack.push(paren_nesting);\n\
    \        }\n    }\n    for(var i=0; i<paren_stack.length; i++){\n        nested_parens.push(paren_stack[i]);\n\
    \    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 2, 3, 2 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpzjsa94e4.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzjsa94e4.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 1, 2,\n    1, 2, 3, 2\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level = 0;\n\
    \tvar paren_stack = [];\n\tvar paren_levels = [];\n\tvar paren_levels_stack =\
    \ [];\n\tvar paren_levels_stack_index = 0;\n\tvar paren_levels_stack_index2 =\
    \ 0;\n\tvar paren_levels_stack_index3 = 0;\n\tvar paren_levels_stack_index4 =\
    \ 0;\n\tvar paren_levels_stack_index5 = 0;\n\tvar paren_levels_stack_index6 =\
    \ 0;\n\tvar paren_levels_stack_index7 = 0;\n\tvar paren_levels_stack_index8 =\
    \ 0;\n\tvar paren_levels_stack_index9 = 0;\n\tvar paren_levels_stack_index10 =\
    \ 0;\n\tvar paren_levels_stack_index11 = 0;\n\tvar paren_levels_stack_index12\
    \ = 0;\n\tvar paren_levels_stack_index13 = 0;\n\tvar paren_levels_stack_index14\
    \ = 0;\n\tvar paren_levels_stack_index15 = 0;\n\tvar paren_levels_stack_index16\
    \ = 0;\n\tvar paren_levels_stack_index17 = 0;\n\tvar paren_levels_stack_index18\
    \ = 0;\n\tvar paren_levels_stack_index19 = 0;\n\tvar paren_levels_stack_index20\
    \ = 0;\n\tvar paren_levels_stack_index21 = 0;\n\tvar paren_levels_stack_index22\
    \ = 0;\n\tvar paren_levels_stack_index23 = 0;\n\tvar paren_levels_stack_index24\
    \ = 0;\n\tvar paren_levels_stack_index25 = 0;\n\tvar paren_levels_stack_index26\
    \ = 0;\n\tvar paren_levels_stack_index27 = 0;\n\tvar paren_levels_stack_index28\
    \ = 0;\n\tvar paren_levels_stack_index29 = 0;\n\tvar paren_levels_stack_index30\
    \ = 0;\n\tvar paren_levels_stack_index31 = 0;\n\tvar paren_levels_stack_index32\
    \ = 0;\n\tvar paren_levels_stack_index33 = 0;\n\tvar paren_levels_stack_index34\
    \ = 0;\n\tvar paren_levels_stack_index35 = 0;\n\tvar paren_levels_stack_index36\
    \ = 0;\n\tvar paren_levels_stack_index37 = 0;\n\tvar paren_levels_stack_index38\
    \ = 0;\n\tvar paren_levels_stack_index39 = 0;\n\tvar paren_levels_stack_index40\
    \ = 0;\n\tvar paren_levels_stack_index41 = 1;\n\tvar paren_levels_stack_index42\
    \ = 1;\n\tvar paren_levels_stack_index43 = 1;\n\tvar paren_levels_stack_index44\
    \ = 1;\n\tvar paren_levels_stack_index45 = 1;\n\tvar paren_levels_stack_index46\
    \ = 1;\n\tvar paren_levels_stack_index47 = 1;\n\tvar paren_levels_stack_index48\
    \ = 1;\n\tvar paren_levels_stack_index49 = 1;\n\tvar \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph_8ut0at.js:61\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level = 0;\n\
    \tvar paren_stack = [];\n\tvar paren_level = [];\n\tvar paren_level_stack = [];\n\
    \tvar paren_level_stack_index = 0;\n\tvar paren_level_stack_index2 = 0;\n\tvar\
    \ paren_level_stack_index3 = 0;\n\tvar paren_level_stack_index4 = 0;\n\tvar paren_level_stack_index5\
    \ = 0;\n\tvar paren_level_stack_index6 = 0;\n\tvar paren_level_stack_index7 =\
    \ 0;\n\tvar paren_level_stack_index8 = 0;\n\tvar paren_level_stack_index9 = 0;\n\
    \tvar paren_level_stack_index10 = 0;\n\tvar paren_level_stack_index11 = 0;\n\t\
    var paren_level_stack_index12 = 0;\n\tvar paren_level_stack_index13 = 0;\n\tvar\
    \ paren_level_stack_index14 = 0;\n\tvar paren_level_stack_index15 = 0;\n\tvar\
    \ paren_level_stack_index16 = 0;\n\tvar paren_level_stack_index17 = 0;\n\tvar\
    \ paren_level_stack_index18 = 0;\n\tvar paren_level_stack_index19 = 0;\n\tvar\
    \ paren_level_stack_index20 = 0;\n\tvar paren_level_stack_index21 = 0;\n\tvar\
    \ paren_level_stack_index22 = 0;\n\tvar paren_level_stack_index23 = 0;\n\tvar\
    \ paren_level_stack_index24 = 0;\n\tvar paren_level_stack_index25 = 0;\n\tvar\
    \ paren_level_stack_index26 = 0;\n\tvar paren_level_stack_index27 = 0;\n\tvar\
    \ paren_level_stack_index28 = 0;\n\tvar paren_level_stack_index29 = 0;\n\tvar\
    \ paren_level_stack_index30 = 0;\n\tvar paren_level_stack_index31 = 0;\n\tvar\
    \ paren_level_stack_index32 = 0;\n\tvar paren_level_stack_index33 = 0;\n\tvar\
    \ paren_level_stack_index34 = 0;\n\tvar paren_level_stack_index35 = 0;\n\tvar\
    \ paren_level_stack_index36 = 0;\n\tvar paren_level_stack_index37 = 0;\n\tvar\
    \ paren_level_stack_index38 = 0;\n\tvar paren_level_stack_index39 = 0;\n\tvar\
    \ paren_level_stack_index40 = 0;\n\tvar paren_level_stack_index41 = 1;\n\tvar\
    \ paren_level_stack_index42 = 1;\n\tvar paren_level_stack_index43 = 1;\n\tvar\
    \ paren_level_stack_index44 = 1;\n\tvar paren_level_stack_index45 = 1;\n\tvar\
    \ paren_level_stack_index46 = 1;\n\tvar paren_level_stack_index47 = 1;\n\tvar\
    \ paren_level_stack_index48 = 1;\n\tvar paren_level_stack_index49 = 1;\n\tvar\
    \ paren_level_stack_index50 = 1;\n\tvar paren_level_stack_index51 = 1;\n\tvar\
    \ paren_level_stack_index52 = 1;\n\tvar paren_level_stack_index53 = 1;\n\tvar\
    \ paren_level_stack_index54 = 1;\n\tvar paren_level_stack\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpms3h0m_i.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_levels_stack = [];\n    var paren_level_counter = 0;\n\
    \    var paren_level_counter_stack = [];\n    var paren_level_counters = [];\n\
    \    var paren_level_counters_stack = [];\n    var paren_level_counter_counter\
    \ = 0;\n    var paren_level_counter_counter_stack = [];\n    var paren_level_counter_counters\
    \ = [];\n    var paren_level_counter_counter_counter = 0;\n    var paren_level_counter_counter_counter_stack\
    \ = [];\n    var paren_level_counter_counter_counters = [];\n    var paren_level_counter_counter_counter_counter\
    \ = 0;\n    var paren_level_counter_counter_counter_counter_stack = [];\n    var\
    \ paren_level_counter_counter_counter_counters = [];\n    var paren_level_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_level_counter_counter_counter_counter_counter_stack = [];\n\
    \    var paren_level_counter_counter_counter_counter_counters = [];\n    var paren_level_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_level_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counters\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counters\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counters\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counters\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counters\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counters\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0;\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_stack\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counters\
    \ = [];\n    var paren_level_counter_counter_counter_counter_counter_counter_counter_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_xe2j1y1.js:60\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  for(var i=0; i<paren_string.length; i++){\n\
    \    if(paren_string[i] == '('){\n      paren_level++;\n    }\n    if(paren_string[i]\
    \ == ')'){\n      paren_level--;\n    }\n    if(paren_level == 0){\n      nested_parens.push(paren_level);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0, 0, 0, 0 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmp31lf7ivj.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp31lf7ivj.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_string\
    \ = '';\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == '('){\n            paren_stack.push(paren_level);\n      \
    \      paren_level++;\n            paren_levels.push(paren_level);\n        }\n\
    \        else if(char == ')'){\n            paren_level--;\n            paren_levels.push(paren_level);\n\
    \        }\n        else if(char == ' '){\n            if(paren_stack.length ==\
    \ 0){\n                paren_levels_string += paren_levels_string ? ' ' : '';\n\
    \                paren_levels_string += paren_levels[paren_stack.length-1];\n\
    \            }\n            else{\n                paren_levels_string += paren_levels[paren_stack.length-1];\n\
    \            }\n        }\n    }\n    return paren_levels_string;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpoie76_fx.js:14\n            paren_stack.push(paren_level);\n  \
    \                           ^\n\nReferenceError: paren_level is not defined\n\
    \    at parse_nested_parens (/tmp/tmpoie76_fx.js:14:30)\n    at test (/tmp/tmpoie76_fx.js:40:20)\n\
    \    at Object.<anonymous> (/tmp/tmpoie76_fx.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_index = 0;\n    var paren_level_stack_last_string\
    \ = '';\n    var paren_level_stack_last_paren_level = 0;\n    var paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_index = 0;\n    var\
    \ paren_level_stack_last_paren_level_stack_string = '';\n    var paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_string = '';\n \
    \   var paren_level_stack_last_paren_level_stack_last_paren_level = 0;\n    var\
    \ paren_level_stack_last_paren_level_stack_last_paren_level_stack = [];\n    var\
    \ paren_level_stack_last_paren_level_stack_last_paren_level_stack_index = 0;\n\
    \    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = '';\n    for(var i=0; i<paren_string.length; i++){\n        if(paren_string[i]\
    \ == '('){\n            paren_stack.push(paren_level);\n            paren_level_stack.push(paren_level_stack);\n\
    \            paren_level_stack_string = paren_level_stack_string + paren_string[i];\n\
    \            paren_level_stack_last_index = i;\n            paren_level_stack_last_string\
    \ = paren_level_stack_string;\n            paren_level_stack_last_paren_level\
    \ = paren_level;\n            paren_level_stack_last_paren_level_stack.push(paren_level_stack_last_paren_level);\n\
    \            paren_level_stack_last_paren_level_stack_string = paren_level_stack_last_paren_level_stack_string\
    \ + paren_string[i];\n            paren_level_stack_last_paren_level_stack_last_index\
    \ = i;\n            paren_level_stack_last_paren_level_stack_last_string = paren_level_stack_last_paren_level_stack_string\
    \ + paren_string[i];\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3snw61md.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  for(var i=0; i<paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if(char == '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    }else if(char == ')'){\n      paren_count = paren_stack.pop();\n    }else\
    \ if(char == ' ' && paren_count > 0){\n      paren_stack.push(paren_count);\n\
    \      paren_count++;\n    }\n    if(paren_count > paren_level){\n      nested_parens.push(paren_level);\n\
    \    }\n    paren_level = paren_count;\n  }\n  return nested_parens;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 1, 0, 1, 2, 0, 0, 1, 2, 1, 1 ]\n\
    \nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpxnpg7qir.js:35:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpxnpg7qir.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_groups = [];\n    var paren_groups = paren_string.split(\"\
    \ \");\n    for(var i=0; i<paren_groups.length; i++){\n        var paren_group\
    \ = paren_groups[i];\n        if(paren_group.length == 0){\n            continue;\n\
    \        }\n        var paren_group_split = paren_group.split(\"(\");\n      \
    \  var paren_group_split_length = paren_group_split.length;\n        var paren_group_split_index\
    \ = paren_group_split_length-1;\n        for(var j=0; j<paren_group_split_index;\
    \ j++){\n            var paren_group_split_element = paren_group_split[j];\n \
    \           if(paren_group_split_element == \")\"){\n                nested_paren_level--;\n\
    \            }\n            else if(paren_group_split_element == \"(\"){\n   \
    \             nested_paren_level++;\n            }\n        }\n        nested_paren_groups.push(nested_paren_level);\n\
    \    }\n    return nested_paren_groups;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, -1, -1, -2 ]\n\nshould equal\n\n[\
    \ 2, 3, 1, 3 ]\n    at test (/tmp/tmpvhm82fj3.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvhm82fj3.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1, -1,\
    \ -1, -2 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_level_stack = [];\n    var paren_level_stack_count = 0;\n\
    \    var paren_level_stack_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_stack_count_string = '';\n    var paren_level_stack_string_count\
    \ = '';\n    var paren_level_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpy_l5x3y2.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_groups = paren_string.split(\"\
    \ \");\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group\
    \ = paren_groups[i];\n        if(paren_group === \"()\"){\n            nested_paren_stack.push(nested_paren_level);\n\
    \            nested_paren_level++;\n        }\n        else if(paren_group ===\
    \ \"()\"){\n            nested_paren_level--;\n        }\n        else if(paren_group\
    \ === \"()\"){\n            nested_paren_level++;\n        }\n    }\n    return\
    \ nested_paren_stack;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmpk2mg34wv.js:31:10)\n    at Object.<anonymous> (/tmp/tmpk2mg34wv.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  for(var i=0; i<paren_string.length; i++){\n\
    \    if(paren_string[i] == '('){\n      paren_level++;\n    }\n    if(paren_string[i]\
    \ == ')'){\n      paren_level--;\n    }\n    if(paren_level == 0){\n      nested_parens.push(paren_level);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0, 0, 0, 0 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpd5hy7jwx.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd5hy7jwx.js:33:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 0, 0, 0,\n    0, 0, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_level\
    \ = 0;\n  var nested_paren_stack = [];\n  var paren_stack = [];\n  var paren_level\
    \ = 0;\n  var paren_stack_string = '';\n  var paren_string = paren_string.replace(/\\\
    s+/g, '');\n  for(var i=0; i<paren_string.length; i++){\n    if(paren_string[i]\
    \ == '('){\n      paren_stack.push(paren_string[i]);\n      paren_level++;\n \
    \     if(paren_level == nested_paren_level){\n        nested_paren_stack.push(paren_stack);\n\
    \      }\n      if(paren_level > nested_paren_level){\n        nested_paren_level\
    \ = paren_level;\n      }\n    }\n    if(paren_string[i] == ')'){\n      paren_level--;\n\
    \      if(paren_level == nested_paren_level){\n        nested_paren_stack.pop();\n\
    \      }\n    }\n  }\n  return nested_paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(', '(', '(' ],\n  [ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(',\
    \ '(', '(' ],\n  [ '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '(', '('\
    \ ] ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpyffryp8s.js:39:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyffryp8s.js:44:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    [\n      '(', '(', '(', '(',\n   \
    \   '(', '(', '(', '(',\n      '(', '(', '(', '('\n    ],\n    [\n      '(', '(',\
    \ '(', '(',\n      '(', '(', '(', '(',\n      '(', '(', '(', '('\n    ],\n   \
    \ [\n      '(', '(', '(', '(',\n      '(', '(', '(', '(',\n      '(', '(', '(',\
    \ '('\n    ]\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_groups = [];\n    var paren_groups = paren_string.split(\"\
    \ \");\n    for(var i = 0; i < paren_groups.length; i++){\n        var paren_group\
    \ = paren_groups[i];\n        if(paren_group === \"()\"){\n            nested_paren_level++;\n\
    \        }\n        else if(paren_group === \")\"){\n            nested_paren_level--;\n\
    \        }\n        else if(paren_group === \"()\"){\n            nested_paren_groups.push(nested_paren_level);\n\
    \        }\n    }\n    return nested_paren_groups;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmpx9dqc1bg.js:30:10)\n    at Object.<anonymous> (/tmp/tmpx9dqc1bg.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var nested_paren_array = [];\n  \
    \  var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n    var paren_level = 0;\n    var paren_array = [];\n\
    \    var paren_stack = [];\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxqj37mqu.js:103\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_pointer = 0;\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char == '('){\n     \
    \       paren_stack.push(paren_level_stack_pointer);\n            paren_level_stack.push(paren_level.length);\n\
    \            paren_level.push(0);\n        }\n        else if(char == ')'){\n\
    \            var paren_level_pointer = paren_stack.pop();\n            var paren_level_length\
    \ = paren_level_stack.pop();\n            if(paren_level_pointer == 0){\n    \
    \            paren_level.push(paren_level_length);\n            }\n        }\n\
    \        else if(char == ' '){\n            var paren_level_pointer = paren_stack.pop();\n\
    \            var paren_level_length = paren_level_stack.pop();\n            if(paren_level_pointer\
    \ == 0){\n                paren_level.push(paren_level_length);\n            }\n\
    \        }\n        else if(char == ','){\n            var paren_level_pointer\
    \ = paren_stack.pop();\n            var paren_level_length = paren_level_stack.pop();\n\
    \            if(paren_level_pointer == 0){\n                paren_level.push(paren_level_length);\n\
    \            }\n        }\n        else if(char == '('){\n            paren_level_stack_pointer\
    \ = paren_stack.length;\n        }\n        else if(char == ')'){\n          \
    \  paren_level_stack_pointer = paren_stack.length;\n        }\n        else if(char\
    \ == ' '){\n            paren_level_stack_pointer = paren_stack.length;\n    \
    \    }\n        else if(char == ','){\n            paren_level_stack_pointer =\
    \ paren_stack.length;\n        }\n        else{\n            paren_level_stack_pointer\
    \ = paren_stack.length;\n        }\n    }\n    return paren_level;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 1, 0, 3, 0, 0, 0, 0, 8, 7, 6, 0,\
    \ 12, 0, 0, 0, 16, 15, 0, 19, 0, 21, 14 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmp86f7l9to.js:64:10)\n    at Object.<anonymous> (/tmp/tmp86f7l9to.js:69:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    0,  0,  1, 0,  3,  0,  0,  0,\n  \
    \  0,  8,  7, 6,  0, 12,  0,  0,\n    0, 16, 15, 0, 19,  0, 21, 14\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level = 0;\n\
    \tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tif(paren_string[i]\
    \ == '('){\n\t\t\tparen_stack.push(level);\n\t\t}\n\t\telse if(paren_string[i]\
    \ == ')'){\n\t\t\tlevel = paren_stack.pop();\n\t\t}\n\t}\n\treturn paren_stack;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmpqnwlsvgf.js:25:10)\n    at Object.<anonymous> (/tmp/tmpqnwlsvgf.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    for(var i = 0; i < paren_string.length; i++){\n\
    \        var char = paren_string[i];\n        if(char === '('){\n            paren_stack.push(level);\n\
    \            level++;\n        }else if(char === ')'){\n            level--;\n\
    \        }\n    }\n    return paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 1, 0, 1, 2, 0, 0, 1, 2, 1, 1 ]\n\
    \nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpz9h4c7uv.js:26:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpz9h4c7uv.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var nested_paren_groups = [];\n\
    \    var paren_groups = paren_string.split(\" \");\n    for(var i = 0; i < paren_groups.length;\
    \ i++){\n        var paren_group = paren_groups[i];\n        if(paren_group ===\
    \ \"()\" || paren_group === \"[]\"){\n            nested_paren_stack.push(paren_group);\n\
    \        }else if(paren_group === \")\"){\n            nested_paren_level--;\n\
    \            while(nested_paren_stack.length > 0){\n                nested_paren_groups.push(nested_paren_stack.pop());\n\
    \            }\n        }else if(paren_group === \"[]\"){\n            nested_paren_level++;\n\
    \            nested_paren_stack.push(paren_group);\n        }\n    }\n    return\
    \ nested_paren_groups;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmphus6j10v.js:33:10)\n    at Object.<anonymous> (/tmp/tmphus6j10v.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_index = 0;\n    var paren_level_stack_last_index_string\
    \ = '';\n    var paren_level_stack_last_index_count = 0;\n    var paren_level_stack_last_index_count_string\
    \ = '';\n    var paren_level_stack_last_index_count_string2 = '';\n    var paren_level_stack_last_index_count_string3\
    \ = '';\n    var paren_level_stack_last_index_count_string4 = '';\n    var paren_level_stack_last_index_count_string5\
    \ = '';\n    var paren_level_stack_last_index_count_string6 = '';\n    var paren_level_stack_last_index_count_string7\
    \ = '';\n    var paren_level_stack_last_index_count_string8 = '';\n    var paren_level_stack_last_index_count_string9\
    \ = '';\n    var paren_level_stack_last_index_count_string10 = '';\n    var paren_level_stack_last_index_count_string11\
    \ = '';\n    var paren_level_stack_last_index_count_string12 = '';\n    var paren_level_stack_last_index_count_string13\
    \ = '';\n    var paren_level_stack_last_index_count_string14 = '';\n    var paren_level_stack_last_index_count_string15\
    \ = '';\n    var paren_level_stack_last_index_count_string16 = '';\n    var paren_level_stack_last_index_count_string17\
    \ = '';\n    var paren_level_stack_last_index_count_string18 = '';\n    var paren_level_stack_last_index_count_string19\
    \ = '';\n    var paren_level_stack_last_index_count_string20 = '';\n    var paren_level_stack_last_index_count_string21\
    \ = '';\n    var paren_level_stack_last_index_count_string22 = '';\n    var paren_level_stack_last_index_count_string23\
    \ = '';\n    var paren_level_stack_last_index_count_string24 = '';\n    var paren_level_stack_last_index_count_string25\
    \ = '';\n    var paren_level_stack_last_index_count_string26 = '';\n    var paren_level_stack_last_index_count_string27\
    \ = '';\n    var paren_level_stack_last_index_count_string28 = '';\n    var paren_level_stack_last_index_count_string29\
    \ = '';\n    var paren_level_stack_last_index_count_string30 = '';\n    var paren_level_stack_last_index_count_string31\
    \ = '';\n    var paren_level_stack_last_index_count_string32 = '';\n    var paren_level_stack_last_index_count_string33\
    \ = '';\n    var paren_level_stack_last_index_count_string34 = '';\n    var paren_level_stack_last_index_count_string35\
    \ = '';\n    var paren_level_stack_last_index_count_string36 = '';\n    var paren_level_stack_last_index_count_string37\
    \ = '';\n    var \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgy6k5jti.js:54\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_stack\
    \ = [];\n    var paren_levels_stack_index = 0;\n    var paren_levels_stack_len\
    \ = 0;\n    var paren_levels_stack_len_index = 0;\n    var paren_levels_stack_len_index2\
    \ = 0;\n    var paren_levels_stack_len_index3 = 0;\n    var paren_levels_stack_len_index4\
    \ = 0;\n    var paren_levels_stack_len_index5 = 0;\n    var paren_levels_stack_len_index6\
    \ = 0;\n    var paren_levels_stack_len_index7 = 0;\n    var paren_levels_stack_len_index8\
    \ = 0;\n    var paren_levels_stack_len_index9 = 0;\n    var paren_levels_stack_len_index10\
    \ = 0;\n    var paren_levels_stack_len_index11 = 0;\n    var paren_levels_stack_len_index12\
    \ = 0;\n    var paren_levels_stack_len_index13 = 0;\n    var paren_levels_stack_len_index14\
    \ = 0;\n    var paren_levels_stack_len_index15 = 0;\n    var paren_levels_stack_len_index16\
    \ = 0;\n    var paren_levels_stack_len_index17 = 0;\n    var paren_levels_stack_len_index18\
    \ = 0;\n    var paren_levels_stack_len_index19 = 0;\n    var paren_levels_stack_len_index20\
    \ = 0;\n    var paren_levels_stack_len_index21 = 0;\n    var paren_levels_stack_len_index22\
    \ = 0;\n    var paren_levels_stack_len_index23 = 0;\n    var paren_levels_stack_len_index24\
    \ = 0;\n    var paren_levels_stack_len_index25 = 0;\n    var paren_levels_stack_len_index26\
    \ = 0;\n    var paren_levels_stack_len_index27 = 0;\n    var paren_levels_stack_len_index28\
    \ = 0;\n    var paren_levels_stack_len_index29 = 0;\n    var paren_levels_stack_len_index30\
    \ = 0;\n    var paren_levels_stack_len_index31 = 0;\n    var paren_levels_stack_len_index32\
    \ = 0;\n    var paren_levels_stack_len_index33 = 0;\n    var paren_levels_stack_len_index34\
    \ = 0;\n    var paren_levels_stack_len_index35 = 0;\n    var paren_levels_stack_len_index36\
    \ = 0;\n    var paren_levels_stack_len_index37 = 0;\n    var paren_levels_stack_len_index38\
    \ = 0;\n    var paren_levels_stack_len_index39 = 0;\n    var paren_levels_stack_len_index40\
    \ = 0;\n    var paren_levels_stack_len_index41 = 1;\n    var paren_levels_stack_len_index42\
    \ = 1;\n    var paren_levels_stack_len_index43 = 1;\n    var \nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbtdpeo46.js:57\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_levels\
    \ = [];\n    var paren_level_counter = 0;\n    var paren_level_counters = [];\n\
    \    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index = 0;\n    var paren_level_counters_indexs\
    \ = [];\n    var paren_level_counters_index\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmmpo6y_n.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_levels\
    \ = [];\n    var paren_nesting_levels = [];\n    for(var i=0; i<paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        if(char === '('){\n    \
    \        paren_stack.push(paren_level);\n            paren_level++;\n        \
    \    paren_nesting++;\n            paren_levels.push(paren_level);\n         \
    \   paren_nesting_levels.push(paren_nesting);\n        }\n        else if(char\
    \ === ')'){\n            paren_level--;\n            paren_nesting--;\n      \
    \      paren_levels.push(paren_level);\n            paren_nesting_levels.push(paren_nesting);\n\
    \        }\n    }\n    return paren_levels;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 0, 1, 2, 3, 2, 1, 0, 1,\
    \ 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n    at\
    \ test (/tmp/tmpbumvs3at.js:36:10)\n    at Object.<anonymous> (/tmp/tmpbumvs3at.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2, 1, 0, 1, 2,\n    3, 2,\
    \ 1, 0, 1, 0, 1, 2,\n    3, 2, 1, 2, 1, 2, 1, 0\n  ],\n  expected: [ 2, 3, 1,\
    \ 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_level\
    \ = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_count = 0;\n\
    \    var paren_level_stack_string = '';\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string_count2 = 0;\n    var paren_level_stack_string_count3\
    \ = 0;\n    var paren_level_stack_string_count4 = 0;\n    var paren_level_stack_string_count5\
    \ = 0;\n    var paren_level_stack_string_count6 = 0;\n    var paren_level_stack_string_count7\
    \ = 0;\n    var paren_level_stack_string_count8 = 0;\n    var paren_level_stack_string_count9\
    \ = 0;\n    var paren_level_stack_string_count10 = 0;\n    var paren_level_stack_string_count11\
    \ = 0;\n    var paren_level_stack_string_count12 = 0;\n    var paren_level_stack_string_count13\
    \ = 0;\n    var paren_level_stack_string_count14 = 0;\n    var paren_level_stack_string_count15\
    \ = 0;\n    var paren_level_stack_string_count16 = 0;\n    var paren_level_stack_string_count17\
    \ = 0;\n    var paren_level_stack_string_count18 = 0;\n    var paren_level_stack_string_count19\
    \ = 0;\n    var paren_level_stack_string_count20 = 0;\n    var paren_level_stack_string_count21\
    \ = 0;\n    var paren_level_stack_string_count22 = 0;\n    var paren_level_stack_string_count23\
    \ = 0;\n    var paren_level_stack_string_count24 = 0;\n    var paren_level_stack_string_count25\
    \ = 0;\n    var paren_level_stack_string_count26 = 0;\n    var paren_level_stack_string_count27\
    \ = 0;\n    var paren_level_stack_string_count28 = 0;\n    var paren_level_stack_string_count29\
    \ = 0;\n    var paren_level_stack_string_count30 = 0;\n    var paren_level_stack_string_count31\
    \ = 0;\n    var paren_level_stack_string_count32 = 0;\n    var paren_level_stack_string_count33\
    \ = 0;\n    var paren_level_stack_string_count34 = 0;\n    var paren_level_stack_string_count35\
    \ = 0;\n    var paren_level_stack_string_count36 = 0;\n    var paren_level_stack_string_count37\
    \ = 0;\n    var paren_level_stack_string_count38 = 0;\n    var paren_level_stack_string_count39\
    \ = 0;\n    var paren_level_stack_string_count40 = 0;\n    var paren_level_stack_string_count41\
    \ = 0;\n    var paren_level_stack_string_count42 = 0;\n    var paren_level_stack_string_count43\
    \ = 0;\n    var paren_level_stack_string_count44 = 0;\n    var paren_level_stack_string_count45\
    \ = 0;\n    var paren_level_stack_string_count46 = 0;\n    var paren_level_stack_string_count47\
    \ = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpee754h2w.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_nesting\
    \ = 0;\n  for(var i=0; i<paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if(char === '('){\n      paren_stack.push(paren_nesting);\n      paren_nesting++;\n\
    \    }\n    else if(char === ')'){\n      paren_nesting = paren_stack.pop();\n\
    \    }\n    else if(char === ' ' && paren_stack.length > 0){\n      paren_nesting\
    \ = paren_stack[paren_stack.length-1];\n    }\n    else if(char === ' ' && paren_nesting\
    \ > 0){\n      paren_nesting--;\n    }\n    else if(char === ')' && paren_nesting\
    \ === 0){\n      nested_parens.push(paren_level);\n      paren_level--;\n    }\n\
    \  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmplw8uy6v4.js:39:10)\n    at Object.<anonymous> (/tmp/tmplw8uy6v4.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_levels_stack = [];\n    var paren_levels_stack_index =\
    \ 0;\n    var paren_levels_stack_index2 = 0;\n    var paren_levels_stack_index3\
    \ = 0;\n    var paren_levels_stack_index4 = 0;\n    var paren_levels_stack_index5\
    \ = 0;\n    var paren_levels_stack_index6 = 0;\n    var paren_levels_stack_index7\
    \ = 0;\n    var paren_levels_stack_index8 = 0;\n    var paren_levels_stack_index9\
    \ = 0;\n    var paren_levels_stack_index10 = 0;\n    var paren_levels_stack_index11\
    \ = 0;\n    var paren_levels_stack_index12 = 0;\n    var paren_levels_stack_index13\
    \ = 0;\n    var paren_levels_stack_index14 = 0;\n    var paren_levels_stack_index15\
    \ = 0;\n    var paren_levels_stack_index16 = 0;\n    var paren_levels_stack_index17\
    \ = 0;\n    var paren_levels_stack_index18 = 0;\n    var paren_levels_stack_index19\
    \ = 0;\n    var paren_levels_stack_index20 = 0;\n    var paren_levels_stack_index21\
    \ = 0;\n    var paren_levels_stack_index22 = 0;\n    var paren_levels_stack_index23\
    \ = 0;\n    var paren_levels_stack_index24 = 0;\n    var paren_levels_stack_index25\
    \ = 0;\n    var paren_levels_stack_index26 = 0;\n    var paren_levels_stack_index27\
    \ = 0;\n    var paren_levels_stack_index28 = 0;\n    var paren_levels_stack_index29\
    \ = 0;\n    var paren_levels_stack_index30 = 0;\n    var paren_levels_stack_index31\
    \ = 0;\n    var paren_levels_stack_index32 = 0;\n    var paren_levels_stack_index33\
    \ = 0;\n    var paren_levels_stack_index34 = 0;\n    var paren_levels_stack_index35\
    \ = 0;\n    var paren_levels_stack_index36 = 0;\n    var paren_levels_stack_index37\
    \ = 0;\n    var paren_levels_stack_index38 = 0;\n    var paren_levels_stack_index39\
    \ = 0;\n    var paren_levels_stack_index40 = 0;\n    var paren_levels_stack_index41\
    \ = 1;\n    var paren_levels_stack_index42 = 1;\n    var paren_levels_stack_index43\
    \ = 1;\n    var paren_levels_stack_index44 = 1;\n    var paren_levels_stack_index45\
    \ = 1;\n    var paren_levels_stack_index46 = 1;\n    var paren_levels_stack_index47\
    \ = 1;\n    var paren_levels_stack_index48 = 1;\n    var paren\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplhxyskdc.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var c = paren_string[i];\n        if(c\
    \ == '('){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(c == ')'){\n            paren_level = paren_stack.pop();\n\
    \        }\n        else if(paren_stack.length > 0){\n            nested_parens.push(paren_level);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmp_p9o9loo.js:31:10)\n    at Object.<anonymous> (/tmp/tmp_p9o9loo.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var nested_paren_stack = [];\n  var nested_paren_level = 0;\n  var nested_paren_level_stack\
    \ = [];\n  var nested_paren_level_max = 0;\n  var nested_paren_level_max_stack\
    \ = [];\n  var nested_paren_level_max_count = 0;\n  var nested_paren_level_max_count_stack\
    \ = [];\n  var nested_paren_level_max_count_max = 0;\n  var nested_paren_level_max_count_max_stack\
    \ = [];\n  var nested_paren_level_max_count_max_count = 0;\n  var nested_paren_level_max_count_max_count_stack\
    \ = [];\n  var nested_paren_level_max_count_max_count_max = 0;\n  var nested_paren_level_max_count_max_count_max_stack\
    \ = [];\n  var nested_paren_level_max_count_max_count_max_count = 0;\n  var nested_paren_level_max_count_max_count_max_count_stack\
    \ = [];\n  var nested_paren_level_max_count_max_count_max_count_max = 0;\n  var\
    \ nested_paren_level_max_count_max_count_max_count_max_stack = [];\n  var nested_paren_level_max_count_max_count_max_count_max_count\
    \ = 0;\n  var nested_paren_level_max_count_max_count_max_count_max_count_stack\
    \ = [];\n  var nested_paren_level_max_count_max_count_max_count_max_count_max\
    \ = 0;\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_stack\
    \ = [];\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_stack\
    \ = [];\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_stack\
    \ = [];\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_max_stack\
    \ = [];\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_max_count_stack\
    \ = [];\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_max_count_stack\
    \ = [];\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0;\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0;\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_max_count_max_count_stack\
    \ = [];\n  var nested_paren_level_max_count_max_count_max_count_max_count_max_count_max_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpidorkoz2.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char === '('){\n            paren_stack.push(paren_count);\n     \
    \       paren_count++;\n        }else if(char === ')'){\n            paren_count\
    \ = paren_stack.pop();\n        }else if(char === ' ' && paren_count > 0){\n \
    \           paren_count--;\n        }\n        if(paren_count === 0){\n      \
    \      nested_parens.push(paren_level);\n        }\n        paren_level++;\n \
    \   }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 6, 12, 13, 15, 16, 26 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpgcw49ybm.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgcw49ybm.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     5,\
    \  6, 12, 13,\n    15, 16, 26\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var nested_paren_stack = [];\n    var nested_paren_levels = [];\n\
    \    var paren_level = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n\
    \    var paren_levels_string = '';\n    var paren_levels_strings = [];\n    var\
    \ paren_levels_strings_array = [];\n    var paren_levels_strings_array_index =\
    \ 0;\n    var paren_levels_strings_array_length = 0;\n    var paren_levels_strings_array_max\
    \ = 0;\n    var paren_levels_strings_array_max_index = 0;\n    var paren_levels_strings_array_max_length\
    \ = 0;\n    var paren_levels_strings_array_max_value = 0;\n    var paren_levels_strings_array_max_value_length\
    \ = 0;\n    var paren_levels_strings_array_max_value_max = 0;\n    var paren_levels_strings_array_max_value_max_index\
    \ = 0;\n    var paren_levels_strings_array_max_value_max_length = 0;\n    var\
    \ paren_levels_strings_array_max_value_max_value = 0;\n    var paren_levels_strings_array_max_value_max_value_length\
    \ = 0;\n    var paren_levels_strings_array_max_value_max_value_max = 0;\n    var\
    \ paren_levels_strings_array_max_value_max_value_max_index = 0;\n    var paren_levels_strings_array_max_value_max_value_max_length\
    \ = 0;\n    var paren_levels_strings_array_max_value_max_value_max_value = 0;\n\
    \    var paren_levels_strings_array_max_value_max_value_max_value_length = 0;\n\
    \    var paren_levels_strings_array_max_value_max_value_max_value_max = 0;\n \
    \   var paren_levels_strings_array_max_value_max_value_max_value_max_index = 0;\n\
    \    var paren_levels_strings_array_max_value_max_value_max_value_max_length =\
    \ 0;\n    var paren_levels_strings_array_max_value_max_value_max_value_max_value\
    \ = 0;\n    var paren_levels_strings_array_max_value_max_value_max_value_max_value_length\
    \ = 0;\n    var paren_levels_strings_array_max_value_max_value_max_value_max_value_max\
    \ = 0;\n    var paren_levels_strings_array_max_value_max_value_max_value_max_value_max_index\
    \ = 0;\n    var paren_levels_strings_array_max_value_max_value_max_value_max_value_max_length\
    \ = 0;\n    var paren_levels_strings_array_max_value_max_value_max_value_max_value_max_value\
    \ = 0;\n    var paren_levels_strings_array_max_value_max_value_max_value_max_value_max_value_length\
    \ = 0;\n    var paren_levels_strings_array_max_value_max_value_max_value_max_value_max_value\
    \ = 0;\n    var paren_levels_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxmzlkcks.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_level_stack\
    \ = [];\n  var paren_level_counter = 0;\n  var paren_level_counters = [];\n  var\
    \ paren_level_counters_stack = [];\n  var paren_level_counters_stack_index = 0;\n\
    \  var paren_level_counters_stack_indexes = [];\n  var paren_level_counters_stack_indexes_stack\
    \ = [];\n  var paren_level_counters_stack_indexes_stack_index = 0;\n  var paren_level_counters_stack_indexes_stack_indexes\
    \ = [];\n  var paren_level_counters_stack_indexes_stack_indexes_stack = [];\n\
    \  var paren_level_counters_stack_indexes_stack_indexes_stack_index = 0;\n  var\
    \ paren_level_counters_stack_indexes_stack_indexes_stack_indexes = [];\n  var\
    \ paren_level_counters_stack_indexes_stack_indexes_stack_index = 0;\n  var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n  var paren_level_counters_stack_indexes_stack_indexes_stack_index =\
    \ 0;\n  var paren_level_counters_stack_indexes_stack_indexes_stack_indexes = [];\n\
    \  var paren_level_counters_stack_indexes_stack_indexes_stack_index = 0;\n  var\
    \ paren_level_counters_stack_indexes_stack_indexes_stack_indexes = [];\n  var\
    \ paren_level_counters_stack_indexes_stack_indexes_stack_index = 0;\n  var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n  var paren_level_counters_stack_indexes_stack_indexes_stack_index =\
    \ 0;\n  var paren_level_counters_stack_indexes_stack_indexes_stack_indexes = [];\n\
    \  var paren_level_counters_stack_indexes_stack_indexes_stack_index = 0;\n  var\
    \ paren_level_counters_stack_indexes_stack_indexes_stack_indexes = [];\n  var\
    \ paren_level_counters_stack_indexes_stack_indexes_stack_index = 0;\n  var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n  var paren_level_counters_stack_indexes_stack_indexes_stack_index =\
    \ 0;\n  var paren_level_counters_stack_indexes_stack_indexes_stack_indexes = [];\n\
    \  var paren_level_counters_stack_indexes_stack_indexes_stack_index = 0;\n  var\
    \ paren_level_counters_stack_indexes_stack_indexes_stack_indexes = [];\n  var\
    \ paren_level_counters_stack_indexes_stack_indexes_stack_index = 0;\n  var paren_level_counters_stack_indexes_stack_indexes_stack_indexes\
    \ = [];\n  var paren_level_counters_stack_indexes_stack_indexes_stack_index =\
    \ 0;\n  var paren_level_counters_stack_indexes_stack_index\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6unka1sw.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == '('){\n\t\t\tparen_stack.push(paren_level);\n\
    \t\t\tparen_level++;\n\t\t}\n\t\telse if(paren_string[i] == ')'){\n\t\t\tparen_level\
    \ = paren_stack.pop();\n\t\t}\n\t\telse if(paren_string[i] == ' '){\n\t\t\tif(paren_level\
    \ > 0){\n\t\t\t\tnested_parens.push(paren_level);\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmp0j_w5rmc.js:32:10)\n    at Object.<anonymous> (/tmp/tmp0j_w5rmc.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ === '('){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char === ')'){\n            paren_level = paren_stack.pop();\n\
    \        }\n        if(paren_level > nested_parens.length){\n            nested_parens.push(paren_level);\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 3 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmp6plv9e69.js:30:10)\n    at Object.<anonymous> (/tmp/tmp6plv9e69.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    var char = paren_string[i];\n    if(char === '('){\n      paren_stack.push(paren_level);\n\
    \      paren_level++;\n    }else if(char === ')'){\n      paren_level--;\n   \
    \ }\n    if(paren_stack.length <= paren_level){\n      nested_parens.push(paren_stack);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [ 0, 1, 1, 0, 1, 2, 0, 0, 1, 2, 1, 1 ],\n\
    \  [ 0, 1, 1, 0, 1, 2, 0, 0, 1, 2, 1, 1 ] ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmpz6bhsmoj.js:30:10)\n    at Object.<anonymous> (/tmp/tmpz6bhsmoj.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    [\n      0, 1, 1, 0, 1,\n      2,\
    \ 0, 0, 1, 2,\n      1, 1\n    ],\n    [\n      0, 1, 1, 0, 1,\n      2, 0, 0,\
    \ 1, 2,\n      1, 1\n    ]\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_stack = [];\n    var paren_levels\
    \ = [];\n    var paren_levels_stack = [];\n    var paren_levels_stack_index =\
    \ 0;\n    var paren_levels_stack_index2 = 0;\n    var paren_levels_stack_index3\
    \ = 0;\n    var paren_levels_stack_index4 = 0;\n    var paren_levels_stack_index5\
    \ = 0;\n    var paren_levels_stack_index6 = 0;\n    var paren_levels_stack_index7\
    \ = 0;\n    var paren_levels_stack_index8 = 0;\n    var paren_levels_stack_index9\
    \ = 0;\n    var paren_levels_stack_index10 = 0;\n    var paren_levels_stack_index11\
    \ = 0;\n    var paren_levels_stack_index12 = 0;\n    var paren_levels_stack_index13\
    \ = 0;\n    var paren_levels_stack_index14 = 0;\n    var paren_levels_stack_index15\
    \ = 0;\n    var paren_levels_stack_index16 = 0;\n    var paren_levels_stack_index17\
    \ = 0;\n    var paren_levels_stack_index18 = 0;\n    var paren_levels_stack_index19\
    \ = 0;\n    var paren_levels_stack_index20 = 0;\n    var paren_levels_stack_index21\
    \ = 0;\n    var paren_levels_stack_index22 = 0;\n    var paren_levels_stack_index23\
    \ = 0;\n    var paren_levels_stack_index24 = 0;\n    var paren_levels_stack_index25\
    \ = 0;\n    var paren_levels_stack_index26 = 0;\n    var paren_levels_stack_index27\
    \ = 0;\n    var paren_levels_stack_index28 = 0;\n    var paren_levels_stack_index29\
    \ = 0;\n    var paren_levels_stack_index30 = 0;\n    var paren_levels_stack_index31\
    \ = 0;\n    var paren_levels_stack_index32 = 0;\n    var paren_levels_stack_index33\
    \ = 0;\n    var paren_levels_stack_index34 = 0;\n    var paren_levels_stack_index35\
    \ = 0;\n    var paren_levels_stack_index36 = 0;\n    var paren_levels_stack_index37\
    \ = 0;\n    var paren_levels_stack_index38 = 0;\n    var paren_levels_stack_index39\
    \ = 0;\n    var paren_levels_stack_index40 = 0;\n    var paren_levels_stack_index41\
    \ = 1;\n    var paren_levels_stack_index42 = 1;\n    var paren_levels_stack_index43\
    \ = 1;\n    var paren_levels_stack_index44 = 1;\n    var paren_levels_stack_index45\
    \ = 1;\n    var paren_levels_stack_index46 = 1;\n    var paren_levels_stack_index47\
    \ = 1;\n    var paren_levels_stack_index48 = 1;\n    var paren\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsfbfhwrz.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_level_stack = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack_count = [];\n    var paren_level_stack_count\
    \ = [];\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpk4iry9jf.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_string\
    \ = '';\n    var paren_levels_string_index = 0;\n    var paren_levels_string_length\
    \ = 0;\n    var paren_levels_string_length_index = 0;\n    var paren_levels_string_length_max\
    \ = 0;\n    var paren_levels_string_length_max_index = 0;\n    var paren_levels_string_length_min\
    \ = 0;\n    var paren_levels_string_length_min_index = 0;\n    var paren_levels_string_length_avg\
    \ = 0;\n    var paren_levels_string_length_avg_index = 0;\n    var paren_levels_string_length_sum\
    \ = 0;\n    var paren_levels_string_length_sum_index = 0;\n    var paren_levels_string_length_sum2\
    \ = 0;\n    var paren_levels_string_length_sum2_index = 0;\n    var paren_levels_string_length_sum3\
    \ = 0;\n    var paren_levels_string_length_sum3_index = 0;\n    var paren_levels_string_length_sum4\
    \ = 0;\n    var paren_levels_string_length_sum4_index = 0;\n    var paren_levels_string_length_sum5\
    \ = 0;\n    var paren_levels_string_length_sum5_index = 0;\n    var paren_levels_string_length_sum6\
    \ = 0;\n    var paren_levels_string_length_sum6_index = 0;\n    var paren_levels_string_length_sum7\
    \ = 0;\n    var paren_levels_string_length_sum7_index = 0;\n    var paren_levels_string_length_sum8\
    \ = 0;\n    var paren_levels_string_length_sum8_index = 0;\n    var paren_levels_string_length_sum9\
    \ = 0;\n    var paren_levels_string_length_sum9_index = 0;\n    var paren_levels_string_length_sum10\
    \ = 0;\n    var paren_levels_string_length_sum10_index = 0;\n    var paren_levels_string_length_sum11\
    \ = 0;\n    var paren_levels_string_length_sum11_index = 0;\n    var paren_levels_string_length_sum12\
    \ = 0;\n    var paren_levels_string_length_sum12_index = 0;\n    var paren_levels_string_length_sum13\
    \ = 0;\n    var paren_levels_string_length_sum13_index = 0;\n    var paren_levels_string_length_sum14\
    \ = 0;\n    var paren_levels_string_length_sum14_index = 0;\n    var paren_levels_string_length_sum15\
    \ = 0;\n    var paren_levels_string_length_sum15_index = 0;\n    var paren_levels_string_length_sum16\
    \ = 0;\n    var paren_levels_string_length_sum16_index = 0;\n    var paren_levels_string_length_sum17\
    \ = 0;\n    var paren_levels_string_length_sum17_index = 0;\n    var paren_levels_string_length_sum18\
    \ = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjr2wshym.js:65\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_count\
    \ = 0;\n  var nested_paren_level = 0;\n  var paren_stack = [];\n  var paren_level\
    \ = 0;\n  var paren_stack_string = '';\n  var paren_level_string = '';\n  var\
    \ paren_level_counter = 0;\n  var paren_level_counter_string = '';\n  var paren_level_counter_string2\
    \ = '';\n  var paren_level_counter_string3 = '';\n  var paren_level_counter_string4\
    \ = '';\n  var paren_level_counter_string5 = '';\n  var paren_level_counter_string6\
    \ = '';\n  var paren_level_counter_string7 = '';\n  var paren_level_counter_string8\
    \ = '';\n  var paren_level_counter_string9 = '';\n  var paren_level_counter_string10\
    \ = '';\n  var paren_level_counter_string11 = '';\n  var paren_level_counter_string12\
    \ = '';\n  var paren_level_counter_string13 = '';\n  var paren_level_counter_string14\
    \ = '';\n  var paren_level_counter_string15 = '';\n  var paren_level_counter_string16\
    \ = '';\n  var paren_level_counter_string17 = '';\n  var paren_level_counter_string18\
    \ = '';\n  var paren_level_counter_string19 = '';\n  var paren_level_counter_string20\
    \ = '';\n  var paren_level_counter_string21 = '';\n  var paren_level_counter_string22\
    \ = '';\n  var paren_level_counter_string23 = '';\n  var paren_level_counter_string24\
    \ = '';\n  var paren_level_counter_string25 = '';\n  var paren_level_counter_string26\
    \ = '';\n  var paren_level_counter_string27 = '';\n  var paren_level_counter_string28\
    \ = '';\n  var paren_level_counter_string29 = '';\n  var paren_level_counter_string30\
    \ = '';\n  var paren_level_counter_string31 = '';\n  var paren_level_counter_string32\
    \ = '';\n  var paren_level_counter_string33 = '';\n  var paren_level_counter_string34\
    \ = '';\n  var paren_level_counter_string35 = '';\n  var paren_level_counter_string36\
    \ = '';\n  var paren_level_counter_string37 = '';\n  var paren_level_counter_string38\
    \ = '';\n  var paren_level_counter_string39 = '';\n  var paren_level_counter_string40\
    \ = '';\n  var paren_level_counter_string41 = '';\n  var paren_level_counter_string42\
    \ = '';\n  var paren_level_counter_string43 = '';\n  var paren_level_counter_string44\
    \ = '';\n  var paren_level_counter_string45 = '';\n  var paren_level_counter_string46\
    \ = '';\n  var paren_level_counter_string47 = '';\n  var paren_level_counter_string48\
    \ = '';\n  var paren_level_counter_string49 = '';\n  var paren_level_counter_string50\
    \ = '';\n  var paren_level_counter_string51 = '';\n  var paren_level_counter_string52\
    \ = '';\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwdgw6ibf.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_nesting = 0;\n  var paren_levels\
    \ = [];\n  var paren_nestings = [];\n  var paren_levels_string = '';\n  var paren_nestings_string\
    \ = '';\n  var paren_levels_string_index = 0;\n  var paren_nestings_string_index\
    \ = 0;\n  var paren_levels_string_indexes = [];\n  var paren_nestings_string_indexes\
    \ = [];\n  var paren_levels_string_indexes_index = 0;\n  var paren_nestings_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_string_indexes_index = 0;\n  var paren_levels_string_indexes_index\
    \ = 0;\n  var paren_levels_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9559xx15.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_stack\
    \ = [];\n  var paren_level = 0;\n  var paren_level_stack = [];\n  var paren_level_stack_count\
    \ = 0;\n  var paren_level_stack_string = '';\n  var paren_level_stack_max = 0;\n\
    \  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count =\
    \ 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var paren_level_stack_max_count\
    \ = 0;\n  var paren_level_stack_max_string = '';\n  var \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpq4i2v5gz.js:69\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_count\
    \ = 0;\n    var paren_level_max_count = 1;\n    var paren_level_max_count_index\
    \ = 0;\n    var paren_level_max_count_index2 = 0;\n    var paren_level_max_count_index3\
    \ = 0;\n    var paren_level_max_count_index4 = 0;\n    var paren_level_max_count_index5\
    \ = 0;\n    var paren_level_max_count_index6 = 0;\n    var paren_level_max_count_index7\
    \ = 0;\n    var paren_level_max_count_index8 = 0;\n    var paren_level_max_count_index9\
    \ = 0;\n    var paren_level_max_count_index10 = 0;\n    var paren_level_max_count_index11\
    \ = 0;\n    var paren_level_max_count_index12 = 0;\n    var paren_level_max_count_index13\
    \ = 0;\n    var paren_level_max_count_index14 = 0;\n    var paren_level_max_count_index15\
    \ = 0;\n    var paren_level_max_count_index16 = 0;\n    var paren_level_max_count_index17\
    \ = 0;\n    var paren_level_max_count_index18 = 0;\n    var paren_level_max_count_index19\
    \ = 0;\n    var paren_level_max_count_index20 = 0;\n    var paren_level_max_count_index21\
    \ = 0;\n    var paren_level_max_count_index22 = 0;\n    var paren_level_max_count_index23\
    \ = 0;\n    var paren_level_max_count_index24 = 0;\n    var paren_level_max_count_index25\
    \ = 0;\n    var paren_level_max_count_index26 = 0;\n    var paren_level_max_count_index27\
    \ = 0;\n    var paren_level_max_count_index28 = 0;\n    var paren_level_max_count_index29\
    \ = 0;\n    var paren_level_max_count_index30 = 0;\n    var paren_level_max_count_index31\
    \ = 0;\n    var paren_level_max_count_index32 = 0;\n    var paren_level_max_count_index33\
    \ = 0;\n    var paren_level_max_count_index34 = 0;\n    var paren_level_max_count_index35\
    \ = 0;\n    var paren_level_max_count_index36 = 0;\n    var paren_level_max_count_index37\
    \ = 0;\n    var paren_level_max_count_index38 = 0;\n    var paren_level_max_count_index39\
    \ = 0;\n    var paren_level_max_count_index40 = 0;\n    var paren_level_max_count_index41\
    \ = 0;\n    var paren_level_max_count_index42 = 0;\n    var paren_level_max_count_index43\
    \ = 0;\n    var paren_level_max_count_index44 = 0;\n    var paren_level_max_count_index45\
    \ = 0;\n    var paren_level_max_count_index46 = 0;\n    var paren_level_max_count_index47\
    \ = 0;\n    var paren_level_max_count_index48 = 0;\n    var paren_level_max_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmps5v0sl62.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    for(var i=0; i<paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if(char == '('){\n            paren_stack.push(paren_count);\n      \
    \      paren_count++;\n        }else if(char == ')'){\n            paren_count\
    \ = paren_stack.pop();\n        }\n        if(paren_count > 0){\n            nested_parens.push(paren_level);\n\
    \        }\n        paren_level++;\n    }\n    return nested_parens;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 17,\
    \ 18, 19, 20, 21, 22, 23, 24, 25 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test\
    \ (/tmp/tmp7s7zjju6.js:32:10)\n    at Object.<anonymous> (/tmp/tmp7s7zjju6.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n     0,  1,  2,  3,  4,  7,  8,\n    \
    \ 9, 10, 11, 14, 17, 18, 19,\n    20, 21, 22, 23, 24, 25\n  ],\n  expected: [\
    \ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_stack = [];\n    var paren_level\
    \ = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        var char =\
    \ paren_string[i];\n        if(char === '('){\n            paren_stack.push(nested_level);\n\
    \            paren_level++;\n        }\n        else if(char === ')'){\n     \
    \       nested_level = paren_stack.pop();\n        }\n        else if(char ===\
    \ ' ' && paren_stack.length > 0){\n            nested_level = paren_stack.pop();\n\
    \        }\n        else if(char === ' ' && paren_stack.length === 0){\n     \
    \       nested_level++;\n        }\n        nested_parens.push(nested_level);\n\
    \    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1,\
    \ 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmphx0_6qy6.js:36:10)\n    at Object.<anonymous> (/tmp/tmphx0_6qy6.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    0, 0, 0, 0, 0, 0, 1, 1,\n    1, 1,\
    \ 1, 1, 1, 2, 2, 2,\n    3, 3, 3, 3, 3, 3, 3, 3,\n    3, 3, 3\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    var char = paren_string[i];\n    if(char == '('){\n      paren_stack.push(paren_level);\n\
    \      paren_level++;\n    }else if(char == ')'){\n      paren_level = paren_stack.pop();\n\
    \    }\n    nested_parens.push(paren_level);\n  }\n  return nested_parens;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0,\
    \ 0, 1, 0, 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmp6abxm8h8.js:28:10)\n    at Object.<anonymous> (/tmp/tmp6abxm8h8.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2, 1, 0, 0, 1,\n    2, 3,\
    \ 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2, 1,\n    2, 1, 0\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_stack_top\
    \ = 0;\n  var paren_stack_bottom = 0;\n  var paren_stack_max = 0;\n  var paren_stack_max_index\
    \ = 0;\n  var paren_stack_max_level = 0;\n  var paren_stack_max_level_char = '';\n\
    \  var paren_stack_max_level_char_index = 0;\n  var paren_stack_max_level_char_length\
    \ = 0;\n  var paren_stack_max_level_char_length_index = 0;\n  var paren_stack_max_level_char_length_count\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\n  var paren_stack_max_level_char_length_count_index = 0;\n  var paren_stack_max_level_char_length_count_index\
    \ = 0;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwpsosna7.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ === '('){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(char === ')'){\n            paren_level--;\n     \
    \   }\n        else if(char === ' ' && paren_stack.length > 0){\n            nested_parens.push(paren_stack.pop());\n\
    \        }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 0 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmpxxgsp68o.js:31:10)\n    at Object.<anonymous> (/tmp/tmpxxgsp68o.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_stack = [];\n    paren_string\
    \ = paren_string.replace(/\\s+/g, '');\n    paren_string = paren_string.replace(/^\\\
    s+/, '');\n    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string\
    \ = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\\
    )\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n\
    \    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string\
    \ = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\\
    )\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n\
    \    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string\
    \ = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\\
    )\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n\
    \    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string\
    \ = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\\
    )\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n\
    \    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string\
    \ = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\\
    )\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n\
    \    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string\
    \ = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\\
    )\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n\
    \    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string\
    \ = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\\
    )\\s+\\)$/, '');\n    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n\
    \    paren_string = paren_string.replace(/\\)\\s+\\)$/, '');\n    paren_string\
    \ = paren\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp95ugmzea.js:52\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    for(var i = 0;\
    \ i < paren_string.length; i++){\n        var char = paren_string[i];\n      \
    \  if(char === '('){\n            paren_level++;\n        }else if(char === ')'){\n\
    \            paren_level--;\n        }\n        if(paren_level === 0){\n     \
    \       nested_parens.push(paren_count);\n        }\n        paren_count++;\n\
    \    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 6, 12, 13, 15, 16, 26 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpz2fgwohq.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz2fgwohq.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     5,\
    \  6, 12, 13,\n    15, 16, 26\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_pointer\
    \ = 0;\n    var paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max_index\
    \ = 0;\n    var paren_stack_pointer_max_index2 = 0;\n    var paren_stack_pointer_max_index3\
    \ = 0;\n    var paren_stack_pointer_max_index4 = 0;\n    var paren_stack_pointer_max_index5\
    \ = 0;\n    var paren_stack_pointer_max_index6 = 0;\n    var paren_stack_pointer_max_index7\
    \ = 0;\n    var paren_stack_pointer_max_index8 = 0;\n    var paren_stack_pointer_max_index9\
    \ = 0;\n    var paren_stack_pointer_max_index10 = 0;\n    var paren_stack_pointer_max_index11\
    \ = 0;\n    var paren_stack_pointer_max_index12 = 0;\n    var paren_stack_pointer_max_index13\
    \ = 0;\n    var paren_stack_pointer_max_index14 = 0;\n    var paren_stack_pointer_max_index15\
    \ = 0;\n    var paren_stack_pointer_max_index16 = 0;\n    var paren_stack_pointer_max_index17\
    \ = 0;\n    var paren_stack_pointer_max_index18 = 0;\n    var paren_stack_pointer_max_index19\
    \ = 0;\n    var paren_stack_pointer_max_index20 = 0;\n    var paren_stack_pointer_max_index21\
    \ = 0;\n    var paren_stack_pointer_max_index22 = 0;\n    var paren_stack_pointer_max_index23\
    \ = 0;\n    var paren_stack_pointer_max_index24 = 0;\n    var paren_stack_pointer_max_index25\
    \ = 0;\n    var paren_stack_pointer_max_index26 = 0;\n    var paren_stack_pointer_max_index27\
    \ = 0;\n    var paren_stack_pointer_max_index28 = 0;\n    var paren_stack_pointer_max_index29\
    \ = 0;\n    var paren_stack_pointer_max_index30 = 0;\n    var paren_stack_pointer_max_index31\
    \ = 0;\n    var paren_stack_pointer_max_index32 = 0;\n    var paren_stack_pointer_max_index33\
    \ = 0;\n    var paren_stack_pointer_max_index34 = 0;\n    var paren_stack_pointer_max_index35\
    \ = 0;\n    var paren_stack_pointer_max_index36 = 0;\n    var paren_stack_pointer_max_index37\
    \ = 0;\n    var paren_stack_pointer_max_index38 = 0;\n    var paren_stack_pointer_max_index39\
    \ = 0;\n    var paren_stack_pointer_max_index40 = 0;\n    var paren_stack_pointer_max_index41\
    \ = 0;\n    var paren_stack_pointer_max_index42 = 0;\n    var paren_stack_pointer_max_index43\
    \ = 0;\n    var paren_stack_pointer_max_index44 = 0;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplnse0dxx.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = 0;\n    var paren_level_count = 0;\n\
    \    var paren_level_max_count = 1;\n    var paren_level_max_count_stack = [];\n\
    \    var paren_level_max_count_stack_count = 0;\n    var paren_level_max_count_stack_count2\
    \ = 0;\n    var paren_level_max_count_stack_count2 = 0;\n    var paren_level_max_count_stack_count3\
    \ = 0;\n    var paren_level_max_count_stack_count4 = 0;\n    var paren_level_max_count_stack_count5\
    \ = 0;\n    var paren_level_max_count_stack_count6 = 0;\n    var paren_level_max_count_stack_count7\
    \ = 0;\n    var paren_level_max_count_stack_count8 = 0;\n    var paren_level_max_count_stack_count9\
    \ = 0;\n    var paren_level_max_count_stack_count10 = 0;\n    var paren_level_max_count_stack_count11\
    \ = 0;\n    var paren_level_max_count_stack_count12 = 0;\n    var paren_level_max_count_stack_count13\
    \ = 0;\n    var paren_level_max_count_stack_count14 = 0;\n    var paren_level_max_count_stack_count15\
    \ = 0;\n    var paren_level_max_count_stack_count16 = 0;\n    var paren_level_max_count_stack_count17\
    \ = 0;\n    var paren_level_max_count_stack_count18 = 0;\n    var paren_level_max_count_stack_count19\
    \ = 0;\n    var paren_level_max_count_stack_count20 = 0;\n    var paren_level_max_count_stack_count21\
    \ = 0;\n    var paren_level_max_count_stack_count22 = 0;\n    var paren_level_max_count_stack_count23\
    \ = 0;\n    var paren_level_max_count_stack_count24 = 0;\n    var paren_level_max_count_stack_count25\
    \ = 0;\n    var paren_level_max_count_stack_count26 = 0;\n    var paren_level_max_count_stack_count27\
    \ = 0;\n    var paren_level_max_count_stack_count28 = 0;\n    var paren_level_max_count_stack_count29\
    \ = 0;\n    var paren_level_max_count_stack_count30 = 0;\n    var paren_level_max_count_stack_count31\
    \ = 0;\n    var paren_level_max_count_stack_count32 = 0;\n    var paren_level_max_count_stack_count33\
    \ = 0;\n    var paren_level_max_count_stack_count34 = 0;\n    var paren_level_max_count_stack_count35\
    \ = 0;\n    var paren_level_max_count_stack_count36 = 0;\n    var paren_level_max_count_stack_count37\
    \ = 0;\n    var paren_level_max_count_stack_count38 = 0;\n    var paren_level_max_count_stack_count39\
    \ = 0;\n    var paren_level_max_count_stack_count40 = 0;\n    var paren_level_max_count_stack_count41\
    \ = 0;\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3_sard11.js:68\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_levels_index\
    \ = [];\n    var paren_levels_index[0] = 0;\n    var paren_levels_index[1] = 0;\n\
    \    var paren_levels_index[2] = 0;\n    var paren_levels_index[3] = 0;\n    var\
    \ paren_levels_index[4] = 0;\n    var paren_levels_index[5] = 0;\n    var paren_levels_index[6]\
    \ = 0;\n    var paren_levels_index[7] = 0;\n    var paren_levels_index[8] = 0;\n\
    \    var paren_levels_index[9] = 0;\n    var paren_levels_index[10] = 0;\n   \
    \ var paren_levels_index[11] = 0;\n    var paren_levels_index[12] = 0;\n    var\
    \ paren_levels_index[13] = 0;\n    var paren_levels_index[14] = 0;\n    var paren_levels_index[15]\
    \ = 0;\n    var paren_levels_index[16] = 0;\n    var paren_levels_index[17] =\
    \ 0;\n    var paren_levels_index[18] = 0;\n    var paren_levels_index[19] = 0;\n\
    \    var paren_levels_index[20] = 0;\n    var paren_levels_index[21] = 0;\n  \
    \  var paren_levels_index[22] = 0;\n    var paren_levels_index[23] = 0;\n    var\
    \ paren_levels_index[24] = 0;\n    var paren_levels_index[25] = 0;\n    var paren_levels_index[26]\
    \ = 0;\n    var paren_levels_index[27] = 0;\n    var paren_levels_index[28] =\
    \ 0;\n    var paren_levels_index[29] = 0;\n    var paren_levels_index[30] = 0;\n\
    \    var paren_levels_index[31] = 0;\n    var paren_levels_index[32] = 0;\n  \
    \  var paren_levels_index[33] = 0;\n    var paren_levels_index[34] = 0;\n    var\
    \ paren_levels_index[35] = 0;\n    var paren_levels_index[36] = 0;\n    var paren_levels_index[37]\
    \ = 0;\n    var paren_levels_index[38] = 0;\n    var paren_levels_index[39] =\
    \ 0;\n    var paren_levels_index[40] = 0;\n    var paren_levels_index[41] = 0;\n\
    \    var paren_levels_index[42] = 0;\n    var paren_levels_index[43] = 0;\n  \
    \  var paren_levels_index[44] = 0;\n    var paren_levels_index[45] = 0;\n    var\
    \ paren_levels_index[46] = 0;\n    var paren_levels_index[47] = 0;\n    var paren_levels_index[48]\
    \ = 0;\n    var paren_levels_index[49] = 0;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpga1kquae.js:11\n    var paren_levels_index[0] = 0;\n          \
    \                ^\n\nSyntaxError: Unexpected token '['\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_count = 0;\n  var paren_level =\
    \ 0;\n  for(var i=0; i<paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if(char === '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    }\n    else if(char === ')'){\n      paren_count = paren_stack.pop();\n \
    \   }\n    else if(char === ' ' && paren_count > 0){\n      paren_level++;\n \
    \   }\n    else if(char === ' ' && paren_count === 0){\n      nested_parens.push(paren_level);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmp0eo5h45c.js:35:10)\n    at Object.<anonymous> (/tmp/tmp0eo5h45c.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar level = 0;\n\
    \tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tif(paren_string[i]\
    \ == '('){\n\t\t\tparen_stack.push(level);\n\t\t\tlevel++;\n\t\t}else if(paren_string[i]\
    \ == ')'){\n\t\t\tlevel = paren_stack.pop();\n\t\t}\n\t}\n\treturn paren_stack;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmpe9fq4o0d.js:25:10)\n    at Object.<anonymous> (/tmp/tmpe9fq4o0d.js:30:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  var paren_stack_count = 0;\n  var paren_stack_level = 0;\n  var paren_stack_array\
    \ = [];\n  var paren_stack_array_count = 0;\n  var paren_stack_array_level = 0;\n\
    \  var paren_stack_array_elements = [];\n  var paren_stack_array_elements_count\
    \ = 0;\n  var paren_stack_array_elements_level = 0;\n  var paren_stack_array_elements_array\
    \ = [];\n  var paren_stack_array_elements_array_count = 0;\n  var paren_stack_array_elements_array_level\
    \ = 0;\n  var paren_stack_array_elements_array_elements = [];\n  var paren_stack_array_elements_array_elements_count\
    \ = 0;\n  var paren_stack_array_elements_array_elements_level = 0;\n  var paren_stack_array_elements_array_elements_array\
    \ = [];\n  var paren_stack_array_elements_array_elements_array_count = 0;\n  var\
    \ paren_stack_array_elements_array_elements_level = 0;\n  var paren_stack_array_elements_array_elements_array_elements\
    \ = [];\n  var paren_stack_array_elements_array_elements_array_elements_count\
    \ = 0;\n  var paren_stack_array_elements_array_elements_array_elements_level =\
    \ 0;\n  var paren_stack_array_elements_array_elements_array_elements_array = [];\n\
    \  var paren_stack_array_elements_array_elements_array_elements_array_count =\
    \ 0;\n  var paren_stack_array_elements_array_elements_array_elements_level = 0;\n\
    \  var paren_stack_array_elements_array_elements_array_elements_array_elements\
    \ = [];\n  var paren_stack_array_elements_array_elements_array_elements_array_elements_count\
    \ = 0;\n  var paren_stack_array_elements_array_elements_array_elements_array_elements_level\
    \ = 0;\n  var paren_stack_array_elements_array_elements_array_elements_array_elements_array\
    \ = [];\n  var paren_stack_array_elements_array_elements_array_elements_array_elements_array_count\
    \ = 0;\n  var paren_stack_array_elements_array_elements_array_elements_array_elements_level\
    \ = 0;\n  var paren_stack_array_elements_array_elements_array_elements_array_elements_array_elements\
    \ = [];\n  var paren_stack_array_elements_array_elements_array_elements_array_elements_array_elements_count\
    \ = 0;\n  var paren_stack_array_elements_array_elements_array_elements_array_elements_array_elements_level\
    \ = 0;\n  var paren_stack_array_elements_array_elements_array_elements_array_elements_array_elements_array_elements\
    \ = [];\n  var paren_stack_array_elements_array_elements_array_elements_array_elements_array_elements_array_elements_count\
    \ = 0;\n  var paren_stack_array_elements_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmps1g2e0_2.js:56\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar nested_paren_stack = [];\n\tvar paren_level_string = paren_string;\n\
    \twhile(paren_level_string != \"\"){\n\t\tvar paren_level_char = paren_level_string.charAt(0);\n\
    \t\tparen_level_string = paren_level_string.substring(1);\n\t\tswitch(paren_level_char){\n\
    \t\t\tcase '(':\n\t\t\t\tnested_paren_stack.push(paren_level_char);\n\t\t\t\t\
    nested_paren_level++;\n\t\t\t\tbreak;\n\t\t\tcase ')':\n\t\t\t\tnested_paren_level--;\n\
    \t\t\t\tif(nested_paren_level == 0){\n\t\t\t\t\tnested_paren_stack.pop();\n\t\t\
    \t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn nested_paren_stack;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ '(', '(', '(', '(', '(', '(', '(', '('\
    \ ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpxm8v1cfo.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxm8v1cfo.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    '(', '(', '(',\n    '(', '(', '(',\n\
    \    '(', '('\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    for(var i = 0;\
    \ i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n      \
    \      paren_level++;\n        }\n        else if(paren_string[i] == ')'){\n \
    \           paren_level--;\n        }\n        else if(paren_level == 0){\n  \
    \          nested_parens.push(paren_count);\n            paren_count = 0;\n  \
    \      }\n        else if(paren_level > 0){\n            paren_count++;\n    \
    \    }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmpxkw3yhap.js:33:10)\n    at Object.<anonymous> (/tmp/tmpxkw3yhap.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    var paren_level = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_index2\
    \ = 0;\n    var paren_level_stack_index3 = 0;\n    var paren_level_stack_index4\
    \ = 0;\n    var paren_level_stack_index5 = 0;\n    var paren_level_stack_index6\
    \ = 0;\n    var paren_level_stack_index7 = 0;\n    var paren_level_stack_index8\
    \ = 0;\n    var paren_level_stack_index9 = 0;\n    var paren_level_stack_index10\
    \ = 0;\n    var paren_level_stack_index11 = 0;\n    var paren_level_stack_index12\
    \ = 0;\n    var paren_level_stack_index13 = 0;\n    var paren_level_stack_index14\
    \ = 0;\n    var paren_level_stack_index15 = 0;\n    var paren_level_stack_index16\
    \ = 0;\n    var paren_level_stack_index17 = 0;\n    var paren_level_stack_index18\
    \ = 0;\n    var paren_level_stack_index19 = 0;\n    var paren_level_stack_index20\
    \ = 0;\n    var paren_level_stack_index21 = 0;\n    var paren_level_stack_index22\
    \ = 0;\n    var paren_level_stack_index23 = 0;\n    var paren_level_stack_index24\
    \ = 0;\n    var paren_level_stack_index25 = 0;\n    var paren_level_stack_index26\
    \ = 0;\n    var paren_level_stack_index27 = 0;\n    var paren_level_stack_index28\
    \ = 0;\n    var paren_level_stack_index29 = 0;\n    var paren_level_stack_index30\
    \ = 0;\n    var paren_level_stack_index31 = 0;\n    var paren_level_stack_index32\
    \ = 0;\n    var paren_level_stack_index33 = 0;\n    var paren_level_stack_index34\
    \ = 0;\n    var paren_level_stack_index35 = 0;\n    var paren_level_stack_index36\
    \ = 0;\n    var paren_level_stack_index37 = 0;\n    var paren_level_stack_index38\
    \ = 0;\n    var paren_level_stack_index39 = 0;\n    var paren_level_stack_index40\
    \ = 0;\n    var paren_level_stack_index41 = 1;\n    var paren_level_stack_index42\
    \ = 1;\n    var paren_level_stack_index43 = 1;\n    var paren_level_stack_index44\
    \ = 1;\n    var paren_level_stack_index45 = 1;\n    var paren_level_stack_index46\
    \ = 1;\n    var paren_level_stack_index47 = 1;\n    var paren_level_stack_index48\
    \ = 1;\n    var paren_level_stack_index49 = 1;\n    var paren_level_stack_index50\
    \ = 1;\n    var paren_level_stack_index51 = 1;\n    var paren_level_stack_index52\
    \ = 1;\n    var paren_level_stack_index53 = 1;\n    var paren_level_stack_index54\
    \ = 1;\n    var paren_level_stack\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpuuu7x_zh.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_count = 0;\n\tvar paren_level = 0;\n\tvar paren_stack = [];\n\
    \t\n\tfor(var i=0; i<paren_string.length; i++){\n\t\tif(paren_string[i] == '('){\n\
    \t\t\tparen_stack.push(paren_count);\n\t\t\tparen_count++;\n\t\t}\n\t\telse if(paren_string[i]\
    \ == ')'){\n\t\t\tparen_count = paren_stack.pop();\n\t\t}\n\t\telse if(paren_string[i]\
    \ == ' ' && paren_count > 0){\n\t\t\tparen_level++;\n\t\t}\n\t\telse if(paren_string[i]\
    \ == ' ' && paren_count < 0){\n\t\t\tparen_level--;\n\t\t}\n\t\t\n\t\tif(paren_level\
    \ == 0){\n\t\t\tnested_parens.push(paren_count);\n\t\t}\n\t}\n\t\n\treturn nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0,\
    \ 0, 1, 0, 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmpmh_frnvb.js:40:10)\n    at Object.<anonymous> (/tmp/tmpmh_frnvb.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2, 1, 0, 0, 1,\n    2, 3,\
    \ 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2, 1,\n    2, 1, 0\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_stack_pointer = 0;\n    var paren_stack_pointer_max = 0;\n\
    \    var paren_stack_pointer_max_index = 0;\n    var paren_stack_pointer_max_index2\
    \ = 0;\n    var paren_stack_pointer_max_index3 = 0;\n    var paren_stack_pointer_max_index4\
    \ = 0;\n    var paren_stack_pointer_max_index5 = 0;\n    var paren_stack_pointer_max_index6\
    \ = 0;\n    var paren_stack_pointer_max_index7 = 0;\n    var paren_stack_pointer_max_index8\
    \ = 0;\n    var paren_stack_pointer_max_index9 = 0;\n    var paren_stack_pointer_max_index10\
    \ = 0;\n    var paren_stack_pointer_max_index11 = 0;\n    var paren_stack_pointer_max_index12\
    \ = 0;\n    var paren_stack_pointer_max_index13 = 0;\n    var paren_stack_pointer_max_index14\
    \ = 0;\n    var paren_stack_pointer_max_index15 = 0;\n    var paren_stack_pointer_max_index16\
    \ = 0;\n    var paren_stack_pointer_max_index17 = 0;\n    var paren_stack_pointer_max_index18\
    \ = 0;\n    var paren_stack_pointer_max_index19 = 0;\n    var paren_stack_pointer_max_index20\
    \ = 0;\n    var paren_stack_pointer_max_index21 = 0;\n    var paren_stack_pointer_max_index22\
    \ = 0;\n    var paren_stack_pointer_max_index23 = 0;\n    var paren_stack_pointer_max_index24\
    \ = 0;\n    var paren_stack_pointer_max_index25 = 0;\n    var paren_stack_pointer_max_index26\
    \ = 0;\n    var paren_stack_pointer_max_index27 = 0;\n    var paren_stack_pointer_max_index28\
    \ = 0;\n    var paren_stack_pointer_max_index29 = 0;\n    var paren_stack_pointer_max_index30\
    \ = 0;\n    var paren_stack_pointer_max_index31 = 0;\n    var paren_stack_pointer_max_index32\
    \ = 0;\n    var paren_stack_pointer_max_index33 = 0;\n    var paren_stack_pointer_max_index34\
    \ = 0;\n    var paren_stack_pointer_max_index35 = 0;\n    var paren_stack_pointer_max_index36\
    \ = 0;\n    var paren_stack_pointer_max_index37 = 0;\n    var paren_stack_pointer_max_index38\
    \ = 0;\n    var paren_stack_pointer_max_index39 = 0;\n    var paren_stack_pointer_max_index40\
    \ = 0;\n    var paren_stack_pointer_max_index41 = 0;\n    var paren_stack_pointer_max_index42\
    \ = 0;\n    var paren_stack_pointer_max_index43 = 0;\n    var paren_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpddbnsqz9.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = 0;\n\tvar paren_stack = [];\n\tfor(var i=0; i<paren_string.length; i++){\n\
    \t\tif(paren_string[i] == '('){\n\t\t\tparen_stack.push(paren_stack.length);\n\
    \t\t}\n\t\telse if(paren_string[i] == ')'){\n\t\t\tvar current_level = paren_stack.pop();\n\
    \t\t\tif(current_level > nested_paren_level){\n\t\t\t\tnested_paren_level = current_level;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn nested_paren_level;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n2\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n  \
    \  at test (/tmp/tmp3vinth6v.js:28:10)\n    at Object.<anonymous> (/tmp/tmp3vinth6v.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_stack\
    \ = [];\n  var paren_level = 0;\n  var paren_level_stack = [];\n  var paren_level_stack_count\
    \ = 0;\n  var paren_level_stack_string = '';\n  var paren_level_stack_pointer\
    \ = 0;\n  var paren_level_stack_pointer_max = 0;\n  var paren_level_stack_pointer_max_index\
    \ = 0;\n  var paren_level_stack_pointer_max_index = 0;\n  var paren_level_stack_pointer_max_string\
    \ = '';\n  var paren_level_stack_pointer_max_string_index = 0;\n  var paren_level_stack_pointer_max_string_length\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_index = 0;\n  var paren_level_stack_pointer_max_string_length_string\
    \ = '';\n  var paren_level_stack_pointer_max_string_length_string_index = 0;\n\
    \  var paren_level_stack_pointer_max_string_length_pointer = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_index\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string = '';\n\
    \  var paren_level_stack_pointer_max_string_length_pointer_string_index = 0;\n\
    \  var paren_level_stack_pointer_max_string_length_pointer_string_length = 0;\n\
    \  var paren_level_stack_pointer_max_string_length_pointer_string_length_index\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_index\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_string\
    \ = '';\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_string_index\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_string_length\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_string_length_index\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_string_length_pointer\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_string_length_pointer_index\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_string_length_pointer_string\
    \ = '';\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_string_length_pointer_string_index\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_string_length_pointer_string_length\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_string_length_pointer_string_length_index\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_string_length_pointer_string_length_pointer\
    \ = 0;\n  var paren_level_stack_pointer_max_string_length_pointer_string_length_pointer_string_length_pointer_string_length_pointer_index\
    \ = 0;\n  var paren\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpukoezo4q.js:53\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string_count2 = 0;\n    var paren_level_stack_string_count3\
    \ = 0;\n    var paren_level_stack_string_count4 = 0;\n    var paren_level_stack_string_count5\
    \ = 0;\n    var paren_level_stack_string_count6 = 0;\n    var paren_level_stack_string_count7\
    \ = 0;\n    var paren_level_stack_string_count8 = 0;\n    var paren_level_stack_string_count9\
    \ = 0;\n    var paren_level_stack_string_count10 = 0;\n    var paren_level_stack_string_count11\
    \ = 0;\n    var paren_level_stack_string_count12 = 0;\n    var paren_level_stack_string_count13\
    \ = 0;\n    var paren_level_stack_string_count14 = 0;\n    var paren_level_stack_string_count15\
    \ = 0;\n    var paren_level_stack_string_count16 = 0;\n    var paren_level_stack_string_count17\
    \ = 0;\n    var paren_level_stack_string_count18 = 0;\n    var paren_level_stack_string_count19\
    \ = 0;\n    var paren_level_stack_string_count20 = 0;\n    var paren_level_stack_string_count21\
    \ = 0;\n    var paren_level_stack_string_count22 = 0;\n    var paren_level_stack_string_count23\
    \ = 0;\n    var paren_level_stack_string_count24 = 0;\n    var paren_level_stack_string_count25\
    \ = 0;\n    var paren_level_stack_string_count26 = 0;\n    var paren_level_stack_string_count27\
    \ = 0;\n    var paren_level_stack_string_count28 = 0;\n    var paren_level_stack_string_count29\
    \ = 0;\n    var paren_level_stack_string_count30 = 0;\n    var paren_level_stack_string_count31\
    \ = 0;\n    var paren_level_stack_string_count32 = 0;\n    var paren_level_stack_string_count33\
    \ = 0;\n    var paren_level_stack_string_count34 = 0;\n    var paren_level_stack_string_count35\
    \ = 0;\n    var paren_level_stack_string_count36 = 0;\n    var paren_level_stack_string_count37\
    \ = 0;\n    var paren_level_stack_string_count38 = 0;\n    var paren_level_stack_string_count39\
    \ = 0;\n    var paren_level_stack_string_count40 = 0;\n    var paren_level_stack_string_count41\
    \ = 0;\n    var paren_level_stack_string_count42 = 0;\n    var paren_level_stack_string_count43\
    \ = 0;\n    var paren_level_stack_string_count44 = 0;\n    var paren_level_stack_string_count45\
    \ = 0;\n    var paren_level_stack_string_count46 = 0;\n    var paren_level_stack_string\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnujva4q4.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  paren_string = paren_string.replace(/\\\
    s+/g, '');\n  paren_string = paren_string.replace(/\\(/g, '');\n  paren_string\
    \ = paren_string.replace(/\\)/g, '');\n  paren_string = paren_string.replace(/\\\
    (/g, '');\n  paren_string = paren_string.replace(/\\)/g, '');\n  paren_string\
    \ = paren_string.replace(/\\(/g, '');\n  paren_string = paren_string.replace(/\\\
    )/g, '');\n  paren_string = paren_string.replace(/\\(/g, '');\n  paren_string\
    \ = paren_string.replace(/\\)/g, '');\n  paren_string = paren_string.replace(/\\\
    (/g, '');\n  paren_string = paren_string.replace(/\\)/g, '');\n  paren_string\
    \ = paren_string.replace(/\\(/g, '');\n  paren_string = paren_string.replace(/\\\
    )/g, '');\n  paren_string = paren_string.replace(/\\(/g, '');\n  paren_string\
    \ = paren_string.replace(/\\)/g, '');\n  paren_string = paren_string.replace(/\\\
    (/g, '');\n  paren_string = paren_string.replace(/\\)/g, '');\n  paren_string\
    \ = paren_string.replace(/\\(/g, '');\n  paren_string = paren_string.replace(/\\\
    )/g, '');\n  paren_string = paren_string.replace(/\\(/g, '');\n  paren_string\
    \ = paren_string.replace(/\\)/g, '');\n  paren_string = paren_string.replace(/\\\
    (/g, '');\n  paren_string = paren_string.replace(/\\)/g, '');\n  paren_string\
    \ = paren_string.replace(/\\(/g, '');\n  paren_string = paren_string.replace(/\\\
    )/g, '');\n  paren_string = paren_string.replace(/\\(/g, '');\n  paren_string\
    \ = paren_string.replace(/\\)/g, '');\n  paren_string = paren_string.replace(/\\\
    (/g, '');\n  paren_string = paren_string.replace(/\\)/g, '');\n  paren_string\
    \ = paren_string.replace(/\\(/g, '');\n  paren_string = paren_string.replace(/\\\
    )/g, '');\n  paren_string = paren_string.replace(/\\(/g, '');\n  paren_string\
    \ = paren_string.replace(/\\)/g, '');\n  paren_string = paren_string.replace(/\\\
    (/g, '');\n  paren_string = paren_string.replace(/\\)/g, '');\n  paren_string\
    \ = paren_string.replace(/\\(/g, '');\n  paren_string = paren_string.replace(/\\\
    )/g, '');\n  paren_string = paren_string.replace(/\\(/g, '');\n  paren_string\
    \ = paren_string.replace(/\\)/g, '');\n  paren_string = paren_string.replace(/\\\
    (/g, '');\n  paren_string = paren_string.replace(/\\)/g, '');\n  paren_string\
    \ = \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcyiksm34.js:52\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_nesting = 0;\n\tvar paren_levels\
    \ = [];\n\tvar paren_nestings = [];\n\tvar paren_levels_string = '';\n\tvar paren_nestings_string\
    \ = '';\n\tvar paren_levels_string_reversed = '';\n\tvar paren_nestings_string_reversed\
    \ = '';\n\tvar paren_levels_string_reversed_count = 0;\n\tvar paren_nestings_string_reversed_count\
    \ = 0;\n\tvar paren_levels_string_reversed_count_max = 0;\n\tvar paren_nestings_string_reversed_count_max\
    \ = 0;\n\tvar paren_levels_string_reversed_count_max_max = 0;\n\tvar paren_nestings_string_reversed_count_max_max\
    \ = 0;\n\tvar paren_levels_string_reversed_count_max_max_max = 0;\n\tvar paren_nestings_string_reversed_count_max_max_max\
    \ = 0;\n\tvar paren_levels_string_reversed_count_max_max_max_max = 0;\n\tvar paren_nestings_string_reversed_count_max_max_max_max\
    \ = 0;\n\tvar paren_levels_string_reversed_count_max_max_max_max_max = 0;\n\t\
    var paren_nestings_string_reversed_count_max_max_max_max_max = 0;\n\tvar paren_levels_string_reversed_count_max_max_max_max_max_max\
    \ = 0;\n\tvar paren_nestings_string_reversed_count_max_max_max_max_max_max = 0;\n\
    \tvar paren_levels_string_reversed_count_max_max_max_max_max_max_max = 0;\n\t\
    var paren_nestings_string_reversed_count_max_max_max_max_max_max_max = 0;\n\t\
    var paren_levels_string_reversed_count_max_max_max_max_max_max_max_max = 0;\n\t\
    var paren_nestings_string_reversed_count_max_max_max_max_max_max_max_max = 0;\n\
    \tvar paren_levels_string_reversed_count_max_max_max_max_max_max_max_max_max =\
    \ 0;\n\tvar paren_nestings_string_reversed_count_max_max_max_max_max_max_max_max_max\
    \ = 0;\n\tvar paren_levels_string_reversed_count_max_max_max_max_max_max_max_max_max\
    \ = 0;\n\tvar paren_nestings_string_reversed_count_max_max_max_max_max_max_max_max_max\
    \ = 0;\n\tvar paren_levels_string_reversed_count_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n\tvar paren_nestings_string_reversed_count_max_max_max_max_max_max_max_max_max_max\
    \ = 0;\n\tvar paren_levels_string_reversed_count_max_max_max_max_max_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpned2xwfc.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  for(var i=0; i<paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if(char == '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    }else if(char == ')'){\n      paren_count = paren_stack.pop();\n    }else\
    \ if(char == ' ' && paren_count > 0){\n      paren_level++;\n    }else if(char\
    \ == ' ' && paren_count < 0){\n      paren_level--;\n    }\n    if(paren_level\
    \ == 0){\n      nested_parens.push(paren_count);\n    }\n  }\n  return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0,\
    \ 0, 1, 0, 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmpjpv7418w.js:35:10)\n    at Object.<anonymous> (/tmp/tmpjpv7418w.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2, 1, 0, 0, 1,\n    2, 3,\
    \ 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2, 1,\n    2, 1, 0\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level =\
    \ 0;\n    var paren_stack = [];\n    for(var i=0; i<paren_string.length; i++){\n\
    \        var char = paren_string[i];\n        if(char === '('){\n            paren_stack.push(level);\n\
    \            level++;\n        }else if(char === ')'){\n            level--;\n\
    \        }\n    }\n    return paren_stack;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 1, 0, 1, 2, 0, 0, 1, 2, 1, 1 ]\n\
    \nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpkap9r4wc.js:26:10)\n  \
    \  at Object.<anonymous> (/tmp/tmpkap9r4wc.js:31:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 1, 0, 1,\n    2, 0, 0, 1, 2,\n    1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var c = paren_string[i];\n        if(c\
    \ == '('){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(c == ')'){\n            var current_level = paren_stack.pop();\n\
    \            if(current_level > paren_level){\n                nested_parens.push(paren_level);\n\
    \            }\n            paren_level = current_level;\n        }\n    }\n \
    \   return nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmps797nylg.js:32:10)\n    at Object.<anonymous> (/tmp/tmps797nylg.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_levels\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_stack_pointer\
    \ = 0;\n  var paren_stack_pointer_max = 0;\n  var paren_stack_pointer_max_index\
    \ = 0;\n  var paren_stack_pointer_max_index2 = 0;\n  var paren_stack_pointer_max_index3\
    \ = 0;\n  var paren_stack_pointer_max_index4 = 0;\n  var paren_stack_pointer_max_index5\
    \ = 0;\n  var paren_stack_pointer_max_index6 = 0;\n  var paren_stack_pointer_max_index7\
    \ = 0;\n  var paren_stack_pointer_max_index8 = 0;\n  var paren_stack_pointer_max_index9\
    \ = 0;\n  var paren_stack_pointer_max_index10 = 0;\n  var paren_stack_pointer_max_index11\
    \ = 0;\n  var paren_stack_pointer_max_index12 = 0;\n  var paren_stack_pointer_max_index13\
    \ = 0;\n  var paren_stack_pointer_max_index14 = 0;\n  var paren_stack_pointer_max_index15\
    \ = 0;\n  var paren_stack_pointer_max_index16 = 0;\n  var paren_stack_pointer_max_index17\
    \ = 0;\n  var paren_stack_pointer_max_index18 = 0;\n  var paren_stack_pointer_max_index19\
    \ = 0;\n  var paren_stack_pointer_max_index20 = 0;\n  var paren_stack_pointer_max_index21\
    \ = 0;\n  var paren_stack_pointer_max_index22 = 0;\n  var paren_stack_pointer_max_index23\
    \ = 0;\n  var paren_stack_pointer_max_index24 = 0;\n  var paren_stack_pointer_max_index25\
    \ = 0;\n  var paren_stack_pointer_max_index26 = 0;\n  var paren_stack_pointer_max_index27\
    \ = 0;\n  var paren_stack_pointer_max_index28 = 0;\n  var paren_stack_pointer_max_index29\
    \ = 0;\n  var paren_stack_pointer_max_index30 = 0;\n  var paren_stack_pointer_max_index31\
    \ = 0;\n  var paren_stack_pointer_max_index32 = 0;\n  var paren_stack_pointer_max_index33\
    \ = 0;\n  var paren_stack_pointer_max_index34 = 0;\n  var paren_stack_pointer_max_index35\
    \ = 0;\n  var paren_stack_pointer_max_index36 = 0;\n  var paren_stack_pointer_max_index37\
    \ = 0;\n  var paren_stack_pointer_max_index38 = 0;\n  var paren_stack_pointer_max_index39\
    \ = 0;\n  var paren_stack_pointer_max_index40 = 0;\n  var paren_stack_pointer_max_index41\
    \ = 0;\n  var paren_stack_pointer_max_index42 = 0;\n  var paren_stack_pointer_max_index43\
    \ = 0;\n  var paren_stack_pointer_max_index44\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppcxqvr7z.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_nesting\
    \ = 0;\n  var paren_levels = [];\n  var paren_nesting_levels = [];\n  var paren_levels_string\
    \ = '';\n  for (var i = 0; i < paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if (char == '('){\n      paren_stack.push(paren_level);\n      paren_level++;\n\
    \      paren_nesting++;\n      paren_levels.push(paren_level);\n      paren_nesting_levels.push(paren_nesting);\n\
    \      paren_levels_string += paren_levels_string ? ' ' : '';\n    } else if (char\
    \ == ')'){\n      paren_level--;\n      paren_nesting--;\n      paren_levels.push(paren_level);\n\
    \      paren_nesting_levels.push(paren_nesting);\n      paren_levels_string +=\
    \ paren_levels_string ? ' ' : '';\n    } else if (char == ' ' && paren_stack.length\
    \ > 0){\n      paren_levels_string += paren_levels_string ? ' ' : '';\n      paren_levels_string\
    \ += paren_stack.pop();\n      paren_nesting_levels.pop();\n    } else if (char\
    \ == ' ' && paren_stack.length == 0){\n      nested_parens.push(paren_nesting);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmppxfsi8iy.js:45:10)\n    at Object.<anonymous> (/tmp/tmppxfsi8iy.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_stack\
    \ = [];\n    var paren_level = 0;\n    var paren_nesting = 0;\n    var paren_nesting_level\
    \ = 0;\n    var paren_nesting_nesting = 0;\n    var paren_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_nesting_nesting_level = 0;\n    var paren_nesting_nesting_nesting_level\
    \ = 0;\n    var paren_nesting_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpioyg0vid.js:60\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  for(var i=0; i<paren_string.length;\
    \ i++){\n    if(paren_string[i] == '('){\n      paren_stack.push(paren_level);\n\
    \      paren_level++;\n    }\n    else if(paren_string[i] == ')'){\n      paren_level\
    \ = paren_stack.pop();\n    }\n    else if(paren_string[i] == ' ' && paren_stack.length){\n\
    \      nested_parens.push(paren_level);\n      paren_level = 0;\n    }\n  }\n\
    \  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmprwawfldj.js:31:10)\n    at Object.<anonymous> (/tmp/tmprwawfldj.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_stack_len\
    \ = paren_stack.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_stack.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len = paren_stack.length;\n\
    \  var paren_stack_top = -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len\
    \ = paren_stack.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_stack.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len = paren_stack.length;\n\
    \  var paren_stack_top = -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len\
    \ = paren_stack.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_stack.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len = paren_stack.length;\n\
    \  var paren_stack_top = -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len\
    \ = paren_stack.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_stack.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len = paren_stack.length;\n\
    \  var paren_stack_top = -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len\
    \ = paren_stack.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_stack.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len = paren_stack.length;\n\
    \  var paren_stack_top = -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len\
    \ = paren_stack.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_stack.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len = paren_stack.length;\n\
    \  var paren_stack_top = -1;\n  var paren_stack_bottom = -1;\n  var paren_stack_len\
    \ = paren_stack.length;\n  var paren_stack_top = -1;\n  var paren_stack_bottom\
    \ = -1;\n  var paren_stack_len = paren_stack.length;\n  var paren_stack_top =\
    \ -1;\n  var paren_\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkxo6i5wj.js:80\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_level\
    \ = 0;\n    var paren_stack_top = 0;\n    var paren_stack_bottom = 0;\n    var\
    \ paren_stack_max_level = 0;\n    var paren_stack_max_level_char = '';\n    var\
    \ paren_stack_max_level_char_length = 0;\n    var paren_stack_max_level_char_length_count\
    \ = 0;\n    var paren_stack_max_level_char_length_count2 = 0;\n    var paren_stack_max_level_char_length_count3\
    \ = 0;\n    var paren_stack_max_level_char_length_count4 = 0;\n    var paren_stack_max_level_char_length_count5\
    \ = 0;\n    var paren_stack_max_level_char_length_count6 = 0;\n    var paren_stack_max_level_char_length_count7\
    \ = 0;\n    var paren_stack_max_level_char_length_count8 = 0;\n    var paren_stack_max_level_char_length_count9\
    \ = 0;\n    var paren_stack_max_level_char_length_count10 = 0;\n    var paren_stack_max_level_char_length_count11\
    \ = 0;\n    var paren_stack_max_level_char_length_count12 = 0;\n    var paren_stack_max_level_char_length_count13\
    \ = 0;\n    var paren_stack_max_level_char_length_count14 = 0;\n    var paren_stack_max_level_char_length_count15\
    \ = 0;\n    var paren_stack_max_level_char_length_count16 = 0;\n    var paren_stack_max_level_char_length_count17\
    \ = 0;\n    var paren_stack_max_level_char_length_count18 = 0;\n    var paren_stack_max_level_char_length_count19\
    \ = 0;\n    var paren_stack_max_level_char_length_count20 = 0;\n    var paren_stack_max_level_char_length_count21\
    \ = 0;\n    var paren_stack_max_level_char_length_count22 = 0;\n    var paren_stack_max_level_char_length_count23\
    \ = 0;\n    var paren_stack_max_level_char_length_count24 = 0;\n    var paren_stack_max_level_char_length_count25\
    \ = 0;\n    var paren_stack_max_level_char_length_count26 = 0;\n    var paren_stack_max_level_char_length_count27\
    \ = 0;\n    var paren_stack_max_level_char_length_count28 = 0;\n    var paren_stack_max_level_char_length_count29\
    \ = 0;\n    var paren_stack_max_level_char_length_count30 = 0;\n    var paren_stack_max_level_char_length_count31\
    \ = 0;\n    var paren_stack_max_level_char_length_count32 = 0;\n    var paren_stack_max_level_char_length_count33\
    \ = 0;\n    var paren_stack_max_level_char_length_count34 = 0;\n    var paren_stack_max_level_char_length_count35\
    \ = 0;\n    var paren_stack_max_level_char_length_count36 = 0;\n    var paren_stack_max_level_char_length_count37\
    \ = 0;\n    var paren_stack_max_level_char_length\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppfxdny60.js:64\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_levels =\
    \ [];\n  var paren_level_counter = 0;\n  var paren_level_counters = [];\n  var\
    \ paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n \
    \ var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index = [];\n  var paren_level_counters_index = [];\n\
    \  var paren_level_counters_index\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpz9qskyzi.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = 0;\n    var paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_string_count = 0;\n    var paren_level_stack_string_index\
    \ = 0;\n    var paren_level_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppxfmpu9g.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_count\
    \ = 0;\n\tvar nested_paren_level = 0;\n\tvar paren_level = 0;\n\tvar paren_stack\
    \ = [];\n\tvar paren_stack_str = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str\
    \ = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level\
    \ = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str\
    \ = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level\
    \ = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str\
    \ = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level\
    \ = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str\
    \ = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level\
    \ = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str\
    \ = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level\
    \ = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str\
    \ = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level\
    \ = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str\
    \ = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level\
    \ = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str\
    \ = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level\
    \ = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str\
    \ = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level\
    \ = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str\
    \ = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level\
    \ = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str\
    \ = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level\
    \ = 0;\n\tvar paren_stack_str = '';\n\tvar paren_stack_level = 0;\n\tvar paren_stack_str\
    \ = '';\n\tvar paren_stack_\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpst1w9fwj.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  var paren_stack_pointer = 0;\n  var paren_stack_top = 0;\n  var paren_stack_top_count\
    \ = 0;\n  var paren_stack_top_level = 0;\n  var paren_stack_top_paren = 0;\n \
    \ var paren_stack_top_paren_count = 0;\n  var paren_stack_top_paren_level = 0;\n\
    \  var paren_stack_top_paren_stack = [];\n  var paren_stack_top_paren_stack_pointer\
    \ = 0;\n  var paren_stack_top_paren_stack_top = 0;\n  var paren_stack_top_paren_stack_top_count\
    \ = 0;\n  var paren_stack_top_paren_stack_top_level = 0;\n  var paren_stack_top_paren_stack_top_paren\
    \ = 0;\n  var paren_stack_top_paren_stack_top_paren_count = 0;\n  var paren_stack_top_paren_stack_top_paren_level\
    \ = 0;\n  var paren_stack_top_paren_stack_top_paren_stack = [];\n  var paren_stack_top_paren_stack_top_paren_stack_pointer\
    \ = 0;\n  var paren_stack_top_paren_stack_top_paren_stack_top = 0;\n  var paren_stack_top_paren_stack_top_paren_stack_top_count\
    \ = 0;\n  var paren_stack_top_paren_stack_top_paren_stack_top_level = 0;\n  var\
    \ paren_stack_top_paren_stack_top_paren_stack_top_paren = 0;\n  var paren_stack_top_paren_stack_top_paren_stack_top_paren_count\
    \ = 0;\n  var paren_stack_top_paren_stack_top_paren_stack_top_paren_level = 0;\n\
    \  var paren_stack_top_paren_stack_top_paren_stack_top_paren_stack = [];\n  var\
    \ paren_stack_top_paren_stack_top_paren_stack_top_paren_stack_pointer = 0;\n \
    \ var paren_stack_top_paren_stack_top_paren_stack_top_paren_stack_top = 0;\n \
    \ var paren_stack_top_paren_stack_top_paren_stack_top_paren_stack_top_count =\
    \ 0;\n  var paren_stack_top_paren_stack_top_paren_stack_top_paren_stack_top_level\
    \ = 0;\n  var paren_stack_top_paren_stack_top_paren_stack_top_paren_stack_top_paren\
    \ = 0;\n  var paren_stack_top_paren_stack_top_paren_stack_top_paren_stack_top_paren_count\
    \ = 0;\n  var paren_stack_top_paren_stack_top_paren_stack_top_paren_stack_top_paren_level\
    \ = 0;\n  var paren_stack_top_paren_stack_top_paren_stack_top_paren_stack_top_paren_stack\
    \ = [];\n  var paren_stack_top_paren_stack_top_paren_stack_top_paren_stack_top_paren_stack_pointer\
    \ = 0;\n  var paren_stack_top_paren_stack_top_paren_\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpi0w4dedv.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i =\
    \ 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n   \
    \     if(char === '('){\n            paren_stack.push(paren_level);\n        \
    \    paren_level++;\n        }else if(char === ')'){\n            var current_level\
    \ = paren_stack.pop();\n            if(current_level > paren_level){\n       \
    \         nested_parens.push(paren_level);\n            }\n            paren_level\
    \ = current_level;\n        }\n    }\n    return nested_parens;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n \
    \   at test (/tmp/tmpu_f5gjnr.js:31:10)\n    at Object.<anonymous> (/tmp/tmpu_f5gjnr.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_levels\
    \ = [];\n    var paren_level = 0;\n    var paren_level_count = 0;\n    var paren_level_char;\n\
    \    var paren_level_char_length;\n    var paren_level_char_position;\n    var\
    \ paren_level_char_position_count;\n    var paren_level_char_position_index;\n\
    \    var paren_level_char_position_indexes;\n    var paren_level_char_position_indexes_length;\n\
    \    var paren_level_char_position_indexes_index;\n    var paren_level_char_position_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_index;\n    var paren_level_char_position_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_index;\n  \
    \  var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_index;\n\
    \    var paren_level_char_position_indexes_indexes_indexes_indexes_indexes_indexes_indexes_indexes_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmtw2y7o3.js:45\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_level\
    \ = 0;\n    var nested_parens = [];\n    var paren_level = 0;\n    var paren_parens\
    \ = [];\n    var paren_parens_level = 0;\n    var paren_parens_parens = [];\n\
    \    var paren_string = paren_string.trim();\n    var paren_string = paren_string.replace(/\
    \ +$/g,'');\n    var paren_string = paren_string.replace(/\\s+/g,' ');\n    var\
    \ paren_string = paren_string.replace(/\\s+$/g,'');\n    var paren_string = paren_string.replace(/\\\
    s+\\)\\s+/g,')');\n    var paren_string = paren_string.replace(/\\s+\\)\\s+$/g,')');\n\
    \    var paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+/g,')');\n   \
    \ var paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+$/g,')');\n    var\
    \ paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+/g,')');\n   \
    \ var paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+$/g,')');\n\
    \    var paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+/g,')');\n\
    \    var paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\\
    )\\s+/g,')');\n    var paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\\
    )\\s+\\)\\s+\\)\\s+\\)\\s+/g,')');\n    var paren_string = paren_string.replace(/\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+/g,')');\n    var paren_string\
    \ = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\\
    s+\\)\\s+/g,')');\n    var paren_string = paren_string.replace(/\\s+\\)\\s+\\\
    )\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+/g,')');\n    var paren_string\
    \ = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\\
    s+\\)\\s+\\)\\s+/g,')');\n    var paren_string = paren_string.replace(/\\s+\\\
    )\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+/g,')');\n\
    \    var paren_string = paren_string.replace(/\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\\
    )\\s+\\)\\s+\\\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppppgmpxw.js:31\n    var paren_string = paren_string.replace(/\\\
    s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\)\\s+\\\n                             \
    \               ^\n\nSyntaxError: Invalid regular expression: missing /\n    at\
    \ wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_count = 0;\n  var paren_level = 0;\n  var paren_stack = [];\n\
    \  for(var i=0; i<paren_string.length; i++){\n    var char = paren_string[i];\n\
    \    if(char == '('){\n      paren_stack.push(paren_count);\n      paren_count++;\n\
    \    }else if(char == ')'){\n      var current_paren_count = paren_stack.pop();\n\
    \      if(current_paren_count == 0){\n        nested_parens.push(paren_level);\n\
    \      }\n      paren_count--;\n    }\n    paren_level++;\n  }\n  return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 12, 15, 26 ]\n\nshould equal\n\n[ 2,\
    \ 3, 1, 3 ]\n    at test (/tmp/tmpkcmc5x4q.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkcmc5x4q.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 12, 15,\
    \ 26 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var c = paren_string[i];\n        if(c\
    \ == '('){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }\n        else if(c == ')'){\n            paren_level = paren_stack.pop();\n\
    \        }\n        else{\n            nested_parens.push(paren_level);\n    \
    \    }\n    }\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmphgk03avf.js:31:10)\n    at Object.<anonymous> (/tmp/tmphgk03avf.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_stack = [];\n  var paren_level = 0;\n  var paren_level_max\
    \ = 0;\n  for(var i=0; i<paren_string.length; i++){\n    if(paren_string[i] ==\
    \ '('){\n      paren_stack.push(paren_level);\n      paren_level++;\n      if(paren_level\
    \ > paren_level_max){\n        paren_level_max = paren_level;\n      }\n    }\n\
    \    if(paren_string[i] == ')'){\n      paren_level--;\n      if(paren_level <\
    \ paren_stack[paren_stack.length-1]){\n        nested_parens.push(paren_level);\n\
    \      }\n    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 0, 1, 0 ]\n\nshould equal\n\n[ 2,\
    \ 3, 1, 3 ]\n    at test (/tmp/tmptqmlw9cf.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptqmlw9cf.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 0,\
    \ 1, 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_stack = [];\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_count = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_pointer = 0;\n    var paren_level_stack_pointer_pointer\
    \ = 0;\n    var paren_level_stack_pointer_pointer_pointer = 0;\n    var paren_level_stack_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer = 0;\n\
    \    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer = 0;\n\
    \    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = 0;\n    var paren_level_stack_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzvbbipbw.js:36\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_parens\
    \ = [];\n\tvar paren_stack = [];\n\tvar paren_level = 0;\n\tvar paren_level_count\
    \ = 0;\n\tvar paren_level_max = 0;\n\tvar paren_level_max_count = 0;\n\tvar paren_level_max_max\
    \ = 0;\n\tvar paren_level_max_max_count = 0;\n\tvar paren_level_max_max_max =\
    \ 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_level_max_max_max_max\
    \ = 0;\n\tvar paren_level_max_max_max_count = 0;\n\tvar paren_\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1t_lj303.js:74\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_level\
    \ = 0;\n    var paren_stack = [];\n    var paren_levels = [];\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_index = 0;\n    var paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_index = 0;\n    var paren_level_stack_last_string\
    \ = '';\n    var paren_level_stack_last_paren_level = 0;\n    var paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_index = 0;\n    var\
    \ paren_level_stack_last_paren_level_stack_string = '';\n    var paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_string = '';\n \
    \   var paren_level_stack_last_paren_level_stack_last_paren_level = 0;\n    var\
    \ paren_level_stack_last_paren_level_stack_last_paren_level_stack = [];\n    var\
    \ paren_level_stack_last_paren_level_stack_last_paren_level_stack_index = 0;\n\
    \    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack\
    \ = [];\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_index\
    \ = 0;\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_string\
    \ = '';\n    var paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_level_stack_last_paren_\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpyxj68zwm.js:48\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_level\
    \ = 0;\n    var paren_level = 0;\n    var paren_stack = [];\n    var paren_stack_pointer\
    \ = 0;\n    var paren_stack_pointer_max = 0;\n    var paren_stack_pointer_max_index\
    \ = 0;\n    var paren_stack_pointer_max_index2 = 0;\n    var paren_stack_pointer_max_index3\
    \ = 0;\n    var paren_stack_pointer_max_index4 = 0;\n    var paren_stack_pointer_max_index5\
    \ = 0;\n    var paren_stack_pointer_max_index6 = 0;\n    var paren_stack_pointer_max_index7\
    \ = 0;\n    var paren_stack_pointer_max_index8 = 0;\n    var paren_stack_pointer_max_index9\
    \ = 0;\n    var paren_stack_pointer_max_index10 = 0;\n    var paren_stack_pointer_max_index11\
    \ = 0;\n    var paren_stack_pointer_max_index12 = 0;\n    var paren_stack_pointer_max_index13\
    \ = 0;\n    var paren_stack_pointer_max_index14 = 0;\n    var paren_stack_pointer_max_index15\
    \ = 0;\n    var paren_stack_pointer_max_index16 = 0;\n    var paren_stack_pointer_max_index17\
    \ = 0;\n    var paren_stack_pointer_max_index18 = 0;\n    var paren_stack_pointer_max_index19\
    \ = 0;\n    var paren_stack_pointer_max_index20 = 0;\n    var paren_stack_pointer_max_index21\
    \ = 0;\n    var paren_stack_pointer_max_index22 = 0;\n    var paren_stack_pointer_max_index23\
    \ = 0;\n    var paren_stack_pointer_max_index24 = 0;\n    var paren_stack_pointer_max_index25\
    \ = 0;\n    var paren_stack_pointer_max_index26 = 0;\n    var paren_stack_pointer_max_index27\
    \ = 0;\n    var paren_stack_pointer_max_index28 = 0;\n    var paren_stack_pointer_max_index29\
    \ = 0;\n    var paren_stack_pointer_max_index30 = 0;\n    var paren_stack_pointer_max_index31\
    \ = 0;\n    var paren_stack_pointer_max_index32 = 0;\n    var paren_stack_pointer_max_index33\
    \ = 0;\n    var paren_stack_pointer_max_index34 = 0;\n    var paren_stack_pointer_max_index35\
    \ = 0;\n    var paren_stack_pointer_max_index36 = 0;\n    var paren_stack_pointer_max_index37\
    \ = 0;\n    var paren_stack_pointer_max_index38 = 0;\n    var paren_stack_pointer_max_index39\
    \ = 0;\n    var paren_stack_pointer_max_index40 = 0;\n    var paren_stack_pointer_max_index41\
    \ = 0;\n    var paren_stack_pointer_max_index42 = 0;\n    var paren_stack_pointer_max_index43\
    \ = 0;\n    var paren_stack_pointer_max_index44\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpz_ne8gvv.js:66\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_level = 0;\n    var paren_stack = [];\n    for(var i=0;\
    \ i<paren_string.length; i++){\n        var char = paren_string[i];\n        if(char\
    \ == '('){\n            paren_stack.push(paren_level);\n            paren_level++;\n\
    \        }else if(char == ')'){\n            paren_level = paren_stack.pop();\n\
    \        }\n        nested_parens.push(paren_level);\n    }\n    return nested_parens;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 1, 2, 1, 0, 0, 1, 2, 3, 2, 1, 0,\
    \ 0, 1, 0, 0, 1, 2, 3, 2, 1, 2, 1, 2, 1, 0 ]\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n\
    \    at test (/tmp/tmprg1r9r_1.js:28:10)\n    at Object.<anonymous> (/tmp/tmprg1r9r_1.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 2, 1, 2, 1, 0, 0, 1,\n    2, 3,\
    \ 2, 1, 0, 0, 1, 0,\n    0, 1, 2, 3, 2, 1, 2, 1,\n    2, 1, 0\n  ],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var max_level\
    \ = 0;\n  var level = 0;\n  var paren_stack = [];\n  var paren_level = [];\n \
    \ var paren_level_stack = [];\n  var paren_level_stack_index = 0;\n  var paren_level_stack_string\
    \ = '';\n  var paren_level_stack_string_index = 0;\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = '';\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string_count = 0;\n  var paren_level_stack_string\
    \ = '';\n  var paren_level_stack_string_index = 0;\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = '';\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string_count = 0;\n  var paren_level_stack_string\
    \ = '';\n  var paren_level_stack_string_index = 0;\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = '';\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string_count = 0;\n  var paren_level_stack_string\
    \ = '';\n  var paren_level_stack_string_index = 0;\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = '';\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string_count = 0;\n  var paren_level_stack_string\
    \ = '';\n  var paren_level_stack_string_index = 0;\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = '';\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string_count = 0;\n  var paren_level_stack_string\
    \ = '';\n  var paren_level_stack_string_index = 0;\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = '';\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string_count = 0;\n  var paren_level_stack_string\
    \ = '';\n  var paren_level_stack_string_index = 0;\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = '';\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string_count = 0;\n  var paren_level_stack_string\
    \ = '';\n  var paren_level_stack_string_index = 0;\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = '';\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string_count = 0;\n  var paren_level_stack_string\
    \ = '';\n  var paren_level_stack_string_index = 0;\n  var paren_level_stack_string_count\
    \ = 0;\n  var paren_level_stack_string = '';\n  var paren_level_stack_string_index\
    \ = 0;\n  var paren_level_stack_string_count = 0;\n  var paren_level_stack_string\
    \ = '';\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((()))\
    \ () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn9k7elm4.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_paren_level\
    \ = 0;\n  var nested_paren_stack = [];\n  var nested_paren_groups = [];\n  var\
    \ paren_groups = paren_string.split(\" \");\n  for(var i=0; i<paren_groups.length;\
    \ i++){\n    var paren_group = paren_groups[i];\n    if(paren_group.length ==\
    \ 0){\n      nested_paren_level--;\n    }else if(paren_group.length == 1){\n \
    \     nested_paren_level++;\n    }else{\n      nested_paren_stack.push(paren_group);\n\
    \      nested_paren_groups.push(paren_group);\n    }\n  }\n  while(nested_paren_stack.length\
    \ > 0){\n    var nested_paren_group = nested_paren_stack.pop();\n    nested_paren_level--;\n\
    \    nested_paren_groups.push(nested_paren_group);\n  }\n  return nested_paren_groups.length;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n8\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n  \
    \  at test (/tmp/tmps6vem4f5.js:35:10)\n    at Object.<anonymous> (/tmp/tmps6vem4f5.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_stack = [];\n    var paren_level = 0;\n    var paren_levels\
    \ = [];\n    var paren_level_stack = [];\n    var paren_level_stack_count = [];\n\
    \    var paren_level_stack_counts = [];\n    var paren_level_stack_counts_index\
    \ = [];\n    var paren_level_stack_counts_indexs = [];\n    var paren_level_stack_counts_indexes_count\
    \ = [];\n    var paren_level_stack_counts_indexes_counts = [];\n    var paren_level_stack_counts_indexes_counts_index\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexs = [];\n    var\
    \ paren_level_stack_counts_indexes_counts_indexes_count = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_index\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexs\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_count\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_counts\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_counts_index\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_counts_indexs\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_counts_indexes_count\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_index\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_count\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_index\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_count\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_counts_indexes_count\
    \ = [];\n    var paren_level_stack_counts_indexes_counts_indexes_counts_indexes_count\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpv94i_3n6.js:47\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_paren_count\
    \ = 0;\n    var nested_paren_level = 0;\n    var paren_level = 0;\n    var paren_level_stack\
    \ = [];\n    var paren_level_stack_string = '';\n    var paren_level_stack_string_count\
    \ = 0;\n    var paren_level_stack_string_count2 = 0;\n    var paren_level_stack_string_count3\
    \ = 0;\n    var paren_level_stack_string_count4 = 0;\n    var paren_level_stack_string_count5\
    \ = 0;\n    var paren_level_stack_string_count6 = 0;\n    var paren_level_stack_string_count7\
    \ = 0;\n    var paren_level_stack_string_count8 = 0;\n    var paren_level_stack_string_count9\
    \ = 0;\n    var paren_level_stack_string_count10 = 0;\n    var paren_level_stack_string_count11\
    \ = 0;\n    var paren_level_stack_string_count12 = 0;\n    var paren_level_stack_string_count13\
    \ = 0;\n    var paren_level_stack_string_count14 = 0;\n    var paren_level_stack_string_count15\
    \ = 0;\n    var paren_level_stack_string_count16 = 0;\n    var paren_level_stack_string_count17\
    \ = 0;\n    var paren_level_stack_string_count18 = 0;\n    var paren_level_stack_string_count19\
    \ = 0;\n    var paren_level_stack_string_count20 = 0;\n    var paren_level_stack_string_count21\
    \ = 0;\n    var paren_level_stack_string_count22 = 0;\n    var paren_level_stack_string_count23\
    \ = 0;\n    var paren_level_stack_string_count24 = 0;\n    var paren_level_stack_string_count25\
    \ = 0;\n    var paren_level_stack_string_count26 = 0;\n    var paren_level_stack_string_count27\
    \ = 0;\n    var paren_level_stack_string_count28 = 0;\n    var paren_level_stack_string_count29\
    \ = 0;\n    var paren_level_stack_string_count30 = 0;\n    var paren_level_stack_string_count31\
    \ = 0;\n    var paren_level_stack_string_count32 = 0;\n    var paren_level_stack_string_count33\
    \ = 0;\n    var paren_level_stack_string_count34 = 0;\n    var paren_level_stack_string_count35\
    \ = 0;\n    var paren_level_stack_string_count36 = 0;\n    var paren_level_stack_string_count37\
    \ = 0;\n    var paren_level_stack_string_count38 = 0;\n    var paren_level_stack_string_count39\
    \ = 0;\n    var paren_level_stack_string_count40 = 0;\n    var paren_level_stack_string_count41\
    \ = 0;\n    var paren_level_stack_string_count42 = 0;\n    var paren_level_stack_string_count43\
    \ = 0;\n    var paren_level_stack_string_count44 = 0;\n    var paren_level_stack_string_count45\
    \ = 0;\n    var paren_level_stack_string_count46 = 0;\n    var paren_level_stack_string_count47\
    \ = 0;\n    var paren_level_stack_string_count48 = 0;\n    var paren_\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0x0q7sew.js:71\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var nested_parens\
    \ = [];\n    var paren_count = 0;\n    var paren_level = 0;\n    var paren_stack\
    \ = [];\n    var paren_levels = [];\n    var paren_level_stack = [];\n    var\
    \ paren_level_stack_index = 0;\n    \n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        var char = paren_string[i];\n        \n        if(char === '('){\n\
    \            paren_stack.push(paren_count);\n            paren_level_stack.push(paren_level);\n\
    \            paren_count++;\n            paren_level++;\n        }\n        else\
    \ if(char === ')'){\n            paren_count--;\n            paren_level = paren_level_stack.pop();\n\
    \            paren_levels.push(paren_level);\n        }\n        else if(char\
    \ === ' ' && paren_count === 0){\n            var paren_level_diff = paren_level_stack.pop()\
    \ - paren_level_stack[paren_level_stack_index];\n            \n            if(paren_level_diff\
    \ > 0){\n                paren_levels.push(paren_level_diff);\n            }\n\
    \            \n            paren_level_stack_index--;\n        }\n    }\n    \n\
    \    return paren_levels;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 1, 0, 2, 1, 0, 0, 2, 1, 1, 1, 0 ]\n\
    \nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmptrujng68.js:48:10)\n  \
    \  at Object.<anonymous> (/tmp/tmptrujng68.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 0, 2, 1,\n    0, 0, 2, 1, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var nested_parens\
    \ = [];\n  var paren_level = 0;\n  var paren_stack = [];\n  var paren_levels =\
    \ [];\n  var paren_stacks = [];\n  for (var i = 0; i < paren_string.length; i++){\n\
    \    var c = paren_string[i];\n    if (c == '('){\n      paren_stack.push(paren_level);\n\
    \      paren_levels.push(paren_level);\n      paren_level++;\n    }\n    else\
    \ if (c == ')'){\n      paren_level = paren_stack.pop();\n      paren_levels.push(paren_level);\n\
    \    }\n    else if (c == ' ' && paren_stack.length == 0){\n      nested_parens.push(paren_levels.length);\n\
    \    }\n  }\n  return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 6, 12, 14 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmp9yf4k9pf.js:35:10)\n    at Object.<anonymous> (/tmp/tmp9yf4k9pf.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 6, 12, 14 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens('(()()) ((())) () ((())()())')\n\
    // [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar nested_paren_level\
    \ = [];\n\tvar paren_level = 0;\n\tvar paren_level_stack = [];\n\tvar paren_level_stack_count\
    \ = 0;\n\tvar paren_level_stack_string = '';\n\tvar paren_level_stack_last_index\
    \ = 0;\n\tvar paren_level_stack_last_string = '';\n\tvar paren_level_stack_last_string_index\
    \ = 0;\n\tvar paren_level_stack_last_string_index2 = 0;\n\tvar paren_level_stack_last_string_index3\
    \ = 0;\n\tvar paren_level_stack_last_string_index4 = 0;\n\tvar paren_level_stack_last_string_index5\
    \ = 0;\n\tvar paren_level_stack_last_string_index6 = 0;\n\tvar paren_level_stack_last_string_index7\
    \ = 0;\n\tvar paren_level_stack_last_string_index8 = 0;\n\tvar paren_level_stack_last_string_index9\
    \ = 0;\n\tvar paren_level_stack_last_string_index10 = 0;\n\tvar paren_level_stack_last_string_index11\
    \ = 0;\n\tvar paren_level_stack_last_string_index12 = 0;\n\tvar paren_level_stack_last_string_index13\
    \ = 0;\n\tvar paren_level_stack_last_string_index14 = 0;\n\tvar paren_level_stack_last_string_index15\
    \ = 0;\n\tvar paren_level_stack_last_string_index16 = 0;\n\tvar paren_level_stack_last_string_index17\
    \ = 0;\n\tvar paren_level_stack_last_string_index18 = 0;\n\tvar paren_level_stack_last_string_index19\
    \ = 0;\n\tvar paren_level_stack_last_string_index20 = 0;\n\tvar paren_level_stack_last_string_index21\
    \ = 0;\n\tvar paren_level_stack_last_string_index22 = 0;\n\tvar paren_level_stack_last_string_index23\
    \ = 0;\n\tvar paren_level_stack_last_string_index24 = 0;\n\tvar paren_level_stack_last_string_index25\
    \ = 0;\n\tvar paren_level_stack_last_string_index26 = 0;\n\tvar paren_level_stack_last_string_index27\
    \ = 0;\n\tvar paren_level_stack_last_string_index28 = 0;\n\tvar paren_level_stack_last_string_index29\
    \ = 0;\n\tvar paren_level_stack_last_string_index30 = 0;\n\tvar paren_level_stack_last_string_index31\
    \ = 0;\n\tvar paren_level_stack_last_string_index32 = 0;\n\tvar paren_level_stack_last_string_index33\
    \ = 0;\n\tvar paren_level_stack_last_string_index34 = 0;\n\tvar paren_level_stack_last_string_index35\
    \ = 0;\n\tvar paren_level_stack_last_string_index36 = 0;\n\tvar paren_level_stack_last_string_index37\
    \ = 0;\n\tvar paren_level_stack_last_string_index38 = 0;\n\tvar paren_level_stack_last_string_index39\
    \ = 0;\n\tvar paren_level_stack_last_string_index40 = 0;\n\tvar paren_level_stack_last_string_index41\
    \ = 1;\n\tvar paren_level_stack_last_string_index42 = 0;\n\tvar \nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp19rqd31d.js:57\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
