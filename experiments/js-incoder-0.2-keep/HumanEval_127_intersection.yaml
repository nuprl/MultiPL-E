name: HumanEval_127_intersection
language: js
prompt: "//You are given two intervals,\n// where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n// The given intervals are closed\
  \ which means that the interval (start, end)\n// includes both start and end.\n\
  // For each given interval, it is assumed that its start is less or equal its end.\n\
  // Your task is to determine whether the length of intersection of these two \n\
  // intervals is a prime number.\n// Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n// which its length is 1, which not a prime number.\n//\
  \ If the length of the intersection is a prime number, return \"YES\",\n// otherwise,\
  \ return \"NO\".\n// If the two intervals don't intersect, return \"NO\".\n// [input/output]\
  \ samples:\n// intersection((1, 2), (2, 3)) ==> \"NO\"\n// intersection((-1, 1),\
  \ (0, 4)) ==> \"NO\"\n// intersection((-3, -1), (-5, 5)) ==> \"YES\"\nfunction intersection(interval1,\
  \ interval2){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = intersection;\n  assert.deepEqual(candidate([1, 2], [2, 3]),\"NO\");\n  assert.deepEqual(candidate([-1,\
  \ 1], [0, 4]),\"NO\");\n  assert.deepEqual(candidate([-3, -1], [-5, 5]),\"YES\"\
  );\n  assert.deepEqual(candidate([-2, 2], [-4, 0]),\"YES\");\n  assert.deepEqual(candidate([-11,\
  \ 2], [-1, -1]),\"NO\");\n  assert.deepEqual(candidate([1, 2], [3, 5]),\"NO\");\n\
  \  assert.deepEqual(candidate([1, 2], [1, 2]),\"NO\");\n  assert.deepEqual(candidate([-2,\
  \ -2], [-3, -2]),\"NO\");\n}\n\ntest();"
completions: ["    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessOrEqualEnd2 = start1 <\
    \ end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start1 < end1 && start2\
    \ < end1;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n \
    \   let start2LessOrEqualEnd1 = start1 < end1 && start2 < end1;\n    let start1LessOrEqualEnd2\
    \ = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start1 <\
    \ end1 && start2 < end1;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2\
    \ < end1;\n    let start2LessOrEqualEnd1 = start1 < end1 && start2 < end1;\n \
    \   let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessOrEqualEnd2 = start1 <\
    \ end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start1 < end1 && start2\
    \ < end1;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n \
    \   let start2LessOrEqualEnd1 = start1 < end1 && start2 < end1;\n    let start1LessOrEqualEnd2\
    \ = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start1 <\
    \ end1 && start2 < end1;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2\
    \ < end1;\n    let start2LessOrEqualEnd1 = start1 < end1 && start2 < end1;\n \
    \   let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessOrEqualEnd2 = start1 <\
    \ end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start1 < end1 && start2\
    \ < end1;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n \
    \   let start2LessOrEqualEnd1 = start1 < end1 && start2 < end1;\n    let start1LessOrEqualEnd2\
    \ = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start1 <\
    \ end1 && start2 < end1;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2\
    \ < end1;\n    let ", "    let start = Math.min(interval1[0], interval2[0]);\n\
    \    let end = Math.max(interval1[1], interval2[1]);\n    let length = end - start;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n \
    \       if(length % i === 0){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let start = Math.min(interval1[0], interval2[0]);\n    let\
    \ end = Math.max(interval1[1], interval2[1]);\n    let length = end - start;\n\
    \    if (length < 2) return \"NO\";\n    for (let i = 2; i <= length; i++){\n\
    \        if (interval1[0] >= start && interval1[1] <= end && interval2[0] >= start\
    \ && interval2[1] <= end && interval1[0] < interval2[0] && interval1[1] > interval2[1])\
    \ return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let interval1Start =\
    \ interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = intersectionLength === 2;\n    return isPrime ? \"YES\" : \"\
    NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let startIntersection = start1 < start2 ? start1 : start2;\n    let endIntersection\
    \ = end1 < end2 ? end1 : end2;\n    let intersectionLength = endIntersection -\
    \ startIntersection;\n    let isPrime = true;\n    for (let i = 2; i <= intersectionLength;\
    \ i++) {\n        if (startIntersection + i !== endIntersection) {\n         \
    \   if (startIntersection + i % 2 !== endIntersection - i % 2) {\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \ }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "\tlet interval1Start = interval1[0];\n\
    \tlet interval1End = interval1[1];\n\tlet interval2Start = interval2[0];\n\tlet\
    \ interval2End = interval2[1];\n\tlet intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n\tlet intersectionEnd = Math.max(interval1End, interval2End);\n\
    \tlet intersectionLength = intersectionEnd - intersectionStart;\n\tlet isPrime\
    \ = interval1Start <= interval2End && interval2Start <= interval1End;\n\treturn\
    \ isPrime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    let isPrime\
    \ = interval1Length === interval2Length && interval1Length > 1 && interval2Length\
    \ > 1 && intersectionLength > 1;\n    return isPrime ? \"YES\" : \"NO\";\n}\n",
  "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let\
    \ startIntersection = start1 <= end2 && start2 <= end1 ? start2 : start1;\n  \
    \  let endIntersection = start1 <= end2 && start2 <= end1 ? end2 : end1;\n   \
    \ let intersectionLength = endIntersection - startIntersection;\n    let isPrime\
    \ = intersectionLength % 2 === 0;\n    return isPrime ? \"YES\" : \"NO\";\n}\n",
  "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = interval1Start <=\
    \ interval2End && interval2Start <= interval1End;\n    if(isPrime){\n        return\
    \ \"YES\";\n    }\n    if(intersectionLength === 0){\n        return \"NO\";\n\
    \    }\n    let isPrimeNumber = true;\n    for(let i = 2; i <= intersectionLength;\
    \ i++){\n        if(interval1Start + i !== interval2Start || interval1End - i\
    \ !== interval2End){\n            isPrimeNumber = false;\n            break;\n\
    \        }\n    }\n    if(isPrimeNumber){\n        return \"YES\";\n    }\n  \
    \  return \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if(intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(intersectionStart % i ===\
    \ 0 || intersectionEnd % i === 0){\n            isPrime = false;\n           \
    \ break;\n        }\n    }\n    \n    return isPrime ? \"YES\" : \"NO\";\n}\n",
  "    let start1 = interval1[0];\n    let end1 = interval1[1];\n    let start2 =\
    \ interval2[0];\n    let end2 = interval2[1];\n    let length = end1 - start1;\n\
    \    let length2 = end2 - start2;\n    if(length2 > length){\n        let temp\
    \ = start2;\n        start2 = end2;\n        end2 = temp;\n    }\n    let isPrime\
    \ = true;\n    for(let i = start2; i <= end2; i++){\n        if(i % length2 ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  if(isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", " \
    \   let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if(intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ && i % interval2Start === 0)){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    \n    if(isPrime){\n        return \"YES\";\n    }\n  \
    \  \n    return \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2,\
    \ end2] = interval2;\n    if(start1 < start2){\n        let temp = start1;\n \
    \       start1 = start2;\n        start2 = temp;\n    }\n    if(end1 < end2){\n\
    \        let temp = end1;\n        end1 = end2;\n        end2 = temp;\n    }\n\
    \    if(start1 > end2){\n        let temp = start1;\n        start1 = end2;\n\
    \        end2 = temp;\n    }\n    if(start2 > end1){\n        let temp = start2;\n\
    \        start2 = end1;\n        end1 = temp;\n    }\n    let startIntersection\
    \ = start1;\n    let endIntersection = end2;\n    let lengthIntersection = endIntersection\
    \ - startIntersection;\n    let isPrime = true;\n    for(let i = 2; i <= lengthIntersection;\
    \ i++){\n        if(startIntersection + i !== endIntersection){\n            if(startIntersection\
    \ + i % 2 === endIntersection - i % 2){\n                isPrime = false;\n  \
    \              break;\n            }\n        }\n    }\n    if(isPrime){\n   \
    \     return \"YES\";\n    }\n    return \"NO\";\n}\n", "\tlet start1 = interval1[0];\n\
    \tlet end1 = interval1[1];\n\tlet start2 = interval2[0];\n\tlet end2 = interval2[1];\n\
    \tlet intersection = [];\n\tlet intersectionLength = 0;\n\tlet isPrime = true;\n\
    \tlet isPrimeLength = 0;\n\tlet isPrimeInterval = [];\n\tlet isPrimeIntervalLength\
    \ = 0;\n\tlet isPrimeIntervalStart = 0;\n\tlet isPrimeIntervalEnd = 0;\n\tlet\
    \ isPrimeIntervalStart2 = 0;\n\tlet isPrimeIntervalEnd2 = 0;\n\tlet isPrimeIntervalStart3\
    \ = 0;\n\tlet isPrimeIntervalEnd3 = 0;\n\tlet isPrimeIntervalStart4 = 0;\n\tlet\
    \ isPrimeIntervalEnd4 = 0;\n\tlet isPrimeIntervalStart5 = 0;\n\tlet isPrimeIntervalEnd5\
    \ = 0;\n\tlet isPrimeIntervalStart6 = 0;\n\tlet isPrimeIntervalEnd6 = 0;\n\tlet\
    \ isPrimeIntervalStart7 = 0;\n\tlet isPrimeIntervalEnd7 = 0;\n\tlet isPrimeIntervalStart8\
    \ = 0;\n\tlet isPrimeIntervalEnd8 = 0;\n\tlet isPrimeIntervalStart9 = 0;\n\tlet\
    \ isPrimeIntervalEnd9 = 0;\n\tlet isPrimeIntervalStart10 = 0;\n\tlet isPrimeIntervalEnd10\
    \ = 0;\n\tlet isPrimeIntervalStart11 = 0;\n\tlet isPrimeIntervalEnd11 = 0;\n\t\
    let isPrimeIntervalStart12 = 0;\n\tlet isPrimeIntervalEnd12 = 0;\n\tlet isPrimeIntervalStart13\
    \ = 0;\n\tlet isPrimeIntervalEnd13 = 0;\n\tlet isPrimeIntervalStart14 = 0;\n\t\
    let isPrimeIntervalEnd14 = 0;\n\tlet isPrimeIntervalStart15 = 0;\n\tlet isPrimeIntervalEnd15\
    \ = 0;\n\tlet isPrimeIntervalStart16 = 0;\n\tlet isPrimeIntervalEnd16 = 0;\n\t\
    let isPrimeIntervalStart17 = 0;\n\tlet isPrimeIntervalEnd17 = 0;\n\tlet isPrimeIntervalStart18\
    \ = 0;\n\tlet isPrimeIntervalEnd18 = 0;\n\tlet isPrimeIntervalStart19 = 0;\n\t\
    let isPrimeIntervalEnd19 = 0;\n\tlet isPrimeIntervalStart20 = 0;\n\tlet isPrimeIntervalEnd20\
    \ = 0;\n\tlet isPrimeIntervalStart21 = 0;\n\tlet isPrimeIntervalEnd21 = 0;\n\t\
    let isPrimeIntervalStart22 = 0;\n\tlet isPrimeIntervalEnd22 = 0;\n\tlet isPrimeIntervalStart",
  "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let\
    \ startIntersection = start1 <= start2 && start2 <= end1;\n    let endIntersection\
    \ = start1 <= end2 && end2 <= end1;\n    if(startIntersection && endIntersection){\n\
    \        if(start1 <= start2 && start2 <= end1){\n            return true;\n \
    \       }else if(start1 <= end2 && end2 <= end1){\n            return true;\n\
    \        }else{\n            return false;\n        }\n    }else{\n        return\
    \ false;\n    }\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    let isPrime = true;\n    for (let i = 2; i\
    \ <= intersectionLength; i++){\n        if (interval1Start + i === interval2Start\
    \ || interval1Start + i === interval2End){\n            isPrime = false;\n   \
    \         break;\n        }\n    }\n    if (isPrime){\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\n", "\tlet [start1, end1] = interval1;\n\tlet\
    \ [start2, end2] = interval2;\n\tlet startIntersection = start1 < start2 ? start1\
    \ : start2;\n\tlet endIntersection = end1 < end2 ? end1 : end2;\n\tlet intersectionLength\
    \ = endIntersection - startIntersection;\n\tlet isPrime = intersectionLength ===\
    \ 2 && isPrime(intersectionLength);\n\treturn isPrime ? \"YES\" : \"NO\";\n}\n",
  "\tlet start1 = interval1[0];\n\tlet end1 = interval1[1];\n\tlet start2 = interval2[0];\n\
    \tlet end2 = interval2[1];\n\tlet intersection = end1 - start2;\n\tlet isPrime\
    \ = checkPrime(intersection);\n\treturn isPrime;\n}\n", "    let [start1, end1]\
    \ = interval1\n    let [start2, end2] = interval2\n    let startIntersection =\
    \ start1 <= start2 && start2 <= end1\n    let endIntersection = start1 <= end2\
    \ && end2 <= end1\n    if (startIntersection && endIntersection){\n        let\
    \ intersectionLength = end1 - start1\n        if (intersectionLength === 2){\n\
    \            return \"YES\"\n        }\n        if (intersectionLength === 1){\n\
    \            return \"NO\"\n        }\n        if (intersectionLength === 3){\n\
    \            return \"YES\"\n        }\n        if (intersectionLength === 4){\n\
    \            return \"YES\"\n        }\n        if (intersectionLength === 5){\n\
    \            return \"YES\"\n        }\n    }\n    return \"NO\"\n}\n", "    let\
    \ [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let start1LessOrEqualEnd2\
    \ = start1 <= end2;\n    let start2LessOrEqualEnd1 = start2 <= end1;\n    let\
    \ start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 = start1LessOrEqualEnd2 && start2LessOrEqualEnd1;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd2 = start1LessOrEqualEnd2\
    \ && start2LessOrEqualEnd2;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start1LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start1LessOrEqualEnd1;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start1LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start1LessOrEqualEnd1;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start1LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start1LessOrEqualEnd1;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start1LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start1LessOrEqualEnd1;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart1LessOrEqualEnd2\
    \ = start1LessOrEqual", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if (intersectionLength === 1){\n        return\
    \ \"YES\";\n    }\n    let isPrime = true;\n    for (let i = 2; i <= intersectionLength;\
    \ i++){\n        if (intersectionStart % i === 0){\n            isPrime = false;\n\
    \            break;\n        }\n    }\n    if (isPrime){\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\n", "    let [start1, end1] = interval1;\n   \
    \ let [start2, end2] = interval2;\n    let start1LessOrEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 <\
    \ end2;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n   \
    \ let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n    let start1LessOrEqualEnd2\
    \ = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start2 <\
    \ end1 && start1 < end2;\n    let start1LessOrEqualEnd2 = start2 < end1 && start1\
    \ < end2;\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n \
    \   let start1LessOrEqualEnd2 = start2 < end1 && start1 < end2;\n    let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n    let start1LessOrEqualEnd2 = start2 <\
    \ end1 && start1 < end2;\n    let start2LessOrEqualEnd1 = start2 < end1 && start1\
    \ < end2;\n    let start1LessOrEqualEnd2 = start2 < end1 && start1 < end2;\n \
    \   let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n    let start1LessOrEqualEnd2\
    \ = start2 < end1 && start1 < end2;\n    let start2LessOrEqualEnd1 = start2 <\
    \ end1 && start1 < end2;\n    let start1LessOrEqualEnd2 = start2 < end1 && start1\
    \ < end2;\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n \
    \   let start1LessOrEqualEnd2 = start2 < end1 && start1 < end2;\n    let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n    let start1LessOrEqualEnd2 = start2 <\
    \ end1 && start1 < end2;\n    let start2LessOrEqualEnd1 = start2 < end1 && start1\
    \ < end2;\n    let start1LessOrEqualEnd2 = start2 < end1 && start1 < end2;\n \
    \   let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n    let start1LessOrEqualEnd2\
    \ = start2 < end1 && start1 < end2;\n    let start2LessOrEqualEnd1 = start2 <\
    \ end1 && start1 < end2;\n    let start1LessOrEqualEnd2 = start2 < end1 && start1\
    \ < end2;\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n \
    \   let start1LessOrEqualEnd2 = start2 < end1 && start1 < end2;\n    let ", " \
    \   let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.max(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.min(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if (intersectionLength === 1){\n        return\
    \ \"YES\";\n    }\n    if (intersectionLength === 2){\n        return \"YES\"\
    ;\n    }\n    if (intersectionLength === 3){\n        return \"YES\";\n    }\n\
    \    if (intersectionLength === 4){\n        return \"YES\";\n    }\n    if (intersectionLength\
    \ === 5){\n        return \"YES\";\n    }\n    if (intersectionLength === 6){\n\
    \        return \"YES\";\n    }\n    if (intersectionLength === 7){\n        return\
    \ \"YES\";\n    }\n    if (intersectionLength === 8){\n        return \"YES\"\
    ;\n    }\n    if (intersectionLength === 9){\n        return \"YES\";\n    }\n\
    \    if (intersectionLength === 10){\n        return \"YES\";\n    }\n    if (intersectionLength\
    \ === 11){\n        return \"YES\";\n    }\n    if (intersectionLength === 12){\n\
    \        return \"YES\";\n    }\n    if (intersectionLength === 13){\n       \
    \ return \"YES\";\n    }\n    if (intersectionLength === 14){\n        return\
    \ \"YES\";\n    }\n    if (intersectionLength === 15){\n        return \"YES\"\
    ;\n    }\n    if (intersectionLength === 16){\n        return \"YES\";\n    }\n\
    \    if (intersectionLength === 17){\n        return \"YES\";\n    }\n    if (intersectionLength\
    \ === 18){\n        return \"YES\";\n    }\n    if (intersectionLength === 19){\n\
    \        return \"YES\";\n    }\n    if (intersectionLength === 20){\n       \
    \ return \"YES\";\n    }\n    if (intersectionLength === 21){\n        return\
    \ \"YES\";\n    }\n    if (intersectionLength === 22){\n        return \"YES\"\
    ;\n    }\n    if (intersectionLength === 23){\n        return \"YES\";\n    }\n\
    \    if (intersectionLength === 24){\n        return \"YES\";\n    }\n    if (intersectionLength\
    \ === 25){\n        return \"YES\";\n    }\n    if (intersectionLength === 26){\n\
    \        return \"YES\";\n    }\n    if (intersectionLength === 27){\n       \
    \ return \"YES\";\n    }\n    if (intersectionLength === 28){\n        return\
    \ \"YES\";\n    }\n    if (intersectionLength === 29){\n        return \"YES\"\
    ;\n    }\n    if (intersectionLength === 30){\n        return \"YES\";\n    }\n\
    \    if (intersectionLength === 31){\n        return \"YES\";\n    }\n    if (intersectionLength\
    \ === 32){\n        return \"YES\";\n    }\n    if (intersectionLength === 33){\n\
    \        return \"YES\";\n    }\n    if (", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    let isPrime\
    \ = true;\n    for(let i = 2; i <= intersectionLength; i++){\n        if(!(i %\
    \ interval1Start === 0 % interval2Start === 0)){\n            isPrime = false;\n\
    \            break;\n        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n\
    }\n", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    if(start1LessOrEqualEnd2 && start2LessOrEqualEnd1){\n\
    \        if(start1 <= start2 && start2 <= end1){\n            return \"YES\";\n\
    \        }\n        if(start2 <= start1 && start1 <= end2){\n            return\
    \ \"YES\";\n        }\n        if(start1 <= start2 && start2 <= end2){\n     \
    \       return \"YES\";\n        }\n        if(start2 <= start1 && start1 <= end1){\n\
    \            return \"YES\";\n        }\n    }\n    if(start1LessOrEqualEnd2){\n\
    \        if(start2 <= start1 && start1 <= end2){\n            return \"YES\";\n\
    \        }\n        if(start1 <= start2 && start2 <= end1){\n            return\
    \ \"YES\";\n        }\n        if(start2 <= start1 && start1 <= end2){\n     \
    \       return \"YES\";\n        }\n        if(start1 <= start2 && start2 <= end1){\n\
    \            return \"YES\";\n        }\n    }\n    if(start2LessOrEqualEnd1){\n\
    \        if(start1 <= start2 && start2 <= end1){\n            return \"YES\";\n\
    \        }\n        if(start2 <= start1 && start1 <= end2){\n            return\
    \ \"YES\";\n        }\n        if(start1 <= start2 && start2 <= end2){\n     \
    \       return \"YES\";\n        }\n        if(start2 <= start1 && start1 <= end1){\n\
    \            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n", "  \
    \  let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let\
    \ start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1\
    \ <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 &&\
    \ start1 <= end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <=\
    \ end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n \
    \   let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1\
    \ <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 &&\
    \ start1 <= end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <=\
    \ end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n \
    \   let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1\
    \ <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 &&\
    \ start1 <= end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <=\
    \ end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n \
    \   let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1\
    \ <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 &&\
    \ start1 <= end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <=\
    \ end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n \
    \   let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1\
    \ <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = ", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrimeNumber = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(intersectionStart % i === 0 && intersectionEnd % i === 0){\n     \
    \       isPrimeNumber = false;\n            break;\n        }\n    }\n    return\
    \ isPrimeNumber ? \"YES\" : \"NO\";\n}\n", "    let start1 = interval1[0];\n \
    \   let end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 = interval2[1];\n\
    \    let length = end1 - start1;\n    let length2 = end2 - start2;\n    if(length\
    \ == 0 || length2 == 0){\n        return \"NO\";\n    }\n    if(length == length2){\n\
    \        if(start1 <= start2 && end1 >= end2){\n            return \"YES\";\n\
    \        }\n        else{\n            return \"NO\";\n        }\n    }\n    if(length\
    \ < length2){\n        let temp = start1;\n        start1 = start2;\n        start2\
    \ = temp;\n        temp = end1;\n        end1 = end2;\n        end2 = temp;\n\
    \    }\n    let temp1 = start1;\n    let temp2 = start2;\n    let temp3 = end1;\n\
    \    let temp4 = end2;\n    while(temp1 <= temp2 && temp3 <= temp4){\n       \
    \ if(temp1 == temp3 && temp2 == temp4){\n            return \"YES\";\n       \
    \ }\n        else if(temp1 == temp2 && temp2 == temp3){\n            return \"\
    YES\";\n        }\n        else if(temp1 == temp3 && temp3 == temp4){\n      \
    \      return \"YES\";\n        }\n        else if(temp2 == temp3 && temp3 ==\
    \ temp4){\n            return \"YES\";\n        }\n        else if(temp1 == temp2\
    \ && temp2 == temp3){\n            return \"YES\";\n        }\n        else if(temp1\
    \ == temp3 && temp3 == temp4){\n            return \"YES\";\n        }\n     \
    \   else if(temp2 == temp3 && temp3 == temp4){\n            return \"YES\";\n\
    \        }\n        else if(temp1 == temp2 && temp2 == temp3){\n            return\
    \ \"YES\";\n        }\n        else if(temp1 == temp3 && temp3 == temp4){\n  \
    \          return \"YES\";\n        }\n        else if(temp2 == temp3 && temp3\
    \ == temp4){\n            return \"YES\";\n        }\n        else if(temp1 ==\
    \ temp2 && temp2 == temp3){\n            return \"YES\";\n        }\n        else\
    \ if(temp1 == temp3 && temp3 == temp4){\n            return \"YES\";\n       \
    \ }\n        else if(temp2 == temp3 && temp3 == temp4){\n            return \"\
    YES\";\n        }\n        else if(temp1 == temp2 && temp2 == temp3){\n      \
    \      return \"YES\";\n        }\n        else if(temp1 == temp3 && temp3 ==\
    \ temp4){\n            return \"YES\";\n        }\n        else if(temp2 == temp3\
    \ && temp3 == temp4){\n            return \"YES\";\n        }\n        else if(temp1\
    \ == temp2 && temp2 == temp3){\n            return \"YES\";\n        }\n     \
    \   else if(temp1 == temp3 && temp3 == temp4){\n            return \"YES\";\n\
    \        }\n        else if(temp2 == temp3 && temp", "\tlet start = Math.min(interval1[0],\
    \ interval2[0]);\n\tlet end = Math.max(interval1[1], interval2[1]);\n\tlet intersection\
    \ = [];\n\tlet isIntersect = false;\n\tfor(let i = start; i <= end; i++){\n\t\t\
    let isIn = false;\n\t\tfor(let j = 0; j < intersection.length; j++){\n\t\t\tif(intersection[j][0]\
    \ === i && intersection[j][1] === i){\n\t\t\t\tisIn = true;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t\tif(!isIn){\n\t\t\tintersection.push([i, i]);\n\t\t}\n\t}\n\t\
    if(intersection.length === 2){\n\t\tisIntersect = true;\n\t}\n\treturn isIntersect\
    \ ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2,\
    \ end2] = interval2;\n    if (start1 < end2 && start2 < end1){\n        if (start1\
    \ < start2){\n            return [start1, end2];\n        } else {\n         \
    \   return [start2, end1];\n        }\n    } else {\n        return \"NO\";\n\
    \    }\n}\n", "    let interval1Start = interval1[0];\n    let interval1End =\
    \ interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrimeNumber = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrimeNumber = false;\n    \
    \        break;\n        }\n    }\n    if(isPrimeNumber){\n        return \"YES\"\
    ;\n    }else{\n        return \"NO\";\n    }\n}\n", "    let interval1Start =\
    \ interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = interval1Length === interval2Length && interval1Length > 1\
    \ && interval2Length > 1 && intersectionLength === interval1Length;\n    return\
    \ isPrime;\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    if (start1 < start2){\n        let temp = start1;\n      \
    \  start1 = start2;\n        start2 = temp;\n    }\n    if (end1 < end2){\n  \
    \      let temp = end1;\n        end1 = end2;\n        end2 = temp;\n    }\n \
    \   if (start1 > end2){\n        let temp = start1;\n        start1 = end2;\n\
    \        end2 = temp;\n    }\n    if (start2 > end1){\n        let temp = start2;\n\
    \        start2 = end1;\n        end1 = temp;\n    }\n    if (start1 < start2\
    \ && end1 > end2){\n        return \"NO\";\n    }\n    if (start1 < start2 &&\
    \ end1 < end2){\n        return \"YES\";\n    }\n    if (start1 > end2 && end1\
    \ > end1){\n        return \"NO\";\n    }\n    if (start1 > end2 && end1 < end2){\n\
    \        return \"YES\";\n    }\n    if (start1 < start2 && end1 > end2){\n  \
    \      return \"YES\";\n    }\n    if (start1 < start2 && end1 < end2){\n    \
    \    return \"NO\";\n    }\n    if (start1 > end2 && end1 > end1){\n        return\
    \ \"YES\";\n    }\n    if (start1 > end2 && end1 < end2){\n        return \"NO\"\
    ;\n    }\n    return \"NO\";\n}\n", "\tlet start1 = interval1[0];\n\tlet end1\
    \ = interval1[1];\n\tlet start2 = interval2[0];\n\tlet end2 = interval2[1];\n\t\
    let intersection = [];\n\tlet intersectionLength = 0;\n\tfor(let i = start1; i\
    \ <= end1; i++){\n\t\tfor(let j = start2; j <= end2; j++){\n\t\t\tif(i == j){\n\
    \t\t\t\tintersection.push(i);\n\t\t\t\tintersectionLength++;\n\t\t\t}\n\t\t}\n\
    \t}\n\tif(intersectionLength == 0){\n\t\treturn \"NO\";\n\t}\n\tlet isPrime =\
    \ true;\n\tfor(let i = 0; i < intersectionLength; i++){\n\t\tif(intersection[i]\
    \ % 2 == 0){\n\t\t\tisPrime = false;\n\t\t}\n\t}\n\tif(isPrime){\n\t\treturn \"\
    YES\";\n\t}\n\treturn \"NO\";\n}\n", "    let [start1, end1] = interval1;\n  \
    \  let [start2, end2] = interval2;\n    let start = Math.max(start1, start2);\n\
    \    let end = Math.min(end1, end2);\n    let length = end - start;\n    let prime\
    \ = true;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length\
    \ % i === 0){\n            prime = false;\n            break;\n        }\n   \
    \ }\n    return prime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if(intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    if(intersectionLength === 1){\n\
    \        return \"YES\";\n    }\n    let isPrime = true;\n    for(let i = 2; i\
    \ <= intersectionLength; i++){\n        if(!(i % interval1Start === 0 && i % interval2Start\
    \ === 0)){\n            isPrime = false;\n            break;\n        }\n    }\n\
    \    if(isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", " \
    \   let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n   \
    \ let start = Math.min(start1, start2);\n    let end = Math.max(end1, end2);\n\
    \    let length = end - start;\n    if (length < 2) return \"NO\";\n    if (length\
    \ == 2) return \"YES\";\n    let prime = true;\n    for (let i = 2; i <= Math.sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            prime = false;\n       \
    \     break;\n        }\n    }\n    if (prime) return \"YES\";\n    return \"\
    NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let start1LessOrEqualEnd2 = start1 <= end2;\n    let start2LessOrEqualEnd1\
    \ = start2 <= end1;\n    if(start1LessOrEqualEnd2 && start2LessOrEqualEnd1){\n\
    \        if(start1 <= end2 && start2 <= end1){\n            return true;\n   \
    \     }\n    }\n    return false;\n}\n", "    let [start1, end1] = interval1;\n\
    \    let [start2, end2] = interval2;\n    let startIntersection = start1 < start2\
    \ ? start1 : start2;\n    let endIntersection = end1 < end2 ? end1 : end2;\n \
    \   let length = endIntersection - startIntersection;\n    if (length < 2) return\
    \ \"NO\";\n    if (length == 2) return \"YES\";\n    if (length == 1) return \"\
    NO\";\n    let prime = true;\n    for (let i = 2; i <= length; i++){\n       \
    \ if (startIntersection + i > endIntersection) break;\n        if (endIntersection\
    \ - startIntersection % i == 0) prime = false;\n    }\n    return prime ? \"YES\"\
    \ : \"NO\";\n}\n", "\tlet start = Math.min(interval1[0], interval2[0]);\n\tlet\
    \ end = Math.max(interval1[1], interval2[1]);\n\tlet length = end - start;\n\t\
    let isPrime = true;\n\tfor(let i = 2; i <= Math.sqrt(length); i++){\n\t\tif(length\
    \ % i === 0){\n\t\t\tisPrime = false;\n\t\t}\n\t}\n\treturn isPrime ? \"YES\"\
    \ : \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    let startIntersection = start1 <= end2 && start2 <= end1 ?\
    \ start1 : start2;\n    let endIntersection = start1 <= end2 && start2 <= end1\
    \ ? end1 : end2;\n    let length = endIntersection - startIntersection;\n    return\
    \ length >= 2 && length % 2 === 0;\n}\n", "    let [start1, end1] = interval1\n\
    \    let [start2, end2] = interval2\n    let start = Math.max(start1, start2)\n\
    \    let end = Math.min(end1, end2)\n    let length = end - start\n    let isPrime\
    \ = true\n    for (let i = 2; i <= Math.sqrt(length); i++){\n        if (length\
    \ % i === 0){\n            isPrime = false\n            break\n        }\n   \
    \ }\n    if (isPrime){\n        return \"YES\"\n    }\n    return \"NO\"\n}\n",
  "    let start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    \n    if (length < 2) return\
    \ \"NO\";\n    \n    let prime = true;\n    for (let i = 2; i < length; i++){\n\
    \        if (length%i === 0){\n            prime = false;\n            break;\n\
    \        }\n    }\n    \n    if (prime) return \"YES\";\n    else return \"NO\"\
    ;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = intersectionLength\
    \ === 2;\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1]\
    \ = interval1;\n    let [start2, end2] = interval2;\n    let start1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2\
    \ <= end1 && start1 <= end2;\n    let startLessOrEqualEnd = start1 <= end1 &&\
    \ start2 <= end2;\n    let endLessOrEqualStart = start1 <= end2 && start2 <= end1;\n\
    \    let endLessOrEqualEnd = start1 <= end1 && start2 <= end2;\n    let startLessOrEqualStartAndEnd\
    \ = start1 <= end1 && start2 <= end2;\n    let startLessOrEqualStartAndEndAndEnd\
    \ = start1 <= end1 && start2 <= end2 && start2 <= end1;\n    let startLessOrEqualStartAndEndAndEndAndEnd\
    \ = start1 <= end1 && start2 <= end2 && start2 <= end2 && start1 <= end1;\n  \
    \  let startLessOrEqualStartAndEndAndEndAndEndAndEnd = start1 <= end1 && start2\
    \ <= end2 && start2 <= end2 && start1 <= end2 && start2 <= end1;\n    let startLessOrEqualStartAndEndAndEndAndEndAndEndAndEnd\
    \ = start1 <= end1 && start2 <= end2 && start2 <= end2 && start1 <= end2 && start2\
    \ <= end2 && start1 <= end1;\n    let startLessOrEqualStartAndEndAndEndAndEndAndEndAndEndAndEnd\
    \ = start1 <= end1 && start2 <= end2 && start2 <= end2 && start1 <= end2 && start2\
    \ <= end2 && start1 <= end2 && start2 <= end1;\n    let startLessOrEqualStartAndEndAndEndAndEndAndEndAndEndAndEndAndEnd\
    \ = start1 <= end1 && start2 <= end2 && start2 <= end2 && start1 <= end2 && start2\
    \ <= end2 && start1 <= end2 && start2 <= end2 && start1 <= end1;\n    let startLessOrEqualStartAndEndAndEndAndEndAndEndAndEndAndEndAndEndAndEnd\
    \ = start1 <= end1 && start2 <= end2 && start2 <= end2 && start1 <= end2 && start2\
    \ <= end2 && start1 <= end2 && start2 <= end2 && start1 <= end2 && start2 <= end1;\n\
    \    let startLessOrEqualStartAndEndAndEndAndEndAndEndAndEndAndEndAndEndAndEndAndEnd\
    \ = start1 <= end1 && start2 <= end2 && start2 <= end2 && start1 <= end2 && start2\
    \ <= end2 && start1 <= end2 && start2 <= end2 && start1 <= end2 && start2 <= end2;\n\
    \    let startLessOrEqualStartAndEndAndEndAndEndAndEndAndEnd", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.max(interval1Start, interval2Start);\n    let intersectionEnd = Math.min(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrimeNumber = true;\n    for (let i = 2; i <= intersectionLength; i++){\n\
    \        if (intersectionStart + i !== intersectionEnd){\n            if (interval1Start\
    \ <= intersectionStart + i && intersectionStart + i <= interval2Start || interval1End\
    \ >= intersectionStart + i && intersectionStart + i <= interval2End){\n      \
    \          isPrimeNumber = false;\n            }\n        }\n    }\n    return\
    \ isPrimeNumber ? \"YES\" : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.max(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.min(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if (intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    if (intersectionLength === 1){\n\
    \        return \"YES\";\n    }\n    let isPrime = true;\n    for (let i = 2;\
    \ i <= intersectionLength; i++){\n        if (interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            if (interval1Start <= intersectionEnd\
    \ && intersectionEnd <= interval1End && interval2Start <= intersectionStart &&\
    \ intersectionStart <= interval2End){\n                isPrime = false;\n    \
    \            break;\n            }\n        }\n    }\n    return isPrime ? \"\
    YES\" : \"NO\";\n}\n", "\tlet start1 = interval1[0];\n\tlet end1 = interval1[1];\n\
    \tlet start2 = interval2[0];\n\tlet end2 = interval2[1];\n\tlet intersection =\
    \ [];\n\tlet intersectionLength = 0;\n\tlet isPrime = true;\n\tlet isPrimeLength\
    \ = 0;\n\tfor(let i = start1; i <= end1; i++){\n\t\tfor(let j = start2; j <= end2;\
    \ j++){\n\t\t\tif(i == j){\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t\tlet isIntersect = true;\n\t\t\tfor(let k = i; k <= j; k++){\n\t\t\t\tif(k\
    \ % i == 0 || k % j == 0){\n\t\t\t\t\tisIntersect = false;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t\tif(isIntersect){\n\t\t\t\tintersection.push(i);\n\t\t\
    \t\tintersectionLength++;\n\t\t\t}\n\t\t}\n\t}\n\tif(isPrime){\n\t\tisPrimeLength\
    \ = Math.sqrt(intersectionLength);\n\t\tfor(let i = 0; i < intersectionLength;\
    \ i++){\n\t\t\tif(intersection[i] % isPrimeLength == 0){\n\t\t\t\tisPrime = false;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif(isPrime){\n\t\treturn \"YES\";\n\t}else{\n\
    \t\treturn \"NO\";\n\t}\n}\n", "\tlet [start1, end1] = interval1;\n\tlet [start2,\
    \ end2] = interval2;\n\tlet startIntersection = start1 <= start2 ? start1 : start2;\n\
    \tlet endIntersection = end1 <= end2 ? end1 : end2;\n\tlet intersectionLength\
    \ = endIntersection - startIntersection;\n\tlet isPrime = true;\n\tfor(let i =\
    \ 2; i <= intersectionLength; i++){\n\t\tif(startIntersection + i !== endIntersection){\n\
    \t\t\tisPrime = false;\n\t\t}\n\t}\n\treturn isPrime ? \"YES\" : \"NO\";\n}\n",
  "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let\
    \ start = Math.min(start1, start2);\n    let end = Math.max(end1, end2);\n   \
    \ let length = end - start;\n    let isPrime = true;\n    for(let i = 2; i <=\
    \ Math.sqrt(length); i++){\n        if(length % i === 0){\n            isPrime\
    \ = false;\n            break;\n        }\n    }\n    return isPrime ? \"YES\"\
    \ : \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    let startIntersection = start1 <= start2 && start2 <= end1;\n\
    \    let endIntersection = start1 <= end2 && end2 <= end1;\n    if(startIntersection\
    \ && endIntersection){\n        if(start1 <= start2 && end2 <= end1){\n      \
    \      return \"YES\";\n        }else{\n            return \"NO\";\n        }\n\
    \    }else{\n        return \"NO\";\n    }\n}\n", "    let [start1, end1] = interval1;\n\
    \    let [start2, end2] = interval2;\n    let start1LessEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n    let start2LessEqualEnd1 = start1 < end1 && start2 < end1;\n\
    \    let start1LessEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n    let start2LessEqualEnd1 = start1 < end1 && start2 < end1;\n\
    \    let start1LessEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n    let start2LessEqualEnd1 = start1 < end1 && start2 < end1;\n\
    \    let start1LessEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n    let start2LessEqualEnd1 = start1 < end1 && start2 < end1;\n\
    \    let start1LessEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n    let start2LessEqualEnd1 = start1 < end1 && start2 < end1;\n\
    \    let start1LessEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n    let start2LessEqualEnd1 = start1 < end1 && start2 < end1;\n\
    \    let start1LessEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n    let start2LessEqualEnd1 = start1 < end1 && start2 < end1;\n\
    \    let start1LessEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessEqualEnd1\
    \ = start1 < end1 && start2 < end1;\n    let start1LessEqualEnd2 = start1 < end2\
    \ && start2 < end1;\n    let start2LessEqualEnd1 = start1 < end1 && start2 < end1;\n\
    \    let start1LessEqualEnd2 = start1 < end2 && start2 < end", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = interval1Start <= interval2End && interval2Start <= interval1End;\n\
    \    if(isPrime){\n        return \"YES\";\n    }\n    if(intersectionLength ===\
    \ 1){\n        return \"NO\";\n    }\n    if(intersectionLength === 2){\n    \
    \    return \"YES\";\n    }\n    if(intersectionLength % 2 === 0){\n        return\
    \ \"NO\";\n    }\n    if(intersectionLength % 2 === 1){\n        return \"YES\"\
    ;\n    }\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(intersectionStart % i ===\
    \ 0 && intersectionEnd % i === 0){\n            isPrime = false;\n        }\n\
    \    }\n    if(isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }\n", "\tlet start1 = interval1[0];\n\tlet end1 = interval1[1];\n\tlet start2\
    \ = interval2[0];\n\tlet end2 = interval2[1];\n\tlet intersection = [];\n\tlet\
    \ length1 = end1 - start1;\n\tlet length2 = end2 - start2;\n\tlet lengthIntersection\
    \ = length1 + length2;\n\tlet isPrime = true;\n\tlet isPrime2 = true;\n\tlet isPrime3\
    \ = true;\n\tlet isPrime4 = true;\n\tlet isPrime5 = true;\n\tlet isPrime6 = true;\n\
    \tlet isPrime7 = true;\n\tlet isPrime8 = true;\n\tlet isPrime9 = true;\n\tlet\
    \ isPrime10 = true;\n\tlet isPrime11 = true;\n\tlet isPrime12 = true;\n\tlet isPrime13\
    \ = true;\n\tlet isPrime14 = true;\n\tlet isPrime15 = true;\n\tlet isPrime16 =\
    \ true;\n\tlet isPrime17 = true;\n\tlet isPrime18 = true;\n\tlet isPrime19 = true;\n\
    \tlet isPrime20 = true;\n\tlet isPrime21 = true;\n\tlet isPrime22 = true;\n\t\
    let isPrime23 = true;\n\tlet isPrime24 = true;\n\tlet isPrime25 = true;\n\tlet\
    \ isPrime26 = true;\n\tlet isPrime27 = true;\n\tlet isPrime28 = true;\n\tlet isPrime29\
    \ = true;\n\tlet isPrime30 = true;\n\tlet isPrime31 = true;\n\tlet isPrime32 =\
    \ true;\n\tlet isPrime33 = true;\n\tlet isPrime34 = true;\n\tlet isPrime35 = true;\n\
    \tlet isPrime36 = true;\n\tlet isPrime37 = true;\n\tlet isPrime38 = true;\n\t\
    let isPrime39 = true;\n\tlet isPrime40 = true;\n\tlet isPrime41 = true;\n\tlet\
    \ isPrime42 = true;\n\tlet isPrime43 = true;\n\tlet isPrime44 = true;\n\tlet isPrime45\
    \ = true;\n\tlet isPrime46 = true;\n\tlet isPrime47 = true;\n\tlet isPrime48 =\
    \ true;\n\tlet isPrime49 = true;\n\tlet isPrime50 = true;\n\tlet isPrime51 = true;\n\
    \tlet isPrime52 = true;\n\tlet isPrime53 = true;\n\tlet isPrime54 = true;\n\t\
    let isPrime55", "    let start = Math.min(interval1[0], interval2[0]);\n    let\
    \ end = Math.max(interval1[1], interval2[1]);\n    let length = end - start;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n \
    \       if(length % i === 0){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "  let start\
    \ = Math.min(interval1[0], interval2[0]);\n  let end = Math.max(interval1[1],\
    \ interval2[1]);\n  let count = 0;\n  for(let i = start; i <= end; i++){\n   \
    \ if(interval1[0] >= i && interval1[1] <= i){\n      count++;\n    }\n    if(interval2[0]\
    \ >= i && interval2[1] <= i){\n      count++;\n    }\n  }\n  if(count % 2 ===\
    \ 0){\n    return \"NO\";\n  }\n  else{\n    return \"YES\";\n  }\n}\n", "   \
    \ let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n \
    \   let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n\
    \    return \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2,\
    \ end2] = interval2;\n    let start1LessOrEqualEnd2 = start1 < end2 && start2\
    \ < end1;\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n \
    \   let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1;\n    let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n    let start1LessOrEqualEnd2 = start1 <\
    \ end2 && start2 < end1;\n    let start2LessOrEqualEnd1 = start2 < end1 && start1\
    \ < end2;\n    let start1LessOrEqualEnd2 = start2 < end1 && start1 < end2;\n \
    \   let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n    let start1LessOrEqualEnd2\
    \ = start2 < end1 && start1 < end2;\n    let start2LessOrEqualEnd1 = start2 <\
    \ end1 && start1 < end2;\n    let start1LessOrEqualEnd2 = start2 < end1 && start1\
    \ < end2;\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n \
    \   let start1LessOrEqualEnd2 = start2 < end1 && start1 < end2;\n    let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n    let start1LessOrEqualEnd2 = start2 <\
    \ end1 && start1 < end2;\n    let start2LessOrEqualEnd1 = start2 < end1 && start1\
    \ < end2;\n    let start1LessOrEqualEnd2 = start2 < end1 && start1 < end2;\n \
    \   let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n    let start1LessOrEqualEnd2\
    \ = start2 < end1 && start1 < end2;\n    let start2LessOrEqualEnd1 = start2 <\
    \ end1 && start1 < end2;\n    let start1LessOrEqualEnd2 = start2 < end1 && start1\
    \ < end2;\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n \
    \   let start1LessOrEqualEnd2 = start2 < end1 && start1 < end2;\n    let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2;\n    let start1LessOrEqualEnd2 = start2 <\
    \ end1 && start1 < end2;\n    let start2LessOrEqualEnd1 = start2 < end1 && start1\
    \ < end2;\n    let start1LessOrEqualEnd2 = start2 < end1 && start1 < end2;\n \
    \   let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2;\n    let start1LessOrEqualEnd2\
    \ = start2 < end1 && start1 < end2;\n    let ", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.max(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.min(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    \n   \
    \ if(intersectionLength === 0){\n        return \"NO\";\n    }\n    \n    let\
    \ isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n       \
    \ if(!(i % interval1Start === 0 || i % interval2Start === 0)){\n            isPrime\
    \ = false;\n            break;\n        }\n    }\n    \n    if(isPrime){\n   \
    \     return \"YES\";\n    }\n    \n    return \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrimeNumber = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(interval1Start <= intersectionStart && intersectionStart <= interval1End\
    \ && interval2Start <= intersectionEnd && intersectionEnd <= interval2End){\n\
    \            if(interval1Start <= intersectionStart && intersectionStart <= interval1End\
    \ && interval2Start <= intersectionEnd && intersectionEnd <= interval2End){\n\
    \                isPrimeNumber = false;\n                break;\n            }\n\
    \        }\n    }\n    return isPrimeNumber;\n}\n", "    let [start1, end1] =\
    \ interval1;\n    let [start2, end2] = interval2;\n    let startIntersection =\
    \ start1 < start2 ? start1 : start2;\n    let endIntersection = end1 < end2 ?\
    \ end1 : end2;\n    let intersectionLength = endIntersection - startIntersection;\n\
    \    let isPrime = true;\n    for (let i = 2; i <= intersectionLength; i++){\n\
    \        if (startIntersection + i !== endIntersection){\n            if (startIntersection\
    \ + i % 2 !== endIntersection % 2){\n                isPrime = false;\n      \
    \          break;\n            }\n        }\n    }\n    return isPrime ? \"YES\"\
    \ : \"NO\";\n}\n", "    let start = Math.min(interval1[0], interval2[0]);\n  \
    \  let end = Math.max(interval1[1], interval2[1]);\n    let length = end - start;\n\
    \    if (length == 0){\n        return \"NO\";\n    }\n    for (let i = 2; i <=\
    \ Math.sqrt(length); i++){\n        if (length % i == 0){\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrimeNumber = true;\n    for (let i = 2; i <= intersectionLength; i++){\n\
    \        if (intersectionStart % i === 0 && intersectionEnd % i === 0){\n    \
    \        isPrimeNumber = false;\n            break;\n        }\n    }\n    return\
    \ isPrimeNumber;\n}\n", "    let start = Math.min(interval1[0], interval2[0]);\n\
    \    let end = Math.max(interval1[1], interval2[1]);\n    let length = end - start;\n\
    \    if(length == 0){\n        return \"NO\";\n    }\n    let prime = true;\n\
    \    for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i == 0){\n\
    \            prime = false;\n            break;\n        }\n    }\n    if(prime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    \n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    \n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    \n    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    \n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(interval1Start + i !== interval2Start || interval1End + i !== interval2End){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    \n  \
    \  if(isPrime){\n        return \"YES\";\n    }\n    \n    return \"NO\";\n}\n",
  "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if (intersectionLength === 1){\n        return\
    \ \"YES\";\n    }\n    let isPrime = true;\n    for (let i = 2; i <= Math.sqrt(intersectionLength);\
    \ i++){\n        if (intersectionLength % i === 0){\n            isPrime = false;\n\
    \            break;\n        }\n    }\n    if (isPrime){\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if (intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    if (interval1Start <= interval2Start\
    \ && interval1End >= interval2End){\n        return \"YES\";\n    }\n    if (interval1Start\
    \ <= interval2End && interval1End >= interval2Start){\n        return \"NO\";\n\
    \    }\n    if (intersectionStart <= intersectionEnd && intersectionStart <= interval1Start\
    \ && intersectionEnd >= interval1End){\n        return \"YES\";\n    }\n    if\
    \ (intersectionStart <= intersectionEnd && intersectionStart <= interval2Start\
    \ && intersectionEnd >= interval2End){\n        return \"NO\";\n    }\n    if\
    \ (intersectionStart <= interval1Start && intersectionEnd >= interval1End){\n\
    \        return \"YES\";\n    }\n    if (intersectionStart <= interval2Start &&\
    \ intersectionEnd >= interval2End){\n        return \"NO\";\n    }\n    return\
    \ \"NO\";\n}\n", "\tlet start1 = interval1[0];\n\tlet end1 = interval1[1];\n\t\
    let start2 = interval2[0];\n\tlet end2 = interval2[1];\n\tlet intersection = [];\n\
    \tlet intersectionLength = 0;\n\tlet isPrime = true;\n\t\n\tfor(let i = start1;\
    \ i <= end1; i++){\n\t\tfor(let j = start2; j <= end2; j++){\n\t\t\tif(i == j){\n\
    \t\t\t\tintersection.push(i);\n\t\t\t\tintersectionLength++;\n\t\t\t}\n\t\t}\n\
    \t}\n\t\n\tif(intersectionLength == 0){\n\t\treturn \"NO\";\n\t}\n\t\n\tfor(let\
    \ i = 0; i < intersection.length; i++){\n\t\tif(intersection[i] % 2 == 0){\n\t\
    \t\tisPrime = false;\n\t\t}\n\t}\n\t\n\tif(isPrime){\n\t\treturn \"YES\";\n\t\
    }\n\t\n\treturn \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let\
    \ interval1End = interval1[1];\n    let interval2Start = interval2[0];\n    let\
    \ interval2End = interval2[1];\n    let intersectionStart = Math.max(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.min(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    \n   \
    \ if(intersectionLength === 0){\n        return \"NO\";\n    }\n    \n    let\
    \ isPrime = true;\n    for(let i = 2; i <= Math.sqrt(intersectionLength); i++){\n\
    \        if(intersectionLength % i === 0){\n            isPrime = false;\n   \
    \         break;\n        }\n    }\n    \n    if(isPrime){\n        return \"\
    YES\";\n    }\n    \n    return \"NO\";\n}\n", "    let start1 = interval1[0];\n\
    \    let end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 =\
    \ interval2[1];\n    let length1 = end1 - start1;\n    let length2 = end2 - start2;\n\
    \    let intersection = length1 * length2;\n    if(intersection === 0){\n    \
    \    return \"NO\";\n    }\n    let isPrime = true;\n    for(let i = 2; i <= intersection;\
    \ i++){\n        if(!(i % length1 === 0 && i % length2 === 0)){\n            isPrime\
    \ = false;\n            break;\n        }\n    }\n    if(isPrime){\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if(intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ % interval2Start === 0)){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    if(start1 > end2){\n        let temp = start2;\n        start2\
    \ = end2;\n        end2 = temp;\n    }\n    if(start2 > end1){\n        let temp\
    \ = start1;\n        start1 = end1;\n        end1 = temp;\n    }\n    let startIntersection\
    \ = start1 < start2 ? start1 : start2;\n    let endIntersection = end1 > end2\
    \ ? end1 : end2;\n    let intersectionLength = endIntersection - startIntersection;\n\
    \    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    let isPrime\
    \ = true;\n    for(let i = 2; i <= intersectionLength; i++){\n        if(startIntersection\
    \ + i !== endIntersection){\n            if(isPrime){\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n    }\n    return\
    \ isPrime ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1] = interval1;\n  \
    \  let [start2, end2] = interval2;\n    let startIntersection = start1 < start2\
    \ ? start1 : start2;\n    let endIntersection = end1 < end2 ? end1 : end2;\n \
    \   let intersectionLength = endIntersection - startIntersection;\n    let isPrime\
    \ = intersectionLength > 1;\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "\t\
    let start1 = interval1[0];\n\tlet end1 = interval1[1];\n\tlet start2 = interval2[0];\n\
    \tlet end2 = interval2[1];\n\tlet length = end1 - start1;\n\tlet length2 = end2\
    \ - start2;\n\tlet isIntersect = false;\n\tlet isIntersect2 = false;\n\tlet isIntersect3\
    \ = false;\n\tlet isIntersect4 = false;\n\tlet isIntersect5 = false;\n\tlet isIntersect6\
    \ = false;\n\tlet isIntersect7 = false;\n\tlet isIntersect8 = false;\n\tlet isIntersect9\
    \ = false;\n\tlet isIntersect10 = false;\n\tlet isIntersect11 = false;\n\tlet\
    \ isIntersect12 = false;\n\tlet isIntersect13 = false;\n\tlet isIntersect14 =\
    \ false;\n\tlet isIntersect15 = false;\n\tlet isIntersect16 = false;\n\tlet isIntersect17\
    \ = false;\n\tlet isIntersect18 = false;\n\tlet isIntersect19 = false;\n\tlet\
    \ isIntersect20 = false;\n\tlet isIntersect21 = false;\n\tlet isIntersect22 =\
    \ false;\n\tlet isIntersect23 = false;\n\tlet isIntersect24 = false;\n\tlet isIntersect25\
    \ = false;\n\tlet isIntersect26 = false;\n\tlet isIntersect27 = false;\n\tlet\
    \ isIntersect28 = false;\n\tlet isIntersect29 = false;\n\tlet isIntersect30 =\
    \ false;\n\tlet isIntersect31 = false;\n\tlet isIntersect32 = false;\n\tlet isIntersect33\
    \ = false;\n\tlet isIntersect34 = false;\n\tlet isIntersect35 = false;\n\tlet\
    \ isIntersect36 = false;\n\tlet isIntersect37 = false;\n\tlet isIntersect38 =\
    \ false;\n\tlet isIntersect39 = false;\n\tlet isIntersect40 = false;\n\tlet isIntersect41\
    \ = false;\n\tlet isIntersect42 = false;\n\tlet isIntersect43 = false;\n\tlet\
    \ isIntersect44 = false;\n\tlet isIntersect45 = false;\n\tlet isIntersect46 =\
    \ false;\n\tlet isIntersect47 = false;\n\tlet isIntersect48 = false;\n\tlet isIntersect49\
    \ = false;\n\tlet isIntersect50 = false;\n\tlet isIntersect51 = false;\n\tlet\
    \ isIntersect52 = false;\n\tlet isIntersect53 = false;\n\tlet isIntersect54 =\
    \ false;\n\tlet isIntersect55 = false;\n\tlet isIntersect56 = false;\n\tlet isIntersect57",
  "    let start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    let flag = false;\n    for(let\
    \ i = 0; i <= length; i++){\n        if(interval1[0] <= interval2[1] && interval2[0]\
    \ <= interval1[1]){\n            flag = true;\n            break;\n        }\n\
    \    }\n    if(flag){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n",
  "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let\
    \ startIntersection = start1 <= start2 && start2 <= end1 ? start1 : start2;\n\
    \    let endIntersection = start1 <= start2 && start2 <= end1 ? end1 : end2;\n\
    \    let intersectionLength = endIntersection - startIntersection;\n    let isPrime\
    \ = intersectionLength === 2 || intersectionLength === 3;\n    return isPrime\
    \ ? \"YES\" : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let\
    \ interval1End = interval1[1];\n    let interval2Start = interval2[0];\n    let\
    \ interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    let isPrime\
    \ = true;\n    for(let i = 2; i <= intersectionLength; i++){\n        if(i % interval1Start\
    \ === 0 && i % interval2Start === 0){\n            isPrime = false;\n        \
    \    break;\n        }\n    }\n    if(isPrime){\n        return \"YES\";\n   \
    \ }\n    return \"NO\";\n}\n", "    let start1 = interval1[0];\n    let end1 =\
    \ interval1[1];\n    let start2 = interval2[0];\n    let end2 = interval2[1];\n\
    \    let intersection = [];\n    let intersectionLength = 0;\n    for(let i =\
    \ start1; i <= end1; i++){\n        for(let j = start2; j <= end2; j++){\n   \
    \         if(i == j){\n                intersection.push(i);\n               \
    \ intersectionLength++;\n            }\n        }\n    }\n    if(intersectionLength\
    \ == 0){\n        return \"NO\";\n    }\n    if(intersectionLength == 1){\n  \
    \      return \"YES\";\n    }\n    if(intersectionLength > 1){\n        return\
    \ \"NO\";\n    }\n    let prime = true;\n    for(let i = 0; i < intersection.length;\
    \ i++){\n        if(intersection[i] % 2 == 0){\n            prime = false;\n \
    \           break;\n        }\n    }\n    if(prime){\n        return \"YES\";\n\
    \    }\n    return \"NO\";\n}\n", "    let start = Math.min(interval1[0], interval2[0]);\n\
    \    let end = Math.max(interval1[1], interval2[1]);\n    let length = end - start;\n\
    \    let prime = true;\n    for(let i = 2; i <= length; i++){\n        if(start\
    \ % i === 0 && end % i === 0){\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime ? \"YES\" : \"NO\";\n}\n", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    let start1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2\
    \ <= end1 && start1 <= end2;\n    let startLessOrEqualEnd = start1 <= end1 &&\
    \ start2 <= end2;\n    let endLessOrEqualStart = start1 <= end2 && start2 <= end1;\n\
    \    let startLessOrEqualEnd = start1 <= end1 && start2 <= end2;\n    let endLessOrEqualStart\
    \ = start1 <= end2 && start2 <= end1;\n    let startLessOrEqualEnd2 = start1 <=\
    \ end2 && start2 <= end1;\n    let startLessOrEqualEnd1 = start1 <= end1 && start2\
    \ <= end2;\n    let startLessOrEqualEnd2 = start1 <= end1 && start2 <= end2;\n\
    \    let startLessOrEqualEnd1 = start1 <= end1 && start2 <= end2;\n    let startLessOrEqualEnd2\
    \ = start1 <= end1 && start2 <= end2;\n    let startLessOrEqualEnd1 = start1 <=\
    \ end1 && start2 <= end2;\n    let startLessOrEqualEnd2 = start1 <= end1 && start2\
    \ <= end2;\n    let startLessOrEqualEnd1 = start1 <= end1 && start2 <= end2;\n\
    \    let startLessOrEqualEnd2 = start1 <= end1 && start2 <= end2;\n    let startLessOrEqualEnd1\
    \ = start1 <= end1 && start2 <= end2;\n    let startLessOrEqualEnd2 = start1 <=\
    \ end1 && start2 <= end2;\n    let startLessOrEqualEnd1 = start1 <= end1 && start2\
    \ <= end2;\n    let startLessOrEqualEnd2 = start1 <= end1 && start2 <= end2;\n\
    \    let startLessOrEqualEnd1 = start1 <= end1 && start2 <= end2;\n    let startLessOrEqualEnd2\
    \ = start1 <= end1 && start2 <= end2;\n    let startLessOrEqualEnd1 = start1 <=\
    \ end1 && start2 <= end2;\n    let startLessOrEqualEnd2 = start1 <= end1 && start2\
    \ <= end2;\n    let startLessOrEqualEnd1 = start1 <= end1 && start2 <= end2;\n\
    \    let startLessOrEqualEnd2 = start1 <= end1 && start2 <= end2;\n    let startLessOrEqualEnd1\
    \ = start1 <= end1 && start2 <= end2;\n    let startLessOrEqualEnd2 = start1 <=\
    \ end1 && start2 <= end2;\n    let startLessOrEqualEnd1 = start1 <= end1 && start2\
    \ <= end2;\n    let startLessOrEqualEnd2 = start1 <= end1 && start2 <= end2;\n\
    \    let startLess", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for (let\
    \ i = 2; i <= intersectionLength; i++){\n        if (interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", " \
    \   let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n   \
    \ let start = Math.min(start1, start2);\n    let end = Math.max(end1, end2);\n\
    \    let length = end - start;\n    if (length < 2) return \"NO\";\n    if (length\
    \ == 2) return \"YES\";\n    let prime = true;\n    for (let i = 2; i <= Math.sqrt(length);\
    \ i++) {\n        if (length % i == 0) {\n            prime = false;\n       \
    \     break;\n        }\n    }\n    return prime ? \"YES\" : \"NO\";\n}\n", " \
    \   let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ && i % interval2Start === 0)){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(interval1Start <= intersectionStart && intersectionStart <= interval1End\
    \ && interval2Start <= intersectionEnd && intersectionEnd <= interval2End){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    if(isPrime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(i % interval1Start === 0 || i % interval2Start === 0){\n         \
    \   isPrime = false;\n            break;\n        }\n    }\n    return isPrime;\n\
    }\n", "    let start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    let isPrime = true;\n   \
    \ for (let i = 2; i <= length; i++){\n        if (start % i === 0 && end % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  if (isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", " \
    \   let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.max(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.min(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    let isPrime = true;\n    for (let i = 2; i\
    \ <= intersectionLength; i++){\n        if (intersectionStart % i === 0){\n  \
    \          isPrime = false;\n            break;\n        }\n    }\n    if (isPrime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let [start1, end1]\
    \ = interval1;\n    let [start2, end2] = interval2;\n    let start = Math.max(start1,\
    \ start2);\n    let end = Math.min(end1, end2);\n    let length = end - start;\n\
    \    if(length == 0){\n        return \"NO\";\n    }\n    let prime = true;\n\
    \    for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i == 0){\n\
    \            prime = false;\n            break;\n        }\n    }\n    return\
    \ prime ? \"YES\" : \"NO\";\n}\n", "\tlet interval1Start = interval1[0];\n\tlet\
    \ interval1End = interval1[1];\n\tlet interval2Start = interval2[0];\n\tlet interval2End\
    \ = interval2[1];\n\t\n\tif(interval1Start > interval2Start){\n\t\tlet temp =\
    \ interval1Start;\n\t\tinterval1Start = interval2Start;\n\t\tinterval2Start =\
    \ temp;\n\t}\n\tif(interval1End < interval2End){\n\t\tlet temp = interval1End;\n\
    \t\tinterval1End = interval2End;\n\t\tinterval2End = temp;\n\t}\n\t\n\tlet intersectionStart\
    \ = Math.max(interval1Start, interval2Start);\n\tlet intersectionEnd = Math.min(interval1End,\
    \ interval2End);\n\t\n\tif(intersectionStart < intersectionEnd){\n\t\tlet intersectionLength\
    \ = intersectionEnd - intersectionStart;\n\t\tlet isPrime = true;\n\t\tfor(let\
    \ i = 2; i <= intersectionLength; i++){\n\t\t\tif(intersectionStart % i === 0\
    \ && intersectionEnd % i === 0){\n\t\t\t\tisPrime = false;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t\tif(isPrime){\n\t\t\treturn \"YES\";\n\t\t}else{\n\t\t\treturn\
    \ \"NO\";\n\t\t}\n\t}else{\n\t\treturn \"NO\";\n\t}\n}\n", "    let start = Math.min(interval1[0],\
    \ interval2[0]);\n    let end = Math.max(interval1[1], interval2[1]);\n    let\
    \ length = end - start;\n    \n    if(length == 0){\n        return \"NO\";\n\
    \    }\n    \n    let prime = true;\n    for(let i = 2; i <= Math.sqrt(length);\
    \ i++){\n        if(length % i == 0){\n            prime = false;\n          \
    \  break;\n        }\n    }\n    \n    if(prime){\n        return \"YES\";\n \
    \   }\n    \n    return \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if(intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ && i % interval2Start === 0)){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    let isPrime\
    \ = true;\n    for(let i = 2; i <= intersectionLength; i++){\n        if(interval1Start\
    \ + i === interval2Start || interval1End + i === interval2End){\n            isPrime\
    \ = false;\n            break;\n        }\n    }\n    return isPrime ? \"YES\"\
    \ : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    return isPrime;\n}\n", "\tlet start1 = interval1[0];\n\
    \tlet end1 = interval1[1];\n\tlet start2 = interval2[0];\n\tlet end2 = interval2[1];\n\
    \tlet intersection = end1 - start2;\n\tlet length1 = end1 - start1;\n\tlet length2\
    \ = end2 - start2;\n\tlet isPrime = true;\n\tfor(let i = 2; i <= intersection;\
    \ i++){\n\t\tif(i % length1 === 0 && i % length2 === 0){\n\t\t\tisPrime = false;\n\
    \t\t}\n\t}\n\treturn isPrime ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1]\
    \ = interval1;\n    let [start2, end2] = interval2;\n    if(start1 <= end2 &&\
    \ start2 <= end1){\n        if(start1 < start2){\n            return true;\n \
    \       }else{\n            return false;\n        }\n    }else{\n        return\
    \ false;\n    }\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if(intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    let isPrime = true;\n    for(let i = 2; i\
    \ <= intersectionLength; i++){\n        if(!(i % interval1Start === 0 % interval2Start\
    \ === 0)){\n            isPrime = false;\n            break;\n        }\n    }\n\
    \    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.max(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.min(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    let isPrime\
    \ = true;\n    for(let i = 2; i <= intersectionLength; i++){\n        if(interval1Start\
    \ <= intersectionStart && intersectionStart <= interval1End && interval2Start\
    \ <= intersectionEnd && intersectionEnd <= interval2End){\n            isPrime\
    \ = false;\n            break;\n        }\n    }\n    return isPrime ? \"YES\"\
    \ : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if (intersectionLength === 1){\n        return\
    \ \"YES\";\n    }\n    let prime = true;\n    for (let i = 2; i <= intersectionLength;\
    \ i++){\n        if (intersectionStart % i === 0){\n            prime = false;\n\
    \            break;\n        }\n    }\n    return prime ? \"YES\" : \"NO\";\n\
    }\n", "    let start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    if(length == 0){\n      \
    \  return \"NO\";\n    }\n    let prime = true;\n    for(let i = 2; i <= Math.sqrt(length);\
    \ i++){\n        if(length % i == 0){\n            prime = false;\n          \
    \  break;\n        }\n    }\n    return prime ? \"YES\" : \"NO\";\n}\n", "   \
    \ let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n \
    \   let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrimeNumber = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ & i % interval2Start === 0)){\n            isPrimeNumber = false;\n        \
    \    break;\n        }\n    }\n    if(isPrimeNumber){\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\n", "    let [start1, end1] = interval1;\n   \
    \ let [start2, end2] = interval2;\n    if(start1 > end2){\n        let temp =\
    \ start2;\n        start2 = end2;\n        end2 = temp;\n    }\n    if(start2\
    \ > end1){\n        let temp = start1;\n        start1 = end1;\n        end1 =\
    \ temp;\n    }\n    if(start1 < start2){\n        let temp = start1;\n       \
    \ start1 = start2;\n        start2 = temp;\n    }\n    if(end1 > end2){\n    \
    \    let temp = end1;\n        end1 = end2;\n        end2 = temp;\n    }\n   \
    \ let startIntersection = start1;\n    let endIntersection = end1;\n    while(startIntersection\
    \ < start2 && endIntersection < end2){\n        if(startIntersection < endIntersection){\n\
    \            if(endIntersection > end1){\n                endIntersection = end1;\n\
    \            }\n            else{\n                endIntersection = endIntersection\
    \ + 1;\n            }\n        }\n        else{\n            if(startIntersection\
    \ > start2){\n                startIntersection = start2;\n            }\n   \
    \         else{\n                startIntersection = startIntersection + 1;\n\
    \            }\n        }\n    }\n    if(startIntersection < start2 && endIntersection\
    \ < end2){\n        return \"NO\";\n    }\n    if(startIntersection < start2 &&\
    \ endIntersection > end1){\n        return \"NO\";\n    }\n    if(startIntersection\
    \ > start2 && endIntersection < end2){\n        return \"NO\";\n    }\n    if(startIntersection\
    \ > start2 && endIntersection > end1){\n        return \"YES\";\n    }\n}\n",
  "    let start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let count = 0;\n    for(let i = start; i <= end; i++){\n\
    \        if(interval1[0] < interval2[1] && interval2[0] < interval1[1]){\n   \
    \         count++;\n        }\n        if(interval1[0] < interval2[1] && interval2[0]\
    \ > interval1[1]){\n            count++;\n        }\n        if(interval1[0] >\
    \ interval2[1] && interval2[0] < interval1[1]){\n            count++;\n      \
    \  }\n        if(interval1[0] > interval2[1] && interval2[0] > interval1[1]){\n\
    \            count++;\n        }\n    }\n    if(count % 2 === 0){\n        return\
    \ \"NO\";\n    }\n    return \"YES\";\n}\n", "\tlet start = Math.min(interval1[0],\
    \ interval2[0]);\n\tlet end = Math.max(interval1[1], interval2[1]);\n\tlet length\
    \ = end - start;\n\tlet isPrime = true;\n\tfor(let i = 2; i <= Math.sqrt(length);\
    \ i++){\n\t\tif(length % i === 0){\n\t\t\tisPrime = false;\n\t\t}\n\t}\n\treturn\
    \ isPrime ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1] = interval1\n   \
    \ let [start2, end2] = interval2\n    let start = Math.max(start1, start2)\n \
    \   let end = Math.min(end1, end2)\n    let length = end - start\n    \n    if(length\
    \ < 2){\n        return \"NO\"\n    }\n    \n    let prime = true\n    for(let\
    \ i = 2; i <= Math.sqrt(length); i++){\n        if(length % i === 0){\n      \
    \      prime = false\n            break\n        }\n    }\n    \n    if(prime){\n\
    \        return \"YES\"\n    }\n    \n    return \"NO\"\n}\n", "    let [start1,\
    \ end1] = interval1;\n    let [start2, end2] = interval2;\n    let start = Math.min(start1,\
    \ start2);\n    let end = Math.max(end1, end2);\n    let length = end - start;\n\
    \    if (length < 2) return \"NO\";\n    if (length == 2) return \"YES\";\n  \
    \  let prime = true;\n    for (let i = 2; i <= Math.sqrt(length); i++) {\n   \
    \     if (length % i == 0) {\n            prime = false;\n            break;\n\
    \        }\n    }\n    if (prime) return \"YES\";\n    return \"NO\";\n}\n", " \
    \   let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if (intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    if (intersectionLength === 1){\n\
    \        return \"YES\";\n    }\n    \n    let isPrime = true;\n    for (let i\
    \ = 2; i <= intersectionLength; i++){\n        if (intersectionStart % i === 0){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    \n  \
    \  if (isPrime){\n        return \"YES\";\n    }\n    \n    return \"NO\";\n}\n",
  "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if(intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    let isPrime = true;\n    for(let i = 2; i\
    \ <= intersectionLength; i++){\n        if(!(i % interval1Start === 0 % interval2Start\
    \ === 0)){\n            isPrime = false;\n            break;\n        }\n    }\n\
    \    if(isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", " \
    \   let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    return isPrime;\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    \n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    \n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    \n    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    \n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(!(i % interval1Start === 0 && i % interval2Start === 0)){\n      \
    \      isPrime = false;\n            break;\n        }\n    }\n    \n    if(isPrime){\n\
    \        return \"YES\";\n    }\n    \n    return \"NO\";\n}\n", "    let start\
    \ = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    let isPrime = true;\n   \
    \ for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length % i === 0){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    return\
    \ isPrime ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1] = interval1;\n  \
    \  let [start2, end2] = interval2;\n    if(start1 <= end2 && start2 <= end1){\n\
    \        if(start1 < start2){\n            return [start1, end2];\n        }else{\n\
    \            return [start2, end1];\n        }\n    }else{\n        return \"\
    NO\";\n    }\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n\
    \    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2\
    \ <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 &&\
    \ start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <=\
    \ end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n \
    \   let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2\
    \ <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 &&\
    \ start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <=\
    \ end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n \
    \   let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2\
    \ <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 &&\
    \ start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <=\
    \ end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n \
    \   let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = start2\
    \ <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 &&\
    \ start2 <= end1;\n    let start2LessOrEqualEnd1 = start2 <= end1 && start1 <=\
    \ end2;\n    let start1LessOrEqualEnd2 = start1 <= end2 && start2 <= end1;\n \
    \   let start2LessOrEqualEnd1 = start2 <= end1 && start1 <= end2;\n    let start1LessOrEqualEnd2\
    \ = start1 <= end2 && start2 <= end1;\n    let start2LessOrEqualEnd1 = ", "\t\
    let interval1Start = interval1[0];\n\tlet interval1End = interval1[1];\n\tlet\
    \ interval2Start = interval2[0];\n\tlet interval2End = interval2[1];\n\tlet intersectionStart\
    \ = Math.max(interval1Start, interval2Start);\n\tlet intersectionEnd = Math.min(interval1End,\
    \ interval2End);\n\tlet intersectionLength = intersectionEnd - intersectionStart;\n\
    \tlet isPrime = true;\n\tfor(let i = 2; i <= intersectionLength; i++){\n\t\tif(interval1Start\
    \ <= intersectionStart && interval1End >= intersectionStart && interval2Start\
    \ <= intersectionEnd && interval2End >= intersectionEnd){\n\t\t\tisPrime = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn isPrime ? \"YES\" : \"NO\";\n}\n", "    let\
    \ interval1Start = interval1[0];\n    let interval1End = interval1[1];\n    let\
    \ interval2Start = interval2[0];\n    let interval2End = interval2[1];\n    \n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    \n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if (intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for (let\
    \ i = 2; i <= intersectionLength; i++){\n        if (intersectionStart % i ===\
    \ 0 && intersectionEnd % i === 0){\n            isPrime = false;\n           \
    \ break;\n        }\n    }\n    \n    if (isPrime){\n        return \"YES\";\n\
    \    }\n    \n    return \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if(intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ && i % interval2Start === 0)){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(intersectionStart % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  if(isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", " \
    \   let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "\t\
    let interval1Start = interval1[0];\n\tlet interval1End = interval1[1];\n\tlet\
    \ interval2Start = interval2[0];\n\tlet interval2End = interval2[1];\n\tlet intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n\tlet intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n\tlet intersectionLength = intersectionEnd - intersectionStart;\n\
    \tlet isPrimeNumber = true;\n\tfor(let i = 2; i <= intersectionLength; i++){\n\
    \t\tif(interval1Start <= intersectionStart && intersectionStart <= interval1End\
    \ && interval2Start <= intersectionEnd && intersectionEnd <= interval2End){\n\t\
    \t\tisPrimeNumber = false;\n\t\t}\n\t}\n\treturn isPrimeNumber;\n}\n", "    let\
    \ start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    if(length == 0){\n      \
    \  return \"NO\";\n    }\n    let prime = true;\n    for(let i = 2; i <= Math.sqrt(length);\
    \ i++){\n        if(length % i == 0){\n            prime = false;\n          \
    \  break;\n        }\n    }\n    if(prime){\n        return \"YES\";\n    }\n\
    \    return \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    for (let i = intersectionStart; i < intersectionEnd;\
    \ i++){\n        if (interval1Start <= i && i <= interval1End){\n            if\
    \ (interval2Start <= i && i <= interval2End){\n                return \"YES\"\
    ;\n            }\n        }\n    }\n    return \"NO\";\n}\n", "\tlet [start1,\
    \ end1] = interval1;\n\tlet [start2, end2] = interval2;\n\tlet startIntersection\
    \ = start1 <= end2 && start2 <= end1;\n\tlet endIntersection = start1 <= end2\
    \ && start2 >= end1;\n\tlet lengthIntersection = startIntersection && endIntersection;\n\
    \tlet isPrime = lengthIntersection && isPrime(lengthIntersection);\n\treturn isPrime\
    \ ? \"YES\" : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let\
    \ interval1End = interval1[1];\n    let interval2Start = interval2[0];\n    let\
    \ interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    let isPrime\
    \ = true;\n    for(let i = 2; i <= intersectionLength; i++){\n        if(!(i %\
    \ interval1Start === 0 && i % interval2Start === 0)){\n            isPrime = false;\n\
    \            break;\n        }\n    }\n    return isPrime;\n}\n", "\tlet [start1,\
    \ end1] = interval1;\n\tlet [start2, end2] = interval2;\n\tlet startIntersection\
    \ = start1 < start2 ? start1 : start2;\n\tlet endIntersection = end1 < end2 ?\
    \ end1 : end2;\n\tlet intersectionLength = endIntersection - startIntersection;\n\
    \tlet isPrime = true;\n\tfor(let i = 2; i <= intersectionLength; i++){\n\t\tif(intersectionLength\
    \ % i === 0){\n\t\t\tisPrime = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn isPrime\
    \ ? \"YES\" : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let\
    \ interval1End = interval1[1];\n    let interval2Start = interval2[0];\n    let\
    \ interval2End = interval2[1];\n    \n    if(interval1Start > interval2Start){\n\
    \        let temp = interval1Start;\n        interval1Start = interval2Start;\n\
    \        interval2Start = temp;\n    }\n    if(interval1End < interval2End){\n\
    \        let temp = interval1End;\n        interval1End = interval2End;\n    \
    \    interval2End = temp;\n    }\n    \n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    \n    if(intersectionStart > intersectionEnd){\n        return \"NO\";\n\
    \    }\n    \n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    \n    if(intersectionLength === 1){\n        return \"NO\";\n    }\n    \n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(!isPrime){\n            return \"NO\";\n        }\n        if(intersectionStart\
    \ % i === 0){\n            isPrime = false;\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if (intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for (let\
    \ i = 2; i <= intersectionLength; i++){\n        if (intersectionStart % i ===\
    \ 0){\n            isPrime = false;\n            break;\n        }\n    }\n  \
    \  \n    if (isPrime){\n        return \"YES\";\n    }\n    \n    return \"NO\"\
    ;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if (interval1Start === interval1End){\n  \
    \      return \"NO\";\n    }\n    if (interval2Start === interval2End){\n    \
    \    return \"NO\";\n    }\n    if (intersectionStart === intersectionEnd){\n\
    \        return \"NO\";\n    }\n    if (intersectionStart < interval1Start &&\
    \ intersectionStart < interval2Start){\n        return \"NO\";\n    }\n    if\
    \ (intersectionStart > interval1End && intersectionStart > interval2End){\n  \
    \      return \"NO\";\n    }\n    if (intersectionEnd > interval1Start && intersectionEnd\
    \ > interval2Start){\n        return \"NO\";\n    }\n    if (intersectionEnd <\
    \ interval1End && intersectionEnd < interval2End){\n        return \"NO\";\n \
    \   }\n    if (intersectionStart === intersectionEnd && interval1Start === interval1End){\n\
    \        return \"NO\";\n    }\n    if (intersectionStart === intersectionEnd\
    \ && interval2Start === interval2End){\n        return \"NO\";\n    }\n    if\
    \ (intersectionStart < interval1Start && intersectionEnd > interval2Start){\n\
    \        return \"NO\";\n    }\n    if (intersectionStart > interval1End && intersectionEnd\
    \ < interval2Start){\n        return \"NO\";\n    }\n    if (intersectionStart\
    \ < interval1Start && intersectionStart < interval2End && intersectionEnd > interval2End){\n\
    \        return \"NO\";\n    }\n    if (intersectionStart > interval1End && intersectionEnd\
    \ < interval2Start && intersectionEnd > interval2End){\n        return \"NO\"\
    ;\n    }\n    if (intersectionStart === intersectionEnd && interval1Start ===\
    \ interval1End && interval2Start === interval2End){\n        return \"NO\";\n\
    \    }\n    if (intersectionStart === intersectionEnd && interval1Start === interval1End\
    \ && interval2Start > interval2End){\n        return \"NO\";\n    }\n    if (intersectionStart\
    \ === intersectionEnd && interval1Start === interval1End && interval2Start < interval2End){\n\
    \        return \"NO\";\n    }\n    if (intersectionStart === intersectionEnd\
    \ && interval1Start > interval1End && interval2Start > interval2End){\n      \
    \  return \"NO\";\n    }\n    if (intersectionStart === intersectionEnd && interval1Start\
    \ < interval1End && interval2Start ", "    let start = Math.min(interval1[0],\
    \ interval2[0]);\n    let end = Math.max(interval1[1], interval2[1]);\n    let\
    \ intersection = [];\n    for(let i = start; i <= end; i++){\n        if(interval1[0]\
    \ < interval2[1] && interval2[0] < interval1[1]){\n            intersection.push(i);\n\
    \        }\n    }\n    if(intersection.length == 0){\n        return \"NO\";\n\
    \    }\n    let prime = true;\n    for(let i = 0; i < intersection.length; i++){\n\
    \        if(intersection[i] % interval1[0] === 0 && intersection[i] % interval2[0]\
    \ === 0){\n            prime = false;\n        }\n    }\n    if(prime){\n    \
    \    return \"YES\";\n    }\n    return \"NO\";\n}\n", "  let interval1Start =\
    \ interval1[0];\n  let interval1End = interval1[1];\n  let interval2Start = interval2[0];\n\
    \  let interval2End = interval2[1];\n  \n  if(interval1Start > interval1End){\n\
    \    return interval1Start > interval2Start ? \"NO\" : \"YES\";\n  }\n  if(interval2Start\
    \ > interval2End){\n    return interval2Start > interval1Start ? \"NO\" : \"YES\"\
    ;\n  }\n  \n  if(interval1Start === interval1End){\n    return interval2Start\
    \ === interval2End ? \"YES\" : \"NO\";\n  }\n  if(interval2Start === interval2End){\n\
    \    return interval1Start === interval1End ? \"YES\" : \"NO\";\n  }\n  \n  let\
    \ intersectionStart = Math.min(interval1Start, interval2Start);\n  let intersectionEnd\
    \ = Math.max(interval1End, interval2End);\n  \n  if(intersectionStart === intersectionEnd){\n\
    \    return \"YES\";\n  }\n  \n  let isPrime = true;\n  for(let i = 2; i <= Math.ceil(Math.sqrt(intersectionEnd-intersectionStart));\
    \ i++){\n    if(intersectionStart + i === intersectionEnd){\n      isPrime = false;\n\
    \      break;\n    }\n    if(intersectionStart + i === intersectionStart + i +\
    \ 1){\n      isPrime = false;\n      break;\n    }\n  }\n  \n  return isPrime\
    \ ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2,\
    \ end2] = interval2;\n    let start = Math.min(start1, start2);\n    let end =\
    \ Math.max(end1, end2);\n    let length = end - start;\n    if (length < 2) return\
    \ \"NO\";\n    if (length == 2) return \"YES\";\n    let prime = true;\n    for\
    \ (let i = 2; i <= length; i++){\n        if (length % i == 0){\n            prime\
    \ = false;\n            break;\n        }\n    }\n    if (prime) return \"YES\"\
    ;\n    return \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2,\
    \ end2] = interval2;\n    if(start1 > end2){\n        let temp = start2;\n   \
    \     start2 = end2;\n        end2 = temp;\n    }\n    if(start2 > end1){\n  \
    \      let temp = start1;\n        start1 = end1;\n        end1 = temp;\n    }\n\
    \    let startIntersection = start1;\n    let endIntersection = end2;\n    let\
    \ lengthIntersection = endIntersection - startIntersection;\n    if(lengthIntersection\
    \ === 0){\n        return \"NO\";\n    }\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= lengthIntersection; i++){\n        if(startIntersection + i !==\
    \ endIntersection){\n            if(endIntersection % i === 0){\n            \
    \    isPrime = false;\n                break;\n            }\n        }\n    }\n\
    \    if(isPrime){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", " \
    \   let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if (intersectionLength === 1){\n        return\
    \ \"YES\";\n    }\n    let isPrime = true;\n    for (let i = 2; i <= intersectionLength;\
    \ i++){\n        if (intersectionStart % i === 0 && intersectionEnd % i === 0){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    \n    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    \n\
    \    if(intersectionLength === 1){\n        return \"YES\";\n    }\n    \n   \
    \ let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n   \
    \     if(!(i % interval1Start === 0 && i % interval2Start === 0)){\n         \
    \   isPrime = false;\n            break;\n        }\n    }\n    \n    if(isPrime){\n\
    \        return \"YES\";\n    }\n    \n    return \"NO\";\n}\n", "    let [start1,\
    \ end1] = interval1\n    let [start2, end2] = interval2\n    let start1LessOrEqualEnd2\
    \ = start1 < end2 && start2 < end1\n    let start2LessOrEqualEnd1 = start2 < end1\
    \ && start1 < end2\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 <\
    \ end1\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2\n    let\
    \ start1LessOrEqualEnd2 = start1 < end2 && start2 < end1\n    let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2\n    let start1LessOrEqualEnd2 = start1 < end2\
    \ && start2 < end1\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 <\
    \ end2\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1\n    let\
    \ start2LessOrEqualEnd1 = start2 < end1 && start1 < end2\n    let start1LessOrEqualEnd2\
    \ = start1 < end2 && start2 < end1\n    let start2LessOrEqualEnd1 = start2 < end1\
    \ && start1 < end2\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 <\
    \ end1\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2\n    let\
    \ start1LessOrEqualEnd2 = start1 < end2 && start2 < end1\n    let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2\n    let start1LessOrEqualEnd2 = start1 < end2\
    \ && start2 < end1\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 <\
    \ end2\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1\n    let\
    \ start2LessOrEqualEnd1 = start2 < end1 && start1 < end2\n    let start1LessOrEqualEnd2\
    \ = start1 < end2 && start2 < end1\n    let start2LessOrEqualEnd1 = start2 < end1\
    \ && start1 < end2\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 <\
    \ end1\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 < end2\n    let\
    \ start1LessOrEqualEnd2 = start1 < end2 && start2 < end1\n    let start2LessOrEqualEnd1\
    \ = start2 < end1 && start1 < end2\n    let start1LessOrEqualEnd2 = start1 < end2\
    \ && start2 < end1\n    let start2LessOrEqualEnd1 = start2 < end1 && start1 <\
    \ end2\n    let start1LessOrEqualEnd2 = start1 < end2 && start2 < end1\n    let ",
  "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if (intersectionLength === 1){\n        return\
    \ \"YES\";\n    }\n    let isPrime = true;\n    for (let i = 2; i <= intersectionLength;\
    \ i++){\n        if (interval1Start <= intersectionStart && intersectionStart\
    \ <= interval1End && interval2Start <= intersectionEnd && intersectionEnd <= interval2End){\n\
    \            if (interval1Start <= intersectionStart && intersectionStart <= interval1End\
    \ && interval2Start <= intersectionEnd && intersectionEnd <= interval2End){\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \     }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "\tlet start1 =\
    \ interval1[0];\n\tlet end1 = interval1[1];\n\tlet start2 = interval2[0];\n\t\
    let end2 = interval2[1];\n\tlet intersection = [];\n\tlet intersectionLength =\
    \ 0;\n\tlet isPrime = true;\n\tfor(let i = start1; i <= end1; i++){\n\t\tfor(let\
    \ j = start2; j <= end2; j++){\n\t\t\tif(i == j){\n\t\t\t\tcontinue;\n\t\t\t}\n\
    \t\t\tlet intersectionPoint = [i, j];\n\t\t\tlet isIntersect = true;\n\t\t\tfor(let\
    \ k = 0; k < intersection.length; k++){\n\t\t\t\tif(intersection[k] == intersectionPoint){\n\
    \t\t\t\t\tisIntersect = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(isIntersect){\n\
    \t\t\t\tintersection.push(intersectionPoint);\n\t\t\t\tintersectionLength++;\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(intersectionLength == 0){\n\t\treturn \"NO\";\n\t}\n\
    \tfor(let i = 0; i < intersection.length; i++){\n\t\tlet intersectionPoint = intersection[i];\n\
    \t\tlet isPrime = true;\n\t\tfor(let j = 0; j < intersection.length; j++){\n\t\
    \t\tif(i != j){\n\t\t\t\tlet intersectionPoint2 = intersection[j];\n\t\t\t\tlet\
    \ isIntersect = true;\n\t\t\t\tfor(let k = 0; k < intersection.length; k++){\n\
    \t\t\t\t\tif(i != k && j != k){\n\t\t\t\t\t\tlet intersectionPoint3 = intersection[k];\n\
    \t\t\t\t\t\tlet isIntersect2 = true;\n\t\t\t\t\t\tfor(let l = 0; l < intersection.length;\
    \ l++){\n\t\t\t\t\t\t\tif(i != l && j != l && k != l){\n\t\t\t\t\t\t\t\tlet intersectionPoint4\
    \ = intersection[l];\n\t\t\t\t\t\t\t\tlet isIntersect3 = true;\n\t\t\t\t\t\t\t\
    \tfor(let m = 0; m < intersection.length; m++){\n\t\t\t\t\t\t\t\t\tif(i != m &&\
    \ j != m && k != m && l != m){\n\t\t\t\t\t\t\t\t\t\tlet intersectionPoint5 = intersection[m];\n\
    \t\t\t\t\t\t\t\t\t\tlet isIntersect4 = true;\n\t\t\t\t\t\t\t\t\t\tfor(let n =\
    \ 0; n < intersection.length; n++){\n\t\t\t\t\t\t\t\t\t\t\tif(i != n && j != n\
    \ && k != n && l != n && m != n){\n\t\t\t\t\t\t\t\t\t\t\t\tlet intersectionPoint6\
    \ = intersection[n];\n\t\t\t\t\t\t\t\t\t\t\t\tlet isIntersect5 = true;\n\t\t\t\
    \t\t\t\t\t\t\t\t\tfor(let o = 0; o < intersection.length; o++){\n\t\t\t\t\t\t\t\
    \t\t\t\t\t\tif(i != o && j != o && k != o && l != o && m != o && n != o){\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\tlet intersectionPoint7 = intersection[o];\n\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\tlet isIntersect6 = true;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tfor(let\
    \ p = 0; p < intersection.length; p++){\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(i !=\
    \ p && j != p && k != p && l != p && m != p && n != ", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = interval1Length === interval2Length && interval1Length > 1\
    \ && interval2Length > 1;\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "   \
    \ let start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let length = end - start;\n    \n    if(length == 0){\n\
    \        return \"NO\";\n    }\n    \n    let prime = true;\n    for(let i = 2;\
    \ i <= Math.sqrt(length); i++){\n        if(length % i == 0){\n            prime\
    \ = false;\n            break;\n        }\n    }\n    \n    return prime ? \"\
    YES\" : \"NO\";\n}\n", "    let start = Math.min(interval1[0], interval2[0]);\n\
    \    let end = Math.max(interval1[1], interval2[1]);\n    let intersection = end\
    \ - start;\n    let isPrime = true;\n    for(let i = 2; i <= intersection; i++){\n\
    \        if(!isPrime || intersection % i === 0){\n            isPrime = false;\n\
    \            break;\n        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n\
    }\n", "    let start = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let count = 0;\n    for(let i = start; i <= end; i++){\n\
    \        if(interval1[0] >= interval2[0] && interval1[1] <= interval2[1]){\n \
    \           count++;\n        }\n    }\n    if(count % 2 === 0){\n        return\
    \ \"NO\";\n    }\n    return \"YES\";\n}\n", "    let [start1, end1] = interval1;\n\
    \    let [start2, end2] = interval2;\n    let startIntersection = start1 <= start2\
    \ && start2 <= end2 ? start1 : start2;\n    let endIntersection = start1 <= start2\
    \ && start2 <= end2 ? end1 : end2;\n    let lengthIntersection = start1 <= start2\
    \ && start2 <= end2 ? end1 - start1 : end2 - start2;\n    let isPrime = lengthIntersection\
    \ === 2 && startIntersection < endIntersection;\n    return isPrime ? \"YES\"\
    \ : \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && interval1End >= intersectionStart && interval2Start <= intersectionEnd &&\
    \ interval2End >= intersectionEnd){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n\
    \    return \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for (let\
    \ i = 2; i <= intersectionLength; i++){\n        if (interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", " \
    \   let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n   \
    \ let start = Math.min(start1, start2);\n    let end = Math.max(end1, end2);\n\
    \    let length = end - start + 1;\n    if(length < 2){\n        return \"NO\"\
    ;\n    }\n    let prime = true;\n    for(let i = 2; i <= length; i++){\n     \
    \   if(!(i % start)){\n            prime = false;\n            break;\n      \
    \  }\n    }\n    return prime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    if (intersectionLength === 0){\n        return \"NO\";\n    }\n    if (interval1Start\
    \ <= interval2Start && interval1End >= interval2End){\n        return \"YES\"\
    ;\n    }\n    if (interval1Start <= interval2End && interval1End >= interval2Start){\n\
    \        return \"NO\";\n    }\n    if (intersectionStart <= intersectionEnd &&\
    \ intersectionLength === 1){\n        return \"YES\";\n    }\n    return \"NO\"\
    ;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    return isPrime;\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    \n    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    \n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(intersectionStart % i === 0 && intersectionEnd % i === 0){\n     \
    \       isPrime = false;\n            break;\n        }\n    }\n    \n    if(isPrime){\n\
    \        return \"YES\";\n    }\n    \n    return \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    \n    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    \n\
    \    let isPrime = true;\n    for(let i = 2; i <= Math.sqrt(intersectionLength);\
    \ i++){\n        if(intersectionLength % i === 0){\n            isPrime = false;\n\
    \            break;\n        }\n    }\n    \n    if(isPrime){\n        return\
    \ \"YES\";\n    }\n    \n    return \"NO\";\n}\n", "    let [start1, end1] = interval1;\n\
    \    let [start2, end2] = interval2;\n    let start1LessOrEqualEnd2 = start1 <=\
    \ end2;\n    let start2LessOrEqualEnd1 = start2 <= end1;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2 && start2LessOrEqualEnd1;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2 && start2LessOrEqualEnd2;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqual", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrimeNumber = true;\n    for\
    \ (let i = 2; i <= intersectionLength; i++){\n        if (intersectionStart %\
    \ i === 0 && intersectionEnd % i === 0){\n            isPrimeNumber = false;\n\
    \            break;\n        }\n    }\n    if (isPrimeNumber){\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\n", "\tlet [start1, end1] = interval1\n\
    \tlet [start2, end2] = interval2\n\tlet startIntersection = start1 < start2 ?\
    \ start1 : start2\n\tlet endIntersection = end1 < end2 ? end1 : end2\n\tlet intersectionLength\
    \ = endIntersection - startIntersection\n\tlet isPrime = intersectionLength ==\
    \ 2 && isPrime(intersectionLength)\n\treturn isPrime ? \"YES\" : \"NO\"\n}\n",
  "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let\
    \ startIntersection = start1 <= start2 && start2 <= end1 ? start1 : start2;\n\
    \    let endIntersection = start1 <= start2 && start2 <= end1 ? end1 : end2;\n\
    \    let intersectionLength = endIntersection - startIntersection;\n    let isPrime\
    \ = intersectionLength === 2;\n    return isPrime ? \"YES\" : \"NO\";\n}\n", " \
    \   let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ % interval2Start === 0)){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if(intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start + i !== interval2Start\
    \ || interval1End + i !== interval2End){\n            isPrime = false;\n     \
    \       break;\n        }\n    }\n    \n    return isPrime ? \"YES\" : \"NO\"\
    ;\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let startIntersection = start1 <= start2 && start2 <= end2 ? start1 : start2;\n\
    \    let endIntersection = start1 <= start2 && start2 <= end2 ? end1 : end2;\n\
    \    let intersectionLength = endIntersection - startIntersection;\n    let isPrime\
    \ = intersectionLength === 2 && isPrime(intersectionLength);\n    return isPrime\
    \ ? \"YES\" : \"NO\";\n}\n", "    let start = Math.min(interval1[0], interval2[0]);\n\
    \    let end = Math.max(interval1[1], interval2[1]);\n    let length = end - start;\n\
    \    \n    if(length == 0){\n        return \"NO\";\n    }\n    \n    let prime\
    \ = true;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n        if(length\
    \ % i == 0){\n            prime = false;\n            break;\n        }\n    }\n\
    \    \n    if(prime){\n        return \"YES\";\n    }\n    \n    return \"NO\"\
    ;\n}\n", "    let start = Math.min(interval1[0], interval2[0]);\n    let end =\
    \ Math.max(interval1[1], interval2[1]);\n    let intersection = end - start;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersection; i++){\n      \
    \  if(!isPrime){\n            break;\n        }\n        if(!(i%interval1[0] ||\
    \ i%interval2[0] || i%interval1[1] || i%interval2[1])){\n            isPrime =\
    \ false;\n            break;\n        }\n    }\n    return isPrime ? \"YES\" :\
    \ \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.max(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.min(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrimeNumber = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(intersectionStart % i ===\
    \ 0 && intersectionEnd % i === 0){\n            isPrimeNumber = false;\n     \
    \       break;\n        }\n    }\n    return isPrimeNumber;\n}\n", "    let start\
    \ = Math.min(interval1[0], interval2[0]);\n    let end = Math.max(interval1[1],\
    \ interval2[1]);\n    let count = 0;\n    for(let i = start; i <= end; i++){\n\
    \        if(interval1[0] < interval2[0] && interval1[1] > interval2[1]){\n   \
    \         count++;\n        }\n        if(interval1[0] > interval2[0] && interval1[1]\
    \ < interval2[1]){\n            count++;\n        }\n        if(interval1[0] <\
    \ interval2[0] && interval1[1] > interval2[1]){\n            count++;\n      \
    \  }\n    }\n    if(count % 2 === 0){\n        return \"NO\";\n    }\n    return\
    \ \"YES\";\n}\n", "\tlet start1 = interval1[0];\n\tlet end1 = interval1[1];\n\t\
    let start2 = interval2[0];\n\tlet end2 = interval2[1];\n\tlet intersection = [];\n\
    \tlet intersectionLength = 0;\n\tlet isPrime = true;\n\tlet isPrimeLength = 0;\n\
    \tlet isPrimeLength2 = 0;\n\tlet isPrimeLength3 = 0;\n\tlet isPrimeLength4 = 0;\n\
    \tlet isPrimeLength5 = 0;\n\tlet isPrimeLength6 = 0;\n\tlet isPrimeLength7 = 0;\n\
    \tlet isPrimeLength8 = 0;\n\tlet isPrimeLength9 = 0;\n\tlet isPrimeLength10 =\
    \ 0;\n\tlet isPrimeLength11 = 0;\n\tlet isPrimeLength12 = 0;\n\tlet isPrimeLength13\
    \ = 0;\n\tlet isPrimeLength14 = 0;\n\tlet isPrimeLength15 = 0;\n\tlet isPrimeLength16\
    \ = 0;\n\tlet isPrimeLength17 = 0;\n\tlet isPrimeLength18 = 0;\n\tlet isPrimeLength19\
    \ = 0;\n\tlet isPrimeLength20 = 0;\n\tlet isPrimeLength21 = 0;\n\tlet isPrimeLength22\
    \ = 0;\n\tlet isPrimeLength23 = 0;\n\tlet isPrimeLength24 = 0;\n\tlet isPrimeLength25\
    \ = 0;\n\tlet isPrimeLength26 = 0;\n\tlet isPrimeLength27 = 0;\n\tlet isPrimeLength28\
    \ = 0;\n\tlet isPrimeLength29 = 0;\n\tlet isPrimeLength30 = 0;\n\tlet isPrimeLength31\
    \ = 0;\n\tlet isPrimeLength32 = 0;\n\tlet isPrimeLength33 = 0;\n\tlet isPrimeLength34\
    \ = 0;\n\tlet isPrimeLength35 = 0;\n\tlet isPrimeLength36 = 0;\n\tlet isPrimeLength37\
    \ = 0;\n\tlet isPrimeLength38 = 0;\n\tlet isPrimeLength39 = 0;\n\tlet isPrimeLength40\
    \ = 0;\n\tlet isPrimeLength41 = 0;\n\tlet isPrimeLength42 = 0;\n\tlet isPrimeLength43\
    \ = 0;\n\tlet isPrimeLength44 = 0;\n\tlet isPrimeLength45 = 0;\n\tlet isPrimeLength46\
    \ = 0;\n\tlet isPrimeLength47 = 0;\n\tlet isPrimeLength48 = 0;\n\tlet isPrimeLength49\
    \ = 0;\n\tlet isPrimeLength50 = 0;\n\tlet isPrimeLength51 = 0;\n\tlet isPrimeLength52\
    \ = 0;", "\tlet [start1, end1] = interval1;\n\tlet [start2, end2] = interval2;\n\
    \tlet startIntersection = start1 < start2 ? start1 : start2;\n\tlet endIntersection\
    \ = end1 < end2 ? end1 : end2;\n\tlet intersectionLength = endIntersection - startIntersection;\n\
    \tlet isPrime = intersectionLength === 2 && startIntersection < endIntersection;\n\
    \treturn isPrime ? \"YES\" : \"NO\";\n}\n", "  let interval1Start = interval1[0];\n\
    \  let interval1End = interval1[1];\n  let interval2Start = interval2[0];\n  let\
    \ interval2End = interval2[1];\n  \n  if (interval1Start <= interval2Start &&\
    \ interval1End >= interval2End) {\n    return \"YES\";\n  }\n  else if (interval1Start\
    \ <= interval2End && interval1End >= interval2Start) {\n    return \"NO\";\n \
    \ }\n  else {\n    return \"NO\";\n  }\n}\n", "    let [start1, end1] = interval1;\n\
    \    let [start2, end2] = interval2;\n    let startIntersection = start1 <= start2\
    \ && start2 <= end2 ? start1 : start2;\n    let endIntersection = start1 <= start2\
    \ && start2 <= end2 ? end1 : end2;\n    let intersectionLength = endIntersection\
    \ - startIntersection;\n    let isPrime = intersectionLength === 2 && startIntersection\
    \ % 2 === 0 && endIntersection % 2 === 0;\n    return isPrime ? \"YES\" : \"NO\"\
    ;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for (let\
    \ i = 2; i <= intersectionLength; i++){\n        if (intersectionStart % i ===\
    \ 0 && intersectionEnd % i === 0){\n            isPrime = false;\n        }\n\
    \    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let [start1, end1]\
    \ = interval1;\n    let [start2, end2] = interval2;\n    let start = Math.min(start1,\
    \ start2);\n    let end = Math.max(end1, end2);\n    let length = end - start\
    \ + 1;\n    let isPrime = true;\n    for (let i = 2; i <= length; i++){\n    \
    \    if (start % i === 0 && end % i === 0){\n            isPrime = false;\n  \
    \          break;\n        }\n    }\n    if (isPrime){\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if (intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    if (interval1Start === interval1End){\n\
    \        if (interval2Start === interval2End){\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if (interval2Start === interval2End){\n\
    \        return \"NO\";\n    }\n    let isPrime = true;\n    for (let i = 2; i\
    \ <= intersectionLength; i++){\n        if (interval1Start + i === interval2Start\
    \ || interval1Start + i === interval2End){\n            isPrime = false;\n   \
    \         break;\n        }\n    }\n    if (isPrime){\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    if (intersectionLength\
    \ === 0){\n        return \"NO\";\n    }\n    for (let i = intersectionStart;\
    \ i < intersectionEnd; i++){\n        if (interval1Start <= i && i <= interval1End){\n\
    \            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n", "  \
    \  let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let\
    \ start1LessOrEqualEnd2 = start1 <= end2;\n    let start2LessOrEqualEnd1 = start2\
    \ <= end1;\n    if(start1LessOrEqualEnd2 && start2LessOrEqualEnd1){\n        if(start1\
    \ <= end2 && start2 <= end1){\n            return true;\n        }\n    }\n  \
    \  return false;\n}\n", "\tlet start1 = interval1[0];\n\tlet end1 = interval1[1];\n\
    \tlet start2 = interval2[0];\n\tlet end2 = interval2[1];\n\tlet intersection =\
    \ start1 < end2 ? [start1, end2] : [end1, start2];\n\tlet length = intersection[1]\
    \ - intersection[0];\n\tlet isPrime = true;\n\tfor(let i = 2; i <= length; i++){\n\
    \t\tif(intersection[0] <= i && i <= intersection[1]){\n\t\t\tisPrime = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn isPrime ? \"YES\" : \"NO\";\n}\n", "    let\
    \ [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n    let startIntersection\
    \ = start1 < start2 ? start1 : start2;\n    let endIntersection = end1 < end2\
    \ ? end1 : end2;\n    let length = endIntersection - startIntersection;\n    if\
    \ (length < 2) return \"NO\";\n    if (length == 2) return \"YES\";\n    let prime\
    \ = true;\n    for (let i = 2; i <= length; i++){\n        if (startIntersection\
    \ + i == endIntersection){\n            prime = false;\n            break;\n \
    \       }\n    }\n    return prime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(i % 2 === 0){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    return isPrime;\n}\n", "    let [start1, end1] = interval1;\n\
    \    let [start2, end2] = interval2;\n    let start1LessOrEqualEnd2 = start1 <=\
    \ end2;\n    let start2LessOrEqualEnd1 = start2 <= end1;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2 && start2LessOrEqualEnd1;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2 && start2LessOrEqualEnd2;\n    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd1;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd1;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd1;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd2;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd1\
    \ = start1LessOrEqualEnd2AndStart2LessOrEqualEnd1 && start2LessOrEqualEnd1;\n\
    \    let start1LessOrEqualEnd2AndStart2LessOrEqualEnd1AndStart2LessOrEqualEnd2\
    \ = start1LessOrEqual", "    let [start1, end1] = interval1;\n    let [start2,\
    \ end2] = interval2;\n    let startIntersection = start1 <= start2 && start2 <=\
    \ end1 ? start1 : start2;\n    let endIntersection = start1 <= start2 && start2\
    \ <= end1 ? end1 : end2;\n    let lengthIntersection = endIntersection - startIntersection;\n\
    \    if(lengthIntersection === 0){\n        return \"NO\";\n    }\n    let isPrime\
    \ = true;\n    for(let i = 2; i <= lengthIntersection; i++){\n        if(lengthIntersection\
    \ % i === 0){\n            isPrime = false;\n            break;\n        }\n \
    \   }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start =\
    \ interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.max(interval1Start, interval2Start);\n    let intersectionEnd = Math.min(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = true;\n    for (let i = 2; i <= intersectionLength; i++){\n\
    \        if (intersectionStart + i !== intersectionEnd){\n            if (interval1Start\
    \ <= intersectionStart + i && intersectionStart + i <= interval2End){\n      \
    \          isPrime = false;\n            }\n        }\n    }\n    return isPrime;\n\
    }\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    if (intersectionLength === 0){\n\
    \        return \"NO\";\n    }\n    if (intersectionLength === 1){\n        return\
    \ \"YES\";\n    }\n    let isPrime = true;\n    for (let i = 2; i <= intersectionLength;\
    \ i++){\n        if (intersectionStart % i === 0 && intersectionEnd % i === 0){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    if (isPrime){\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    \n    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    \n\
    \    if(intersectionLength === 1){\n        return \"YES\";\n    }\n    \n   \
    \ let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n   \
    \     if(!(i % interval1Start === 0 && i % interval2Start === 0)){\n         \
    \   isPrime = false;\n            break;\n        }\n    }\n    \n    if(isPrime){\n\
    \        return \"YES\";\n    }\n    \n    return \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.max(interval1Start, interval2Start);\n    let intersectionEnd = Math.min(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    if(intersectionLength === 0){\n        return \"NO\";\n    }\n    let isPrime\
    \ = true;\n    for(let i = 2; i <= intersectionLength; i++){\n        if(!(i %\
    \ interval1Start === 0 && i % interval2Start === 0)){\n            isPrime = false;\n\
    \            break;\n        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n\
    }\n", "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.max(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.min(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ && i % interval2Start === 0)){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    if(isPrime){\n        return \"YES\";\n    }\n    return\
    \ \"NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2]\
    \ = interval2;\n    let startIntersection = start1 <= start2 && start2 <= end1\
    \ ? start1 : start2;\n    let endIntersection = start1 <= start2 && start2 <=\
    \ end1 ? end1 : end2;\n    let lengthIntersection = startIntersection < endIntersection\
    \ ? endIntersection - startIntersection : startIntersection - endIntersection;\n\
    \    return lengthIntersection === 2 ? true : false;\n}\n", "    let start = Math.min(interval1[0],\
    \ interval2[0]);\n    let end = Math.max(interval1[1], interval2[1]);\n    let\
    \ length = end - start;\n    if(length < 0){\n        return \"NO\";\n    }\n\
    \    let prime = true;\n    for(let i = 2; i <= Math.sqrt(length); i++){\n   \
    \     if(length % i === 0){\n            prime = false;\n            break;\n\
    \        }\n    }\n    return prime ? \"YES\" : \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    \n    if (intersectionLength === 0){\n        return \"NO\";\n    }\n   \
    \ \n    let isPrime = true;\n    for (let i = 2; i <= intersectionLength; i++){\n\
    \        if (intersectionStart % i === 0){\n            isPrime = false;\n   \
    \         break;\n        }\n    }\n    \n    return isPrime ? \"YES\" : \"NO\"\
    ;\n}\n", "\tlet [start1, end1] = interval1;\n\tlet [start2, end2] = interval2;\n\
    \tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1 = start2\
    \ <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;\n\tlet start1LessOrEqualEnd2 = start1 <= end2;\n\tlet start2LessOrEqualEnd1\
    \ = start2 <= end1;", "\tlet interval1Start = interval1[0];\n\tlet interval1End\
    \ = interval1[1];\n\tlet interval2Start = interval2[0];\n\tlet interval2End =\
    \ interval2[1];\n\t\n\tif(interval1Start > interval2Start){\n\t\tlet temp = interval1Start;\n\
    \t\tinterval1Start = interval2Start;\n\t\tinterval2Start = temp;\n\t}\n\tif(interval1End\
    \ < interval2End){\n\t\tlet temp = interval1End;\n\t\tinterval1End = interval2End;\n\
    \t\tinterval2End = temp;\n\t}\n\t\n\tlet intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n\tlet intersectionEnd = Math.max(interval1End, interval2End);\n\
    \t\n\tlet intersectionLength = intersectionEnd - intersectionStart;\n\t\n\tif(intersectionLength\
    \ === 0){\n\t\treturn \"NO\";\n\t}\n\t\n\tlet isPrime = true;\n\t\n\tfor(let i\
    \ = 2; i <= intersectionLength; i++){\n\t\tif(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n\t\t\tisPrime = false;\n\t\t\tbreak;\n\t\t\
    }\n\t}\n\t\n\treturn isPrime ? \"YES\" : \"NO\";\n}\n", "  let interval1Start\
    \ = interval1[0];\n  let interval1End = interval1[1];\n  let interval2Start =\
    \ interval2[0];\n  let interval2End = interval2[1];\n  \n  if (interval1Start\
    \ > interval2Start){\n    let temp = interval1Start;\n    interval1Start = interval2Start;\n\
    \    interval2Start = temp;\n  }\n  if (interval1End < interval2End){\n    let\
    \ temp = interval1End;\n    interval1End = interval2End;\n    interval2End = temp;\n\
    \  }\n  \n  let intersectionStart = Math.max(interval1Start, interval2Start);\n\
    \  let intersectionEnd = Math.min(interval1End, interval2End);\n  \n  if (intersectionStart\
    \ < intersectionEnd){\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    if (intersectionLength === 1){\n      return \"YES\";\n    }\n    if (intersectionLength\
    \ === 2){\n      return \"NO\";\n    }\n    if (intersectionLength === 3){\n \
    \     return \"YES\";\n    }\n  }\n  \n  return \"NO\";\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrimeNumber = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(interval1Start <= intersectionStart && intersectionStart <= interval1End\
    \ && interval2Start <= intersectionEnd && intersectionEnd <= interval2End){\n\
    \            isPrimeNumber = false;\n            break;\n        }\n    }\n  \
    \  return isPrimeNumber;\n}\n", "\tlet [start1, end1] = interval1;\n\tlet [start2,\
    \ end2] = interval2;\n\tlet startIntersection = start1 < start2 ? start1 : start2;\n\
    \tlet endIntersection = end1 < end2 ? end1 : end2;\n\tlet intersectionLength =\
    \ endIntersection - startIntersection;\n\tlet isPrime = intersectionLength ===\
    \ 2 || intersectionLength === 3;\n\treturn isPrime ? \"YES\" : \"NO\";\n}\n",
  "    let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if(intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ % interval2Start === 0)){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    \n    if(isPrime){\n        return \"YES\";\n    }\n  \
    \  \n    return \"NO\";\n}\n", "  let interval1Start = interval1[0];\n  let interval1End\
    \ = interval1[1];\n  let interval2Start = interval2[0];\n  let interval2End =\
    \ interval2[1];\n  \n  if(interval1Start > interval2Start || interval1End < interval2End){\n\
    \    return \"NO\";\n  }\n  \n  let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n  let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \  \n  if(intersectionStart < intersectionEnd){\n    return \"YES\";\n  }\n  \n\
    \  return \"NO\";\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(!(i % interval1Start === 0\
    \ && i % interval2Start === 0)){\n            isPrime = false;\n            break;\n\
    \        }\n    }\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "\tlet start\
    \ = Math.min(interval1[0], interval2[0]);\n\tlet end = Math.max(interval1[1],\
    \ interval2[1]);\n\tlet length = end - start;\n\tlet isPrime = true;\n\tfor(let\
    \ i = 2; i <= Math.sqrt(length); i++){\n\t\tif(length % i === 0){\n\t\t\tisPrime\
    \ = false;\n\t\t}\n\t}\n\tif(isPrime){\n\t\treturn \"YES\";\n\t}\n\treturn \"\
    NO\";\n}\n", "    let [start1, end1] = interval1;\n    let [start2, end2] = interval2;\n\
    \    let startIntersection = start1 <= start2 && start2 <= end1 ? start1 : start2;\n\
    \    let endIntersection = start1 <= start2 && start2 <= end1 ? end1 : end2;\n\
    \    let lengthIntersection = startIntersection <= endIntersection ? endIntersection\
    \ - startIntersection : startIntersection - endIntersection;\n    let isPrime\
    \ = lengthIntersection === 2 || lengthIntersection === 3 && isPrime(lengthIntersection);\n\
    \    return isPrime ? \"YES\" : \"NO\";\n}\n", "  let interval1Start = interval1[0];\n\
    \  let interval1End = interval1[1];\n  let interval2Start = interval2[0];\n  let\
    \ interval2End = interval2[1];\n  \n  if(interval1Start > interval2Start){\n \
    \   let temp = interval1Start;\n    interval1Start = interval2Start;\n    interval2Start\
    \ = temp;\n  }\n  if(interval1End < interval2End){\n    let temp = interval1End;\n\
    \    interval1End = interval2End;\n    interval2End = temp;\n  }\n  \n  if(interval1Start\
    \ <= interval1End && interval2Start <= interval2End){\n    let temp1 = interval1Start;\n\
    \    let temp2 = interval2Start;\n    \n    while(temp1 <= temp2){\n      if(interval1End\
    \ < temp2){\n        temp2 = temp2 + interval1End;\n      }\n      if(temp1 <=\
    \ temp2){\n        interval1End = temp2;\n        temp1 = temp1 + interval1End;\n\
    \      }\n      if(temp2 <= interval1End){\n        interval2End = temp1;\n  \
    \      temp2 = temp2 + interval2End;\n      }\n    }\n    \n    if(interval1End\
    \ <= interval2End){\n      return \"YES\";\n    }\n    else{\n      return \"\
    NO\";\n    }\n  }\n  else{\n    return \"NO\";\n  }\n}\n", "    let interval1Start\
    \ = interval1[0];\n    let interval1End = interval1[1];\n    let interval2Start\
    \ = interval2[0];\n    let interval2End = interval2[1];\n    let intersectionStart\
    \ = Math.min(interval1Start, interval2Start);\n    let intersectionEnd = Math.max(interval1End,\
    \ interval2End);\n    let intersectionLength = intersectionEnd - intersectionStart;\n\
    \    let isPrime = true;\n    for(let i = 2; i <= intersectionLength; i++){\n\
    \        if(interval1Start <= intersectionStart && intersectionStart <= interval1End\
    \ && interval2Start <= intersectionEnd && intersectionEnd <= interval2End){\n\
    \            isPrime = false;\n            break;\n        }\n    }\n    return\
    \ isPrime;\n}\n", "    let interval1Start = interval1[0];\n    let interval1End\
    \ = interval1[1];\n    let interval2Start = interval2[0];\n    let interval2End\
    \ = interval2[1];\n    let intersectionStart = Math.min(interval1Start, interval2Start);\n\
    \    let intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    \n    if(intersectionLength ===\
    \ 0){\n        return \"NO\";\n    }\n    \n    let isPrime = true;\n    for(let\
    \ i = 2; i <= intersectionLength; i++){\n        if(interval1Start <= intersectionStart\
    \ && intersectionStart <= interval1End && interval2Start <= intersectionEnd &&\
    \ intersectionEnd <= interval2End){\n            isPrime = false;\n          \
    \  break;\n        }\n    }\n    \n    if(isPrime){\n        return \"YES\";\n\
    \    }\n    \n    return \"NO\";\n}\n", "    let start = Math.min(interval1[0],\
    \ interval2[0]);\n    let end = Math.max(interval1[1], interval2[1]);\n    let\
    \ length = end - start;\n    \n    if(length == 0){\n        return \"NO\";\n\
    \    }\n    \n    let prime = true;\n    for(let i = 2; i <= Math.sqrt(length);\
    \ i++){\n        if(length % i == 0){\n            prime = false;\n          \
    \  break;\n        }\n    }\n    \n    if(prime){\n        return \"YES\";\n \
    \   }\n    \n    return \"NO\";\n}\n", "\tlet interval1Start = interval1[0];\n\
    \tlet interval1End = interval1[1];\n\tlet interval2Start = interval2[0];\n\tlet\
    \ interval2End = interval2[1];\n\t\n\tif (interval1Start > interval2Start){\n\t\
    \tinterval1Start = interval2Start;\n\t}\n\tif (interval1End < interval2End){\n\
    \t\tinterval1End = interval2End;\n\t}\n\t\n\tlet intersectionStart = interval1Start;\n\
    \tlet intersectionEnd = interval1End;\n\t\n\twhile (intersectionStart <= interval1End){\n\
    \t\twhile (intersectionEnd <= interval2End){\n\t\t\tif (interval1Start <= intersectionEnd\
    \ && intersectionEnd <= interval2Start){\n\t\t\t\tintersectionEnd = interval2End;\n\
    \t\t\t}\n\t\t\telse if (interval1Start <= intersectionStart && intersectionStart\
    \ <= interval2End){\n\t\t\t\tintersectionStart = interval1Start;\n\t\t\t}\n\t\t\
    \telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (intersectionEnd <= interval2End){\n\
    \t\t\tintersectionEnd = interval2End;\n\t\t}\n\t\telse {\n\t\t\tbreak;\n\t\t}\n\
    \t}\n\t\n\tif (intersectionStart <= interval1End){\n\t\treturn \"YES\";\n\t}\n\
    \telse {\n\t\treturn \"NO\";\n\t}\n}\n", "    let interval1Start = interval1[0];\n\
    \    let interval1End = interval1[1];\n    let interval2Start = interval2[0];\n\
    \    let interval2End = interval2[1];\n    let intersectionStart = Math.min(interval1Start,\
    \ interval2Start);\n    let intersectionEnd = Math.max(interval1End, interval2End);\n\
    \    let intersectionLength = intersectionEnd - intersectionStart;\n    let isPrime\
    \ = interval1Start <= interval2End && interval2Start <= interval1End;\n    return\
    \ isPrime ? \"YES\" : \"NO\";\n}\n", "    let start1 = interval1[0];\n    let\
    \ end1 = interval1[1];\n    let start2 = interval2[0];\n    let end2 = interval2[1];\n\
    \    let intersection = [];\n    for(let i = start1; i <= end1; i++){\n      \
    \  for(let j = start2; j <= end2; j++){\n            if(i === j){\n          \
    \      intersection.push([i, j]);\n            }\n        }\n    }\n    if(intersection.length\
    \ === 0){\n        return \"NO\";\n    }\n    let length = intersection.length;\n\
    \    for(let i = 0; i < length; i++){\n        if(intersection[i][0] >= intersection[i][1]){\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "  \
    \  let interval1Start = interval1[0];\n    let interval1End = interval1[1];\n\
    \    let interval2Start = interval2[0];\n    let interval2End = interval2[1];\n\
    \    let intersectionStart = Math.min(interval1Start, interval2Start);\n    let\
    \ intersectionEnd = Math.max(interval1End, interval2End);\n    let intersectionLength\
    \ = intersectionEnd - intersectionStart;\n    let isPrime = intersectionLength\
    \ === 2;\n    return isPrime ? \"YES\" : \"NO\";\n}\n", "    let start = Math.min(interval1[0],\
    \ interval2[0]);\n    let end = Math.max(interval1[1], interval2[1]);\n    let\
    \ intersection = [];\n    for(let i = start; i <= end; i++){\n        if(interval1[0]\
    \ < interval2[1] && interval2[0] < interval1[1]){\n            intersection.push(i);\n\
    \        }\n    }\n    if(intersection.length == 0){\n        return \"NO\";\n\
    \    }\n    let prime = true;\n    for(let i = 0; i < intersection.length; i++){\n\
    \        if(intersection[i] % interval1[0] != 0 && intersection[i] % interval2[0]\
    \ != 0){\n            prime = false;\n            break;\n        }\n    }\n \
    \   if(prime){\n        return \"YES\";\n    }\n    return \"NO\";\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
