name: HumanEval_88_sort_array
language: js
results:
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  let sum = 0;\n  for(let i = 0; i < array.length;\
    \ i++){\n    sum += array[i];\n  }\n  if(sum % 2 === 0){\n    array.sort((a,b)\
    \ => a - b);\n  }else{\n    array.sort((a,b) => b - a);\n  }\n  return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmphih1r1db.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphih1r1db.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\ttemp = sum;\n\
    \t\twhile(temp > 0){\n\t\t\tresult.push(temp % 2);\n\t\t\ttemp = Math.floor(temp\
    \ / 2);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 0, 1 ]\n\nshould equal\n\n[ 5 ]\n \
    \   at test (/tmp/tmpxxb2jmzs.js:32:10)\n    at Object.<anonymous> (/tmp/tmpxxb2jmzs.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1, 0, 1 ],\n  expected: [ 5 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 0){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp1ctqzeav.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1ctqzeav.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tfor(let i = 0;\
    \ i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2 === 1){\n\t\t\tarray.splice(i,\
    \ 0, array[i]);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn array;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  for(var i=0;i<array.length;i++){\n\
    \    sum += array[i];\n  }\n  if(sum%2 === 0){\n    array.sort();\n  }else{\n\
    \    array.sort(function(a,b){\n      return b-a;\n    });\n  }\n  return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp2jrjn64q.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2jrjn64q.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tarray.forEach((num)\
    \ => {\n\t\tsum += num;\n\t\tresult.push(num);\n\t});\n\t\n\tif(sum % 2 === 1){\n\
    \t\tresult.sort((a, b) => a - b);\n\t}else{\n\t\tresult.sort((a, b) => b - a);\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpbne1gfk9.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbne1gfk9.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 0){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpk51v31hh.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk51v31hh.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet evenSum = 0;\n\tlet oddSum\
    \ = 0;\n\tlet evenArray = [];\n\tlet oddArray = [];\n\tlet newArray = [];\n\t\
    let newArray2 = [];\n\tlet newArray3 = [];\n\tlet newArray4 = [];\n\tlet newArray5\
    \ = [];\n\tlet newArray6 = [];\n\tlet newArray7 = [];\n\tlet newArray8 = [];\n\
    \tlet newArray9 = [];\n\tlet newArray10 = [];\n\tlet newArray11 = [];\n\tlet newArray12\
    \ = [];\n\tlet newArray13 = [];\n\tlet newArray14 = [];\n\tlet newArray15 = [];\n\
    \tlet newArray16 = [];\n\tlet newArray17 = [];\n\tlet newArray18 = [];\n\tlet\
    \ newArray19 = [];\n\tlet newArray20 = [];\n\tlet newArray21 = [];\n\tlet newArray22\
    \ = [];\n\tlet newArray23 = [];\n\tlet newArray24 = [];\n\tlet newArray25 = [];\n\
    \tlet newArray26 = [];\n\tlet newArray27 = [];\n\tlet newArray28 = [];\n\tlet\
    \ newArray29 = [];\n\tlet newArray30 = [];\n\tlet newArray31 = [];\n\tlet newArray32\
    \ = [];\n\tlet newArray33 = [];\n\tlet newArray34 = [];\n\tlet newArray35 = [];\n\
    \tlet newArray36 = [];\n\tlet newArray37 = [];\n\tlet newArray38 = [];\n\tlet\
    \ newArray39 = [];\n\tlet newArray40 = [];\n\tlet newArray41 = [];\n\tlet newArray42\
    \ = [];\n\tlet newArray43 = [];\n\tlet newArray44 = [];\n\tlet newArray45 = [];\n\
    \tlet newArray46 = [];\n\tlet newArray47 = [];\n\tlet newArray48 = [];\n\tlet\
    \ newArray49 = [];\n\tlet newArray50 = [];\n\tlet newArray51 = [];\n\tlet newArray52\
    \ = [];\n\tlet newArray53 = [];\n\tlet newArray54 = [];\n\tlet newArray55 = [];\n\
    \tlet newArray56 = [];\n\tlet newArray57 = [];\n\tlet newArray58 = [];\n\tlet\
    \ newArray59 = [];\n\tlet newArray60 = [];\n\tlet newArray61 = [];\n\tlet newArray62\
    \ = [];\n\tlet newArray63 = [];\n\tlet newArray64 = [];\n\tlet newArray65 = [];\n\
    \tlet newArray66 = [];\n\tlet newArray67 = [];\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgzl7m6px.js:99\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp300o0jsv.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp300o0jsv.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\tfor(let i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\t\
    if(temp % 2 === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t\tresult.push(array[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 5 ]\n\nshould equal\n\n[ 5 ]\n    at\
    \ test (/tmp/tmp141dy03o.js:37:10)\n    at Object.<anonymous> (/tmp/tmp141dy03o.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, 5 ],\n  expected: [ 5 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet newArray = [];\n\tfor(let i\
    \ = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tnewArray.push(array[i]);\n\
    \t}\n\tlet isEven = sum % 2 === 0;\n\tlet isOdd = sum % 2 !== 0;\n\tif(isEven){\n\
    \t\tnewArray.sort((a,b) => b-a);\n\t}else{\n\t\tnewArray.sort((a,b) => a-b);\n\
    \t}\n\treturn newArray;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpx8fjmq5n.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx8fjmq5n.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp005x9_o_.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp005x9_o_.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\tif(sum % 2 === 1){\n\t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\tresult.sort((a,b)\
    \ => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp12lj9gqs.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp12lj9gqs.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9nd9bjhw.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    var sum = 0;\n    for(var i=0;i<array.length;i++){\n\
    \        sum += array[i];\n    }\n    if(sum%2==1){\n        array.sort((a,b)=>a-b);\n\
    \    }else{\n        array.sort((a,b)=>b-a);\n    }\n    return array;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpdtswunn1.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdtswunn1.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tvar sum = 0;\n\tfor(var i=0;i<array.length;i++){\n\
    \t\tsum += array[i];\n\t}\n\tif(sum%2 === 0){\n\t\tarray.sort();\n\t}else{\n\t\
    \tarray.sort(function(a,b){\n\t\t\treturn b-a;\n\t\t});\n\t}\n\treturn array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp0iprqbrl.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0iprqbrl.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 1){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpbsh2qh44.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbsh2qh44.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\tif(sum % 2 === 0){\n\t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\tresult.sort((a,b)\
    \ => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpa09i8xs7.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa09i8xs7.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    var sum = 0;\n    var len = array.length;\n \
    \   for(var i=0; i<len; i++){\n        sum += array[i];\n    }\n    if(sum%2 ===\
    \ 1){\n        array.sort(function(a, b){\n            return a-b;\n        });\n\
    \    }else{\n        array.sort(function(a, b){\n            return b-a;\n   \
    \     });\n    }\n    return array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpxiroqqrp.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxiroqqrp.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 1){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpri2z74rn.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpri2z74rn.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tfor(let i = 0;\
    \ i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2 === 1){\n\t\t\tarray.push(array[i]);\n\
    \t\t}\n\t\telse{\n\t\t\tarray.pop();\n\t\t}\n\t}\n\treturn array;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 5 ]\n    at test\
    \ (/tmp/tmp063wnjsk.js:35:10)\n    at Object.<anonymous> (/tmp/tmp063wnjsk.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 5 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tfor(let i = 0;\
    \ i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 1){\n\t\
    \tfor(let i = 0; i < array.length; i++){\n\t\t\ttemp = array[i];\n\t\t\tarray[i]\
    \ = array[array.length - i - 1];\n\t\t\tarray[array.length - i - 1] = temp;\n\t\
    \t}\n\t}\n\treturn array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp06mur86k.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp06mur86k.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpfkpl511q.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfkpl511q.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  for (var i = 0; i < array.length;\
    \ i++){\n    sum += array[i];\n  }\n  var odd = sum % 2 === 1;\n  var newArray\
    \ = [];\n  for (var i = 0; i < array.length; i++){\n    newArray.push(array[i]);\n\
    \  }\n  if (odd){\n    newArray.sort(function(a, b){\n      return a - b;\n  \
    \  });\n  } else {\n    newArray.sort(function(a, b){\n      return b - a;\n \
    \   });\n  }\n  return newArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp9qwkj731.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9qwkj731.js:47:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmptc0jv17c.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptc0jv17c.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet newArray = [];\n\tfor(let i\
    \ = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tnewArray.push(array[i]);\n\
    \t}\n\tif(sum % 2 === 1){\n\t\tnewArray.sort((a,b) => a - b);\n\t}else{\n\t\t\
    newArray.sort((a,b) => b - a);\n\t}\n\treturn newArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp6t3la3vj.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6t3la3vj.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif(odd){\n\t\t\
    result.sort((a,b) => a - b);\n\t}else{\n\t\tresult.sort((a,b) => b - a);\n\t}\n\
    \treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpccxgxowx.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpccxgxowx.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\ttemp = sum;\n\
    \t\twhile(temp > 0){\n\t\t\tresult.push(temp % 2);\n\t\t\ttemp /= 2;\n\t\t}\n\t\
    }\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1,\n  0.5,\n  1.25,\n  0.625,\n  0.3125,\n\
    \  0.15625,\n  0.078125,\n  0.0390625,\n  0.01953125,\n  0.009765625,\n  0.0048828125,\n\
    \  0.00244140625,\n  0.001220703125,\n  0.0006103515625,\n  0.00030517578125,\n\
    \  0.000152587890625,\n  0.0000762939453125,\n  0.00003814697265625,\n  0.000019073486328125,\n\
    \  0.0000095367431640625,\n  0.00000476837158203125,\n  0.000002384185791015625,\n\
    \  0.0000011920928955078125,\n  5.960464477539062e-7,\n  2.980232238769531e-7,\n\
    \  1.4901161193847656e-7,\n  7.450580596923828e-8,\n  3.725290298461914e-8...\n\
    \nshould equal\n\n[ 5 ]\n    at test (/tmp/tmpi45qdjf3.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpi45qdjf3.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\n\
    \    0.5,\n    1.25,\n    0.625,\n    0.3125,\n    0.15625,\n    0.078125,\n \
    \   0.0390625,\n    0.01953125,\n    0.009765625,\n    0.0048828125,\n    0.00244140625,\n\
    \    0.001220703125,\n    0.0006103515625,\n    0.00030517578125,\n    0.000152587890625,\n\
    \    0.0000762939453125,\n    0.00003814697265625,\n    0.000019073486328125,\n\
    \    0.0000095367431640625,\n    0.00000476837158203125,\n    0.000002384185791015625,\n\
    \    0.0000011920928955078125,\n    5.960464477539062e-7,\n    2.980232238769531e-7,\n\
    \    1.4901161193847656e-7,\n    7.450580596923828e-8,\n    3.725290298461914e-8,\n\
    \    1.862645149230957e-8,\n    9.313225746154785e-9,\n    4.6566128730773926e-9,\n\
    \    2.3283064365386963e-9,\n    1.1641532182693481e-9,\n    5.820766091346741e-10,\n\
    \    2.9103830456733704e"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 0){\n\t\tarray.sort((a, b)\
    \ => a - b);\n\t}else{\n\t\tarray.sort((a, b) => b - a);\n\t}\n\treturn array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpg5csa4er.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg5csa4er.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp7egk8na5.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7egk8na5.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\ttemp = sum;\n\
    \t\twhile(temp > 0){\n\t\t\tresult.push(temp % 2);\n\t\t\ttemp = Math.floor(temp\
    \ / 2);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 0, 1 ]\n\nshould equal\n\n[ 5 ]\n \
    \   at test (/tmp/tmp0xxqug6y.js:32:10)\n    at Object.<anonymous> (/tmp/tmp0xxqug6y.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1, 0, 1 ],\n  expected: [ 5 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet evenSum = 0;\n\tlet oddSum\
    \ = 0;\n\tlet evenCount = 0;\n\tlet oddCount = 0;\n\tlet evenArray = [];\n\tlet\
    \ oddArray = [];\n\tlet evenArrayCopy = [];\n\tlet oddArrayCopy = [];\n\tlet evenArrayCopy2\
    \ = [];\n\tlet oddArrayCopy2 = [];\n\tlet evenArrayCopy3 = [];\n\tlet oddArrayCopy3\
    \ = [];\n\tlet evenArrayCopy4 = [];\n\tlet oddArrayCopy4 = [];\n\tlet evenArrayCopy5\
    \ = [];\n\tlet oddArrayCopy5 = [];\n\tlet evenArrayCopy6 = [];\n\tlet oddArrayCopy6\
    \ = [];\n\tlet evenArrayCopy7 = [];\n\tlet oddArrayCopy7 = [];\n\tlet evenArrayCopy8\
    \ = [];\n\tlet oddArrayCopy8 = [];\n\tlet evenArrayCopy9 = [];\n\tlet oddArrayCopy9\
    \ = [];\n\tlet evenArrayCopy10 = [];\n\tlet oddArrayCopy10 = [];\n\tlet evenArrayCopy11\
    \ = [];\n\tlet oddArrayCopy11 = [];\n\tlet evenArrayCopy12 = [];\n\tlet oddArrayCopy12\
    \ = [];\n\tlet evenArrayCopy13 = [];\n\tlet oddArrayCopy13 = [];\n\tlet evenArrayCopy14\
    \ = [];\n\tlet oddArrayCopy14 = [];\n\tlet evenArrayCopy15 = [];\n\tlet oddArrayCopy15\
    \ = [];\n\tlet evenArrayCopy16 = [];\n\tlet oddArrayCopy16 = [];\n\tlet evenArrayCopy17\
    \ = [];\n\tlet oddArrayCopy17 = [];\n\tlet evenArrayCopy18 = [];\n\tlet oddArrayCopy18\
    \ = [];\n\tlet evenArrayCopy19 = [];\n\tlet oddArrayCopy19 = [];\n\tlet evenArrayCopy20\
    \ = [];\n\tlet oddArrayCopy20 = [];\n\tlet evenArrayCopy21 = [];\n\tlet oddArrayCopy21\
    \ = [];\n\tlet evenArrayCopy22 = [];\n\tlet oddArrayCopy22 = [];\n\tlet evenArrayCopy23\
    \ = [];\n\tlet oddArrayCopy23 = [];\n\tlet evenArrayCopy24 = [];\n\tlet oddArrayCopy24\
    \ = [];\n\tlet evenArrayCopy25 = [];\n\tlet oddArrayCopy25 = [];\n\tlet evenArrayCopy26\
    \ = [];\n\tlet oddArrayCopy26 = [];\n\tlet evenArrayCopy27 = [];\n\tlet oddArrayCopy27\
    \ = [];\n\tlet evenArrayCopy28 = [];\n\tlet oddArrayCopy28 = [];\n\tlet evenArrayCopy29\
    \ = [];\n\tlet oddArrayCopy29 = [];\n\tlet evenArrayCopy30 = [];\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4so1l92_.js:92\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\tlet isOdd = sum % 2 === 1;\n\tlet isEven = sum % 2 === 0;\n\tif(isOdd){\n\
    \t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\tresult.sort((a,b) => b - a);\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpv9o9ut5r.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv9o9ut5r.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet newArray = [];\n\tfor(let i\
    \ = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tnewArray.push(array[i]);\n\
    \t}\n\tlet isOdd = (sum % 2 === 1);\n\tlet isEven = (sum % 2 === 0);\n\tif(isOdd\
    \ === true){\n\t\tnewArray.sort((a,b) => a - b);\n\t}else if(isEven === true){\n\
    \t\tnewArray.sort((a,b) => b - a);\n\t}\n\treturn newArray;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpirxu9jav.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpirxu9jav.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp4361hp2h.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4361hp2h.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp;\n\tlet temp2;\n\tlet\
    \ temp3;\n\tlet temp4;\n\tlet temp5;\n\tlet temp6;\n\tlet temp7;\n\tlet temp8;\n\
    \tlet temp9;\n\tlet temp10;\n\tlet temp11;\n\tlet temp12;\n\tlet temp13;\n\tlet\
    \ temp14;\n\tlet temp15;\n\tlet temp16;\n\tlet temp17;\n\tlet temp18;\n\tlet temp19;\n\
    \tlet temp20;\n\tlet temp21;\n\tlet temp22;\n\tlet temp23;\n\tlet temp24;\n\t\
    let temp25;\n\tlet temp26;\n\tlet temp27;\n\tlet temp28;\n\tlet temp29;\n\tlet\
    \ temp30;\n\tlet temp31;\n\tlet temp32;\n\tlet temp33;\n\tlet temp34;\n\tlet temp35;\n\
    \tlet temp36;\n\tlet temp37;\n\tlet temp38;\n\tlet temp39;\n\tlet temp40;\n\t\
    let temp41;\n\tlet temp42;\n\tlet temp43;\n\tlet temp44;\n\tlet temp45;\n\tlet\
    \ temp46;\n\tlet temp47;\n\tlet temp48;\n\tlet temp49;\n\tlet temp50;\n\tlet temp51;\n\
    \tlet temp52;\n\tlet temp53;\n\tlet temp54;\n\tlet temp55;\n\tlet temp56;\n\t\
    let temp57;\n\tlet temp58;\n\tlet temp59;\n\tlet temp60;\n\tlet temp61;\n\tlet\
    \ temp62;\n\tlet temp63;\n\tlet temp64;\n\tlet temp65;\n\tlet temp66;\n\tlet temp67;\n\
    \tlet temp68;\n\tlet temp69;\n\tlet temp70;\n\tlet temp71;\n\tlet temp72;\n\t\
    let temp73;\n\tlet temp74;\n\tlet temp75;\n\tlet temp76;\n\tlet temp77;\n\tlet\
    \ temp78;\n\tlet temp79;\n\tlet temp80;\n\tlet temp81;\n\tlet temp82;\n\tlet temp83;\n\
    \tlet temp84;\n\tlet temp85;\n\tlet temp86;\n\tlet temp87;\n\tlet temp88;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7qu7futa.js:115\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tvar sum = 0;\n\tfor(var i=0; i<array.length; i++){\n\
    \t\tsum += array[i];\n\t}\n\t\n\tif(sum%2 === 1){\n\t\tarray.sort(function(a,\
    \ b){\n\t\t\treturn a-b;\n\t\t});\n\t}else{\n\t\tarray.sort(function(a, b){\n\t\
    \t\treturn b-a;\n\t\t});\n\t}\n\treturn array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpygxd0fyf.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpygxd0fyf.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn25_s07z.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum\
    \ % 2 === 0;\n\tif(odd){\n\t\tarray.sort((a,b) => a - b);\n\t}else if(even){\n\
    \t\tarray.sort((a,b) => b - a);\n\t}\n\treturn array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpegr0jsxd.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpegr0jsxd.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\t\n\tif(sum % 2 === 0){\n\t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\t\
    result.sort((a,b) => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpypn5ma0v.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpypn5ma0v.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 1){\n\t\tarray.sort((a,b)\
    \ => a - b);\n\t}else{\n\t\tarray.sort((a,b) => b - a);\n\t}\n\treturn array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmps9jc40x1.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps9jc40x1.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tfor(let i = 0;\
    \ i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2 === 1){\n\t\t\tarray.push(array[i]);\n\
    \t\t}\n\t\telse{\n\t\t\tarray.pop();\n\t\t}\n\t}\n\treturn array;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 5 ]\n    at test\
    \ (/tmp/tmpv_5n0yb8.js:35:10)\n    at Object.<anonymous> (/tmp/tmpv_5n0yb8.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 5 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 1){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpv32nz6fn.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv32nz6fn.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf_o8hzjx.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnjng9rqb.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp;\n\tfor(let i = 0; i <\
    \ array.length; i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 1){\n\t\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\t\ttemp = array[i];\n\t\t\tarray[i] = array[array.length\
    \ - i - 1];\n\t\t\tarray[array.length - i - 1] = temp;\n\t\t}\n\t}\n\treturn array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpfmwx92e9.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfmwx92e9.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet newArray = [];\n\tfor(let i\
    \ = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tnewArray.push(array[i]);\n\
    \t}\n\tif(sum % 2 === 0){\n\t\tnewArray.sort((a,b) => a - b);\n\t}else{\n\t\t\
    newArray.sort((a,b) => b - a);\n\t}\n\treturn newArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpv7xs6s8u.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv7xs6s8u.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tarray.forEach((item,\
    \ index) => {\n\t\tsum += item;\n\t\tresult.push(item);\n\t});\n\tlet odd = sum\
    \ % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif(odd){\n\t\tresult.sort((a, b)\
    \ => a - b);\n\t}else if(even){\n\t\tresult.sort((a, b) => b - a);\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpufizbcay.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpufizbcay.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp__c0lmf2.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet newArray =\
    \ [];\n\tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\t\
    for(let i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp\
    \ % 2 === 1){\n\t\t\tnewArray.push(array[i]);\n\t\t}\n\t\telse{\n\t\t\tnewArray.push(array[i]);\n\
    \t\t}\n\t}\n\treturn newArray;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp2qhbfq7b.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2qhbfq7b.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  let sum = 0;\n  for(let i = 0; i < array.length;\
    \ i++){\n    sum += array[i];\n  }\n  if(sum % 2 === 0){\n    array.sort((a,b)\
    \ => a - b);\n  }else{\n    array.sort((a,b) => b - a);\n  }\n  return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpb8k43zjq.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpb8k43zjq.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tlet odd = sum % 2 === 1;\n\tlet sorted =\
    \ array.sort((a,b) => odd == (a+b) % 2 ? 1 : -1);\n\treturn sorted;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 4, 2, 5, 1, 3 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp8yzcum0b.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8yzcum0b.js:35:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 4, 2,\
    \ 5, 1, 3 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp3i889n2h.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3i889n2h.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\ttemp = sum;\n\
    \t\twhile(temp > 0){\n\t\t\tif(temp % 2 === 0){\n\t\t\t\tresult.push(array[i]);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\ttemp -= 1;\n\t\t}\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmppu6qs18a.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppu6qs18a.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 0){\n        array.sort((a,b)\
    \ => a-b);\n    }else{\n        array.sort((a,b) => b-a);\n    }\n    return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp1xeuke0o.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1xeuke0o.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  let sum = 0;\n  for(let i = 0; i < array.length;\
    \ i++){\n    sum += array[i];\n  }\n  if(sum % 2 === 0){\n    array.sort((a,b)\
    \ => a - b);\n  } else {\n    array.sort((a,b) => b - a);\n  }\n  return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpzblz523h.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzblz523h.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet sum1 = 0;\n\tlet sum2 = 0;\n\
    \tlet sum3 = 0;\n\tlet sum4 = 0;\n\tlet sum5 = 0;\n\tlet sum6 = 0;\n\tlet sum7\
    \ = 0;\n\tlet sum8 = 0;\n\tlet sum9 = 0;\n\tlet sum10 = 0;\n\tlet sum11 = 0;\n\
    \tlet sum12 = 0;\n\tlet sum13 = 0;\n\tlet sum14 = 0;\n\tlet sum15 = 0;\n\tlet\
    \ sum16 = 0;\n\tlet sum17 = 0;\n\tlet sum18 = 0;\n\tlet sum19 = 0;\n\tlet sum20\
    \ = 0;\n\tlet sum21 = 0;\n\tlet sum22 = 0;\n\tlet sum23 = 0;\n\tlet sum24 = 0;\n\
    \tlet sum25 = 0;\n\tlet sum26 = 0;\n\tlet sum27 = 0;\n\tlet sum28 = 0;\n\tlet\
    \ sum29 = 0;\n\tlet sum30 = 0;\n\tlet sum31 = 0;\n\tlet sum32 = 0;\n\tlet sum33\
    \ = 0;\n\tlet sum34 = 0;\n\tlet sum35 = 0;\n\tlet sum36 = 0;\n\tlet sum37 = 0;\n\
    \tlet sum38 = 0;\n\tlet sum39 = 0;\n\tlet sum40 = 0;\n\tlet sum41 = 0;\n\tlet\
    \ sum42 = 0;\n\tlet sum43 = 0;\n\tlet sum44 = 0;\n\tlet sum45 = 0;\n\tlet sum46\
    \ = 0;\n\tlet sum47 = 0;\n\tlet sum48 = 0;\n\tlet sum49 = 0;\n\tlet sum50 = 0;\n\
    \tlet sum51 = 0;\n\tlet sum52 = 0;\n\tlet sum53 = 0;\n\tlet sum54 = 0;\n\tlet\
    \ sum55 = 0;\n\tlet sum56 = 0;\n\tlet sum57 = 0;\n\tlet sum58 = 0;\n\tlet sum59\
    \ = 0;\n\tlet sum60 = 0;\n\tlet sum61 = 0;\n\tlet sum62 = 0;\n\tlet sum63 = 0;\n\
    \tlet sum64 = 0;\n\tlet sum65 = 0;\n\tlet sum66 = 0;\n\tlet sum67 = 0;\n\tlet\
    \ sum68 = 0;\n\tlet sum69 = 0;\n\tlet sum70 = 0;\n\tlet sum71 = 0;\n\tlet sum72\
    \ = 0;\n\tlet sum73 = 0;\n\tlet sum74 = 0;\n\tlet sum75 = 0;\n\tlet sum76 = 0;\n\
    \tlet sum77 = 0;\n\tlet sum78 = 0;\n\tlet sum79 = 0;\n\tlet sum80 = 0;\n\tlet\
    \ sum81 = 0;\n\tlet sum82 = 0;\n\tlet sum83 = 0;\n\tlet sum84 = 0;\n\tlet sum85\
    \ = 0;\n\tlet \nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph6ajz82s.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcg04ohu9.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    var sum = 0;\n    for(var i=0; i<array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum%2 === 1){\n        array.sort(function(a,\
    \ b){\n            return a-b;\n        });\n    }else{\n        array.sort(function(a,\
    \ b){\n            return b-a;\n        });\n    }\n    return array;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpdif1dwfk.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdif1dwfk.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet sum2 = 0;\n\tlet temp = 0;\n\
    \tlet temp2 = 0;\n\tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet\
    \ temp6 = 0;\n\tlet temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10\
    \ = 0;\n\tlet temp11 = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14\
    \ = 0;\n\tlet temp15 = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18\
    \ = 0;\n\tlet temp19 = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22\
    \ = 0;\n\tlet temp23 = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26\
    \ = 0;\n\tlet temp27 = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30\
    \ = 0;\n\tlet temp31 = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34\
    \ = 0;\n\tlet temp35 = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38\
    \ = 0;\n\tlet temp39 = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42\
    \ = 0;\n\tlet temp43 = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46\
    \ = 0;\n\tlet temp47 = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50\
    \ = 0;\n\tlet temp51 = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54\
    \ = 0;\n\tlet temp55 = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58\
    \ = 0;\n\tlet temp59 = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62\
    \ = 0;\n\tlet temp63 = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66\
    \ = 0;\n\tlet temp67 = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70\
    \ = 0;\n\tlet temp71 = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74\
    \ = 0;\n\tlet temp75 = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78\
    \ = 0;\n\tlet temp79 = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82\
    \ = 0;\n\tlet temp83 = 0;\n\tlet temp84 = 0;\n\tlet temp\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptrkh5fdb.js:98\n\tlet temp\n\t    ^\n\nSyntaxError: Identifier\
    \ 'temp' has already been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpl78zm3aa.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl78zm3aa.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  let sum = 0;\n  for(let i = 0; i < array.length;\
    \ i++){\n    sum += array[i];\n  }\n  if(sum % 2 === 1){\n    array.sort((a,b)\
    \ => a - b);\n  }else{\n    array.sort((a,b) => b - a);\n  }\n  return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpi0ser9sx.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpi0ser9sx.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 1){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp9kdooykt.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9kdooykt.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 0){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpogdlglar.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpogdlglar.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    var sum = 0;\n    var result = [];\n    for(var\
    \ i = 0; i < array.length; i++){\n        sum += array[i];\n        result.push(array[i]);\n\
    \    }\n    if(sum % 2 === 1){\n        array.sort(function(a, b){\n         \
    \   return a - b;\n        });\n    }else{\n        array.sort(function(a, b){\n\
    \            return b - a;\n        });\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpqz6jpxo8.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqz6jpxo8.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum % 2 === 0;\n\tif(odd){\n\t\t\
    result.sort((a,b) => a - b);\n\t}else{\n\t\tresult.sort((a,b) => b - a);\n\t}\n\
    \treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp8pac_05x.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8pac_05x.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 0){\n        array.sort((a,b)\
    \ => a-b);\n    }else{\n        array.sort((a,b) => b-a);\n    }\n    return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp8cth9wzs.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8cth9wzs.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn2lq7pk7.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 1){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpu0o9pcro.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu0o9pcro.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpthq59rsa.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpthq59rsa.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    var sum = 0;\n    for(var i=0; i<array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum%2 === 1){\n        array.sort();\n\
    \    }else{\n        array.sort(function(a, b){return b-a});\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpdemdrcvo.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdemdrcvo.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    var sum = 0;\n    for(var i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 1){\n        array.sort(function(a,\
    \ b){\n            return a - b;\n        });\n    }else{\n        array.sort(function(a,\
    \ b){\n            return b - a;\n        });\n    }\n    return array;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpcq05ol6o.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcq05ol6o.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  for(var i=0;i<array.length;i++){\n\
    \    sum += array[i];\n  }\n  if(sum%2 === 1){\n    array.sort();\n  }else{\n\
    \    array.sort(function(a,b){\n      return b-a;\n    });\n  }\n  return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpex4cceel.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpex4cceel.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 0){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp9admusj2.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9admusj2.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 0){\n\t\tarray.sort((a,b)\
    \ => a - b);\n\t}else{\n\t\tarray.sort((a,b) => b - a);\n\t}\n\treturn array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpaz498nyx.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpaz498nyx.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    var sum = 0;\n    for(var i=0;i<array.length;i++){\n\
    \        sum += array[i];\n    }\n    if(sum%2 === 0){\n        array.sort(function(a,b){\n\
    \            return a-b;\n        });\n    }else{\n        array.sort(function(a,b){\n\
    \            return b-a;\n        });\n    }\n    return array;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpf64f55zq.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpf64f55zq.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp31hmek9m.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp31hmek9m.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tarray.forEach(element => {\n\t\tsum += element;\n\t});\n\tarray.forEach(element\
    \ => {\n\t\ttemp = sum - element;\n\t\tif(temp % 2 === 0){\n\t\t\tresult.push(element);\n\
    \t\t}else{\n\t\t\tresult.push(temp);\n\t\t}\n\t});\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 13, 11, 3, 15, 1, 5 ]\n\nshould equal\n\
    \n[ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp8u4fiemy.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8u4fiemy.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 13, 11,\
    \ 3, 15, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 0){\n        array.sort((a,b)\
    \ => a-b);\n    }else{\n        array.sort((a,b) => b-a);\n    }\n    return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp5e83iivx.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5e83iivx.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpuhpf4a0f.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphl7_rk43.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\t\n\tif(sum % 2 === 0){\n\t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\t\
    result.sort((a,b) => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpa93591tf.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa93591tf.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp;\n\tfor(let i = 0; i <\
    \ array.length; i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 1){\n\t\tarray.sort((a,b)\
    \ => a - b);\n\t}else{\n\t\tarray.sort((a,b) => b - a);\n\t}\n\treturn array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmppmawazk3.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppmawazk3.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tif(sum % 2\
    \ === 0){\n\t\t\ttemp = array[i];\n\t\t\tresult.push(temp);\n\t\t}\n\t\telse{\n\
    \t\t\ttemp = array[i];\n\t\t\tresult.push(temp);\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 5 ]\n\nshould equal\n\n[ 5 ]\n    at\
    \ test (/tmp/tmpia9evnua.js:36:10)\n    at Object.<anonymous> (/tmp/tmpia9evnua.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, 5 ],\n  expected: [ 5 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpg_qxvq9o.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet sortedArray = [];\n\tfor (let\
    \ i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tsortedArray.push(array[i]);\n\
    \t}\n\tif (sum % 2 === 0){\n\t\tsortedArray.sort((a,b) => a - b);\n\t}else{\n\t\
    \tsortedArray.sort((a,b) => b - a);\n\t}\n\treturn sortedArray;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp_4cvrnk4.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_4cvrnk4.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum\
    \ % 2 === 0;\n\tif(odd){\n\t\tarray.sort((a,b)=>a-b);\n\t}else{\n\t\tarray.sort((a,b)=>b-a);\n\
    \t}\n\treturn array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpvtu9uc1u.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvtu9uc1u.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\tif(sum % 2 === 1){\n\t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\tresult.sort((a,b)\
    \ => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpsm6ql6gi.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsm6ql6gi.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tvar sum = 0;\n\tfor(var i=0;i<array.length;i++){\n\
    \t\tsum += array[i];\n\t}\n\tif(sum%2 === 1){\n\t\tarray.sort(function(a,b){\n\
    \t\t\treturn a-b;\n\t\t});\n\t}else{\n\t\tarray.sort(function(a,b){\n\t\t\treturn\
    \ b-a;\n\t\t});\n\t}\n\treturn array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpwdmuyn3_.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwdmuyn3_.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet newArray = [];\n\tfor(let i\
    \ = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tnewArray.push(array[i]);\n\
    \t}\n\tlet isOdd = sum % 2 === 1;\n\tlet isEven = sum % 2 === 0;\n\tif(isOdd ===\
    \ true){\n\t\tnewArray.sort((a,b) => a-b);\n\t}else{\n\t\tnewArray.sort((a,b)\
    \ => b-a);\n\t}\n\treturn newArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp32__737i.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp32__737i.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tif(sum % 2\
    \ === 1){\n\t\t\ttemp = array[i];\n\t\t\tresult.push(temp);\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 0, 5 ]\n\nshould equal\n\n[ 0, 1, 2,\
    \ 3, 4, 5 ]\n    at test (/tmp/tmp67whki41.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp67whki41.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 0, 5\
    \ ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tlet odd = sum % 2 === 1;\n\tlet result =\
    \ [];\n\tfor(let i = 0; i < array.length; i++){\n\t\tlet index = array[i];\n\t\
    \tlet temp;\n\t\tif(odd){\n\t\t\ttemp = array[i];\n\t\t\tarray[i] = array[index];\n\
    \t\t\tarray[index] = temp;\n\t\t}\n\t\tresult.push(array[i]);\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined, undefined, undefined, undefined,\
    \ undefined, 5 ]\n\nshould equal\n\n[ 5 ]\n    at test (/tmp/tmpakfw77qr.js:37:10)\n\
    \    at Object.<anonymous> (/tmp/tmpakfw77qr.js:45:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined, undefined, undefined, undefined,\
    \ undefined, 5 ],\n  expected: [ 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\ttemp = sum;\n\
    \t\twhile(temp > 0){\n\t\t\tresult.push(temp % 2);\n\t\t\ttemp = Math.floor(temp\
    \ / 2);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 0, 1 ]\n\nshould equal\n\n[ 5 ]\n \
    \   at test (/tmp/tmpbsoyulko.js:32:10)\n    at Object.<anonymous> (/tmp/tmpbsoyulko.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1, 0, 1 ],\n  expected: [ 5 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\t\n\tif(sum % 2 === 0){\n\t\tresult.sort((a, b) => a - b);\n\t}else{\n\t\
    \tresult.sort((a, b) => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp8cd9jzng.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8cd9jzng.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  for (var i = 0; i < array.length;\
    \ i++){\n    sum += array[i];\n  }\n  if(sum % 2 === 1){\n    array.sort(function(a,\
    \ b){\n      return a - b;\n    });\n  } else {\n    array.sort(function(a, b){\n\
    \      return b - a;\n    });\n  }\n  return array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpt_l7jjxo.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt_l7jjxo.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tif(sum % 2\
    \ === 0){\n\t\t\ttemp = array[i];\n\t\t\tarray[i] = array[array.length - 1];\n\
    \t\t\tarray[array.length - 1] = temp;\n\t\t\tresult[i] = array[array.length -\
    \ 1];\n\t\t\tresult[i+1] = array[i];\n\t\t\tarray.length--;\n\t\t}else{\n\t\t\t\
    temp = array[i];\n\t\t\tarray[i] = array[array.length - 1];\n\t\t\tarray[array.length\
    \ - 1] = temp;\n\t\t\tresult[i] = array[i];\n\t\t\tresult[i+1] = array[array.length\
    \ - 1];\n\t\t\tarray.length--;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 5 ]\n\nshould equal\n\n[ 5 ]\n    at\
    \ test (/tmp/tmpsezunohm.js:42:10)\n    at Object.<anonymous> (/tmp/tmpsezunohm.js:50:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, 5 ],\n  expected: [ 5 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpyckmabj4.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpyckmabj4.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3yoo_m6d.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}\n\t\telse{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpltt5qge0.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpltt5qge0.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 1){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpg9ule27u.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg9ule27u.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpz68s79xb.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpz68s79xb.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  let sum = 0;\n  let result = [];\n  for(let i =\
    \ 0; i < array.length; i++){\n    sum += array[i];\n  }\n  if(sum % 2 === 0){\n\
    \    result.sort((a,b) => a - b);\n  }else{\n    result.sort((a,b) => b - a);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 5 ]\n    at test\
    \ (/tmp/tmp6fbw44uz.js:31:10)\n    at Object.<anonymous> (/tmp/tmp6fbw44uz.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 5 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 1){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmph87z08pi.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmph87z08pi.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\t\n\tif(sum % 2 === 1){\n\t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\t\
    result.sort((a,b) => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp2r92f7af.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2r92f7af.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpsgsc2dl7.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsgsc2dl7.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpio2_id92.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpio2_id92.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet sum1 = 0;\n\tlet sum2 = 0;\n\
    \tlet sum3 = 0;\n\tlet sum4 = 0;\n\tlet sum5 = 0;\n\tlet sum6 = 0;\n\tlet sum7\
    \ = 0;\n\tlet sum8 = 0;\n\tlet sum9 = 0;\n\tlet sum10 = 0;\n\tlet sum11 = 0;\n\
    \tlet sum12 = 0;\n\tlet sum13 = 0;\n\tlet sum14 = 0;\n\tlet sum15 = 0;\n\tlet\
    \ sum16 = 0;\n\tlet sum17 = 0;\n\tlet sum18 = 0;\n\tlet sum19 = 0;\n\tlet sum20\
    \ = 0;\n\tlet sum21 = 0;\n\tlet sum22 = 0;\n\tlet sum23 = 0;\n\tlet sum24 = 0;\n\
    \tlet sum25 = 0;\n\tlet sum26 = 0;\n\tlet sum27 = 0;\n\tlet sum28 = 0;\n\tlet\
    \ sum29 = 0;\n\tlet sum30 = 0;\n\tlet sum31 = 0;\n\tlet sum32 = 0;\n\tlet sum33\
    \ = 0;\n\tlet sum34 = 0;\n\tlet sum35 = 0;\n\tlet sum36 = 0;\n\tlet sum37 = 0;\n\
    \tlet sum38 = 0;\n\tlet sum39 = 0;\n\tlet sum40 = 0;\n\tlet sum41 = 0;\n\tlet\
    \ sum42 = 0;\n\tlet sum43 = 0;\n\tlet sum44 = 0;\n\tlet sum45 = 0;\n\tlet sum46\
    \ = 0;\n\tlet sum47 = 0;\n\tlet sum48 = 0;\n\tlet sum49 = 0;\n\tlet sum50 = 0;\n\
    \tlet sum51 = 0;\n\tlet sum52 = 0;\n\tlet sum53 = 0;\n\tlet sum54 = 0;\n\tlet\
    \ sum55 = 0;\n\tlet sum56 = 0;\n\tlet sum57 = 0;\n\tlet sum58 = 0;\n\tlet sum59\
    \ = 0;\n\tlet sum60 = 0;\n\tlet sum61 = 0;\n\tlet sum62 = 0;\n\tlet sum63 = 0;\n\
    \tlet sum64 = 0;\n\tlet sum65 = 0;\n\tlet sum66 = 0;\n\tlet sum67 = 0;\n\tlet\
    \ sum68 = 0;\n\tlet sum69 = 0;\n\tlet sum70 = 0;\n\tlet sum71 = 0;\n\tlet sum72\
    \ = 0;\n\tlet sum73 = 0;\n\tlet sum74 = 0;\n\tlet sum75 = 0;\n\tlet sum76 = 0;\n\
    \tlet sum77 = 0;\n\tlet sum78 = 0;\n\tlet sum79 = 0;\n\tlet sum80 = 0;\n\tlet\
    \ sum81 = 0;\n\tlet sum82 = 0;\n\tlet sum83 = 0;\n\tlet sum84 = 0;\n\tlet sum85\
    \ = 0;\n\tlet \nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt82kxp7r.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 0){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpkqfgi_x1.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkqfgi_x1.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpuzv8uviu.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuzv8uviu.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\tif(sum % 2 === 1){\n\t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\tresult.sort((a,b)\
    \ => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp3g9dzzhn.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3g9dzzhn.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet newArray = [];\n\tfor(let i\
    \ = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tnewArray.push(array[i]);\n\
    \t}\n\tlet isEven = sum % 2 === 0;\n\tlet isOdd = sum % 2 !== 0;\n\tif(isEven){\n\
    \t\tnewArray.sort((a,b) => a - b);\n\t}else{\n\t\tnewArray.sort((a,b) => b - a);\n\
    \t}\n\treturn newArray;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmphxker1hw.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphxker1hw.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\t\n\tif(sum % 2 === 0){\n\t\tresult.sort((a,b) => a - b);\n\t} else {\n\t\
    \tresult.sort((a,b) => b - a);\n\t}\n\t\n\treturn result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp1hn2gmq9.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1hn2gmq9.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum\
    \ % 2 === 0;\n\tlet sorted = array.sort((a, b) => {\n\t\tif(a>b) return 1;\n\t\
    \tif(a<b) return -1;\n\t\tif(a===b) return 0;\n\t\tif(odd){\n\t\t\treturn 1;\n\
    \t\t}\n\t\tif(even){\n\t\t\treturn -1;\n\t\t}\n\t});\n\treturn sorted;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmptg1up720.js:40:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptg1up720.js:46:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 1){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmput4x_8qc.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmput4x_8qc.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  for(var i = 0; i < array.length;\
    \ i++){\n    sum += array[i];\n  }\n  if(sum % 2 === 0){\n    array.sort(function(a,\
    \ b){\n      return a - b;\n    });\n  }else{\n    array.sort(function(a, b){\n\
    \      return b - a;\n    });\n  }\n  return array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpxu0g9uvi.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxu0g9uvi.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  for(var i=0;i<array.length;i++){\n\
    \    sum += array[i];\n  }\n  if(sum%2 === 1){\n    array.sort(function(a,b){\n\
    \      return a-b;\n    });\n  }else{\n    array.sort(function(a,b){\n      return\
    \ b-a;\n    });\n  }\n  return array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpxf0d64b6.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxf0d64b6.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  var result = [];\n  for (var i\
    \ = 0; i < array.length; i++){\n    sum += array[i];\n    result.push(array[i]);\n\
    \  }\n  if(sum % 2 === 0){\n    result.sort(function(a, b){\n      return a -\
    \ b;\n    });\n  }else{\n    result.sort(function(a, b){\n      return b - a;\n\
    \    });\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpv2vthlvy.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv2vthlvy.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6ethjc8k.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpxw170nxq.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxw170nxq.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\ttemp = sum;\n\
    \t\twhile(temp > 0){\n\t\t\tresult.push(temp % 2);\n\t\t\ttemp = Math.floor(temp\
    \ / 2);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 0, 1 ]\n\nshould equal\n\n[ 5 ]\n \
    \   at test (/tmp/tmpunwlzng1.js:32:10)\n    at Object.<anonymous> (/tmp/tmpunwlzng1.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 1, 0, 1 ],\n  expected: [ 5 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    var sum = 0;\n    for(var i=0;i<array.length;i++){\n\
    \        sum += array[i];\n    }\n    if(sum%2 === 1){\n        array.sort(function(a,b){\n\
    \            return a-b;\n        });\n    }else{\n        array.sort(function(a,b){\n\
    \            return b-a;\n        });\n    }\n    return array;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp5rqzc9ff.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp5rqzc9ff.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet sumArray = [];\n\tlet sumArray2\
    \ = [];\n\tlet sumArray3 = [];\n\tlet sumArray4 = [];\n\tlet sumArray5 = [];\n\
    \tlet sumArray6 = [];\n\tlet sumArray7 = [];\n\tlet sumArray8 = [];\n\tlet sumArray9\
    \ = [];\n\tlet sumArray10 = [];\n\tlet sumArray11 = [];\n\tlet sumArray12 = [];\n\
    \tlet sumArray13 = [];\n\tlet sumArray14 = [];\n\tlet sumArray15 = [];\n\tlet\
    \ sumArray16 = [];\n\tlet sumArray17 = [];\n\tlet sumArray18 = [];\n\tlet sumArray19\
    \ = [];\n\tlet sumArray20 = [];\n\tlet sumArray21 = [];\n\tlet sumArray22 = [];\n\
    \tlet sumArray23 = [];\n\tlet sumArray24 = [];\n\tlet sumArray25 = [];\n\tlet\
    \ sumArray26 = [];\n\tlet sumArray27 = [];\n\tlet sumArray28 = [];\n\tlet sumArray29\
    \ = [];\n\tlet sumArray30 = [];\n\tlet sumArray31 = [];\n\tlet sumArray32 = [];\n\
    \tlet sumArray33 = [];\n\tlet sumArray34 = [];\n\tlet sumArray35 = [];\n\tlet\
    \ sumArray36 = [];\n\tlet sumArray37 = [];\n\tlet sumArray38 = [];\n\tlet sumArray39\
    \ = [];\n\tlet sumArray40 = [];\n\tlet sumArray41 = [];\n\tlet sumArray42 = [];\n\
    \tlet sumArray43 = [];\n\tlet sumArray44 = [];\n\tlet sumArray45 = [];\n\tlet\
    \ sumArray46 = [];\n\tlet sumArray47 = [];\n\tlet sumArray48 = [];\n\tlet sumArray49\
    \ = [];\n\tlet sumArray50 = [];\n\tlet sumArray51 = [];\n\tlet sumArray52 = [];\n\
    \tlet sumArray53 = [];\n\tlet sumArray54 = [];\n\tlet sumArray55 = [];\n\tlet\
    \ sumArray56 = [];\n\tlet sumArray57 = [];\n\tlet sumArray58 = [];\n\tlet sumArray59\
    \ = [];\n\tlet sumArray60 = [];\n\tlet sumArray61 = [];\n\tlet sumArray62 = [];\n\
    \tlet sumArray63 = [];\n\tlet sumArray64 = [];\n\tlet sumArray65 = [];\n\tlet\
    \ sumArray66 = [];\n\tlet sumArray67 = [];\n\tlet sumArray68 = [];\n\tlet sumArray69\
    \ = [];\n\tlet sumArray70 = [];\n\tlet sumArray7\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp296fcwd2.js:83\n\tlet sumArray7\n\t    ^\n\nSyntaxError: Identifier\
    \ 'sumArray7' has already been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcgj8sf12.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  var temp;\n  for(var i=0;i<array.length;i++){\n\
    \    sum += array[i];\n  }\n  if(sum%2 === 1){\n    temp = array[0];\n    array[0]\
    \ = array[array.length-1];\n    array[array.length-1] = temp;\n  }\n  array.sort(function(a,b){\n\
    \    return a-b;\n  });\n  return array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpqh5pf7_7.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqh5pf7_7.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tarray.forEach(item\
    \ => {\n\t\tsum += item;\n\t\tresult.push(item);\n\t});\n\tlet isOdd = sum % 2\
    \ === 1;\n\tlet isEven = sum % 2 === 0;\n\tif(isOdd){\n\t\tresult.sort((a, b)\
    \ => a - b);\n\t}else{\n\t\tresult.sort((a, b) => b - a);\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp0hlue01q.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0hlue01q.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmps3d3uyxd.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps3d3uyxd.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet i = 0;\n\t\
    let j = 0;\n\tlet tempArray = [];\n\tlet tempArray2 = [];\n\tlet tempArray3 =\
    \ [];\n\tlet tempArray4 = [];\n\tlet tempArray5 = [];\n\tlet tempArray6 = [];\n\
    \tlet tempArray7 = [];\n\tlet tempArray8 = [];\n\tlet tempArray9 = [];\n\tlet\
    \ tempArray10 = [];\n\tlet tempArray11 = [];\n\tlet tempArray12 = [];\n\tlet tempArray13\
    \ = [];\n\tlet tempArray14 = [];\n\tlet tempArray15 = [];\n\tlet tempArray16 =\
    \ [];\n\tlet tempArray17 = [];\n\tlet tempArray18 = [];\n\tlet tempArray19 = [];\n\
    \tlet tempArray20 = [];\n\tlet tempArray21 = [];\n\tlet tempArray22 = [];\n\t\
    let tempArray23 = [];\n\tlet tempArray24 = [];\n\tlet tempArray25 = [];\n\tlet\
    \ tempArray26 = [];\n\tlet tempArray27 = [];\n\tlet tempArray28 = [];\n\tlet tempArray29\
    \ = [];\n\tlet tempArray30 = [];\n\tlet tempArray31 = [];\n\tlet tempArray32 =\
    \ [];\n\tlet tempArray33 = [];\n\tlet tempArray34 = [];\n\tlet tempArray35 = [];\n\
    \tlet tempArray36 = [];\n\tlet tempArray37 = [];\n\tlet tempArray38 = [];\n\t\
    let tempArray39 = [];\n\tlet tempArray40 = [];\n\tlet tempArray41 = [];\n\tlet\
    \ tempArray42 = [];\n\tlet tempArray43 = [];\n\tlet tempArray44 = [];\n\tlet tempArray45\
    \ = [];\n\tlet tempArray46 = [];\n\tlet tempArray47 = [];\n\tlet tempArray48 =\
    \ [];\n\tlet tempArray49 = [];\n\tlet tempArray50 = [];\n\tlet tempArray51 = [];\n\
    \tlet tempArray52 = [];\n\tlet tempArray53 = [];\n\tlet tempArray54 = [];\n\t\
    let tempArray55 = [];\n\tlet tempArray56 = [];\n\tlet tempArray57 = [];\n\tlet\
    \ tempArray58 = [];\n\tlet tempArray59 = [];\n\tlet tempArray60 = [];\n\tlet tempArray61\
    \ = [];\n\tlet tempArray62 = [];\n\tlet tempArray63 = [];\n\tlet tempArray64 =\
    \ [];\n\tlet tempArray65 = [];\n\tlet tempArray66 = [];\n\tlet tempArray67 = [];\n\
    \tlet tempArray68 = [];\n\tlet tempArray69\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo_zwcg73.js:99\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tarray.forEach((el)\
    \ => {\n\t\tsum += el;\n\t});\n\tif(sum % 2 === 1){\n\t\tresult = array.sort((a,\
    \ b) => a - b);\n\t}else{\n\t\tresult = array.sort((a, b) => b - a);\n\t}\n\t\
    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpjtaex_we.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpjtaex_we.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 1){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpm0tvi4u4.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpm0tvi4u4.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\ttemp = sum;\n\
    \t\tresult.push(array[i]);\n\t\twhile(temp > 0){\n\t\t\tsum -= array[i - 1];\n\
    \t\t\ttemp -= array[i - 1];\n\t\t\tresult.push(array[i - 1]);\n\t\t}\n\t}\n\t\
    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, undefined ]\n\nshould equal\n\n[ 5\
    \ ]\n    at test (/tmp/tmpk9alox_6.js:34:10)\n    at Object.<anonymous> (/tmp/tmpk9alox_6.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, undefined ],\n  expected: [ 5 ],\n \
    \ operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  let sum = 0;\n  for(let i = 0; i < array.length;\
    \ i++){\n    sum += array[i];\n  }\n  if(sum % 2 === 0){\n    array.sort((a,b)\
    \ => a - b);\n  }else{\n    array.sort((a,b) => b - a);\n  }\n  return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpcohgzktx.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcohgzktx.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet newArray = [];\n\tfor(let i\
    \ = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tnewArray.push(array[i]);\n\
    \t}\n\tif(sum % 2 === 0){\n\t\tnewArray.sort((a,b) => a - b);\n\t}else{\n\t\t\
    newArray.sort((a,b) => b - a);\n\t}\n\treturn newArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpqeoavaj7.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqeoavaj7.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\tif(sum % 2 === 0){\n\t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\tresult.sort((a,b)\
    \ => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpq9edn9lt.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq9edn9lt.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  for(var i=0; i<array.length; i++){\n\
    \    sum += array[i];\n  }\n  if(sum%2 === 0){\n    array.sort(function(a, b){\n\
    \      return a-b;\n    });\n  }else{\n    array.sort(function(a, b){\n      return\
    \ b-a;\n    });\n  }\n  return array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpkf_izeic.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkf_izeic.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmphjs45b2a.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphjs45b2a.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpx29up_6s.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpx29up_6s.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpcf_gqaiq.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcf_gqaiq.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  var result = [];\n  for (var i\
    \ = 0; i < array.length; i++) {\n    sum += array[i];\n    result.push(array[i]);\n\
    \  }\n  if (sum % 2 === 1) {\n    result.sort(function(a, b){\n      return a\
    \ - b;\n    });\n  } else {\n    result.sort(function(a, b){\n      return b -\
    \ a;\n    });\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpaq38cow0.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpaq38cow0.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  let sum = 0;\n  for (let i = 0; i < array.length;\
    \ i++){\n    sum += array[i];\n  }\n  if (sum % 2 === 1){\n    array.sort((a,b)\
    \ => a - b);\n  } else {\n    array.sort((a,b) => b - a);\n  }\n  return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmphd4tw4pz.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphd4tw4pz.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  let sum = 0;\n  for(let i = 0; i < array.length;\
    \ i++){\n    sum += array[i];\n  }\n  if(sum % 2 === 1){\n    array.sort((a,b)\
    \ => a-b);\n  }else{\n    array.sort((a,b) => b-a);\n  }\n  return array;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp934k8z7c.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp934k8z7c.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpu8w_t27l.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpu_ylj5ui.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpu_ylj5ui.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp;\n\tfor(let i = 0; i <\
    \ array.length; i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 0){\n\t\ttemp\
    \ = array;\n\t\tarray = array.sort((a,b) => a - b);\n\t\treturn temp;\n\t}\n\t\
    else{\n\t\ttemp = array;\n\t\tarray = array.sort((a,b) => b - a);\n\t\treturn\
    \ temp;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp1q3q1_qy.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1q3q1_qy.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp;\n\tfor(let i = 0; i <\
    \ array.length; i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 1){\n\t\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\t\ttemp = array[i];\n\t\t\tarray[i] = array[array.length\
    \ - i - 1];\n\t\t\tarray[array.length - i - 1] = temp;\n\t\t}\n\t}\n\treturn array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpd4_7t61a.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpd4_7t61a.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\tif(sum % 2 === 1){\n\t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\tresult.sort((a,b)\
    \ => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpclue3219.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpclue3219.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 0){\n\t\tarray.sort((a,b)\
    \ => a - b);\n\t}else{\n\t\tarray.sort((a,b) => b - a);\n\t}\n\treturn array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpetkuol0t.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpetkuol0t.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tif(sum % 2 === 1){\n\t\
    \t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 2, 4, 4, 3, 0, 1, 1, 5 ]\n\nshould\
    \ equal\n\n[ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmphde_7qoh.js:33:10)\n   \
    \ at Object.<anonymous> (/tmp/tmphde_7qoh.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 2, 4, 4, 3,\n    0, 1, 1, 5\n  ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    var sum = 0;\n    var temp;\n    for(var i=0;i<array.length;i++){\n\
    \        sum += array[i];\n    }\n    if(sum%2 === 0){\n        temp = array;\n\
    \        array = array.sort(function(a,b){\n            return a-b;\n        });\n\
    \        array.push(temp);\n    }else{\n        temp = array;\n        array =\
    \ array.sort(function(a,b){\n            return b-a;\n        });\n        array.push(temp);\n\
    \    }\n    return array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ [Circular] ]\n\nshould equal\n\n[]\n \
    \   at test (/tmp/tmpptcdqh_g.js:38:10)\n    at Object.<anonymous> (/tmp/tmpptcdqh_g.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: <ref *1> [ [Circular *1] ],\n  expected:\
    \ [],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tif(sum % 2 === 0){\n\t\
    \t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 5 ]\n\nshould equal\n\n[ 5 ]\n    at\
    \ test (/tmp/tmp0t7uhqp7.js:32:10)\n    at Object.<anonymous> (/tmp/tmp0t7uhqp7.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, 5 ],\n  expected: [ 5 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet sortedArray = [];\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tsortedArray.push(array[i]);\n\
    \t}\n\t\n\tif(sum % 2 === 0){\n\t\tsortedArray.sort((a,b) => a - b);\n\t}else{\n\
    \t\tsortedArray.sort((a,b) => b - a);\n\t}\n\t\n\treturn sortedArray;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp7zi0gnwg.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7zi0gnwg.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    var sum = 0;\n    for(var i=0;i<array.length;i++){\n\
    \        sum += array[i];\n    }\n    if(sum%2 === 0){\n        array.sort(function(a,b){\n\
    \            return a-b;\n        });\n    }else{\n        array.sort(function(a,b){\n\
    \            return b-a;\n        });\n    }\n    return array;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp28umfgbv.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp28umfgbv.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tvar sum = 0;\n\tfor(var i=0;i<array.length;i++){\n\
    \t\tsum += array[i];\n\t}\n\tif(sum%2 === 0){\n\t\tarray.sort(function(a,b){\n\
    \t\t\treturn a-b;\n\t\t});\n\t}else{\n\t\tarray.sort(function(a,b){\n\t\t\treturn\
    \ b-a;\n\t\t});\n\t}\n\treturn array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmppw1hzesf.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppw1hzesf.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tif(sum % 2 === 1){\n\t\
    \t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 2, 4, 4, 3, 0, 1, 1, 5 ]\n\nshould\
    \ equal\n\n[ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp9uvjc37j.js:33:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp9uvjc37j.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 2, 4, 4, 3,\n    0, 1, 1, 5\n  ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet sumArray = [];\n\tlet sumArray2\
    \ = [];\n\tlet sumArray3 = [];\n\tlet sumArray4 = [];\n\tlet sumArray5 = [];\n\
    \tlet sumArray6 = [];\n\tlet sumArray7 = [];\n\tlet sumArray8 = [];\n\tlet sumArray9\
    \ = [];\n\tlet sumArray10 = [];\n\tlet sumArray11 = [];\n\tlet sumArray12 = [];\n\
    \tlet sumArray13 = [];\n\tlet sumArray14 = [];\n\tlet sumArray15 = [];\n\tlet\
    \ sumArray16 = [];\n\tlet sumArray17 = [];\n\tlet sumArray18 = [];\n\tlet sumArray19\
    \ = [];\n\tlet sumArray20 = [];\n\tlet sumArray21 = [];\n\tlet sumArray22 = [];\n\
    \tlet sumArray23 = [];\n\tlet sumArray24 = [];\n\tlet sumArray25 = [];\n\tlet\
    \ sumArray26 = [];\n\tlet sumArray27 = [];\n\tlet sumArray28 = [];\n\tlet sumArray29\
    \ = [];\n\tlet sumArray30 = [];\n\tlet sumArray31 = [];\n\tlet sumArray32 = [];\n\
    \tlet sumArray33 = [];\n\tlet sumArray34 = [];\n\tlet sumArray35 = [];\n\tlet\
    \ sumArray36 = [];\n\tlet sumArray37 = [];\n\tlet sumArray38 = [];\n\tlet sumArray39\
    \ = [];\n\tlet sumArray40 = [];\n\tlet sumArray41 = [];\n\tlet sumArray42 = [];\n\
    \tlet sumArray43 = [];\n\tlet sumArray44 = [];\n\tlet sumArray45 = [];\n\tlet\
    \ sumArray46 = [];\n\tlet sumArray47 = [];\n\tlet sumArray48 = [];\n\tlet sumArray49\
    \ = [];\n\tlet sumArray50 = [];\n\tlet sumArray51 = [];\n\tlet sumArray52 = [];\n\
    \tlet sumArray53 = [];\n\tlet sumArray54 = [];\n\tlet sumArray55 = [];\n\tlet\
    \ sumArray56 = [];\n\tlet sumArray57 = [];\n\tlet sumArray58 = [];\n\tlet sumArray59\
    \ = [];\n\tlet sumArray60 = [];\n\tlet sumArray61 = [];\n\tlet sumArray62 = [];\n\
    \tlet sumArray63 = [];\n\tlet sumArray64 = [];\n\tlet sumArray65 = [];\n\tlet\
    \ sumArray66 = [];\n\tlet sumArray67 = [];\n\tlet sumArray68 = [];\n\tlet sumArray69\
    \ = [];\n\tlet sumArray70 = [];\n\tlet sumArray7\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_a3q5ml9.js:83\n\tlet sumArray7\n\t    ^\n\nSyntaxError: Identifier\
    \ 'sumArray7' has already been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum\
    \ % 2 === 0;\n\tif(odd){\n\t\tarray.sort((a,b) => a - b);\n\t}else{\n\t\tarray.sort((a,b)\
    \ => b - a);\n\t}\n\treturn array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpr9l2gzte.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr9l2gzte.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 0){\n\t\tarray.sort((a,b)\
    \ => a-b);\n\t}else{\n\t\tarray.sort((a,b) => b-a);\n\t}\n\treturn array;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpbra6tq49.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbra6tq49.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum\
    \ % 2 === 0;\n\tif(odd){\n\t\tarray.sort((a,b) => a - b);\n\t}else{\n\t\tarray.sort((a,b)\
    \ => b - a);\n\t}\n\treturn array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpe9u14_wd.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpe9u14_wd.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpmkluj86w.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmkluj86w.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpbac17995.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbac17995.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tarray.forEach((item) => {\n\t\tsum += item;\n\t});\n\tarray.forEach((item) =>\
    \ {\n\t\ttemp = sum - item;\n\t\tif(temp % 2 === 0){\n\t\t\tresult.push(item);\n\
    \t\t}else{\n\t\t\tresult.push(item);\n\t\t}\n\t});\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpfbhkxfu7.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfbhkxfu7.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\tlet isOdd = sum % 2 === 1;\n\tlet isEven = sum % 2 === 0;\n\tif(isOdd ===\
    \ true){\n\t\tresult.sort((a, b) => a - b);\n\t}else{\n\t\tresult.sort((a, b)\
    \ => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmppdprlhs9.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppdprlhs9.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 0){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpuup_cdgb.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuup_cdgb.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\t\n\tif(sum % 2 === 0){\n\t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\t\
    result.sort((a,b) => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmprtnz1s7m.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprtnz1s7m.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tif(sum\
    \ % 2 === 1){\n\t\tfor(let i = 0; i < array.length; i++){\n\t\t\ttemp = array[i];\n\
    \t\t\tresult.push(temp);\n\t\t}\n\t\tresult.sort((a,b) => a - b);\n\t\treturn\
    \ result;\n\t}\n\telse{\n\t\tfor(let i = 0; i < array.length; i++){\n\t\t\ttemp\
    \ = array[i];\n\t\t\tresult.push(temp);\n\t\t}\n\t\tresult.sort((a,b) => b - a);\n\
    \t\treturn result;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpg7zuu8dx.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpg7zuu8dx.js:50:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpgg5errhl.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgg5errhl.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    for(let i = 0; i < array.length;\
    \ i++){\n        sum += array[i];\n    }\n    if(sum % 2 === 0){\n        array.sort((a,b)\
    \ => a - b);\n    }else{\n        array.sort((a,b) => b - a);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmprdv7jzbs.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmprdv7jzbs.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpnola540w.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpnola540w.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpqhof9ix8.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqhof9ix8.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\t\n\tif(sum % 2 === 0){\n\t\tresult.sort((a,b) => a - b);\n\t}\n\telse{\n\
    \t\tresult.sort((a,b) => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpdzm6l1e0.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpdzm6l1e0.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\t\n\tif(sum % 2 === 1){\n\t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\t\
    result.sort((a,b) => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpt7hp1i9a.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt7hp1i9a.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  for(var i=0; i<array.length; i++){\n\
    \    sum += array[i];\n  }\n  if(sum%2 === 1){\n    array.sort(function(a, b){\n\
    \      return a-b;\n    });\n  }else{\n    array.sort(function(a, b){\n      return\
    \ b-a;\n    });\n  }\n  return array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpytwn6_a_.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpytwn6_a_.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo4x46wxa.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}\n\t\telse{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpwbgo_rqw.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpwbgo_rqw.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n    let sum = 0;\n    let result = [];\n    for(let\
    \ i = 0; i < array.length; i++){\n        sum += array[i];\n        result.push(array[i]);\n\
    \    }\n    \n    if(sum % 2 === 0){\n        result.sort((a,b) => a - b);\n \
    \   }else{\n        result.sort((a,b) => b - a);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpt4565qqh.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt4565qqh.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp29jb4s3j.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp29jb4s3j.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tif(sum % 2\
    \ === 1){\n\t\t\ttemp = array[i];\n\t\t\tresult.push(temp);\n\t\t\tsum -= temp;\n\
    \t\t}\n\t\telse{\n\t\t\ttemp = array[i];\n\t\t\tresult.push(temp);\n\t\t\tsum\
    \ -= temp;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpmxx1bgox.js:38:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmxx1bgox.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = array[i];\n\t\tarray[i] = sum - temp;\n\
    \t\tsum = sum - temp;\n\t}\n\tfor(let i = 0; i < array.length; i++){\n\t\tresult.push(array[i]);\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0 ]\n\nshould equal\n\n[ 5 ]\n    at test\
    \ (/tmp/tmpom57skxb.js:35:10)\n    at Object.<anonymous> (/tmp/tmpom57skxb.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n  expected: [ 5 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}\n\t\telse{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp4a6brhxk.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4a6brhxk.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tfor(let i = 0;\
    \ i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 0){\n\t\
    \tfor(let i = 0; i < array.length; i++){\n\t\t\ttemp = array[i];\n\t\t\tarray[i]\
    \ = array[array.length - i - 1];\n\t\t\tarray[array.length - i - 1] = temp;\n\t\
    \t}\n\t}\n\treturn array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpe3i3oqbt.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpe3i3oqbt.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tif(sum % 2\
    \ === 0){\n\t\t\ttemp = array[i];\n\t\t\tresult.push(temp);\n\t\t}else{\n\t\t\t\
    result.push(array[i]);\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpa4g_xivk.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa4g_xivk.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet temp2 = 0;\n\
    \tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet temp6 = 0;\n\tlet\
    \ temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10 = 0;\n\tlet temp11\
    \ = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14 = 0;\n\tlet temp15\
    \ = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18 = 0;\n\tlet temp19\
    \ = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22 = 0;\n\tlet temp23\
    \ = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26 = 0;\n\tlet temp27\
    \ = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30 = 0;\n\tlet temp31\
    \ = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34 = 0;\n\tlet temp35\
    \ = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38 = 0;\n\tlet temp39\
    \ = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42 = 0;\n\tlet temp43\
    \ = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46 = 0;\n\tlet temp47\
    \ = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50 = 0;\n\tlet temp51\
    \ = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54 = 0;\n\tlet temp55\
    \ = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58 = 0;\n\tlet temp59\
    \ = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62 = 0;\n\tlet temp63\
    \ = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66 = 0;\n\tlet temp67\
    \ = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70 = 0;\n\tlet temp71\
    \ = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74 = 0;\n\tlet temp75\
    \ = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78 = 0;\n\tlet temp79\
    \ = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82 = 0;\n\tlet temp83\
    \ = 0;\n\tlet temp84 = 0;\n\tlet temp85 = 0;\n\tlet \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgq0k_jt4.js:113\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum;\n\t\tsum = sum - array[i];\n\
    \t\tif(sum % 2 === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(temp);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 9, 6, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp2kt4yuxr.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2kt4yuxr.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 9,\
    \ 6, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tfor(let i = 0;\
    \ i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 1){\n\t\
    \tfor(let i = 0; i < array.length; i++){\n\t\t\ttemp = array[i];\n\t\t\tarray[i]\
    \ = array[array.length - i - 1];\n\t\t\tarray[array.length - i - 1] = temp;\n\t\
    \t}\n\t}\n\treturn array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp3vihz__2.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3vihz__2.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp;\n\tfor(let i = 0; i <\
    \ array.length; i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 1){\n\t\ttemp\
    \ = array;\n\t\tarray = array.sort((a,b) => a - b);\n\t\tfor(let i = 0; i < temp.length;\
    \ i++){\n\t\t\tarray[i] = temp[i];\n\t\t}\n\t}\n\treturn array;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp0tbbt_bw.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0tbbt_bw.js:41:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 0){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpk9rcj9bm.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk9rcj9bm.js:43:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  for(var i = 0; i < array.length;\
    \ i++){\n    sum += array[i];\n  }\n  if(sum % 2 === 0){\n    array.sort();\n\
    \  }else{\n    array.sort(function(a, b){\n      return b - a;\n    });\n  }\n\
    \  return array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmppjrxrb1y.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppjrxrb1y.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet sortedArray = [];\n\tlet tempArray\
    \ = [];\n\tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\t\
    tempArray.push(array[i]);\n\t}\n\tlet sortedArrayLength = tempArray.length;\n\t\
    let sortedArraySum = sum;\n\tlet isOdd = (sortedArraySum%2 === 1);\n\tlet isEven\
    \ = (sortedArraySum%2 === 0);\n\tif(isOdd === true){\n\t\tfor(let i = 0; i < sortedArrayLength;\
    \ i++){\n\t\t\tsortedArray.push(tempArray[i]);\n\t\t}\n\t}else if(isEven === true){\n\
    \t\tfor(let i = sortedArrayLength-1; i >= 0; i--){\n\t\t\tsortedArray.push(tempArray[i]);\n\
    \t\t}\n\t}else{\n\t\tfor(let i = 0; i < sortedArrayLength; i++){\n\t\t\tsortedArray.push(tempArray[i]);\n\
    \t\t}\n\t}\n\treturn sortedArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp1znow2g_.js:46:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp1znow2g_.js:53:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tlet odd = sum % 2 === 1;\n\tlet result =\
    \ [];\n\tfor(let i = 0; i < array.length; i++){\n\t\tlet index = i;\n\t\tlet value\
    \ = array[i];\n\t\twhile(index > 0 && array[index - 1] > value){\n\t\t\tindex--;\n\
    \t\t}\n\t\tresult.push(array[index]);\n\t\tarray[index] = value;\n\t}\n\tif(odd){\n\
    \t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\tresult.sort((a,b) => b - a);\n\
    \t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1, 2, 2, 4, 4, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpbcz1ki67.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbcz1ki67.js:49:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 2,\
    \ 4, 4, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  var sum = 0;\n  for(var i=0;i<array.length;i++){\n\
    \    sum += array[i];\n  }\n  if(sum%2 === 1){\n    array.sort(function(a,b){\n\
    \      return a-b;\n    });\n  }else{\n    array.sort(function(a,b){\n      return\
    \ b-a;\n    });\n  }\n  return array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpi48ceyzc.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpi48ceyzc.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet sum2 = 0;\n\tlet temp = 0;\n\
    \tlet temp2 = 0;\n\tlet temp3 = 0;\n\tlet temp4 = 0;\n\tlet temp5 = 0;\n\tlet\
    \ temp6 = 0;\n\tlet temp7 = 0;\n\tlet temp8 = 0;\n\tlet temp9 = 0;\n\tlet temp10\
    \ = 0;\n\tlet temp11 = 0;\n\tlet temp12 = 0;\n\tlet temp13 = 0;\n\tlet temp14\
    \ = 0;\n\tlet temp15 = 0;\n\tlet temp16 = 0;\n\tlet temp17 = 0;\n\tlet temp18\
    \ = 0;\n\tlet temp19 = 0;\n\tlet temp20 = 0;\n\tlet temp21 = 0;\n\tlet temp22\
    \ = 0;\n\tlet temp23 = 0;\n\tlet temp24 = 0;\n\tlet temp25 = 0;\n\tlet temp26\
    \ = 0;\n\tlet temp27 = 0;\n\tlet temp28 = 0;\n\tlet temp29 = 0;\n\tlet temp30\
    \ = 0;\n\tlet temp31 = 0;\n\tlet temp32 = 0;\n\tlet temp33 = 0;\n\tlet temp34\
    \ = 0;\n\tlet temp35 = 0;\n\tlet temp36 = 0;\n\tlet temp37 = 0;\n\tlet temp38\
    \ = 0;\n\tlet temp39 = 0;\n\tlet temp40 = 0;\n\tlet temp41 = 0;\n\tlet temp42\
    \ = 0;\n\tlet temp43 = 0;\n\tlet temp44 = 0;\n\tlet temp45 = 0;\n\tlet temp46\
    \ = 0;\n\tlet temp47 = 0;\n\tlet temp48 = 0;\n\tlet temp49 = 0;\n\tlet temp50\
    \ = 0;\n\tlet temp51 = 0;\n\tlet temp52 = 0;\n\tlet temp53 = 0;\n\tlet temp54\
    \ = 0;\n\tlet temp55 = 0;\n\tlet temp56 = 0;\n\tlet temp57 = 0;\n\tlet temp58\
    \ = 0;\n\tlet temp59 = 0;\n\tlet temp60 = 0;\n\tlet temp61 = 0;\n\tlet temp62\
    \ = 0;\n\tlet temp63 = 0;\n\tlet temp64 = 0;\n\tlet temp65 = 0;\n\tlet temp66\
    \ = 0;\n\tlet temp67 = 0;\n\tlet temp68 = 0;\n\tlet temp69 = 0;\n\tlet temp70\
    \ = 0;\n\tlet temp71 = 0;\n\tlet temp72 = 0;\n\tlet temp73 = 0;\n\tlet temp74\
    \ = 0;\n\tlet temp75 = 0;\n\tlet temp76 = 0;\n\tlet temp77 = 0;\n\tlet temp78\
    \ = 0;\n\tlet temp79 = 0;\n\tlet temp80 = 0;\n\tlet temp81 = 0;\n\tlet temp82\
    \ = 0;\n\tlet temp83 = 0;\n\tlet temp84 = 0;\n\tlet temp\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo32guqwp.js:98\n\tlet temp\n\t    ^\n\nSyntaxError: Identifier\
    \ 'temp' has already been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\ttemp = sum - array[i];\n\t\tif(temp % 2\
    \ === 1){\n\t\t\tresult.push(array[i]);\n\t\t}else{\n\t\t\tresult.push(array[i]);\n\
    \t\t\tresult.push(array.length - 1 - i);\n\t\t}\n\t}\n\treturn result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 0 ]\n\nshould equal\n\n[ 5 ]\n    at\
    \ test (/tmp/tmpkw56eutq.js:36:10)\n    at Object.<anonymous> (/tmp/tmpkw56eutq.js:44:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 5, 0 ],\n  expected: [ 5 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet sumArray = [];\n\tlet sumArray2\
    \ = [];\n\tlet sumArray3 = [];\n\tlet sumArray4 = [];\n\tlet sumArray5 = [];\n\
    \tlet sumArray6 = [];\n\tlet sumArray7 = [];\n\tlet sumArray8 = [];\n\tlet sumArray9\
    \ = [];\n\tlet sumArray10 = [];\n\tlet sumArray11 = [];\n\tlet sumArray12 = [];\n\
    \tlet sumArray13 = [];\n\tlet sumArray14 = [];\n\tlet sumArray15 = [];\n\tlet\
    \ sumArray16 = [];\n\tlet sumArray17 = [];\n\tlet sumArray18 = [];\n\tlet sumArray19\
    \ = [];\n\tlet sumArray20 = [];\n\tlet sumArray21 = [];\n\tlet sumArray22 = [];\n\
    \tlet sumArray23 = [];\n\tlet sumArray24 = [];\n\tlet sumArray25 = [];\n\tlet\
    \ sumArray26 = [];\n\tlet sumArray27 = [];\n\tlet sumArray28 = [];\n\tlet sumArray29\
    \ = [];\n\tlet sumArray30 = [];\n\tlet sumArray31 = [];\n\tlet sumArray32 = [];\n\
    \tlet sumArray33 = [];\n\tlet sumArray34 = [];\n\tlet sumArray35 = [];\n\tlet\
    \ sumArray36 = [];\n\tlet sumArray37 = [];\n\tlet sumArray38 = [];\n\tlet sumArray39\
    \ = [];\n\tlet sumArray40 = [];\n\tlet sumArray41 = [];\n\tlet sumArray42 = [];\n\
    \tlet sumArray43 = [];\n\tlet sumArray44 = [];\n\tlet sumArray45 = [];\n\tlet\
    \ sumArray46 = [];\n\tlet sumArray47 = [];\n\tlet sumArray48 = [];\n\tlet sumArray49\
    \ = [];\n\tlet sumArray50 = [];\n\tlet sumArray51 = [];\n\tlet sumArray52 = [];\n\
    \tlet sumArray53 = [];\n\tlet sumArray54 = [];\n\tlet sumArray55 = [];\n\tlet\
    \ sumArray56 = [];\n\tlet sumArray57 = [];\n\tlet sumArray58 = [];\n\tlet sumArray59\
    \ = [];\n\tlet sumArray60 = [];\n\tlet sumArray61 = [];\n\tlet sumArray62 = [];\n\
    \tlet sumArray63 = [];\n\tlet sumArray64 = [];\n\tlet sumArray65 = [];\n\tlet\
    \ sumArray66 = [];\n\tlet sumArray67 = [];\n\tlet sumArray68 = [];\n\tlet sumArray69\
    \ = [];\n\tlet sumArray70 = [];\n\tlet sumArray7\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpadczsd01.js:83\n\tlet sumArray7\n\t    ^\n\nSyntaxError: Identifier\
    \ 'sumArray7' has already been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  let sum = 0;\n  let result = [];\n  for(let i =\
    \ 0; i < array.length; i++){\n    sum += array[i];\n  }\n  if(sum % 2 === 0){\n\
    \    result.sort((a,b) => a - b);\n  }else{\n    result.sort((a,b) => b - a);\n\
    \  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[]\n\nshould equal\n\n[ 5 ]\n    at test\
    \ (/tmp/tmp85o_3x33.js:31:10)\n    at Object.<anonymous> (/tmp/tmp85o_3x33.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [],\n  expected: [ 5 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tif(sum % 2\
    \ === 0){\n\t\t\ttemp = sum;\n\t\t\tsum = 0;\n\t\t}else{\n\t\t\tsum += array[i];\n\
    \t\t}\n\t\tresult.push(array[i]);\n\t}\n\treturn result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_array;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 4, 3, 0, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpr7wbi4jw.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7wbi4jw.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4, 3,\
    \ 0, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tlet result = [];\n\
    \tfor(let i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tif(sum % 2\
    \ === 1){\n\t\t\ttemp = array[i];\n\t\t\tresult.push(temp);\n\t\t\tsum -= temp;\n\
    \t\t}else{\n\t\t\ttemp = array[i];\n\t\t\tresult.unshift(temp);\n\t\t\tsum -=\
    \ temp;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 4, 2, 3, 1, 5 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpl92lks_r.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl92lks_r.js:44:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 4, 2,\
    \ 3, 1, 5 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet sortedArray = [];\n\tfor(let\
    \ i = 0; i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tsortedArray = array;\n\
    \tif(sum % 2 === 0){\n\t\tsortedArray.sort((a,b) => a - b);\n\t}else{\n\t\tsortedArray.sort((a,b)\
    \ => b - a);\n\t}\n\treturn sortedArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmpcr_afzhv.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcr_afzhv.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tfor(let i = 0; i < array.length;\
    \ i++){\n\t\tsum += array[i];\n\t}\n\tlet odd = sum % 2 === 1;\n\tlet even = sum\
    \ % 2 === 0;\n\tlet newArray = [];\n\tfor(let i = 0; i < array.length; i++){\n\
    \t\tnewArray.push(array[i]);\n\t}\n\tif(odd){\n\t\tnewArray.sort((a,b) => a -\
    \ b);\n\t}\n\telse{\n\t\tnewArray.sort((a,b) => b - a);\n\t}\n\treturn newArray;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmpk3nvk3_k.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk3nvk3_k.js:45:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n  let sum = 0;\n  for(let i = 0; i < array.length;\
    \ i++){\n    sum += array[i];\n  }\n  if(sum % 2 === 1){\n    array.sort((a,b)\
    \ => a - b);\n  }else{\n    array.sort((a,b) => b - a);\n  }\n  return array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 1, 2, 3, 4, 5, 6 ]\n\nshould equal\n\
    \n[ 6, 5, 4, 3, 2, 1, 0 ]\n    at test (/tmp/tmp2zxln515.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2zxln515.js:38:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    0,\
    \ 1, 2, 3,\n    4, 5, 6\n  ],\n  expected: [\n    6, 5, 4, 3,\n    2, 1, 0\n \
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet result = [];\n\tfor(let i =\
    \ 0; i < array.length; i++){\n\t\tsum += array[i];\n\t\tresult.push(array[i]);\n\
    \t}\n\tif(sum % 2 === 0){\n\t\tresult.sort((a,b) => a - b);\n\t}else{\n\t\tresult.sort((a,b)\
    \ => b - a);\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4,\
    \ 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0,\
    \ 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1,\
    \ 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32,\
    \ 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmp6j2lbddw.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6j2lbddw.js:40:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n// Note:\n\
    // * don't change the given array.\n// Examples:\n// * sort_array([]) => []\n\
    // * sort_array([5]) => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    function sort_array(array){\n\tlet sum = 0;\n\tlet temp = 0;\n\tfor(let i = 0;\
    \ i < array.length; i++){\n\t\tsum += array[i];\n\t}\n\tif(sum % 2 === 0){\n\t\
    \tarray.sort((a,b) => a - b);\n\t}else{\n\t\tarray.sort((a,b) => b - a);\n\t}\n\
    \treturn array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5]),[5]);\n\
    \  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2,\
    \ 4, 3, 0, 1, 5, 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2,\
    \ 1]),[1, 2]);\n  assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11,\
    \ 15, 32, 42, 87]);\n  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14,\
    \ 11]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 5, 4, 3, 2, 1, 0 ]\n\nshould equal\n\n\
    [ 0, 1, 2, 3, 4, 5 ]\n    at test (/tmp/tmps1ofmh4d.js:32:10)\n    at Object.<anonymous>\
    \ (/tmp/tmps1ofmh4d.js:39:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 5, 4, 3,\
    \ 2, 1, 0 ],\n  expected: [ 0, 1, 2, 3, 4, 5 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
