name: HumanEval_110_exchange
language: js
prompt: "//In this problem, you will implement a function that takes two lists of\
  \ numbers,\n// and determines whether it is possible to perform an exchange of elements\n\
  // between them to make lst1 a list of only even numbers.\n// There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n// all the elements of\
  \ lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
  // exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n// exchange([1, 2, 3, 4], [1,\
  \ 5, 3, 4]) => \"NO\"\n// It is assumed that the input lists will be non-empty.\n\
  function exchange(lst1, lst2){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = exchange;\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 2, 3, 4]),\"YES\"\
  );\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5, 3, 4]),\"NO\");\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4], [2, 1, 4, 3]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2,\
  \ 6, 4]),\"YES\");\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 3]),\"NO\");\n\
  \  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]),\"NO\");\n\
  \  assert.deepEqual(candidate([100, 200], [200, 200]),\"YES\");\n}\n\ntest();"
completions: ["    let even = []\n    for(let i = 0; i < lst1.length; i++){\n    \
    \    if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n        }\n    }\n\
    \    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n \
    \           even.push(lst2[i])\n        }\n    }\n    for(let i = 0; i < even.length;\
    \ i++){\n        if(even[i] === lst1[i]){\n            even.splice(i, 1)\n   \
    \     }\n    }\n    if(even.length === 0){\n        return \"YES\"\n    }\n  \
    \  return \"NO\"\n}\n", "\tlet even = []\n\tlet odd = []\n\tlet evenOdd = []\n\
    \tlet evenOddOdd = []\n\tlet evenOddEven = []\n\tlet evenOddEvenOdd = []\n\tlet\
    \ evenOddEvenOddOdd = []\n\tlet evenOddEvenOddEven = []\n\tlet evenOddEvenOddEvenOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddOdd = []\n\tlet evenOddEvenOddEvenOddEven =\
    \ []\n\tlet evenOddEvenOddEvenOddEvenOdd = []\n\tlet evenOddEvenOddEvenOddEvenOddOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEven = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddOdd = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = []\n\tlet\
    \ evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = []\n\
    \tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = []\n\t\
    let evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = []\n\t\
    let evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd", "  if(lst1.length == 0\
    \ || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0]\
    \ % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 !=\
    \ 0){\n    return \"NO\";\n  }\n  if(lst1[0] > lst2[0]){\n    return exchange(lst2,\
    \ lst1);\n  }\n  if(lst1[0] < lst2[0]){\n    return exchange(lst1, lst2);\n  }\n\
    }\n", "    // Your code here\n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n\
    \    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return\
    \ \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\"\
    ;\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(", "  // Your code here\n}\n", "    \n}\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes two lists of numbers, and determines whether it is\
    \ possible to perform an exchange of elements from lst1 to lst2 to make lst1 a\
    \ list of only even numbers.\nThe function should return \"YES\" if it is possible\
    \ to perform an exchange of elements from lst1 to lst2 to make lst1 a list of\
    \ only even numbers, and \"NO\" otherwise.\nFor example:\nexchange([2, 3, 4, 5],\
    \ [1, 3, 5, 7]) => \"YES\"\nexchange([2, 3, 4, 5], [1, 2, 3, 4]) => \"NO\"\nIt\
    \ is assumed that the input lists will be non-empty.\nHint: You may want to use\
    \ two pointers, one for lst1 and one for lst2, and compare the elements at each\
    \ pointer.\n\n\n</text>\n<cell>", "  if(lst1.length == 0 || lst2.length == 0){\n\
    \    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return\
    \ \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\"\
    ;\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 != 0){\n    lst1.shift();\n    lst2.shift();\n\
    \    return exchange(lst1, lst2);\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 ==\
    \ 0){\n    lst1.shift();\n    lst2.shift();\n    return exchange(lst1, lst2);\n\
    \  }\n}\n", "    // Your code here\n}\n", "    \n}\n", "\tlet even = lst1.filter(x\
    \ => x % 2 === 0);\n\tlet odd = lst2.filter(x => x % 2 === 1);\n\tlet evenOdd\
    \ = even.concat(odd);\n\tlet evenOddEven = evenOdd.filter(x => x % 2 === 0);\n\
    \tlet evenOddOdd = evenOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOdd = evenOddEven.concat(evenOddOdd);\n\
    \tlet evenOddEvenOddOdd = evenOddEvenOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddOddOdd\
    \ = evenOddEvenOddOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOdd =\
    \ evenOddEvenOddOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddOdd\
    \ = evenOddEvenOddEvenOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddEvenOddOdd\
    \ = evenOddEvenOddEvenOddEvenOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddEvenOddOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = evenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(x => x % 2 === 0);\n\t\
    let evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOdd", "  if(lst1.length ==\
    \ 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0]\
    \ % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 !=\
    \ 0){\n    return \"NO\";\n  }\n  if(lst1.length == 1 && lst2.length == 1){\n\
    \    return lst1[0] % 2 == 0 ? \"YES\" : \"NO\";\n  }\n  if(lst1.length == 2 &&\
    \ lst2.length == 2){\n    return lst1[0] % 2 == 0 ? \"YES\" : \"NO\";\n  }\n \
    \ if(lst1.length == 3 && lst2.length == 3){\n    return lst1[0] % 2 == 0 ? \"\
    YES\" : \"NO\";\n  }\n  if(lst1.length == 4 && lst2.length == 4){\n    return\
    \ lst1[0] % 2 == 0 ? \"YES\" : \"NO\";\n  }\n  if(lst1.length == 5 && lst2.length\
    \ == 5){\n    return lst1[0] % 2 == 0 ? \"YES\" : \"NO\";\n  }\n  if(lst1.length\
    \ == 6 && lst2.length == 6){\n    return lst1[0] % 2 == 0 ? \"YES\" : \"NO\";\n\
    \  }\n  if(lst1.length == 7 && lst2.length == 7){\n    return lst1[0] % 2 == 0\
    \ ? \"YES\" : \"NO\";\n  }\n  if(lst1.length == 8 && lst2.length == 8){\n    return\
    \ lst1[0] % 2 == 0 ? \"YES\" : \"NO\";\n  }\n  if(lst1.length == 9 && lst2.length\
    \ == 9){\n    return lst1[0] % 2 == 0 ? \"YES\" : \"NO\";\n  }\n  if(lst1.length\
    \ == 10 && lst2.length == 10){\n    return lst1[0] % 2 == 0 ? \"YES\" : \"NO\"\
    ;\n  }\n  if(lst1.length == 11 && lst2.length == 11){\n    return lst1[0] % 2\
    \ == 0 ? \"YES\" : \"NO\";\n  }\n  if(lst1.length == 12 && lst2.length == 12){\n\
    \    return lst1[0] % 2 == 0 ? \"YES\" : \"NO\";\n  }\n  if(lst1.length == 13\
    \ && lst2.length == 13){\n    return lst1[0] % 2 == 0 ? \"YES\" : \"NO\";\n  }\n\
    \  if(lst1.length == 14 && lst2.length == 14){\n    return lst1[0] % 2 == 0 ?\
    \ \"YES\" : \"NO\";\n  }\n  if(lst1.length == 15 && lst2.length == 15){\n    return\
    \ lst1[0] % 2 == 0 ? \"YES\" : \"NO\";\n  }\n  if(lst1.length == 16 && lst2.length\
    \ == 16){\n", "  if(lst1.length === 0 || lst2.length === 0){\n    return \"NO\"\
    ;\n  }\n  if(lst1[0] % 2 === 0 && lst2[0] % 2 === 0){\n    return \"YES\";\n \
    \ }\n  if(lst1[0] % 2 === 0 && lst2[0] % 2 !== 0){\n    return \"NO\";\n  }\n\
    \  if(lst1[0] % 2 !== 0 && lst2[0] % 2 === 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ % 2 !== 0 && lst2[0] % 2 !== 0){\n    return \"YES\";\n  }\n}\n", "\tlet even\
    \ = []\n\tlet odd = []\n\tfor(let i = 0; i < lst1.length; i++){\n\t\tif(lst1[i]\
    \ % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}\n\t\telse{\n\t\t\todd.push(lst1[i])\n\
    \t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\
    \t\t\teven.push(lst2[i])\n\t\t}\n\t\telse{\n\t\t\todd.push(lst2[i])\n\t\t}\n\t\
    }\n\tfor(let i = 0; i < even.length; i++){\n\t\tfor(let j = 0; j < even.length;\
    \ j++){\n\t\t\tif(even[i] === even[j]){\n\t\t\t\teven.splice(j, 1)\n\t\t\t\tbreak\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < odd.length; i++){\n\t\tfor(let j = 0;\
    \ j < odd.length; j++){\n\t\t\tif(odd[i] === odd[j]){\n\t\t\t\todd.splice(j, 1)\n\
    \t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tlet even2 = even.filter(x => x % 2 === 0)\n\
    \tlet odd2 = odd.filter(x => x % 2 === 0)\n\tif(even2.length === 0 && odd2.length\
    \ === 0){\n\t\treturn \"YES\"\n\t}\n\telse{\n\t\treturn \"NO\"\n\t}\n}\n", "\t\
    let even = []\n\tlet odd = []\n\tfor(let i = 0; i < lst1.length; i++){\n\t\tif(lst1[i]\
    \ % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\todd.push(lst1[i])\n\
    \t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\
    \t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\todd.push(lst2[i])\n\t\t}\n\t}\n\t\
    if(even.length === lst1.length && odd.length === lst2.length){\n\t\treturn \"\
    YES\"\n\t}else{\n\t\treturn \"NO\"\n\t}\n}\n", "}\n", "    // Your code here\n\
    }\n", "    // Your code here\n}\n", "    \n}\n", "  if(lst1.length == 0 || lst2.length\
    \ == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n\
    \    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return\
    \ \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n}\n", "    // Write your code here\n}\n", "}\n", "    // Your code here\n\
    }\n", "    // Your code here\n}\n", "    // Your code here\n}\n", "    // Your\
    \ code here\n}\n", "    \n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n\
    \    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return\
    \ \"YES\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 != 0){\n    return \"NO\"\
    ;\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 == 0){\n    return \"NO\";\n  }\n\
    \  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return \"YES\";\n  }\n}\n",
  "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 !=\
    \ 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0]\
    \ % 2 != 0){\n    lst1.shift();\n    lst2.shift();\n    return exchange(lst1,\
    \ lst2);\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 == 0){\n    lst1.shift();\n\
    \    lst2.shift();\n    return exchange(lst1, lst2);\n  }\n}\n", "  // Your code\
    \ here\n}\n", "    \n}\n", "    // Your code here\n}\n", "\t\n}\n", "    \n}\n",
  "    \n}\n", "    // Write your code here\n}\n", "    \n}\n", "    \n}\n", "   \
    \ \n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n \
    \ }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n \
    \ if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0]\
    \ > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0]\
    \ == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n  }\n}\n", "\tlet\
    \ even = lst1.filter(x => x % 2 === 0);\n\tlet odd = lst2.filter(x => x % 2 ===\
    \ 1);\n\tlet evenOdd = even.concat(odd);\n\tlet evenOddEven = evenOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddOddEven = evenOddEven.filter(x => x % 2 === 1);\n\
    \tlet evenOddEvenOdd = evenOddEvenOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEven\
    \ = evenOddEvenOddEven.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddOdd = evenOddEvenOddOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddOddEven = evenOddEvenOddOddEven.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddOddOdd = evenOddEvenOddOddOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddOddOddEven = evenOddEvenOddOddOddEven.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddOddOddOdd = evenOddEvenOddOddOddOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddOddOddOddEven = evenOddEvenOddOddOddOddEven.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddOddOddOddOdd = evenOddEvenOddOddOddOddOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddEven.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddOddOddOddOddOdd = evenOddEvenOddOddOddOddOddOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddOddOddEven.filter(x ",
  "\t\n}\n", "    let even = []\n    let odds = []\n    for(let i = 0; i < lst1.length;\
    \ i++){\n        if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n    \
    \    } else {\n            odds.push(lst1[i])\n        }\n    }\n    for(let i\
    \ = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i])\n\
    \        } else {\n            odds.push(lst2[i])\n        }\n    }\n    if(even.length\
    \ === lst1.length){\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\"\
    ;\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n\
    \  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0]\
    \ < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0]\
    \ == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n  }\n}\n", "    //\
    \ Your code here\n}\n", "    // Your code here\n}\n", "    \n}\n</cell>\n<cell>",
  "    \n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n\
    \  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n\
    \  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0]\
    \ < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0]\
    \ == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n  }\n}\n", "    \n\
    }\n", "    // Your code here\n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n\
    \    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return\
    \ \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\"\
    ;\n  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n}\n", "  if(lst1.length === 0 || lst2.length === 0){\n    return \"NO\"\
    ;\n  }\n  if(lst1[0] % 2 === 0 && lst2[0] % 2 === 0){\n    return \"YES\";\n \
    \ }\n  if(lst1[0] % 2 === 0 && lst2[0] % 2 !== 0){\n    return \"NO\";\n  }\n\
    \  if(lst1[0] % 2 !== 0 && lst2[0] % 2 === 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ % 2 !== 0 && lst2[0] % 2 !== 0){\n    return \"YES\";\n  }\n}\n", "  if(lst1.length\
    \ == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 &&\
    \ lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0]\
    \ % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 !=\
    \ 0){\n    exchange(lst1.slice(1), lst2.slice(1));\n    return \"YES\";\n  }\n\
    \  if(lst1[0] % 2 != 0 && lst2[0] % 2 == 0){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \    return \"YES\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n    return \"YES\";\n  }\n}\n", "  if(lst1.length == 0 || lst2.length\
    \ == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n\
    \    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return\
    \ \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(", "    \n}\n", "    // Your code here\n}\n", "    // Your code here\n\
    }\n", "  // Write your code here\n}\n", "    // Your code here\n}\n", "  if(lst1.length\
    \ == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 &&\
    \ lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0]\
    \ % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n}\n", "  // Your code here\n}\n", "\t\n}\n", "    \n}\n",
  "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 !=\
    \ 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] > lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n}\n", "\tlet even = []\n\tlet odds = []\n\tfor(let\
    \ i = 0; i < lst1.length; i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\
    \t\t}else{\n\t\t\todds.push(lst1[i])\n\t\t}\n\t}\n\tfor(let i = 0; i < lst2.length;\
    \ i++){\n\t\tif(lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\
    \todds.push(lst2[i])\n\t\t}\n\t}\n\tlet evenLength = Math.floor(even.length /\
    \ 2)\n\tlet oddsLength = Math.floor(odds.length / 2)\n\tlet evenSum = 0\n\tlet\
    \ oddsSum = 0\n\tfor(let i = 0; i < even.length; i++){\n\t\tevenSum += even[i]\n\
    \t}\n\tfor(let i = 0; i < odds.length; i++){\n\t\toddsSum += odds[i]\n\t}\n\t\
    if(evenSum === evenLength && oddsSum === oddsLength){\n\t\treturn \"YES\"\n\t\
    }else{\n\t\treturn \"NO\"\n\t}\n}\n", "  if(lst1.length == 0 || lst2.length ==\
    \ 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n\
    \    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return\
    \ \"NO\";\n  }\n  if(lst1.length == 1){\n    return exchange(lst2, lst1);\n  }\n\
    \  if(lst2.length == 1){\n    return exchange(lst1, lst2);\n  }\n  if(lst1[0]\
    \ % 2 == 0 && lst2[0] % 2 != 0){\n    return exchange(lst1, lst2.slice(1));\n\
    \  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 == 0){\n    return exchange(lst1.slice(1),\
    \ lst2);\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return\
    \ exchange(lst1, lst2.slice(1));\n  }\n}\n", "  if(lst1.length == 0 || lst2.length\
    \ == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n\
    \    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return\
    \ \"NO\";\n  }\n  if(lst1[0] > lst2[0]){\n    return exchange(lst2, lst1);\n \
    \ }\n  if(lst1[0] < lst2[0]){\n    return exchange(lst1, lst2);\n  }\n}\n", " \
    \   let even = []\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i]\
    \ % 2 === 0){\n            even.push(lst1[i])\n        }\n    }\n    for(let i\
    \ = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i])\n\
    \        }\n    }\n    if(even.length === lst1.length){\n        return \"YES\"\
    \n    }\n    return \"NO\"\n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n\
    \    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return\
    \ \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\"\
    ;\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n\
    \  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n\
    \  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1.length\
    \ == 1){\n    return exchange(lst2, lst1);\n  }\n  if(lst2.length == 1){\n   \
    \ return exchange(lst1, lst2);\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 != 0){\n\
    \    return exchange(lst1, lst2.slice(1));\n  }\n  if(lst1[0] % 2 != 0 && lst2[0]\
    \ % 2 == 0){\n    return exchange(lst2.slice(1), lst1);\n  }\n}\n", "    \n}\n",
  "    \n}\n", "    \n}\n", "    // Your code here\n}\n", "    \n}\n", "    // Your\
    \ code here\n}\n", "\tlet even = lst1.filter(x => x % 2 === 0);\n\tlet odd = lst2.filter(x\
    \ => x % 2 === 1);\n\tlet evenOdd = even.concat(odd);\n\tlet evenOddEven = evenOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddOddEven = evenOddEven.filter(x => x % 2 === 1);\n\
    \tlet evenOddEvenOdd = evenOddEvenOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddEven\
    \ = evenOddEvenOddEven.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddOdd = evenOddEvenOddOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddEvenOdd = evenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEven = evenOddEvenOddEvenOddOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEven.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOd", " \
    \ if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 !=\
    \ 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] > lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] < lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n}\n", "    // Your code here\n\
    }\n", "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n\
    \  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0]\
    \ % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] > lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] < lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n}\n", "    \n}\n", "  if(lst1.length\
    \ == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] == lst2[0]){\n\
    \    return exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] > lst2[0]){\n\
    \    return exchange(lst1.slice(1), lst2);\n  }\n  if(lst1[0] < lst2[0]){\n  \
    \  return exchange(lst1, lst2.slice(1));\n  }\n}\n", "    // Your code here\n\
    }\n", "    // Your code here\n}\n", "    // Your code here\n}\n", "    // Your\
    \ code here\n}\n", "    \n}\n", "    \n}\n", "    \n}\n", "    // Your code here\n\
    }\n</cell>\n<cell>", "    \n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n\
    \    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return\
    \ \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\"\
    ;\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n}\n", "\tlet even = []\n\tlet odds = []\n\tfor(let i = 0; i < lst1.length;\
    \ i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\
    \todds.push(lst1[i])\n\t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\t\
    if(lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\todds.push(lst2[i])\n\
    \t\t}\n\t}\n\tfor(let i = 0; i < even.length; i++){\n\t\tfor(let j = 0; j < even.length;\
    \ j++){\n\t\t\tif(even[i] === even[j]){\n\t\t\t\teven.splice(j, 1)\n\t\t\t\tbreak\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < odds.length; i++){\n\t\tfor(let j =\
    \ 0; j < odds.length; j++){\n\t\t\tif(odds[i] === odds[j]){\n\t\t\t\todds.splice(j,\
    \ 1)\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tif(even.length === 0){\n\t\treturn\
    \ \"NO\"\n\t}else{\n\t\treturn \"YES\"\n\t}\n}\n", "    // Write your code here\n\
    }\n", "}\n", "    // Your code here\n}\n", "\tlet even = []\n\tlet odd = []\n\t\
    for(let i = 0; i < lst1.length; i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\
    \t\t}\n\t\telse{\n\t\t\todd.push(lst1[i])\n\t\t}\n\t}\n\tfor(let i = 0; i < lst2.length;\
    \ i++){\n\t\tif(lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i])\n\t\t}\n\t\telse{\n\
    \t\t\todd.push(lst2[i])\n\t\t}\n\t}\n\tlet evenLength = even.length\n\tlet oddLength\
    \ = odd.length\n\tlet evenSum = 0\n\tlet oddSum = 0\n\tfor(let i = 0; i < evenLength;\
    \ i++){\n\t\tevenSum += even[i]\n\t}\n\tfor(let i = 0; i < oddLength; i++){\n\t\
    \toddSum += odd[i]\n\t}\n\tif(evenSum === oddSum){\n\t\treturn \"YES\"\n\t}\n\t\
    else{\n\t\treturn \"NO\"\n\t}\n}\n", "    // Your code here\n}\n</cell>\n<cell>",
  "    \n}\n", "    let even = lst1.filter(x => x % 2 === 0);\n    let odd = lst2.filter(x\
    \ => x % 2 === 1);\n    let evenOdd = even.concat(odd);\n    let evenOddEven =\
    \ evenOdd.filter(x => x % 2 === 0);\n    let evenOddOdd = evenOdd.filter(x =>\
    \ x % 2 === 1);\n    let evenOddEvenOdd = evenOddEven.filter(x => x % 2 === 0);\n\
    \    let evenOddEvenOddOdd = evenOddEvenOdd.filter(x => x % 2 === 1);\n    let\
    \ evenOddEvenOddEvenOdd = evenOddEvenOddOdd.filter(x => x % 2 === 0);\n    let\
    \ evenOddEvenOddEvenOddOdd = evenOddEvenOddOddEvenOdd.filter(x => x % 2 === 1);\n\
    \    let evenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddOdd.filter(x => x\
    \ % 2 === 0);\n    let evenOddEvenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEvenOddOdd.filter(x\
    \ => x % 2 === 1);\n    let evenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddOddEvenOdd.filter(x\
    \ => x % 2 === 0);\n    let evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd.filter(x\
    \ => x % 2 === 1);\n    let evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd.filter(x => x % 2\
    \ === 0);\n    let evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd =\
    \ evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 === 1);\n    let evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOd",
  "    // Your code here\n}\n", "\tlet even = lst1.filter(x => x % 2 === 0);\n\tlet\
    \ odd = lst2.filter(x => x % 2 === 1);\n\tlet evenOdd = even.concat(odd);\n\t\
    let evenOddEven = evenOdd.filter(x => x % 2 === 0);\n\tlet evenOddOdd = evenOdd.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOdd = evenOddEven.concat(evenOddOdd);\n\t\
    let evenOddEvenOddEven = evenOddEvenOdd.filter(x => x % 2 === 0);\n\tlet evenOddEvenOddOdd\
    \ = evenOddEvenOdd.filter(x => x % 2 === 1);\n\tlet evenOddEvenOddEvenOdd = evenOddEvenOddEven.concat(evenOddEvenOddOdd);\n\
    \tlet evenOddEvenOddEvenOddEven = evenOddEvenOddEvenOdd.filter(x => x % 2 ===\
    \ 0);\n\tlet evenOddEvenOddEvenOdd = evenOddEvenOddEvenOdd.filter(x => x % 2 ===\
    \ 1);\n\tlet evenOddEvenOddEvenOddEven = evenOddEvenOddEvenOddEven.concat(evenOddEvenOddEvenOddOdd);\n\
    \tlet evenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEven.filter(x => x % 2 ===\
    \ 0);\n\tlet evenOddEvenOddEvenOdd = evenOddEvenOddEvenOdd.filter(x => x % 2 ===\
    \ 1);\n\tlet evenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOdd.concat(evenOddEvenOddEvenOddOdd);\n\
    \tlet evenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOdd.filter(x =>\
    \ x % 2 === 0);\n\tlet evenOddEvenOddEvenOdd = evenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddEvenOddEvenOdd = evenOddEvenOddEvenOddEvenOdd.concat(evenOddEvenOddEvenOddOdd);\n\
    \tlet evenOdd", "    // Your code here\n}\n", "    var even = []\n    var odd\
    \  = []\n    \n    for(var i = 0; i<lst1.length; i++){\n        if(lst1[i] % 2\
    \ === 0){\n            even.push(lst1[i])\n        }else{\n            odd.push(lst1[i])\n\
    \        }\n    }\n    \n    for(var i = 0; i<lst2.length; i++){\n        if(lst2[i]\
    \ % 2 === 0){\n            even.push(lst2[i])\n        }else{\n            odd.push(lst2[i])\n\
    \        }\n    }\n    \n    for(var i = 0; i<even.length; i++){\n        for(var\
    \ j = 0; j<odd.length; j++){\n            if(even[i] === odd[j]){\n          \
    \      even.splice(i, 1)\n                odd.splice(j, 1)\n            }\n  \
    \      }\n    }\n    \n    if(even.length === 0){\n        return \"NO\"\n   \
    \ }else{\n        return \"YES\"\n    }\n}\n", "  if(lst1.length == 0 || lst2.length\
    \ == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n\
    \    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return\
    \ \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n}\n", "    let even = []\n    for(let i = 0; i < lst1.length; i++){\n  \
    \      if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n        }\n   \
    \ }\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n\
    \            even.push(lst2[i])\n        }\n    }\n    even.sort()\n    for(let\
    \ i = 0; i < even.length; i++){\n        if(even[i] !== lst1[i] && even[i] !==\
    \ lst2[i]){\n            return \"NO\"\n        }\n    }\n    return \"YES\"\n\
    }\n", "    // Your code here\n}\n", "    // Your code here\n}\n</cell>\n<cell>",
  "    \n}\n", "    // Your code here\n}\n", "    // Your code here\n}\n</cell>\n\
    <cell>", "    let even = []\n    let odd = []\n    for(let i = 0; i < lst1.length;\
    \ i++){\n        if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n    \
    \    }else{\n            odd.push(lst1[i])\n        }\n    }\n    for(let i =\
    \ 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i])\n\
    \        }else{\n            odd.push(lst2[i])\n        }\n    }\n    if(even.length\
    \ === lst1.length){\n        return \"YES\"\n    }else{\n        return \"NO\"\
    \n    }\n}\n", "    // Your code here\n}\n</cell>\n<cell>", "  // Your code here\n\
    }\n", "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n\
    \  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0]\
    \ % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1.length ==\
    \ 1 && lst2.length == 1){\n    return \"NO\";\n  }\n  if(lst1.length == 2 && lst2.length\
    \ == 2){\n    return \"YES\";\n  }\n  if(lst1.length == 3 && lst2.length == 3){\n\
    \    return \"YES\";\n  }\n  if(lst1.length == 4 && lst2.length == 4){\n    return\
    \ \"YES\";\n  }\n  if(lst1.length == 5 && lst2.length == 5){\n    return \"YES\"\
    ;\n  }\n  if(lst1.length == 6 && lst2.length == 6){\n    return \"YES\";\n  }\n\
    \  if(lst1.length == 7 && lst2.length == 7){\n    return \"YES\";\n  }\n  if(lst1.length\
    \ == 8 && lst2.length == 8){\n    return \"YES\";\n  }\n  if(lst1.length == 9\
    \ && lst2.length == 9){\n    return \"YES\";\n  }\n  if(lst1.length == 10 && lst2.length\
    \ == 10){\n    return \"YES\";\n  }\n  if(lst1.length == 11 && lst2.length ==\
    \ 11){\n    return \"YES\";\n  }\n  if(lst1.length == 12 && lst2.length == 12){\n\
    \    return \"YES\";\n  }\n  if(lst1.length == 13 && lst2.length == 13){\n   \
    \ return \"YES\";\n  }\n  if(lst1.length == 14 && lst2.length == 14){\n    return\
    \ \"YES\";\n  }\n  if(lst1.length == 15 && lst2.length == 15){\n    return \"\
    YES\";\n  }\n  if(lst1.length == 16 && lst2.length == 16){\n    return \"YES\"\
    ;\n  }\n  if(lst1.length == 17 && lst2.length == 17){\n    return \"YES\";\n \
    \ }\n  if(lst1.length == 18 && lst2.length == 18){\n    return \"YES\";\n  }\n\
    \  if(lst1.length == 19 && lst2.length == 19){\n    return \"YES\";\n  }\n  if(lst1.length\
    \ == 20 && lst2.length == 20){\n    return \"YES\";\n  }\n  if(lst1.length ==\
    \ 21 && lst2.length == 21){\n    return \"YES\";\n  }\n  if(lst1.length == 22\
    \ && lst2.length == 22){\n    return \"YES\";\n  }\n  if(lst1.", "    \n}\n",
  "}\n", "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n \
    \ if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0]\
    \ % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1.length ==\
    \ 1){\n    return exchange(lst2, lst1);\n  }\n  if(lst2.length == 1){\n    return\
    \ exchange(lst1, lst2);\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 != 0){\n  \
    \  return exchange(lst1, lst2);\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 ==\
    \ 0){\n    return exchange(lst1, lst2);\n  }\n  if(lst1[0] % 2 == 0 && lst2[0]\
    \ % 2 == 0){\n    return exchange(lst1, lst2);\n  }\n  if(lst1[0] % 2 != 0 &&\
    \ lst2[0] % 2 != 0){\n    return exchange(lst1, lst2);\n  }\n}\n", "    // Your\
    \ code here\n}\n", "    // Your code here\n}\n</cell>\n<cell>", "    // Your code\
    \ here\n}\n</cell>\n<cell>", "\tlet even = []\n\tlet odd = []\n\tlet evenOdd =\
    \ []\n\tlet evenOddOdd = []\n\tlet evenOddEven = []\n\tlet evenOddEvenOdd = []\n\
    \tlet evenOddEvenOddOdd = []\n\tlet evenOddEvenOddEven = []\n\tlet evenOddEvenOddEvenOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddOdd = []\n\tlet evenOddEvenOddEvenOddEven =\
    \ []\n\tlet evenOddEvenOddEvenOddEvenOdd = []\n\tlet evenOddEvenOddEvenOddEvenOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddOdd = []\n\tlet evenOddEvenOddEvenOddEvenOddEven\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOdd = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddOdd = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEven\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = []\n\t\
    let evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddOdd\
    \ = []\n\tlet evenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEvenOddEven",
  "    // Your code here\n}\n", "  if(lst1.length === 0 || lst2.length === 0){\n \
    \   return \"NO\";\n  }\n  if(lst1[0] % 2 === 0 && lst2[0] % 2 === 0){\n    return\
    \ \"YES\";\n  }\n  if(lst1[0] % 2 === 0 && lst2[0] % 2 !== 0){\n    return \"\
    NO\";\n  }\n  if(lst1[0] % 2 !== 0 && lst2[0] % 2 === 0){\n    return \"NO\";\n\
    \  }\n  if(lst1[0] % 2 !== 0 && lst2[0] % 2 !== 0){\n    return \"YES\";\n  }\n\
    }\n", "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n\
    \  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0]\
    \ % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] > lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n}\n", "  if(lst1.length ==\
    \ 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0]\
    \ % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 !=\
    \ 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 == 0){\n\
    \    return \"NO\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return\
    \ \"YES\";\n  }\n}\n", "    // Your code here\n}\n", "}\n", "    \n}\n", "  if(lst1.length\
    \ === 0 || lst2.length === 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 ===\
    \ 0 && lst2[0] % 2 === 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 === 0 &&\
    \ lst2[0] % 2 !== 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 !== 0 && lst2[0]\
    \ % 2 === 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 !== 0 && lst2[0] % 2\
    \ !== 0){\n    return \"YES\";\n  }\n}\n", "  if(lst1.length == 0 || lst2.length\
    \ == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n\
    \    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return\
    \ \"NO\";\n  }\n  if(lst1.length == 1){\n    return exchange(lst2, lst1);\n  }\n\
    \  if(lst2.length == 1){\n    return exchange(lst1, lst2);\n  }\n  if(lst1[0]\
    \ % 2 == 0 && lst2[0] % 2 != 0){\n    return exchange(lst2, lst1);\n  }\n  if(lst1[0]\
    \ % 2 != 0 && lst2[0] % 2 == 0){\n    return exchange(lst1, lst2);\n  }\n  if(lst1[0]\
    \ % 2 == 0 && lst2[0] % 2 == 0){\n    return exchange(lst2, lst1);\n  }\n  if(lst1[0]\
    \ % 2 != 0 && lst2[0] % 2 != 0){\n    return exchange(lst1, lst2);\n  }\n}\n",
  "    // Your code here\n}\n", "  // Your code here\n}\n", "  if(lst1.length == 0\
    \ || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0]\
    \ % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 !=\
    \ 0){\n    return \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n}\n", "    // Your code here\n}\n", "    var even = []\n\
    \    var odd = []\n    for(var i = 0; i<lst1.length; i++){\n        if(lst1[i]%2\
    \ === 0){\n            even.push(lst1[i])\n        }else{\n            odd.push(lst1[i])\n\
    \        }\n    }\n    for(var i = 0; i<lst2.length; i++){\n        if(lst2[i]%2\
    \ === 0){\n            even.push(lst2[i])\n        }else{\n            odd.push(lst2[i])\n\
    \        }\n    }\n    if(even.length === lst1.length && even.length === lst2.length){\n\
    \        return \"YES\"\n    }\n    if(odd.length === lst1.length && odd.length\
    \ === lst2.length){\n        return \"NO\"\n    }\n}\n", "\tlet even = []\n\t\
    let odd = []\n\tfor(let i = 0; i < lst1.length; i++){\n\t\tif(lst1[i] % 2 ===\
    \ 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\todd.push(lst1[i])\n\t\t}\n\t\
    }\n\tfor(let i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\t\t\t\
    even.push(lst2[i])\n\t\t}else{\n\t\t\todd.push(lst2[i])\n\t\t}\n\t}\n\tfor(let\
    \ i = 0; i < even.length; i++){\n\t\tfor(let j = 0; j < odd.length; j++){\n\t\t\
    \tif(even[i] === odd[j]){\n\t\t\t\teven.splice(i, 1)\n\t\t\t\todd.splice(j, 1)\n\
    \t\t\t\ti--\n\t\t\t\tj--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < even.length;\
    \ i++){\n\t\tfor(let j = 0; j < even.length; j++){\n\t\t\tif(even[i] === even[j]){\n\
    \t\t\t\teven.splice(i, 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let\
    \ i = 0; i < odd.length; i++){\n\t\tfor(let j = 0; j < odd.length; j++){\n\t\t\
    \tif(odd[i] === odd[j]){\n\t\t\t\todd.splice(i, 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\
    \t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < even.length; i++){\n\t\tfor(let j =\
    \ 0; j < even.length; j++){\n\t\t\tif(even[i] === even[j]){\n\t\t\t\teven.splice(i,\
    \ 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < odd.length;\
    \ i++){\n\t\tfor(let j = 0; j < odd.length; j++){\n\t\t\tif(odd[i] === odd[j]){\n\
    \t\t\t\todd.splice(i, 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let\
    \ i = 0; i < even.length; i++){\n\t\tfor(let j = 0; j < even.length; j++){\n\t\
    \t\tif(even[i] === even[j]){\n\t\t\t\teven.splice(i, 1)\n\t\t\t\ti--\n\t\t\t\t\
    j--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < odd.length; i++){\n\t\tfor(let\
    \ j = 0; j < odd.length; j++){\n\t\t\tif(odd[i] === odd[j]){\n\t\t\t\todd.splice(i,\
    \ 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < even.length;\
    \ i++){\n\t\tfor(let j = 0; j < even.length; j++){\n\t\t\tif(even[i] === even[j]){\n\
    \t\t\t\teven.splice(i, 1)\n\t\t\t\ti--\n\t\t\t\tj--\n\t\t\t}\n\t\t}\n\t}\n\tfor(let\
    \ i = 0; i < odd.length; i++){\n\t\tfor(let j = 0; j < odd.length; j", "  if(lst1.length\
    \ == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 &&\
    \ lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0]\
    \ % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n}\n", "\tlet even = []\n\tlet odd = []\n\tlet evenCount\
    \ = 0\n\tlet oddCount = 0\n\tfor (let i = 0; i < lst1.length; i++){\n\t\tif (lst1[i]\
    \ % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t\tevenCount++\n\t\t}\n\t\telse{\n\
    \t\t\todd.push(lst1[i])\n\t\t\toddCount++\n\t\t}\n\t}\n\tfor (let i = 0; i < lst2.length;\
    \ i++){\n\t\tif (lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i])\n\t\t\tevenCount++\n\
    \t\t}\n\t\telse{\n\t\t\todd.push(lst2[i])\n\t\t\toddCount++\n\t\t}\n\t}\n\tif\
    \ (evenCount === lst1.length){\n\t\treturn \"YES\"\n\t}\n\tif (oddCount === lst2.length){\n\
    \t\treturn \"YES\"\n\t}\n\tfor (let i = 0; i < even.length; i++){\n\t\tfor (let\
    \ j = 0; j < odd.length; j++){\n\t\t\tif (even[i] === odd[j]){\n\t\t\t\teven.splice(i,\
    \ 1)\n\t\t\t\tevenCount--\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tfor (let i =\
    \ 0; i < odd.length; i++){\n\t\tfor (let j = 0; j < even.length; j++){\n\t\t\t\
    if (odd[i] === even[j]){\n\t\t\t\todd.splice(i, 1)\n\t\t\t\toddCount--\n\t\t\t\
    \tbreak\n\t\t\t}\n\t\t}\n\t}\n\tif (evenCount === 0){\n\t\treturn \"NO\"\n\t}\n\
    \tif (oddCount === 0){\n\t\treturn \"NO\"\n\t}\n\tfor (let i = 0; i < even.length;\
    \ i++){\n\t\tfor (let j = 0; j < odd.length; j++){\n\t\t\tif (even[i] === odd[j]){\n\
    \t\t\t\teven.splice(i, 1)\n\t\t\t\tevenCount--\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\
    \t}\n\tfor (let i = 0; i < odd.length; i++){\n\t\tfor (let j = 0; j < even.length;\
    \ j++){\n\t\t\tif (odd[i] === even[j]){\n\t\t\t\todd.splice(i, 1)\n\t\t\t\toddCount--\n\
    \t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tif (evenCount === 0){\n\t\treturn \"NO\"\
    \n\t}\n\tif (oddCount === 0){\n\t\treturn \"NO\"\n\t}\n\tfor (let i = 0; i < even.length;\
    \ i++){\n\t\tfor (let j = 0; j < odd.length; j++){\n\t\t\tif (even[i] === odd[j]){\n\
    \t\t\t\teven.splice(i, 1)\n\t\t\t\tevenCount--\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\
    \t}\n\tfor (let i = 0; i < odd.length; i++){\n\t\tfor (let j = 0; j < even.length;\
    \ j++){\n\t\t\tif (odd[i] === even[j]){\n\t\t\t\todd.splice(i, 1)\n\t\t\t\toddCount--\n\
    \t\t\t\tbreak\n\t\t\t}\n\t\t}\n", "    let even = []\n    let odds = []\n    for(let\
    \ i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n\
    \        }else{\n            odds.push(lst1[i])\n        }\n    }\n    for(let\
    \ i = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i])\n\
    \        }else{\n            odds.push(lst2[i])\n        }\n    }\n    if(even.length\
    \ === lst1.length){\n        return \"YES\"\n    }else{\n        return \"NO\"\
    \n    }\n}\n", "\tlet even = []\n\tlet odd = []\n\tfor(let i = 0; i < lst1.length;\
    \ i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\
    \todd.push(lst1[i])\n\t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\t\
    if(lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\todd.push(lst2[i])\n\
    \t\t}\n\t}\n\tlet even2 = even.concat(odd)\n\tlet even3 = even2.filter(function(el){\n\
    \t\treturn el % 2 === 0\n\t})\n\tlet even4 = even3.filter(function(el){\n\t\t\
    return el % 2 !== 0\n\t})\n\tlet even5 = even4.filter(function(el){\n\t\treturn\
    \ el % 2 === 0\n\t})\n\tlet even6 = even5.filter(function(el){\n\t\treturn el\
    \ % 2 !== 0\n\t})\n\tlet even7 = even6.filter(function(el){\n\t\treturn el % 2\
    \ === 0\n\t})\n\tlet even8 = even7.filter(function(el){\n\t\treturn el % 2 !==\
    \ 0\n\t})\n\tlet even9 = even8.filter(function(el){\n\t\treturn el % 2 === 0\n\
    \t})\n\tlet even10 = even9.filter(function(el){\n\t\treturn el % 2 !== 0\n\t})\n\
    \tlet even11 = even10.filter(function(el){\n\t\treturn el % 2 === 0\n\t})\n\t\
    let even12 = even11.filter(function(el){\n\t\treturn el % 2 !== 0\n\t})\n\tlet\
    \ even13 = even12.filter(function(el){\n\t\treturn el % 2 === 0\n\t})\n\tlet even14\
    \ = even13.filter(function(el){\n\t\treturn el % 2 !== 0\n\t})\n\tlet even15 =\
    \ even14.filter(function(el){\n\t\treturn el % 2 === 0\n\t})\n\tlet even16 = even15.filter(function(el){\n\
    \t\treturn el % 2 !== 0\n\t})\n\tlet even17 = even16.filter(function(el){\n\t\t\
    return el % 2 === 0\n\t})\n\tlet even18 = even17.filter(function(el){\n\t\treturn\
    \ el % 2 !== 0\n\t})\n\tlet even19 = even18.filter(function(el){\n\t\treturn el\
    \ % 2 === 0\n\t})\n\tlet even20 = even19.filter(function(el){\n\t\treturn el %\
    \ 2 !== 0\n\t})\n\tlet even21 = even20.filter(function(el){\n\t\treturn el % 2\
    \ === 0\n\t", "  if(lst1.length != lst2.length){\n    return \"NO\";\n  }\n  if(lst1.length\
    \ == 0){\n    return \"NO\";\n  }\n  if(lst2.length == 0){\n    return \"NO\"\
    ;\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n\
    \  if(lst1[0] % 2 == 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ % 2 != 0 && lst2[0] % 2 == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 !=\
    \ 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n}\n", "    // Write your code\
    \ here\n}\n", "  // Your code here\n}\n", "    // Your code here\n}\n", "\t\n\
    }\n", "    // Your code here\n}\n", "\tlet even = []\n\tlet odds = []\n\tfor (let\
    \ i = 0; i < lst1.length; i++){\n\t\tif (lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\
    \t\t}else{\n\t\t\todds.push(lst1[i])\n\t\t}\n\t}\n\tfor (let i = 0; i < lst2.length;\
    \ i++){\n\t\tif (lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i])\n\t\t}else{\n\t\
    \t\todds.push(lst2[i])\n\t\t}\n\t}\n\tlet even2 = even.concat(odds)\n\tlet even3\
    \ = even2.filter(x => x % 2 === 0)\n\tlet even4 = even3.filter(x => x % 2 !==\
    \ 0)\n\tlet even5 = even4.filter(x => x % 2 === 0)\n\tlet even6 = even5.filter(x\
    \ => x % 2 !== 0)\n\tlet even7 = even6.filter(x => x % 2 === 0)\n\tlet even8 =\
    \ even7.filter(x => x % 2 !== 0)\n\tlet even9 = even8.filter(x => x % 2 === 0)\n\
    \tlet even10 = even9.filter(x => x % 2 !== 0)\n\tlet even11 = even10.filter(x\
    \ => x % 2 === 0)\n\tlet even12 = even11.filter(x => x % 2 !== 0)\n\tlet even13\
    \ = even12.filter(x => x % 2 === 0)\n\tlet even14 = even13.filter(x => x % 2 !==\
    \ 0)\n\tlet even15 = even14.filter(x => x % 2 === 0)\n\tlet even16 = even15.filter(x\
    \ => x % 2 !== 0)\n\tlet even17 = even16.filter(x => x % 2 === 0)\n\tlet even18\
    \ = even17.filter(x => x % 2 !== 0)\n\tlet even19 = even18.filter(x => x % 2 ===\
    \ 0)\n\tlet even20 = even19.filter(x => x % 2 !== 0)\n\tlet even21 = even20.filter(x\
    \ => x % 2 === 0)\n\tlet even22 = even21.filter(x => x % 2 !== 0)\n\tlet even23\
    \ = even22.filter(x => x % 2 === 0)\n\tlet even24 = even23.filter(x => x % 2 !==\
    \ 0)\n\tlet even25 = even24.filter(x => x % 2 === 0)\n\tlet even26 = even25.filter(x\
    \ => x % 2 !== 0)\n\tlet even27 = even26.filter(x => x % 2 === 0)\n\tlet even28\
    \ = even27.filter(x => x % 2 !== 0)\n", "\tlet even = []\n\tlet odds = []\n\t\
    let evens = []\n\tlet oddss = []\n\tfor(let i = 0; i < lst1.length; i++){\n\t\t\
    if(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\todds.push(lst1[i])\n\
    \t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\
    \t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\todds.push(lst2[i])\n\t\t}\n\t}\n\t\
    for(let i = 0; i < even.length; i++){\n\t\tfor(let j = 0; j < even.length; j++){\n\
    \t\t\tif(even[i] === even[j]){\n\t\t\t\tevenss.push(even[i])\n\t\t\t}\n\t\t}\n\
    \t}\n\tfor(let i = 0; i < odds.length; i++){\n\t\tfor(let j = 0; j < odds.length;\
    \ j++){\n\t\t\tif(odds[i] === odds[j]){\n\t\t\t\toddss.push(odds[i])\n\t\t\t}\n\
    \t\t}\n\t}\n\tlet evens = evenss.filter(x => x % 2 === 0)\n\tlet odds = oddss.filter(x\
    \ => x % 2 !== 0)\n\tlet even = evens.filter(x => x % 2 === 0)\n\tlet odd = odds.filter(x\
    \ => x % 2 !== 0)\n\tif(even.length === evenss.length){\n\t\treturn \"YES\"\n\t\
    }else{\n\t\treturn \"NO\"\n\t}\n}\n", "  if(lst1.length == 0 || lst2.length ==\
    \ 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n\
    \    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return\
    \ \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n\
    \  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n\
    \  if(lst1[0] % 2 == 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ % 2 != 0 && lst2[0] % 2 == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 !=\
    \ 0 && lst2[0] % 2 != 0){\n    return \"YES\";\n  }\n}\n", "    // Your code here\n\
    }\n", "    \n}\n", "    \n}\n", "    let even = lst1.filter(x => x % 2 === 0);\n\
    \    let odd = lst2.filter(x => x % 2 === 1);\n    let evenOdd = even.concat(odd);\n\
    \    let evenOddEven = evenOdd.filter(x => x % 2 === 0);\n    let evenOddOdd =\
    \ evenOdd.filter(x => x % 2 === 1);\n    let evenOddEvenOdd = evenOddEven.concat(evenOddOdd);\n\
    \    let evenOddEvenOddEven = evenOddEvenOdd.filter(x => x % 2 === 0);\n    let\
    \ evenOddEvenOddOdd = evenOddEvenOdd.filter(x => x % 2 === 1);\n    let evenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEven.concat(evenOddEvenOddOdd);\n    let evenOddEvenOddEvenOddEven\
    \ = evenOddEvenOddEvenOdd.filter(x => x % 2 === 0);\n    let evenOddEvenOddEvenOddOdd\
    \ = evenOddEvenOddEvenOdd.filter(x => x % 2 === 1);\n    let evenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddEven.concat(evenOddEvenOddEvenOddOdd);\n    let evenOddEvenOddEvenOddEvenOddEven\
    \ = evenOddEvenOddEvenOddEvenOdd.filter(x => x % 2 === 0);\n    let evenOddEvenOddEvenOddEvenOddOdd\
    \ = evenOddEvenOddEvenOddEvenOdd.filter(x => x % 2 === 1);\n    let evenOddEvenOddEvenOddEvenOddEvenOdd\
    \ = evenOddEvenOddEvenOddEvenOddEven.concat(evenOddEvenOddEvenOddEvenOddOdd);\n\
    \    let evenOddEvenOddEvenOddEvenOddEvenOddEven = evenOddEvenOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 === 0);\n    let evenOddEvenOddEvenOddEvenOddEvenOddOdd = evenOddEvenOddEvenOddEvenOddEvenOdd.filter(x\
    \ => x % 2 === 1);\n    let evenOddEvenOddEvenOddEvenOddEvenOddEvenOdd = ", " \
    \ if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 !=\
    \ 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] > lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n}\n", "    // Write your code\
    \ here\n}\n", "\tlet even = []\n\tlet odds = []\n\tfor(let i = 0; i < lst1.length;\
    \ i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\
    \todds.push(lst1[i])\n\t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\t\
    if(lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\todds.push(lst2[i])\n\
    \t\t}\n\t}\n\tlet evens = even.concat(odds)\n\tfor(let i = 0; i < evens.length;\
    \ i++){\n\t\tif(evens[i] % 2 === 0){\n\t\t\tevens.splice(i, 1)\n\t\t}\n\t}\n\t\
    for(let i = 0; i < evens.length; i++){\n\t\tif(evens[i] % 2 === 0){\n\t\t\tevens.splice(i,\
    \ 1)\n\t\t}\n\t}\n\tif(evens.length === 0){\n\t\treturn \"YES\"\n\t}else{\n\t\t\
    return \"NO\"\n\t}\n}\n", "    \n}\n", "    // Your code here\n}\n", "\tlet even\
    \ = []\n\tlet odd = []\n\tfor(let i = 0; i < lst1.length; i++){\n\t\tif(lst1[i]\
    \ % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\todd.push(lst1[i])\n\
    \t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\
    \t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\todd.push(lst2[i])\n\t\t}\n\t}\n\t\
    for(let i = 0; i < even.length; i++){\n\t\tfor(let j = 0; j < even.length; j++){\n\
    \t\t\tif(even[i] === even[j]){\n\t\t\t\teven.splice(j, 1)\n\t\t\t\tbreak\n\t\t\
    \t}\n\t\t}\n\t}\n\tfor(let i = 0; i < odd.length; i++){\n\t\tfor(let j = 0; j\
    \ < odd.length; j++){\n\t\t\tif(odd[i] === odd[j]){\n\t\t\t\todd.splice(j, 1)\n\
    \t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\tlet result = even.length > 0 && odd.length\
    \ > 0\n\treturn result\n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n \
    \   return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return\
    \ \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return \"NO\"\
    ;\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n}\n", "    // Write your code here\n}\n", "\tlet even = [];\n\tlet odds\
    \ = [];\n\tlet evenCount = 0;\n\tlet oddCount = 0;\n\tfor (let i = 0; i < lst1.length;\
    \ i++){\n\t\tif (lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i]);\n\t\t\tevenCount++;\n\
    \t\t}\n\t\telse {\n\t\t\todds.push(lst1[i]);\n\t\t\toddCount++;\n\t\t}\n\t}\n\t\
    for (let i = 0; i < lst2.length; i++){\n\t\tif (lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i]);\n\
    \t\t\tevenCount++;\n\t\t}\n\t\telse {\n\t\t\todds.push(lst2[i]);\n\t\t\toddCount++;\n\
    \t\t}\n\t}\n\tif (evenCount === even.length && oddCount === odds.length){\n\t\t\
    return \"YES\";\n\t}\n\telse {\n\t\treturn \"NO\";\n\t}\n}\n", "    \n}\n", " \
    \   // Write your code here\n}\n", "\t\n}\n", "\tlet even = [];\n\tlet odd = [];\n\
    \tfor(let i = 0; i < lst1.length; i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i]);\n\
    \t\t}else{\n\t\t\todd.push(lst1[i]);\n\t\t}\n\t}\n\tfor(let i = 0; i < lst2.length;\
    \ i++){\n\t\tif(lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i]);\n\t\t}else{\n\t\
    \t\todd.push(lst2[i]);\n\t\t}\n\t}\n\tlet even1 = even.sort();\n\tlet odd1 = odd.sort();\n\
    \tlet even2 = even1.concat(odd1);\n\tlet odd2 = even2.filter(function(elem, index,\
    \ arr){\n\t\treturn arr.indexOf(elem) === index;\n\t});\n\tlet even3 = even2.filter(function(elem,\
    \ index, arr){\n\t\treturn arr.indexOf(elem) === index;\n\t});\n\tlet odd3 = odd2.filter(function(elem,\
    \ index, arr){\n\t\treturn arr.indexOf(elem) === index;\n\t});\n\tlet even4 =\
    \ even3.filter(function(elem, index, arr){\n\t\treturn arr.indexOf(elem) === index;\n\
    \t});\n\tlet odd4 = odd3.filter(function(elem, index, arr){\n\t\treturn arr.indexOf(elem)\
    \ === index;\n\t});\n\tlet even5 = even4.filter(function(elem, index, arr){\n\t\
    \treturn arr.indexOf(elem) === index;\n\t});\n\tlet odd5 = odd4.filter(function(elem,\
    \ index, arr){\n\t\treturn arr.indexOf(elem) === index;\n\t});\n\tlet even6 =\
    \ even5.filter(function(elem, index, arr){\n\t\treturn arr.indexOf(elem) === index;\n\
    \t});\n\tlet odd6 = odd5.filter(function(elem, index, arr){\n\t\treturn arr.indexOf(elem)\
    \ === index;\n\t});\n\tlet even7 = even6.filter(function(elem, index, arr){\n\t\
    \treturn arr.indexOf(elem) === index;\n\t});\n\tlet odd7 = odd6.filter(function(elem,\
    \ index, arr){\n\t\treturn arr.indexOf(elem) === index;\n\t});\n\tlet even8 =\
    \ even7.filter(function(elem, index, arr){\n\t\treturn arr.indexOf(elem) === index;\n\
    \t});\n\tlet odd8 = odd7.filter(function(elem, index, arr){\n\t\treturn arr.indexOf(elem)\
    \ === index;\n\t});\n\tlet even9 = even8.filter(function(elem, index, arr){\n\t\
    \treturn arr.indexOf(elem) === index;\n\t});\n\tlet odd9 = odd8.filter(function(elem,\
    \ index, arr){\n\t\treturn arr.indexOf(elem) === index;\n\t});\n\tlet even10 =\
    \ even9.filter(function(elem, index, arr){\n\t\treturn arr.indexOf(elem) === index;\n\
    \t});\n\tlet odd10 = odd9.filter(function(elem, index, arr){\n\t\treturn arr.indexOf(elem)\
    \ === index;\n\t});\n\tlet even11 = even10.filter(function(elem, index, arr){\n",
  "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 !=\
    \ 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] > lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n\
    \    exchange(lst1.slice(1), lst2.slice(1));\n  }\n}\n", "    \n}\n", "  if(lst1.length\
    \ == 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 &&\
    \ lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0]\
    \ % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n}\n", "    \n}\n", "\tlet even = []\n\tlet odds = []\n\
    \tlet evenCount = 0\n\tlet oddCount = 0\n\tfor(let i = 0; i < lst1.length; i++){\n\
    \t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t\tevenCount++\n\t\t\
    }\n\t\telse{\n\t\t\todds.push(lst1[i])\n\t\t\toddCount++\n\t\t}\n\t}\n\tfor(let\
    \ i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i])\n\
    \t\t\tevenCount++\n\t\t}\n\t\telse{\n\t\t\todds.push(lst2[i])\n\t\t\toddCount++\n\
    \t\t}\n\t}\n\tif(evenCount === even.length){\n\t\treturn \"YES\"\n\t}\n\telse\
    \ if(oddCount === odds.length){\n\t\treturn \"NO\"\n\t}\n\telse{\n\t\treturn exchange(even,\
    \ odds)\n\t}\n}\n", "    // Your code here\n}\n", "    // Your code here\n}\n",
  "\tlet even = []\n\tlet odds = []\n\tfor(let i = 0; i < lst1.length; i++){\n\t\t\
    if(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\t\t}else{\n\t\t\todds.push(lst1[i])\n\
    \t\t}\n\t}\n\tfor(let i = 0; i < lst2.length; i++){\n\t\tif(lst2[i] % 2 === 0){\n\
    \t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\todds.push(lst2[i])\n\t\t}\n\t}\n\t\
    for(let i = 0; i < even.length; i++){\n\t\tfor(let j = 0; j < even.length; j++){\n\
    \t\t\tif(even[i] === even[j]){\n\t\t\t\tif(even[i] % 2 === 0){\n\t\t\t\t\teven.splice(j,\
    \ 1)\n\t\t\t\t}else{\n\t\t\t\t\todds.splice(j, 1)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\
    \t}\n\tfor(let i = 0; i < odds.length; i++){\n\t\tfor(let j = 0; j < odds.length;\
    \ j++){\n\t\t\tif(odds[i] === odds[j]){\n\t\t\t\tif(odds[i] % 2 === 0){\n\t\t\t\
    \t\todds.splice(j, 1)\n\t\t\t\t}else{\n\t\t\t\t\teven.splice(j, 1)\n\t\t\t\t}\n\
    \t\t\t}\n\t\t}\n\t}\n\tif(even.length === 0){\n\t\treturn \"NO\"\n\t}else{\n\t\
    \treturn \"YES\"\n\t}\n}\n", "\tlet even = []\n\tlet odds = []\n\tfor(let i =\
    \ 0; i < lst1.length; i++){\n\t\tif(lst1[i] % 2 === 0){\n\t\t\teven.push(lst1[i])\n\
    \t\t}else{\n\t\t\todds.push(lst1[i])\n\t\t}\n\t}\n\tfor(let i = 0; i < lst2.length;\
    \ i++){\n\t\tif(lst2[i] % 2 === 0){\n\t\t\teven.push(lst2[i])\n\t\t}else{\n\t\t\
    \todds.push(lst2[i])\n\t\t}\n\t}\n\tfor(let i = 0; i < even.length; i++){\n\t\t\
    for(let j = 0; j < even.length; j++){\n\t\t\tif(even[i] === even[j]){\n\t\t\t\t\
    if(even[i] % 2 === 0){\n\t\t\t\t\teven.splice(j, 1)\n\t\t\t\t}else{\n\t\t\t\t\t\
    odds.splice(j, 1)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor(let i = 0; i < odds.length;\
    \ i++){\n\t\tfor(let j = 0; j < odds.length; j++){\n\t\t\tif(odds[i] === odds[j]){\n\
    \t\t\t\tif(odds[i] % 2 === 0){\n\t\t\t\t\todds.splice(j, 1)\n\t\t\t\t}else{\n\t\
    \t\t\t\teven.splice(j, 1)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tlet result = even.length\
    \ === lst1.length && even.length === lst2.length\n\treturn result ? \"YES\" :\
    \ \"NO\"\n}\n", "    \n}\n", "    // Your code here\n}\n", "  if(lst1.length ==\
    \ 0 || lst2.length == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0]\
    \ % 2 == 0){\n    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 !=\
    \ 0){\n    return \"NO\";\n  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1),\
    \ lst2.slice(1));\n  }\n}\n", "    \n}\n", "    let even = [];\n    let odds =\
    \ [];\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n\
    \            even.push(lst1[i]);\n        }else{\n            odds.push(lst1[i]);\n\
    \        }\n    }\n    for(let i = 0; i < lst2.length; i++){\n        if(lst2[i]\
    \ % 2 === 0){\n            even.push(lst2[i]);\n        }else{\n            odds.push(lst2[i]);\n\
    \        }\n    }\n    for(let i = 0; i < even.length; i++){\n        for(let\
    \ j = 0; j < even.length; j++){\n            if(even[i] === even[j]){\n      \
    \          even.splice(j, 1);\n            }\n        }\n    }\n    for(let i\
    \ = 0; i < odds.length; i++){\n        for(let j = 0; j < odds.length; j++){\n\
    \            if(odds[i] === odds[j]){\n                odds.splice(j, 1);\n  \
    \          }\n        }\n    }\n    if(even.length === 0){\n        return \"\
    YES\";\n    }else{\n        return \"NO\";\n    }\n}\n", "    \n}\n", "    //\
    \ Your code here\n}\n", "    // Your code here\n}\n", "    // Your code here\n\
    }\n", "    // Write your code here\n}\n", "\tlet even = lst1.filter(x => x % 2\
    \ === 0);\n\tlet odd = lst2.filter(x => x % 2 === 1);\n\tlet evenOdd = even.concat(odd);\n\
    \tlet evenOddEven = evenOdd.filter(x => x % 2 === 0);\n\tlet evenOddOddEven =\
    \ evenOddEven.filter(x => x % 2 === 1);\n\tlet evenOddEvenOdd = evenOddEvenOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddEven = evenOddEvenOddEven.filter(x =>\
    \ x % 2 === 1);\n\tlet evenOddEvenOddOdd = evenOddEvenOddOdd.filter(x => x % 2\
    \ === 0);\n\tlet evenOddEvenOddEvenOdd = evenOddEvenOddEvenOdd.filter(x => x %\
    \ 2 === 1);\n\tlet evenOddEvenOddOddEven = evenOddEvenOddOddEven.filter(x => x\
    \ % 2 === 0);\n\tlet evenOddEvenOddOddEvenOdd = evenOddEvenOddOddEvenOddEven.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddOddOddEven = evenOddEvenOddOddOddEvenOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddOddOddEvenOdd = evenOddEvenOddOddOddEvenOddEven.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddOddOddOddEven = evenOddEvenOddOddOddOddEvenOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddOddOddOddEvenOdd = evenOddEvenOddOddOddOddEvenOddEven.filter(x\
    \ => x % 2 === 1);\n\tlet evenOddEvenOddOddOddOddOddEven = evenOddEvenOddOddOddOddOddEvenOdd.filter(x\
    \ => x % 2 === 0);\n\tlet evenOddEvenOddOddOddOddOddEvenOdd = evenOddEvenOddOddOddOddOddOddEvenOddEven.",
  "    let even = []\n    for(let i = 0; i < lst1.length; i++){\n        if(lst1[i]\
    \ % 2 === 0){\n            even.push(lst1[i])\n        }\n    }\n    for(let i\
    \ = 0; i < lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i])\n\
    \        }\n    }\n    if(even.length === lst1.length){\n        return \"YES\"\
    \n    }else{\n        return \"NO\"\n    }\n}\n", "    // Your code here\n}\n",
  "    let even = []\n    let odds = []\n    for(let i = 0; i < lst1.length; i++){\n\
    \        if(lst1[i] % 2 === 0){\n            even.push(lst1[i])\n        }else{\n\
    \            odds.push(lst1[i])\n        }\n    }\n    for(let i = 0; i < lst2.length;\
    \ i++){\n        if(lst2[i] % 2 === 0){\n            even.push(lst2[i])\n    \
    \    }else{\n            odds.push(lst2[i])\n        }\n    }\n    for(let i =\
    \ 0; i < even.length; i++){\n        if(even[i] !== odds[i]){\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n", "    // Your code here\n\
    }\n", "  // Your code here\n}\n", "    \n}\n", "  if(lst1.length == 0 || lst2.length\
    \ == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n\
    \    return \"YES\";\n  }\n  if(lst1[0] % 2 != 0 && lst2[0] % 2 != 0){\n    return\
    \ \"NO\";\n  }\n  if(lst1[0] < lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] > lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n  if(lst1[0] == lst2[0]){\n    exchange(lst1.slice(1), lst2.slice(1));\n\
    \  }\n}\n", "  if(lst1.length == 0 || lst2.length == 0){\n    return \"NO\";\n\
    \  }\n  if(lst1[0] % 2 == 0 && lst2[0] % 2 == 0){\n    return \"YES\";\n  }\n\
    \  if(lst1[0] % 2 == 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n  if(lst1[0]\
    \ % 2 != 0 && lst2[0] % 2 == 0){\n    return \"NO\";\n  }\n  if(lst1[0] % 2 !=\
    \ 0 && lst2[0] % 2 != 0){\n    return \"NO\";\n  }\n}\n", "  // Your code here\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
