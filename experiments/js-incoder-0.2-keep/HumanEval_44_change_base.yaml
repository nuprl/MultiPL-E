name: HumanEval_44_change_base
language: js
prompt: "//Change numerical base of input number x to base.\n// return string representation\
  \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
  \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n//\
  \ '111'\nfunction change_base(x, base){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
  \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
  \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
  \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
  \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
  \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
  \ 8),\"7\");\n}\n\ntest();"
completions: ["    var r = \"\";\n    var digits = \"\";\n    var sign = \"\";\n \
    \   var i = 0;\n    var j = 0;\n    var k = 0;\n    var z = 0;\n    var basedigits\
    \ = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    var basedigits_length = basedigits.length;\n\
    \    var basedigits_length_max = basedigits_length - 1;\n    var basedigits_length_min\
    \ = basedigits_length - 2;\n    var basedigits_length_max_minus_1 = basedigits_length\
    \ - 1;\n    var basedigits_length_max_minus_2 = basedigits_length - 2;\n    var\
    \ basedigits_length_max_minus_3 = basedigits_length - 3;\n    var basedigits_length_max_minus_4\
    \ = basedigits_length - 4;\n    var basedigits_length_max_minus_5 = basedigits_length\
    \ - 5;\n    var basedigits_length_max_minus_6 = basedigits_length - 6;\n    var\
    \ basedigits_length_max_minus_7 = basedigits_length - 7;\n    var basedigits_length_max_minus_8\
    \ = basedigits_length - 8;\n    var basedigits_length_max_minus_9 = basedigits_length\
    \ - 9;\n    var basedigits_length_max_minus_10 = basedigits_length - 10;\n   \
    \ var basedigits_length_max_minus_11 = basedigits_length - 11;\n    var basedigits_length_max_minus_12\
    \ = basedigits_length - 12;\n    var basedigits_length_max_minus_13 = basedigits_length\
    \ - 13;\n    var basedigits_length_max_minus_14 = basedigits_length - 14;\n  \
    \  var basedigits_length_max_minus_15 = basedigits_length - 15;\n    var basedigits_length_max_minus_16\
    \ = basedigits_length - 16;\n    var basedigits_length_max_minus_17 = basedigits_length\
    \ - 17;\n    var basedigits_length_max_minus_18 = basedigits_length - 18;\n  \
    \  var basedigits_length_max_minus_19 = basedigits_length - 19;\n    var basedigits_length_max_minus_20\
    \ = basedigits_length - 20;\n    var basedigits_length_max_minus_21 = basedigits_length\
    \ - 21;\n    var basedigits_length_max_minus_22 = basedigits_length - 22;\n  \
    \  var basedigits_length_max_minus_23 = basedigits_length - 23;\n    var basedigits_length_max_minus_24\
    \ = basedigits_length - 24;\n    var basedigits_length_max_minus_25 = basedigits_length\
    \ - 25;\n    var basedigits_length_max_minus_26 = basedigits_length - 26;\n  \
    \  var basedigits_length_max_minus_27 = basedigits_length - 27;\n    var ", " \
    \   var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n  \
    \      x = -x;\n    }\n    while (x != 0){\n        r = base_digit[x % base] +\
    \ r;\n        x = Math.floor(x / base);\n    }\n    return sign*r;\n}\n", "\t\
    var digits = x.toString().split('');\n\tvar new_digits = '';\n\tvar carry = 0;\n\
    \tfor(var i = 0; i < digits.length; i++){\n\t\tvar digit = digits[i];\n\t\tvar\
    \ digitVal = digitToNumber(digit);\n\t\tvar newVal = digitVal + carry;\n\t\tcarry\
    \ = (newVal / base);\n\t\tnewVal = newVal % base;\n\t\tnew_digits = digitVal +\
    \ newVal;\n\t}\n\twhile(carry){\n\t\tnew_digits = carry + new_digits;\n\t\tcarry\
    \ = 0;\n\t}\n\tnew_digits = new_digits + digits[digits.length - 1];\n\treturn\
    \ new_digits;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n\
    \    while(m >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n\
    \    }\n    r = m%10 + r + String(m%10);\n    return sign*(r+\"\");\n}\n", " \
    \   var r = \"\";\n    var i;\n    for(i = base; (x/base) > 1; i--){\n       \
    \ x = (x/base) | 0;\n        r += String(x);\n    }\n    return r;\n}\n", "  \
    \  var r = \"\";\n    var negative = false;\n    if (x < 0){\n        negative\
    \ = true;\n        x = -x;\n    }\n    while (x >= base){\n        r = base_digits[base]\
    \ + r;\n        x -= base;\n    }\n    r = base_digits[base] + r + base_digits[base];\n\
    \    if (negative){\n        r = \"-\" + r;\n    }\n    return r;\n}\n", "   \
    \ var r = \"\";\n    var s = \"\";\n    var m = 1;\n    var n = x;\n    var baseNum\
    \ = base;\n    while(n > 0){\n        r = base_digits[n%baseNum] + r;\n      \
    \  s = base_digits[n%baseNum] + s;\n        n = (n-(n%baseNum))/baseNum;\n   \
    \ }\n    return r + s;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x\
    \ < 0){\n        sign = -1;\n        x = -x;\n    }\n    while(x != 0){\n    \
    \    r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n  \
    \  return sign*r;\n}\n", "\tvar r = \"\";\n\tvar num = Math.abs(x);\n\tvar bnum\
    \ = Math.abs(base);\n\twhile(bnum > 0){\n\t\tif(bnum % 2 === 1){\n\t\t\tr += num\
    \ % base;\n\t\t}\n\t\tnum = Math.floor(num / base);\n\t\tbnum--;\n\t}\n\treturn\
    \ r;\n}\n", "    var r = \"\";\n    var s = x.toString();\n    var m = s.length;\n\
    \    var l = (base*m);\n    var i = 0;\n    while(i < l){\n        r += s.charAt(i);\n\
    \        i++;\n    }\n    return r;\n}\n", "\tvar r = \"\";\n\twhile(x > 0){\n\
    \t\tvar m = x % base;\n\t\tr = base_digits[m] + r;\n\t\tx = Math.floor(x / base);\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n\
    \        sign = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n \
    \   var x_len = x_str.length;\n    if (x_len > base){\n        base = x_len;\n\
    \    }\n    var div = Math.pow(base,x_len);\n    for (var i = x_len - 1; i >=\
    \ 0; i--){\n        var rem = x_str.length % base;\n        var digit = parseInt(x_str.substr(x_len\
    \ - rem,x_len - rem), 10);\n        digit = digit*sign;\n        r += digit;\n\
    \        if (i < x_len - 1){\n            r += x_str.charAt(i);\n        }\n \
    \   }\n    return r;\n}\n", "\tvar digits = x.toString(base).split('').reverse();\n\
    \twhile(digits.length < base){\n\t\tdigits.push('0');\n\t}\n\treturn digits.reverse().join('');\n\
    }\n", "    var r = \"\";\n    var sign = 1;\n    var m = 1;\n    var i = 0;\n\
    \    while(i < x.length){\n        var c = x.charAt(i);\n        if(c >= \"0\"\
    \ && c <= \"9\"){\n            m += c.charCodeAt(0) - \"0\".charCodeAt(0);\n \
    \       }else{\n            m += c.charCodeAt(0) - \"a\".charCodeAt(0);\n    \
    \    }\n        i++;\n    }\n    while(m >= base){\n        m /= base;\n     \
    \   i++;\n    }\n    while(m > 0){\n        r = m + r;\n        m -= base;\n \
    \   }\n    if(sign){\n        r = r + base;\n    }\n    return r;\n}\n", "   \
    \ var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n    \
    \    x = -x;\n    }\n    while(x != 0){\n        r = base_digits[x%base] + r;\n\
    \        x = Math.floor(x/base);\n    }\n    return sign*r;\n}\n", "\tvar r =\
    \ \"\";\n\tvar num = Math.abs(x);\n\tvar b = 0;\n\twhile(num > 0){\n\t\tr = num\
    \ % base;\n\t\tnum = Math.floor(num / base);\n\t\tb++;\n\t}\n\tif(b > 0){\n\t\t\
    while(b > 0){\n\t\t\tr = base.toString() + r;\n\t\t\tb--;\n\t\t}\n\t}\n\treturn\
    \ r;\n}\n", "\tvar r = \"\";\n\t\n\twhile(x >= base){\n\t\tr = base_digits[base]\
    \ + r;\n\t\tx = Math.floor(x / base);\n\t}\n\t\n\tr = base_digits[base] + r;\n\
    \t\n\treturn r;\n}\n", "    var r = \"\";\n    var n = x;\n    while (n > 0){\n\
    \        r = base_digits[n % base] + r;\n        n = Math.floor(n / base);\n \
    \   }\n    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x <\
    \ 0){\n        sign = -1;\n        x = -x;\n    }\n    while (x >= base){\n  \
    \      r = base_digits[(x % base)];\n        x = Math.floor(x / base);\n    }\n\
    \    r = base_digits[(x % base)];\n    r += sign * x;\n    return r;\n}\n", " \
    \   var r = \"\";\n    while(x>0){\n        r = base_digits[x%base] + r;\n   \
    \     x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var r = \"\";\n\
    \    var negative = false;\n    if (x < 0){\n        negative = true;\n      \
    \  x = -x;\n    }\n    while (x != 0){\n        r = base_digits[x%base] + r;\n\
    \        x = Math.floor(x/base);\n    }\n    if (negative){\n        r = \"-\"\
    \ + r;\n    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n  \
    \  var m = Math.pow(base,x);\n    while(m >= 10){\n        r = m%10 + r + String(m%10);\n\
    \        m = Math.floor(m*sign);\n        sign = sign*-1;\n    }\n    return m\
    \ + r;\n}\n", "    var r = \"\";\n    var sign = \"\";\n    var m = Math.pow(base,x);\n\
    \    while(m >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m/10);\n\
    \    }\n    if(m != 0){\n        r = m%10 + r + String(m%10);\n    }\n    sign\
    \ = x < 0 ? \"-\" : \"\";\n    return sign + r;\n}\n", "    var r = \"\";\n  \
    \  var sign = 1;\n    if(x<0){\n        sign = -1;\n        x = -x;\n    }\n \
    \   while(x>0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return sign*r;\n}\n", "\tvar baseNum = base;\n\tvar baseStr = \"\"\
    ;\n\twhile(baseNum > 0){\n\t\tbaseNum = baseNum / 10;\n\t\tbaseStr = baseNum.toString()\
    \ + baseStr;\n\t}\n\treturn baseStr + x.toString();\n}\n", "\tvar r = \"\";\n\t\
    while(x != 0){\n\t\tr = base_digits[x % base] + r;\n\t\tx = Math.floor(x / base);\n\
    \t}\n\treturn r;\n}\n", "\tvar digits = x.toString(base).split(\"\");\n\tdigits\
    \ = digits.reverse();\n\tdigits.reverse();\n\treturn digits.join(\"\");\n}\n",
  "    var r = \"\";\n    var negative = false;\n    if (x < 0){\n        negative\
    \ = true;\n        x = -x;\n    }\n    while (x >= base){\n        r = base_digits[base]\
    \ + r;\n        x = x % base;\n        base = base * 10;\n    }\n    if (x !=\
    \ 0){\n        r = base_digits[base] + r;\n    }\n    if (negative){\n       \
    \ r = \"-\" + r;\n    }\n    return r;\n}\n", "    var r = \"\";\n    var sign\
    \ = \"\";\n    if(x == 0){\n        r += \"0\";\n    }\n    else if(x<0){\n  \
    \      sign = \"-\";\n        x = Math.abs(x);\n    }\n    while(x != 0){\n  \
    \      r = ((x % base) + base) + r;\n        x = Math.floor(x/base);\n    }\n\
    \    if(sign != \"\"){\n        r = sign + r;\n    }\n    return r;\n}\n", " \
    \   var r = \"\";\n    var digits = \"\";\n    while(x >= base){\n        digits\
    \ = digits+x;\n        x = x/base;\n    }\n    while(x != 0){\n        r = r+digits[x/base];\n\
    \        x = x%base;\n    }\n    return r;\n}\n", "\tvar baseNum = base;\n\tvar\
    \ baseStr = '';\n\twhile(baseNum > 0){\n\t\tbaseStr = base_map[baseNum % base]\
    \ + baseStr;\n\t\tbaseNum = Math.floor(baseNum / base);\n\t}\n\treturn baseStr\
    \ + base_map[baseNum];\n}\n", "\tvar digits = x.toString(base);\n\tvar zeros =\
    \ \"\";\n\twhile (digits.length < base){\n\t\tzeros += \"0\";\n\t}\n\treturn zeros\
    \ + digits;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n  \
    \      sign = -1;\n        x = -x;\n    }\n    while (x >= base){\n        r =\
    \ base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n    return\
    \ sign*r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var sign = 1;\n    if(x<0){\n        sign = -1;\n        x =\
    \ -x;\n    }\n    while(x >= base){\n        r = base_digits[base] + r;\n    \
    \    x -= base;\n    }\n    r = base_digits[base] + r + base_digits[base];\n \
    \   return sign*r;\n}\n", "\tvar r = \"\";\n\twhile(x >= base){\n\t\tr = base_digits[base]\
    \ + r;\n\t\tx -= base;\n\t}\n\treturn base_digits[base] + r;\n}\n", "\tvar r =\
    \ \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x % base] + r;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "    var r = \"\"\
    ;\n    var sign = 1;\n    if(x<0){\n        sign = -1;\n        x = -x;\n    }\n\
    \    while(x != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return sign*r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "    var r = \"\"\
    ;\n    while(x>0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "\tvar digits = x.toString().split('');\n\tvar new_digits\
    \ = [];\n\tfor(var i = 0; i < digits.length; i++){\n\t\tnew_digits[i] = parseInt(digits[i],\
    \ base);\n\t}\n\treturn new_digits.reverse().join('');\n}\n", "    var r = \"\"\
    ;\n    var sign = 1;\n    var m = 1;\n    var i = 0;\n    while(i < x.length){\n\
    \        var c = x.charAt(i);\n        if(c < \"0\" || c > \"9\"){\n         \
    \   r += c;\n        }else{\n            m += c.charCodeAt(0) - \"0\";\n     \
    \       i += 1;\n            while(i < x.length && x.charAt(i) < \"0\" || x.charAt(i)\
    \ > \"9\"){\n                r += x.charAt(i);\n                i += 1;\n    \
    \        }\n        }\n    }\n    while(m >= base){\n        m /= base;\n    \
    \    i++;\n    }\n    if(m > 0){\n        r += m * sign;\n    }\n    return r;\n\
    }\n", "    var r = \"\";\n    while(x != 0){\n        r = base_table[base] + r;\n\
    \        x = x % base;\n    }\n    return r;\n}\n", "\tvar digits = x.toString(base).split(\"\
    \");\n\tfor(var i = 0; i < digits.length; i++){\n\t\tdigits[i] = parseInt(digits[i],\
    \ base);\n\t}\n\treturn digits.reverse().join(\"\");\n}\n", "    var r = \"\"\
    ;\n    var sign = \"\";\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n\
    \    }\n    if (x < base){\n        r = x;\n    }else{\n        var y = Math.pow(base,\
    \ x);\n        r = parseInt(y);\n    }\n    return sign + r;\n}\n", "    var r\
    \ = \"\";\n    var negative = false;\n    if (x < 0){\n        negative = true;\n\
    \        x = -x;\n    }\n    while (x >= base){\n        r = base_digits[base]\
    \ + r;\n        x = x % base;\n        base = base * 10;\n    }\n    if (x !=\
    \ 0){\n        r = base_digits[base] + r;\n    }\n    if (negative){\n       \
    \ r = \"-\" + r;\n    }\n    return r;\n}\n", "    var r = \"\";\n    var sign\
    \ = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n    if (base\
    \ < 2 || base > 36){\n        console.log(\"Base must be between 2 and 36\");\n\
    \        return \"\";\n    }\n    if (base == 10){\n        r += x;\n    }\n \
    \   else{\n        var digits = \"\";\n        while (x != 0){\n            var\
    \ digit = x % base;\n            digits = digits[digit] + digits;\n          \
    \  x = Math.floor(x / base);\n        }\n        r = digits;\n    }\n    return\
    \ sign * r;\n}\n", "    var r = \"\";\n    var digits = \"\";\n    var sign =\
    \ \"\";\n    var negative = false;\n    var i = 0;\n    var j = 0;\n    var k\
    \ = 0;\n    var z = 0;\n    var basedigits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    var basedigits_length = basedigits.length;\n    \n    x = Math.abs(x);\n\
    \    \n    if (x < 0){\n        negative = true;\n        x = -x;\n    }\n   \
    \ \n    while (x >= base){\n        digits = basedigits.substr(k, 1);\n      \
    \  j = basedigits_length - 1;\n        \n        while (j >= 0){\n           \
    \ z = x % base;\n            x = Math.floor(x / base);\n            z = z * basedigits\
    \ + digits;\n            digits = digits;\n            k = j--;\n        }\n \
    \       \n        r = r + digits;\n    }\n    \n    if (negative){\n        r\
    \ = \"-\" + r;\n    }\n    \n    return r;\n}\n", "\tvar digits = x.toString().split('');\n\
    \tdigits = digits.map(function(d){\n\t\treturn parseInt(d);\n\t});\n\tdigits.forEach(function(d,\
    \ i){\n\t\tdigits[i] = base;\n\t});\n\treturn digits.join('');\n}\n", "    var\
    \ r = \"\";\n    while(x>0){\n        r = base_digits[x%base] + r;\n        x\
    \ = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar res = x;\n\twhile\
    \ (res<base){\n\t\tres+=base;\n\t}\n\treturn res;\n}\n", "    var r = \"\";\n\
    \    var n = x;\n    while (n >= base){\n        r = base_digits[n%base] + r;\n\
    \        n = Math.floor(n/base);\n    }\n    return base_digits[n] + r;\n}\n",
  "    var r = \"\";\n    var s = x.toString();\n    var m = s.length;\n    var l\
    \ = base;\n    var i = 0;\n    while(i < m){\n        var d = s.charAt(i);\n \
    \       if(d >= \"0\" && d <= \"9\"){\n            d -= \"0\";\n        }else{\n\
    \            d -= \"a\".charCodeAt(0);\n        }\n        while(d >= l){\n  \
    \          d -= l;\n            r += d;\n        }\n        l -= d;\n        i++;\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    var s = \"\";\n    var m\
    \ = 1;\n    var sign = 1;\n    var m = Math.abs(x);\n    var base = Math.abs(base);\n\
    \    while (m >= base){\n        m /= base;\n        s += \"0\";\n    }\n    while\
    \ (m > 0){\n        m /= base;\n        s += \"1\";\n    }\n    r = s.substr(0,\
    \ s.length - 1);\n    if (sign == -1){\n        r = r.substr(1);\n    }\n    return\
    \ r;\n}\n", "\tvar num = x.toString(base);\n\tvar res = \"\";\n\twhile(num.length\
    \ < base){\n\t\tnum = \"0\" + num;\n\t\tres++;\n\t}\n\treturn res;\n}\n", "\t\
    var res = x.toString(base);\n\twhile(res.length < base){\n\t\tres = res+'0';\n\
    \t}\n\treturn res;\n}\n", "    var r = \"\";\n    var s = x.toString();\n    var\
    \ m = s.length;\n    var k = base;\n    var z = 0;\n    var r = \"\";\n    while(m\
    \ > 0){\n        var n = s.charAt(z);\n        var digit = parseInt(n);\n    \
    \    if(digit < base){\n            digit += k;\n        }\n        else{\n  \
    \          digit -= k;\n        }\n        z += 1;\n        r = r + digit;\n \
    \       if(z < m){\n            r = r + \".\";\n        }\n    }\n    return r;\n\
    }\n", "    var r = \"\";\n    while(x > 0){\n        r = base_digits[x % base]\
    \ + r;\n        x = Math.floor(x / base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var s = x.toString();\n    var m = s.length;\n    var l = \"\"\
    ;\n    var sign = 1;\n    var i;\n    for(i = 0; i < m; i++){\n        l = s.charAt(i)\
    \ + l;\n        if(l >= \"0\" && l <= \"9\"){\n            l = l - \"0\";\n  \
    \      }else{\n            l = l + l;\n        }\n    }\n    for(i = 0; i < m;\
    \ i++){\n        l = s.charAt(i) + l;\n        if(l >= \"0\" && l <= \"9\"){\n\
    \            l = l - \"0\";\n        }else{\n            l = l + l;\n        }\n\
    \    }\n    for(i = 0; i < m; i++){\n        l = s.charAt(i) + l;\n        if(l\
    \ >= \"0\" && l <= \"9\"){\n            l = l - \"0\";\n        }else{\n     \
    \       l = l + l;\n        }\n    }\n    for(i = 0; i < m; i++){\n        l =\
    \ s.charAt(i) + l;\n        if(l >= \"0\" && l <= \"9\"){\n            l = l -\
    \ \"0\";\n        }else{\n            l = l + l;\n        }\n    }\n    for(i\
    \ = 0; i < m; i++){\n        l = s.charAt(i) + l;\n        if(l >= \"0\" && l\
    \ <= \"9\"){\n            l = l - \"0\";\n        }else{\n            l = l +\
    \ l;\n        }\n    }\n    for(i = 0; i < m; i++){\n        l = s.charAt(i) +\
    \ l;\n        if(l >= \"0\" && l <= \"9\"){\n            l = l - \"0\";\n    \
    \    }else{\n            l = l + l;\n        }\n    }\n    for(i = 0; i < m; i++){\n\
    \        l = s.charAt(i) + l;\n        if(l >= \"0\" && l <= \"9\"){\n       \
    \     l = l - \"0\";\n        }else{\n            l = l + l;\n        }\n    }\n\
    \    for(i = 0; i < m; i++){\n        l = s.charAt(i) + l;\n        if(l >= \"\
    0\" && l <= \"9\"){\n            l = l - \"0\";\n        }else{\n            l\
    \ = l + l;\n        }\n    }\n    for(i = 0; i < m; i++){\n        l = s.charAt(i)\
    \ + l;\n        if(l >= \"0\" && l <= \"9\"){\n            l = l - \"0\";\n  \
    \      }else{\n            l = l + l;\n        }\n    }\n    for(i = 0; i < m;\
    \ i++){\n        l = s.charAt(i) + l;\n        if(l >= \"0\" && l <= \"9\"){\n\
    \            l = l - \"0\";\n        }else{\n            l = l + l;\n        }\n\
    \    }\n    for(i = 0; i < m; i++){\n        ", "    var r = \"\";\n    var s\
    \ = \"\";\n    var m = 1;\n    var sign = 1;\n    var i;\n    for(i = 0; i < x.length;\
    \ i++){\n        s += x[i];\n    }\n    for(i = 0; i < s.length; i++){\n     \
    \   if(s.charAt(i) == '-'){\n            sign = -1;\n        }\n        else{\n\
    \            m += s.charAt(i) * Math.pow(base,i);\n        }\n    }\n    return\
    \ sign * m;\n}\n", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar digits\
    \ = x.toString().split('');\n\tvar new_digits = [];\n\tfor(var i = 0; i < digits.length;\
    \ i++){\n\t\tnew_digits.push(digits[i] * Math.pow(base,digits.length-i-1));\n\t\
    }\n\treturn new_digits.join('');\n}\n", "    var r = \"\";\n    var sign = \"\"\
    ;\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n    }\n    var x_str\
    \ = x.toString();\n    var x_len = x_str.length;\n    var baseNum = parseInt(x_str);\n\
    \    var base = Math.pow(base,baseNum);\n    var num = 0;\n    while(x_len > 0){\n\
    \        num += baseNum % base;\n        baseNum = baseNum / base;\n        x_len--;\n\
    \    }\n    return sign + num.toString();\n}\n", "    var r = \"\";\n    var m\
    \ = Math.pow(base,x);\n    while(m > 0){\n        r = m%base + r;\n        m =\
    \ Math.floor(m/base);\n    }\n    return r;\n}\n", "    var r = \"\";\n    while(x>0){\n\
    \        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return r;\n}\n", "\tvar digits = x.toString(base).split(\"\").reverse();\n\
    \twhile(digits.length < base){\n\t\tdigits = digits.concat(new Array(base - digits.length).fill(0));\n\
    \t}\n\treturn digits.reverse().join(\"\");\n}\n", "    var r = \"\";\n    var\
    \ s = \"\";\n    var m = Math.pow(base,x);\n    for(var i = 0; i < x; i++){\n\
    \        s += \"0\";\n    }\n    for(var i = 0; i < x; i++){\n        if(i ==\
    \ 0){\n            r += s;\n        }else{\n            r += s.substr(0,1);\n\
    \        }\n        var a = parseInt(s.substr(1,1));\n        var b = parseInt(s.substr(2,1));\n\
    \        var c = parseInt(s.substr(3,1));\n        var d = parseInt(s.substr(4,1));\n\
    \        var e = parseInt(s.substr(5,1));\n        var f = parseInt(s.substr(6,1));\n\
    \        var g = parseInt(s.substr(7,1));\n        var h = parseInt(s.substr(8,1));\n\
    \        var i = parseInt(s.substr(9,1));\n        var j = parseInt(s.substr(10,1));\n\
    \        var k = parseInt(s.substr(11,1));\n        var l = parseInt(s.substr(12,1));\n\
    \        var m = Math.pow(base,x);\n        var n = Math.pow(base,x);\n      \
    \  var o = Math.pow(base,x);\n        var p = Math.pow(base,x);\n        var q\
    \ = Math.pow(base,x);\n        var r = Math.pow(base,x);\n        var s = Math.pow(base,x);\n\
    \        var t = Math.pow(base,x);\n        var u = Math.pow(base,x);\n      \
    \  var v = Math.pow(base,x);\n        var w = Math.pow(base,x);\n        var x\
    \ = Math.pow(base,x);\n        var y = Math.pow(base,x);\n        var z = Math.pow(base,x);\n\
    \        var A = Math.pow(base,x);\n        var B = Math.pow(base,x);\n      \
    \  var C = Math.pow(base,x);\n        var D = Math.pow(base,x);\n        var E\
    \ = Math.pow(base,x);\n        var F = Math.pow(base,x);\n        var G = Math.pow(base,x);\n\
    \        var H = Math.pow(base,x);\n        var I = Math.pow(base,x);\n      \
    \  var J = Math.pow(base,x);\n        var K = Math.pow(base,x);\n        var L\
    \ = Math.pow(base,x);\n        var M = Math.pow(base,x);\n        var N = Math.pow(base,x);\n\
    \        var O = Math.pow(base,x);\n        var P = Math.pow(base,x);\n      \
    \  var Q = Math.pow(base,x);\n        var R = Math.pow(base,x);\n        var S\
    \ = Math.pow(base,x);\n        var T = Math.pow(base,x);\n        var U = Math.pow(base,x);\n\
    \        var V = Math.pow(base,x);\n        var W = Math.pow(base,x);\n      \
    \  var X = Math.pow(base,x);\n        var Y = Math.pow(base,x);\n        var Z\
    \ = Math.pow(base,x);\n        var a = Math.pow(base,x);\n        var b = Math.pow(base,x);\n\
    \        var c = Math.pow(base,x);\n        var d = Math.pow(base,x);\n      \
    \  var e = Math.pow(", "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n\
    \    while(m > 0){\n        r = m%base + r;\n        m = Math.floor(m/base);\n\
    \    }\n    if(x < 0){\n        r = Math.abs(r) + 1;\n    }\n    return sign*r;\n\
    }\n", "    var r = \"\";\n    var digits = x.toString().split(\"\").reverse();\n\
    \    for(var i = digits.length - 1; i >= 0; i--){\n        r += digits[i] * base;\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    while(x>0){\n        r =\
    \ base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n    return\
    \ r;\n}\n", "    var r = \"\";\n    var negative = false;\n    if (x < 0){\n \
    \       negative = true;\n        x = -x;\n    }\n    while (x != 0){\n      \
    \  r = base_digit[x % base] + r;\n        x = Math.floor(x / base);\n    }\n \
    \   if (negative){\n        r = \"-\" + r;\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var n = x;\n    while (n >= base){\n        r = base_conversion[n%base]\
    \ + r;\n        n = Math.floor(n/base);\n    }\n    return base_conversion[n%base]\
    \ + r;\n}\n", "    var r = \"\";\n    var digits = x.toString().split(\"\").reverse();\n\
    \    for(var i = 0; i < digits.length; i++){\n        var d = parseInt(digits[i]);\n\
    \        if(d < base){\n            r = r + d;\n        } else {\n           \
    \ r = r + d.toString(base);\n        }\n    }\n    return r;\n}\n", "\tvar digits\
    \ = x.toString().split('');\n\tdigits = digits.map(function(digit){\n\t\treturn\
    \ parseInt(digit, base);\n\t});\n\treturn digits.reverse().join('');\n}\n", "\t\
    var r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var s = x.toString();\n    var\
    \ m = s.length;\n    var n = base;\n    var k = 0;\n    while(k < m){\n      \
    \  var m = s.charAt(k);\n        if(m >= \"0\" && m <= \"9\"){\n            n\
    \ = n*10 + parseInt(m);\n        }else{\n            if(n == base){\n        \
    \        r = r + m;\n            }else{\n                r = r + m.charAt(0);\n\
    \            }\n        }\n        k++;\n    }\n    return r;\n}\n", "\tvar r\
    \ = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\
    \t}\n\treturn r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n\
    \        sign = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n \
    \   var x_len = x_str.length;\n    if (x_len > base){\n        throw \"Base too\
    \ large\";\n    }\n    var y = parseInt(x_str.substr(x_len - base), base);\n \
    \   while (y >= base){\n        r = y_to_str(y, base) + r;\n        y = parseInt(x_str.substr(x_len\
    \ - base), base);\n    }\n    r = y_to_str(y, base) + r;\n    return sign*r;\n\
    }\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n\
    \        x = -x;\n    }\n    if (base < 2 || base > 36){\n        console.log(\"\
    Base must be between 2 and 36\");\n        return \"\";\n    }\n    if (base ==\
    \ 2){\n        r = x.toString(2);\n    }\n    else if (base == 8){\n        r\
    \ = x.toString(8);\n    }\n    else if (base == 10){\n        r = x.toString(10);\n\
    \    }\n    else if (base == 16){\n        r = x.toString(16);\n    }\n    else\
    \ if (base == 36){\n        r = x.toString(36);\n    }\n    else if (base == 64){\n\
    \        r = x.toString(64);\n    }\n    else if (base == 128){\n        r = x.toString(128);\n\
    \    }\n    else if (base == 256){\n        r = x.toString(256);\n    }\n    else\
    \ if (base == 512){\n        r = x.toString(512);\n    }\n    else if (base ==\
    \ 1024){\n        r = x.toString(1024);\n    }\n    else if (base == 2048){\n\
    \        r = x.toString(2048);\n    }\n    else if (base == 4096){\n        r\
    \ = x.toString(4096);\n    }\n    else if (base == 8192){\n        r = x.toString(8192);\n\
    \    }\n    else if (base == 16384){\n        r = x.toString(16384);\n    }\n\
    \    else if (base == 32768){\n        r = x.toString(32768);\n    }\n    else\
    \ if (base == 65536){\n        r = x.toString(65536);\n    }\n    else if (base\
    \ == 131072){\n        r = x.toString(131072);\n    }\n    else if (base == 262144){\n\
    \        r = x.toString(262144);\n    }\n    else if (base == 524288){\n     \
    \   r = x.toString(524288);\n    }\n    else if (base == 1048576){\n        r\
    \ = x.toString(1048576);\n    }\n    else if (base == 2097152){\n        r = x.toString(2097152);\n\
    \    }\n    else if (base == 4194304){\n        r = x.toString(4194304);\n   \
    \ }\n    else if (base == 8388608){\n        r = x.toString(8388608);\n    }\n\
    \    else if (base == 16777216){\n        r = x.toString(16777216);\n    }\n \
    \   else if (base == 33554432){\n        r = x.toString(33554432);\n    }\n  \
    \  else if (base == 67108864){\n        r = x.toString(67108864);\n    }\n   \
    \ else if (base == 134217728){\n        r = x.toString(134217728);\n    }\n  \
    \  else if (base == 268435456){\n        r = x.toString(268435456);\n    }\n \
    \   else if (base == 536870912){\n        r = x.toString(536", "    var r = \"\
    \";\n    var sign = 1;\n    if(x<0){\n        sign = -1;\n        x = -x;\n  \
    \  }\n    while(x != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return sign*r;\n}\n", "    var r = \"\";\n    var s = x.toString();\n\
    \    var m = s.length;\n    var n = base;\n    var k = 0;\n    while (n < 0){\n\
    \        n *= base;\n        k += 1;\n    }\n    while (k >= 0){\n        var\
    \ m = Math.pow(base, n);\n        if (m == 0){\n            throw \"Cannot convert\
    \ '\" + s + \"' to a number\";\n        }\n        r = m + r;\n        n -= m;\n\
    \        k -= 1;\n    }\n    return r;\n}\n", "    var r = \"\";\n    var sign\
    \ = 1;\n    var m = 1;\n    var i = 0;\n    while(i < x.length){\n        var\
    \ c = x.charAt(i);\n        if(c >= \"0\" && c <= \"9\"){\n            m += c.charCodeAt(0)\
    \ - \"0\".charCodeAt(0);\n        }else{\n            m += c.charCodeAt(0) - \"\
    a\".charCodeAt(0);\n        }\n        i++;\n    }\n    while(m >= base){\n  \
    \      m /= base;\n        i++;\n    }\n    while(m > 0){\n        r = m + r;\n\
    \        m -= base;\n    }\n    if(sign){\n        r = r + base;\n    }\n    return\
    \ r;\n}\n", "\tvar str = x.toString(base);\n\tvar res = \"\";\n\twhile(str.length\
    \ < base){\n\t\tres = \"0\" + res;\n\t}\n\treturn res;\n}\n", "\tvar r = \"\"\
    ;\n\twhile(x != 0){\n\t\tr = base_digits[x % base] + r;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn r;\n}\n", "    var r = \"\";\n    while(x > 0){\n  \
    \      r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return r;\n}\n", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var m = Math.pow(base,x);\n    for(var i = 0; i < x; i++){\n\
    \        r += String.fromCharCode((m%base)+65);\n        m = Math.floor(m/base);\n\
    \    }\n    return r;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\t\tr = base_digits[x%base]\
    \ + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "\tvar baseNum =\
    \ base;\n\tvar baseStr = '';\n\tvar baseStrLen = 0;\n\tvar numStr = '';\n\tvar\
    \ numStrLen = 0;\n\tvar num = 0;\n\tvar power = 0;\n\tvar digit = 0;\n\tvar xLen\
    \ = x.length;\n\tvar xStr = '';\n\t\n\tif(xLen < baseNum){\n\t\tbaseNum = xLen;\n\
    \t}\n\t\n\tfor(var i = 0; i < baseNum; i++){\n\t\tbaseStr += x[i];\n\t\tbaseStrLen\
    \ += x[i].length;\n\t}\n\t\n\tfor(i = 0; i < baseNum; i++){\n\t\tnumStr = baseStr.substr(i,\
    \ 1);\n\t\tnumStrLen += numStr.length;\n\t\tnum = parseInt(numStr, baseNum);\n\
    \t\t\n\t\twhile(num >= baseNum){\n\t\t\tnum -= baseNum;\n\t\t\tpower++;\n\t\t\
    }\n\t\t\n\t\tdigit = num % baseNum;\n\t\t\n\t\tif(digit > 0){\n\t\t\tnumStr =\
    \ baseStr.substr(i, 1) + digit;\n\t\t\tnumStrLen += numStr.length;\n\t\t\tnum\
    \ = parseInt(numStr, baseNum);\n\t\t}\n\t\t\n\t\txStr = numStr;\n\t\t\n\t\twhile(xStr.length\
    \ < numStrLen){\n\t\t\txStr = '0' + xStr;\n\t\t}\n\t\t\n\t\tx[xStr.length] = xStr;\n\
    \t}\n\t\n\treturn x.join('');\n}\n", "    var r = \"\";\n    var sign = 1;\n \
    \   if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n\
    \    var x_len = x_str.length;\n    var base = base.toString();\n    var base_len\
    \ = base.length;\n    if (base_len > x_len){\n        base = base.substr(0, x_len);\n\
    \    }\n    while (base_len < x_len){\n        base += \"0\";\n        base_len++;\n\
    \    }\n    while (base_len > x_len){\n        base += \"0\";\n        base_len--;\n\
    \    }\n    for (var i = 0, j = base_len; i < x_len; i++){\n        var c = x_str.charAt(i);\n\
    \        var n = base.indexOf(c);\n        if (n < 0){\n            n = x_len\
    \ + n;\n        }\n        r = r + base.charAt(n);\n    }\n    return sign * r;\n\
    }\n", "\tvar r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x%base] + r;\n\t\
    \tx = Math.floor(x/base);\n\t}\n\treturn r;\n}\n", "\tvar baseNum = base;\n\t\
    var baseStr = '';\n\twhile(baseNum > 0){\n\t\tbaseNum /= base;\n\t\tbaseStr +=\
    \ base;\n\t}\n\treturn x.toString(baseStr);\n}\n", "    var r = \"\";\n    var\
    \ sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n   \
    \ if (base > Math.pow(10, base)){\n        console.log(\"Base out of range\");\n\
    \        return \"\";\n    }\n    while (x != 0){\n        r = base_digits[x %\
    \ base] + r;\n        x = Math.floor(x / base);\n    }\n    return sign*r;\n}\n",
  "    var r = \"\";\n    var sign = x < 0 ? \"-\" : \"\";\n    for(var i = base;\
    \ i < 10; i++){\n        var m = Math.pow(base,i);\n        if(x >= m){\n    \
    \        r += sign + x;\n            x -= m;\n        }else{\n            r +=\
    \ sign + x;\n            x = 0;\n        }\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x\
    \ = -x;\n    }\n    var x_str = x.toString();\n    var x_len = x_str.length;\n\
    \    if (x_len > base){\n        throw new RangeError(\"Base \" + base + \" cannot\
    \ represent number \" + x + \" with \" + x_len + \" digits\");\n    }\n    for\
    \ (var i = x_len; i >= base; i--){\n        var c = x_str.charAt(i - 1);\n   \
    \     var digit = parseInt(c, base);\n        if (digit > 9){\n            throw\
    \ new RangeError(\"Base \" + base + \" cannot represent number \" + x + \" with\
    \ \" + x_len + \" digits\");\n        }\n        r += digit;\n    }\n    return\
    \ sign * r;\n}\n", "\tvar res = x.toString(base);\n\twhile(res.length < base){\n\
    \t\tres = res+'0';\n\t}\n\treturn res;\n}\n", "    var r = \"\";\n    while(x\
    \ != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "\tvar digits = x.toString(base);\n\tvar zeros =\
    \ \"\";\n\twhile (digits.length < base){\n\t\tzeros += \"0\";\n\t}\n\treturn zeros\
    \ + digits;\n}\n", "\tvar str = x.toString(base);\n\tvar res = \"\";\n\twhile(str.length\
    \ < base){\n\t\tres = \"0\" + res;\n\t}\n\treturn res;\n}\n", "\tvar digits =\
    \ x.toString(base).split('').reverse();\n\twhile (digits.length < base){\n\t\t\
    digits.push('0');\n\t}\n\treturn digits.join('');\n}\n", "    var r = \"\";\n\
    \    while(x != 0){\n        r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    while(x != 0){\n        r\
    \ = base_table[base] + r;\n        x = x % base;\n    }\n    return r;\n}\n",
  "    var r = \"\";\n    var num = Math.abs(x);\n    var bnum = Math.abs(base);\n\
    \    var sign = x < 0 ? \"-\" : \"\";\n    var mod = Math.pow(base,bnum);\n  \
    \  var div = Math.round(num/div);\n    var rem = num % div;\n    var i = 0;\n\
    \    while(i < bnum){\n        if(i == bnum-1){\n            r += sign + div.toString(base);\n\
    \            break;\n        }\n        r += mod * div.toString(base);\n     \
    \   div = div / base;\n        mod = mod * base;\n        i++;\n    }\n    if(rem\
    \ > 0){\n        r += sign + div.toString(base);\n    }\n    return r;\n}\n",
  "\tvar res = \"\";\n\twhile(x != 0){\n\t\tres = base_table[base][x%base] + res;\n\
    \t\tx = Math.floor(x/base);\n\t}\n\treturn res;\n}\n", "\tvar r = \"\";\n\twhile(x>0){\n\
    \t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x/base);\n\t}\n\treturn r;\n\
    }\n", "    var r = \"\";\n    var s = \"\";\n    var m = 1;\n    var sign = 1;\n\
    \    var m = Math.abs(x);\n    var b = 0;\n    var i = 0;\n    while(m < 10){\n\
    \        b = m%base;\n        s = bases[b];\n        if(s === undefined){\n  \
    \          throw \"Invalid base\";\n        }\n        i += s;\n        m = Math.floor(m/base);\n\
    \    }\n    while(i > 0){\n        r = bases[b] + r;\n        sign *= -1;\n  \
    \      i -= 1;\n    }\n    return sign*r;\n}\n", "    var r = \"\";\n    var sign\
    \ = \"\";\n    if(x<0){\n        sign = \"-\";\n        x = -x;\n    }\n    var\
    \ x_str = x.toString();\n    var x_len = x_str.length;\n    var baseStr = base.toString();\n\
    \    var baseStr_len = baseStr.length;\n    for(var i=0; i<baseStr_len; i++){\n\
    \        var c = baseStr.charAt(i);\n        if(c==\"1\"){\n            r += x_str.charAt(i);\n\
    \        }\n        else{\n            r += c;\n        }\n    }\n    return sign\
    \ + r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n\
    \    while(m >= 10){\n        r = m%10 + r + String(m%10);\n        m = Math.floor(m*10/10);\n\
    \    }\n    if(m<10){\n        r = m*base + r;\n    }\n    return sign*r;\n}\n",
  "\tvar digits = x.toString(base).split(\"\").reverse();\n\twhile(digits.length <\
    \ base){\n\t\tdigits = digits.concat(new Array(base - digits.length).fill(0));\n\
    \t}\n\treturn digits.reverse().join(\"\");\n}\n", "    var r = \"\";\n    var\
    \ sign = \"\";\n    var m = 1;\n    var b = 0;\n    var n = x;\n    while (n >\
    \ 0){\n        b++;\n        n/=base;\n    }\n    while(b > 0){\n        m++;\n\
    \        b/=base;\n    }\n    while(m > 0){\n        r += String.fromCharCode(n\
    \ % base);\n        n /= base;\n        m--;\n    }\n    if (sign == \"-\") return\
    \ \"-\" + r;\n    return r;\n}\n", "    var r = \"\";\n    var negative = false;\n\
    \    if (x < 0){\n        negative = true;\n        x = -x;\n    }\n    if (x\
    \ > 9){\n        throw \"Base out of range: \" + base;\n    }\n    while (x !=\
    \ 0){\n        r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n\
    \    }\n    if (negative){\n        r = \"-\" + r;\n    }\n    return r;\n}\n",
  "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n   \
    \     x = -x;\n    }\n    if (x < base){\n        r = base;\n    }\n    else{\n\
    \        while (x % base != 0){\n            x /= base;\n            r += base;\n\
    \        }\n    }\n    return sign*r;\n}\n", "    var r = \"\";\n    var sign\
    \ = 1;\n    var m = 1;\n    var digit;\n    while(x != 0){\n        digit = x\
    \ % base;\n        x = Math.floor(x / base);\n        r += digit;\n    }\n   \
    \ if(sign == -1){\n        r = r.substr(0, r.length - 1);\n    }\n    return r;\n\
    }\n", "    var r = \"\";\n    var i;\n    for(i = base; i >= 2; i--){\n      \
    \  r += String(x);\n        x = Math.floor(x / base);\n    }\n    return r;\n\
    }\n", "    var r = \"\";\n    var num = Math.abs(x);\n    var digits = Math.log(num)\
    \ / Math.log(base);\n    var rem = num % base;\n    while(digits > 0) {\n    \
    \    r = base.toString() + r;\n        num = Math.floor(num / base);\n       \
    \ digits--;\n    }\n    r = num.toString() + r;\n    if (rem != 0) {\n       \
    \ r = r.slice(1) + rem;\n    }\n    return r;\n}\n", "    var r = \"\";\n    var\
    \ sign = \"\";\n    var m = Math.pow(base,x);\n    if(m<0){\n        sign = \"\
    -\";\n        m = -m\n    }\n    while(m >= 10){\n        r = m%10 + r\n     \
    \   m = Math.floor(m/10)\n    }\n    r = m + r\n    return sign + r\n}\n", " \
    \   var r = \"\";\n    var n = x;\n    while (n >= base){\n        r = base_digits[n%base]\
    \ + r;\n        n = Math.floor(n/base);\n    }\n    return base_digits[n] + r;\n\
    }\n", "    var r = \"\";\n    var num = Math.abs(x);\n    var bnum = Math.abs(base);\n\
    \    var sign = num < 0 ? \"-\" : \"\";\n    num = Math.abs(num);\n    base =\
    \ Math.abs(base);\n    if (num >= base){\n        r = sign + num.toString(base);\n\
    \    }\n    else {\n        var rem = num % base;\n        r = sign + num.toString(base)\
    \ + change_base(rem, base);\n    }\n    return r;\n}\n", "    var r = \"\";\n\
    \    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x = -x;\n   \
    \ }\n    if (base < 2 || base > 36){\n        console.log(\"Base must be between\
    \ 2 and 36\");\n        return \"\";\n    }\n    while (x >= base){\n        r\
    \ = base_digits[base] + r;\n        x -= base;\n    }\n    r = base_digits[base]\
    \ + r + base_digits[x % base];\n    return sign*r;\n}\n", "\tvar digits = x.toString(base);\n\
    \tvar m = digits.length - 1;\n\tvar r = \"\";\n\twhile(m >= 0){\n\t\tr = digits[m]\
    \ + r;\n\t\tm--;\n\t}\n\treturn r;\n}\n", "    var r = \"\";\n    var s = x.toString();\n\
    \    var m = s.length;\n    var b = 0;\n    var i = 0;\n    while (i < m) {\n\
    \        var c = s.charAt(i);\n        var n = parseInt(c);\n        if (n < base)\
    \ {\n            b += 1;\n        } else {\n            b -= 1;\n        }\n \
    \       i += 1;\n    }\n    while (i >= 0) {\n        var c = s.charAt(i);\n \
    \       var n = parseInt(c);\n        if (n < base) {\n            b += 1;\n \
    \       } else {\n            b -= 1;\n        }\n        i -= 1;\n    }\n   \
    \ r = b + r;\n    return r;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n\
    \tvar base0 = bases[0];\n\tvar base1 = bases[1];\n\tvar base2 = bases[2];\n\t\
    var base3 = bases[3];\n\tvar base4 = bases[4];\n\tvar base5 = bases[5];\n\tvar\
    \ base6 = bases[6];\n\tvar base7 = bases[7];\n\tvar base8 = bases[8];\n\tvar base9\
    \ = bases[9];\n\tvar base10 = bases[10];\n\tvar baseA = bases[bases.length-1];\n\
    \tvar baseB = bases[bases.length-2];\n\tvar baseC = bases[bases.length-3];\n\t\
    var baseD = bases[bases.length-4];\n\tvar baseE = bases[bases.length-5];\n\tvar\
    \ baseF = bases[bases.length-6];\n\tvar baseG = bases[bases.length-7];\n\tvar\
    \ baseH = bases[bases.length-8];\n\tvar baseI = bases[bases.length-9];\n\tvar\
    \ baseJ = bases[bases.length-10];\n\tvar baseK = bases[bases.length-11];\n\tvar\
    \ baseL = bases[bases.length-12];\n\tvar baseM = bases[bases.length-13];\n\tvar\
    \ baseN = bases[bases.length-14];\n\tvar baseO = bases[bases.length-15];\n\tvar\
    \ baseP = bases[bases.length-16];\n\tvar baseQ = bases[bases.length-17];\n\tvar\
    \ baseR = bases[bases.length-18];\n\tvar baseS = bases[bases.length-19];\n\tvar\
    \ baseT = bases[bases.length-20];\n\tvar baseU = bases[bases.length-21];\n\tvar\
    \ baseV = bases[bases.length-22];\n\tvar baseW = bases[bases.length-23];\n\tvar\
    \ baseX = bases[bases.length-24];\n\tvar baseY = bases[bases.length-25];\n\tvar\
    \ baseZ = bases[bases.length-26];\n\tvar baseA = bases[bases.length-27];\n\tvar\
    \ baseB = bases[bases.length-28];\n\tvar baseC = bases[bases.length-29];\n\tvar\
    \ baseD = bases[bases.length-30];\n\tvar baseE = bases[bases.length-31];\n\tvar\
    \ baseF = bases[bases.length-32];\n\tvar baseG = bases[bases.length-33];\n\tvar\
    \ baseH = bases[bases.length-34];\n\tvar baseI = bases[bases.length-35];\n\tvar\
    \ baseJ = bases[bases.length-36];\n\tvar baseK = bases[bases.length-37];\n\tvar\
    \ baseL = bases[base", "\tvar digits = x.toString(base).split('').reverse();\n\
    \twhile (digits.length < base){\n\t\tdigits.push('0');\n\t}\n\treturn digits.reverse().join('');\n\
    }\n", "    var r = \"\";\n    var n = x;\n    while (n >= base){\n        r =\
    \ base_digits[n%base] + r;\n        n = Math.floor(n / base);\n    }\n    return\
    \ base_digits[n] + r;\n}\n", "\tvar r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x\
    \ % base] + r;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn r;\n}\n", "    var\
    \ r = \"\";\n    while(x != 0){\n        r = base_digits[x % base] + r;\n    \
    \    x = Math.floor(x / base);\n    }\n    return r;\n}\n", "\tvar digits = x.toString(base).split(\"\
    \").reverse();\n\twhile(digits.length < base){\n\t\tdigits = digits.concat(new\
    \ Array(base - digits.length).fill(0));\n\t}\n\treturn digits.reverse().join(\"\
    \");\n}\n", "    var r = \"\";\n    var sign = x < 0 ? \"-\" : \"\";\n    x =\
    \ Math.abs(x);\n    var y = Math.pow(base,x);\n    var z = parseInt(y/base);\n\
    \    var r = sign + z.toString(base);\n    while(z>0){\n        r = z.toString(base)\
    \ + r;\n        z = parseInt(y/base);\n        y = Math.pow(base,z);\n    }\n\
    \    return r;\n}\n", "\tvar res = \"\";\n\tvar negative = false;\n\tif (x < 0){\n\
    \t\tnegative = true;\n\t\tx = -x;\n\t}\n\twhile (x != 0){\n\t\tvar digit = x %\
    \ base;\n\t\tres = digit.toString(base) + res;\n\t\tx = Math.floor(x / base);\n\
    \t}\n\tif (negative){\n\t\tres = \"-\" + res;\n\t}\n\treturn res;\n}\n", "\tvar\
    \ y = \"\";\n\tvar bases = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"\
    8\",\"9\"];\n\tvar bases_count = bases.length;\n\tvar bases_count_minus_1 = bases.length-1;\n\
    \tvar bases_count_minus_2 = bases.length-2;\n\tvar bases_count_minus_3 = bases.length-3;\n\
    \tvar bases_count_minus_4 = bases.length-4;\n\tvar bases_count_minus_5 = bases.length-5;\n\
    \tvar bases_count_minus_6 = bases.length-6;\n\tvar bases_count_minus_7 = bases.length-7;\n\
    \tvar bases_count_minus_8 = bases.length-8;\n\tvar bases_count_minus_9 = bases.length-9;\n\
    \t\n\tfor(var i = 0; i < bases_count_minus_1; i++){\n\t\ty += bases[x%base];\n\
    \t\tx = Math.floor(x/base);\n\t}\n\t\n\tfor(var i = 0; i < bases_count_minus_2;\
    \ i++){\n\t\ty += bases[x%base];\n\t\tx = Math.floor(x/base);\n\t}\n\t\n\tfor(var\
    \ i = 0; i < bases_count_minus_3; i++){\n\t\ty += bases[x%base];\n\t\tx = Math.floor(x/base);\n\
    \t}\n\t\n\tfor(var i = 0; i < bases_count_minus_4; i++){\n\t\ty += bases[x%base];\n\
    \t\tx = Math.floor(x/base);\n\t}\n\t\n\tfor(var i = 0; i < bases_count_minus_5;\
    \ i++){\n\t\ty += bases[x%base];\n\t\tx = Math.floor(x/base);\n\t}\n\t\n\tfor(var\
    \ i = 0; i < bases_count_minus_6; i++){\n\t\ty += bases[x%base];\n\t\tx = Math.floor(x/base);\n\
    \t}\n\t\n\tfor(var i = 0; i < bases_count_minus_7; i++){\n\t\ty += bases[x%base];\n\
    \t\tx = Math.floor(x/base);\n\t}\n\t\n\tfor(var i = 0; i < bases_count_minus_8;\
    \ i++){\n\t\ty += bases[x%base];\n\t\tx = Math.floor(x/base);\n\t}\n\t\n\tfor(var\
    \ i = 0; i < bases_count_minus_9; i++){\n\t\ty += bases[x%base];\n\t\tx = Math.floor(x/base);\n\
    \t}\n\t\n\treturn y;\n}\n", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var s = \"\";\n    var m = Math.pow(base,x);\n    while(m > 0){\n\
    \        r = m%base;\n        s = base+r;\n        m = Math.floor(m/base);\n \
    \   }\n    return s;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n\
    \tvar bases_length = bases.length;\n\tvar result = '';\n\tvar i = 0;\n\twhile(i\
    \ < bases_length){\n\t\tresult += bases[x%bases_length] + bases[i];\n\t\tx = Math.floor(x/bases_length);\n\
    \t\ti++;\n\t}\n\treturn result;\n}\n", "    var r = \"\";\n    var s = \"\";\n\
    \    var m = 1;\n    var sign = 1;\n    while(x >= base){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n        s += base_digits[x%base];\n \
    \   }\n    while(x < base){\n        r = base_digits[x%base] + r;\n        x =\
    \ Math.floor(x/base);\n        s += base_digits[x%base];\n    }\n    if(x < base){\n\
    \        r = base_digits[x%base] + r;\n    }\n    return sign*(r+s);\n}\n", " \
    \   var r = \"\";\n    var sign = \"\";\n    var m = 1;\n    var i = 0;\n    while(i\
    \ < x.length){\n        var c = x.charAt(i);\n        if(c >= \"0\" && c <= \"\
    9\"){\n            m *= base;\n            i += 1;\n        }\n        else if(c\
    \ >= \"a\" && c <= \"z\"){\n            m += base.charCodeAt(0) - \"a\".charCodeAt(0);\n\
    \            i += 1;\n        }\n        else if(c >= \"A\" && c <= \"Z\"){\n\
    \            m += base.charCodeAt(0) - \"A\".charCodeAt(0);\n            i +=\
    \ 1;\n        }\n        else{\n            i += 1;\n        }\n    }\n    return\
    \ sign + m.toString(base);\n}\n", "\tvar digits = x.toString().split('');\n\t\
    var new_digits = '';\n\tvar carry = 0;\n\tfor (var i = 0; i < digits.length; i++){\n\
    \t\tnew_digits += digits[i] + carry;\n\t\tcarry = 0;\n\t\tfor (var j = digits.length\
    \ - 1; j >= 0; j--){\n\t\t\tif (digits[j] > base - 1){\n\t\t\t\tcarry = 1;\n\t\
    \t\t\tdigits[j] = digits[j] - base;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcarry = 0;\n\
    \t\t\t}\n\t\t}\n\t}\n\tnew_digits += carry;\n\treturn new_digits;\n}\n", "\tvar\
    \ baseNum = base;\n\tvar baseStr = '';\n\twhile(baseNum > 0){\n\t\tbaseStr = (baseNum\
    \ % base) + baseStr;\n\t\tbaseNum = Math.floor(baseNum / base);\n\t}\n\treturn\
    \ baseStr;\n}\n", "\tvar digits = x.toString().split('');\n\tdigits = digits.map(function(d){\n\
    \t\treturn parseInt(d, base);\n\t});\n\tdigits.reverse();\n\treturn digits.join('');\n\
    }\n", "\tvar bases = [2,7,10,16];\n\tvar base;\n\tfor(var i=0; i<bases.length;\
    \ i++){\n\t\tbase = bases[i];\n\t\tif(base*base <= x){\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\treturn bases[bases.indexOf(base)+1];\n}\n", "\tvar res = \"\";\n\twhile(x\
    \ != 0){\n\t\tres = base_digits[x % base] + res;\n\t\tx = Math.floor(x / base);\n\
    \t}\n\treturn reverseString(res);\n}\n", "    var r = \"\";\n    var sign = 1;\n\
    \    if (x < 0){\n        sign = -1;\n        x = -x;\n    }\n    if (base < 2\
    \ || base > 36){\n        console.log(\"Base must be between 2 and 36\");\n  \
    \      return \"\";\n    }\n    while (x >= base){\n        r = base_digits[(x\
    \ % base)];\n        x = Math.floor(x / base);\n    }\n    r = base_digits[(x\
    \ % base)];\n    return sign*r;\n}\n", "    var r = \"\";\n    var i;\n    for(i\
    \ = base; i >= 2; i--){\n        r += (x%base);\n        x = Math.floor(x/base);\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    var s = \"\";\n    var m\
    \ = 1;\n    var sign = 1;\n    var i = 0;\n    while(i < x.length){\n        var\
    \ c = x.charAt(i);\n        var n = parseInt(c);\n        if(n < 0 || n >= base){\n\
    \            s += c;\n            continue;\n        }\n        s += n;\n    \
    \    i += 1;\n        while(i < x.length && x.charAt(i) >= base){\n          \
    \  n += base;\n            s += n;\n            i += 1;\n        }\n        if(i\
    \ < x.length){\n            var c2 = x.charAt(i);\n            if(c2 > base){\n\
    \                s += c2;\n                i += 1;\n            }else{\n     \
    \           s += \"0\";\n            }\n        }\n        if(m > 0){\n      \
    \      while(i < x.length && x.charAt(i) >= base){\n                n += base;\n\
    \                s += n;\n                i += 1;\n            }\n           \
    \ if(i < x.length){\n                var c2 = x.charAt(i);\n                if(c2\
    \ > base){\n                    s += c2;\n                    i += 1;\n      \
    \          }else{\n                    s += \"0\";\n                }\n      \
    \      }\n        }\n        m /= base;\n    }\n    if(sign){\n        s = \"\
    -\"+s;\n    }\n    return s;\n}\n", "    var r = \"\";\n    while(x>0){\n    \
    \    r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n  \
    \  return r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if(x<0) sign =\
    \ -1;\n    while(x >= base){\n        r = base_digits[x%base] + r;\n        x\
    \ = Math.floor(x/base);\n    }\n    r = base_digits[x%base] + r + base_digits[base];\n\
    \    return sign*r;\n}\n", "\tvar digits = x.toString(base).split(\"\").reverse();\n\
    \twhile(digits.length < base){\n\t\tdigits = digits.concat(new Array(base - digits.length).fill(0));\n\
    \t}\n\treturn digits.reverse().join(\"\");\n}\n", "    var r = \"\";\n    var\
    \ s = \"\";\n    var m = 1;\n    var sign = 1;\n    var m = Math.abs(x);\n   \
    \ var base = Math.abs(base);\n    while (m >= base){\n        r = m%base + r;\n\
    \        m = Math.floor(m/base);\n    }\n    s = m%base + r;\n    if (s < 10){\n\
    \        s = \"0\" + s;\n    }\n    if (sign == -1){\n        s = s.substring(1);\n\
    \    }\n    return s;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n\
    \tvar bases_count = bases.length;\n\tvar base = Math.floor(base);\n\tvar base_str\
    \ = bases[base];\n\tvar base_num = base;\n\tvar res = '';\n\twhile(base_num >\
    \ 0){\n\t\tvar rem = base_num % base;\n\t\tbase_num = Math.floor(base_num/base);\n\
    \t\tres = base_str + rem.toString();\n\t}\n\treturn res;\n}\n", "\tvar r = \"\"\
    ;\n\tvar bases = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"\
    , \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n\tvar base0 = bases[0];\n\
    \tvar base1 = bases[1];\n\tvar base2 = bases[2];\n\tvar base3 = bases[3];\n\t\
    var base4 = bases[4];\n\tvar base5 = bases[5];\n\tvar base6 = bases[6];\n\tvar\
    \ base7 = bases[7];\n\tvar base8 = bases[8];\n\tvar base9 = bases[9];\n\tvar base10\
    \ = bases[10];\n\tvar base11 = bases[11];\n\tvar base12 = bases[12];\n\tvar base13\
    \ = bases[13];\n\tvar base14 = bases[14];\n\tvar base15 = bases[15];\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\
    \n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\
    \t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n",
  "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n    while(m\
    \ > 0){\n        r = m%base + r;\n        m = Math.floor(m/base);\n    }\n   \
    \ if(x < 0){\n        r = -r + sign;\n    }\n    return r;\n}\n", "    var r =\
    \ \"\";\n    var n = x;\n    while (n >= base){\n        r = base_digits[n%base]\
    \ + r;\n        n = Math.floor(n / base);\n    }\n    return base_digits[n] +\
    \ r;\n}\n", "\tvar r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x % base]\
    \ + r;\n\t\tx = Math.floor(x / base);\n\t}\n\treturn r;\n}\n", "\tvar r = \"\"\
    ;\n\tvar negative = x < 0;\n\t\n\tx = Math.abs(x);\n\tbase = Math.abs(base);\n\
    \t\n\twhile(base){\n\t\tr = base_conversion(x, base);\n\t\tx = Math.floor(x/base);\n\
    \t\tbase = base*10;\n\t}\n\t\n\tif(negative){\n\t\tr = r * -1;\n\t}\n\t\n\treturn\
    \ r;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign\
    \ = -1;\n        x = -x;\n    }\n    if (base < 2 || base > 36){\n        console.log(\"\
    Base must be between 2 and 36\");\n        return;\n    }\n    if (base == 2){\n\
    \        r = x.toString(2);\n    }\n    else if (base == 8){\n        r = x.toString(8);\n\
    \    }\n    else if (base == 10){\n        r = x.toString(10);\n    }\n    else\
    \ if (base == 16){\n        r = x.toString(16);\n    }\n    else if (base == 32){\n\
    \        r = x.toString(32);\n    }\n    else if (base == 64){\n        r = x.toString(64);\n\
    \    }\n    else if (base == 128){\n        r = x.toString(128);\n    }\n    else\
    \ if (base == 256){\n        r = x.toString(256);\n    }\n    else if (base ==\
    \ 512){\n        r = x.toString(512);\n    }\n    else if (base == 1024){\n  \
    \      r = x.toString(1024);\n    }\n    else if (base == 2048){\n        r =\
    \ x.toString(2048);\n    }\n    else if (base == 4096){\n        r = x.toString(4096);\n\
    \    }\n    else if (base == 8192){\n        r = x.toString(8192);\n    }\n  \
    \  else if (base == 16384){\n        r = x.toString(16384);\n    }\n    else if\
    \ (base == 32768){\n        r = x.toString(32768);\n    }\n    else if (base ==\
    \ 65536){\n        r = x.toString(65536);\n    }\n    else if (base == 131072){\n\
    \        r = x.toString(131072);\n    }\n    else if (base == 262144){\n     \
    \   r = x.toString(262144);\n    }\n    else if (base == 524288){\n        r =\
    \ x.toString(524288);\n    }\n    else if (base == 1048575){\n        r = x.toString(1048575);\n\
    \    }\n    else if (base == 2097152){\n        r = x.toString(2097152);\n   \
    \ }\n    else if (base == 4194304){\n        r = x.toString(4194304);\n    }\n\
    \    else if (base == 8388608){\n        r = x.toString(8388608);\n    }\n   \
    \ else if (base == 16777216){\n        r = x.toString(16777216);\n    }\n    else\
    \ if (base == 33554432){\n        r = x.toString(33554432);\n    }\n    else if\
    \ (base == 67108864){\n        r = x.toString(67108864);\n    }\n    else if (base\
    \ == 134217728){\n        r = x.toString(134217728);\n    }\n    else if (base\
    \ == 268435456){\n        r = x.toString(268435456);\n    }\n    else if (base\
    \ == 536870912){\n        r = x.toString(5368709", "    var r = \"\";\n    var\
    \ negative = false;\n    if (x < 0){\n        negative = true;\n        x = -x;\n\
    \    }\n    if (x < base){\n        r = x + \"\";\n    }else{\n        var m =\
    \ Math.pow(base,x);\n        r = m * String(base).substr(0, base);\n    }\n  \
    \  if (negative){\n        r = \"-\" + r;\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    while(x>0){\n        r = base_digits[x%base] + r;\n        x\
    \ = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar digits = x.toString(base);\n\
    \tvar l = digits.length;\n\tvar new_base = Math.pow(base,l);\n\tvar new_digits\
    \ = \"\";\n\tfor(var i = 0; i < l; i++){\n\t\tnew_digits += digits[i];\n\t}\n\t\
    return new_digits;\n}\n", "    var r = \"\";\n    var n = x;\n    while (n >=\
    \ base){\n        r = base_digits[n%base] + r;\n        n = Math.floor(n / base);\n\
    \    }\n    return base_digits[n] + r;\n}\n", "\tvar digits = x.toString(base).split(\"\
    \");\n\twhile (digits.length < base){\n\t\tdigits = digits.concat(\"0\");\n\t\
    }\n\treturn digits.reverse().join(\"\");\n}\n", "\tvar num = x.toString(base);\n\
    \tvar res = num.split(\"\").reverse().join(\"\");\n\treturn res;\n}\n", "    var\
    \ r = \"\";\n    var m = Math.pow(base,x);\n    for(var i = 0; i < Math.floor(m);\
    \ i++){\n        r += String.fromCharCode((m%base)+55);\n        m = Math.floor(m/base);\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    var s = x.toString();\n \
    \   var l = s.length;\n    var baseNum = parseInt(base);\n    var baseLen = baseNum.toString().length;\n\
    \    var num;\n    while(l > 0){\n        num = parseInt(s.charAt(l - 1));\n \
    \       if(num < baseNum){\n            r = r + s.charAt(l - 1);\n           \
    \ l -= 1;\n        }else{\n            r = r + base_convert(num - baseNum, baseLen,\
    \ base);\n            l -= 1;\n        }\n    }\n    return r;\n}\n", "    var\
    \ r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n        x\
    \ = -x;\n    }\n    if (base > 9){\n        base = base%10;\n    }\n    var digits\
    \ = base;\n    while (digits > 0){\n        r = digits+r+x;\n        digits =\
    \ digits/10;\n        x = x/10;\n    }\n    return sign*r;\n}\n", "\tvar res =\
    \ \"\";\n\twhile(x != 0){\n\t\tres = base_table[base] + res;\n\t\tx /= base;\n\
    \t}\n\treturn res;\n}\n", "    var r = \"\";\n    while(x>0){\n        r = base_digits[x%base]\
    \ + r;\n        x = Math.floor(x/base);\n    }\n    return r;\n}\n", "\tvar y\
    \ = \"\";\n\tvar bases = [1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];\n\tvar bases_length\
    \ = bases.length;\n\tvar bases_index = bases_length - 1;\n\tvar bases_value =\
    \ bases[bases_index];\n\tvar bases_power = bases_length - 1;\n\tvar bases_power_index\
    \ = bases_power - 1;\n\tvar bases_power_value = bases[bases_power_index];\n\t\n\
    \twhile(bases_power_index >= 0){\n\t\ty += bases_power_value;\n\t\tbases_power_index--;\n\
    \t\tbases_power_value = bases[bases_power_index];\n\t}\n\t\n\twhile(bases_index\
    \ >= 0){\n\t\ty += bases_value;\n\t\tbases_index--;\n\t\tbases_value = bases[bases_index];\n\
    \t}\n\t\n\twhile(bases_power_value >= 0){\n\t\ty += bases_power_value;\n\t\tbases_power_value--;\n\
    \t}\n\t\n\twhile(bases_value >= 0){\n\t\ty += bases_value;\n\t\tbases_value--;\n\
    \t}\n\t\n\twhile(bases_index >= 0){\n\t\ty += bases[bases_index];\n\t\tbases_index--;\n\
    \t}\n\t\n\twhile(bases_power >= 0){\n\t\ty += bases[bases_power];\n\t\tbases_power--;\n\
    \t}\n\t\n\twhile(bases_power_index >= 0){\n\t\ty += bases[bases_power_index];\n\
    \t\tbases_power_index--;\n\t}\n\t\n\twhile(bases_power_value >= 0){\n\t\ty +=\
    \ bases[bases_power_value];\n\t\tbases_power_value--;\n\t}\n\t\n\twhile(bases_value\
    \ >= 0){\n\t\ty += bases[bases_value];\n\t\tbases_value--;\n\t}\n\t\n\twhile(bases_index\
    \ >= 0){\n\t\ty += bases[bases_index];\n\t\tbases_index--;\n\t}\n\t\n\twhile(bases_power\
    \ >= 0){\n\t\ty += bases[bases_power];\n\t\tbases_power--;\n\t}\n\t\n\twhile(bases_power_index\
    \ >= 0){\n\t\ty += bases[bases_power_index];\n\t\tbases_power_index--;\n\t}\n\t\
    \n\twhile(bases_power_value >= 0){\n\t\ty += bases[bases_power_value];\n\t\tbases_power_value--;\n\
    \t}\n\t\n\twhile(bases_value >= 0){\n\t\ty += bases[bases_value];\n\t\tbases_value--;\n\
    \t}\n\t", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign\
    \ = -1;\n        x = -x;\n    }\n    if (base < 2 || base > 36){\n        console.log(\"\
    Base must be between 2 and 36\");\n        return;\n    }\n    if (base == 2){\n\
    \        r = x.toString(2);\n    }\n    else{\n        while (x != 0){\n     \
    \       r = base_digits[x % base] + r;\n            x = Math.floor(x / base);\n\
    \        }\n    }\n    return sign*r;\n}\n", "    var r = \"\";\n    var sign\
    \ = 1;\n    var m = Math.pow(base,x);\n    while(m >= 10){\n        r = m%10 +\
    \ r + String(m%10);\n        m = Math.floor(m/10);\n    }\n    r = m + r;\n  \
    \  if(sign == -1){\n        r = r.replace(\"-\",\"\");\n    }\n    return r;\n\
    }\n", "    var r = \"\";\n    var negative = x < 0;\n    var n = Math.abs(x);\n\
    \    var digits = Math.log(n) / Math.log(base);\n    var m = digits < 0 ? 0 :\
    \ digits;\n    var isNegative = n < 0;\n    if(isNegative){\n        n = Math.abs(n);\n\
    \    }\n    for(var i = 0; i < m; i++){\n        var digit = Math.floor(n/Math.pow(base,i));\n\
    \        if(digit < 10){\n            r += digit;\n        }else{\n          \
    \  r += change_base(digit, base);\n        }\n    }\n    if(isNegative){\n   \
    \     r = \"-\" + r;\n    }\n    return r;\n}\n", "    var r = \"\";\n    var\
    \ sign = \"\";\n    var m = 1;\n    var b = 0;\n    var i = 0;\n    while(i <\
    \ x.length){\n        b = parseInt(x.charAt(i));\n        switch(base){\n    \
    \        case 2:\n                r += m*(b+1);\n                break;\n    \
    \        case 3:\n                r += m*(b+1) + b;\n                break;\n\
    \            case 4:\n                r += (b+1);\n                break;\n  \
    \          case 5:\n                r += (b+1) + (m*(b+2));\n                break;\n\
    \            case 6:\n                r += (b+1) + (m*(b+2)) + (b+1);\n      \
    \          break;\n            case 7:\n                r += (b+1) + (m*(b+2))\
    \ + (b+1) + (b+1);\n                break;\n            case 8:\n            \
    \    r += (b+1) + (m*(b+2)) + (b+1) + (b+1) + (b+1);\n                break;\n\
    \            case 9:\n                r += (b+1) + (m*(b+2)) + (b+1) + (b+1) +\
    \ (b+1) + (b+1);\n                break;\n            case 10:\n             \
    \   r += (b+1) + (m*(b+2)) + (b+1) + (b+1) + (b+1) + (b+1) + (b+1);\n        \
    \        break;\n            default:\n                throw \"Invalid base\"\
    ;\n        }\n        i++;\n        m *= base;\n    }\n    return sign + r;\n\
    }\n", "    var r = \"\";\n    var sign = 1;\n    var m = 1;\n    var b = 0;\n\
    \    var n = x;\n    while (n > 0){\n        b = n % base;\n        n = Math.floor(n/base);\n\
    \        r = r + b + m;\n        if (b == 0){\n            m = 1;\n        }else{\n\
    \            m = 0;\n        }\n    }\n    if (sign < 0){\n        r = r * -1;\n\
    \    }\n    return r;\n}\n", "\tvar digits = x.toString(base).split(\"\"),\n\t\
    \tbase = base.toString();\n\tfor(var i = 0; i < digits.length; i++){\n\t\tdigits[i]\
    \ = parseInt(digits[i], base);\n\t}\n\treturn digits.reverse().join(\"\");\n}\n",
  "\tvar r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x % base] + r;\n\t\tx =\
    \ Math.floor(x / base);\n\t}\n\treturn r;\n}\n", "\tvar y = \"\";\n\tvar bases\
    \ = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\"];\n\tvar bases_length = bases.length;\n\
    \t\n\tfor(var i = bases_length-1; i >= 0; i--){\n\t\ty += bases[i] * Math.pow(bases_length,\
    \ i);\n\t}\n\t\n\ty = parseInt(y, base);\n\t\n\twhile(y < x){\n\t\ty += base;\n\
    \t}\n\t\n\treturn y;\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x <\
    \ 0){\n        sign = -1;\n        x = -x;\n    }\n    while (x >= base){\n  \
    \      r = base_digits[x%base] + r;\n        x = Math.floor(x/base);\n    }\n\
    \    return sign*r;\n}\n", "    var r = \"\";\n    var negative = false;\n   \
    \ if (x < 0){\n        negative = true;\n        x = -x;\n    }\n    var x_str\
    \ = x.toString();\n    var x_len = x_str.length;\n    var base = base_table[base];\n\
    \    var digits = 1;\n    while (digits < x_len){\n        digits = x_len + x_str.length\
    \ - digits;\n    }\n    while (digits > base){\n        digits -= base;\n    }\n\
    \    for (var i = x_len - 1; i >= 0; i--){\n        var rem = x_str.length - i;\n\
    \        var digit = x_str[i];\n        var digitBase = base_table[digit];\n \
    \       if (digitBase == base){\n            r += digit;\n        }\n        else\
    \ if (digitBase > base){\n            r += digit;\n        }\n        else{\n\
    \            r += digit.substring(digit.length - digitBase);\n        }\n    }\n\
    \    if (negative){\n        r = \"-\" + r;\n    }\n    return r;\n}\n", "\tvar\
    \ baseNum = base;\n\tvar baseStr = '';\n\tvar i;\n\tfor(i = baseNum; i >= 10;\
    \ i--){\n\t\tbaseStr += i;\n\t}\n\tbaseNum = parseInt(baseStr, 10);\n\tbaseStr\
    \ = '';\n\tfor(i = baseNum; i >= 10; i--){\n\t\tbaseStr += i;\n\t}\n\tbaseNum\
    \ = parseInt(baseStr, 10);\n\tbaseStr = '';\n\tfor(i = baseNum; i >= 10; i--){\n\
    \t\tbaseStr += i;\n\t}\n\tbaseNum = parseInt(baseStr, 10);\n\tbaseStr = '';\n\t\
    for(i = baseNum; i >= 10; i--){\n\t\tbaseStr += i;\n\t}\n\tbaseNum = parseInt(baseStr,\
    \ 10);\n\tbaseStr = '';\n\tfor(i = baseNum; i >= 10; i--){\n\t\tbaseStr += i;\n\
    \t}\n\tbaseNum = parseInt(baseStr, 10);\n\tbaseStr = '';\n\tfor(i = baseNum; i\
    \ >= 10; i--){\n\t\tbaseStr += i;\n\t}\n\tbaseNum = parseInt(baseStr, 10);\n\t\
    baseStr = '';\n\tfor(i = baseNum; i >= 10; i--){\n\t\tbaseStr += i;\n\t}\n\tbaseNum\
    \ = parseInt(baseStr, 10);\n\tbaseStr = '';\n\tfor(i = baseNum; i >= 10; i--){\n\
    \t\tbaseStr += i;\n\t}\n\tbaseNum = parseInt(baseStr, 10);\n\tbaseStr = '';\n\t\
    for(i = baseNum; i >= 10; i--){\n\t\tbaseStr += i;\n\t}\n\tbaseNum = parseInt(baseStr,\
    \ 10);\n\tbaseStr = '';\n\tfor(i = baseNum; i >= 10; i--){\n\t\tbaseStr += i;\n\
    \t}\n\tbaseNum = parseInt(baseStr, 10);\n\tbaseStr = '';\n\tfor(i = baseNum; i\
    \ >= 10; i--){\n\t\tbaseStr += i;\n\t}\n\tbaseNum = parseInt(baseStr, 10);\n\t\
    baseStr = '';\n\tfor(i = baseNum; i >= 10; i--){\n\t\tbaseStr += i;\n\t}\n\tbaseNum\
    \ = parseInt(baseStr, 10);\n\tbaseStr = '';\n\tfor(i = baseNum; i >= 10; i--){\n\
    \t\tbaseStr += i;\n\t}\n\tbaseNum = parseInt(baseStr, 10);\n\tbaseStr = '';\n\t\
    for(i = baseNum; i >= 10; i--){\n\t\tbaseStr += i;\n\t}\n\tbaseNum = parseInt(baseStr, ",
  "\tvar digits = x.toString(base).split(\"\").reverse();\n\twhile(digits.length <\
    \ base){\n\t\tdigits = digits.concat(new Array(base - digits.length).fill(0));\n\
    \t}\n\treturn digits.reverse().join(\"\");\n}\n", "    var r = \"\";\n    var\
    \ negative = false;\n    if (x < 0){\n        negative = true;\n        x = -x;\n\
    \    }\n    while (x != 0){\n        r = base_digits[x % base] + r;\n        x\
    \ = Math.floor(x / base);\n    }\n    if (negative){\n        r = \"-\" + r;\n\
    \    }\n    return r;\n}\n", "\tvar baseNum = base;\n\tvar baseStr = '';\n\tvar\
    \ baseNumStr = '';\n\t\n\twhile(baseNum > 0){\n\t\tbaseNumStr = baseNum % base;\n\
    \t\tbaseNum = parseInt(baseNumStr);\n\t\tbaseStr = baseNumStr;\n\t}\n\t\n\treturn\
    \ baseStr + x;\n}\n", "    var r = \"\";\n    var sign = 1;\n    var m = Math.pow(base,x);\n\
    \    while(m > 0){\n        r = m%base + r;\n        m = Math.floor(m/base);\n\
    \    }\n    if(x < 0){\n        r = Math.abs(r) + 1;\n    }\n    return r;\n}\n",
  "\tvar num = x.toString(base);\n\tvar res = \"\";\n\twhile(num.length < base){\n\
    \t\tnum = \"0\" + num;\n\t\tres++;\n\t}\n\treturn res;\n}\n", "    var r = \"\"\
    ;\n    while(x != 0){\n        r = base_table[base] + r;\n        x = x >> 1;\n\
    \    }\n    return r;\n}\n", "    var r = \"\";\n    var sign = x < 0 ? \"-\"\
    \ : \"\";\n    var m = Math.pow(base,x);\n    while(m >= 10){\n        r = m%10\
    \ + r + String(m%10);\n        m = Math.floor(m/10);\n    }\n    r = m + r + sign;\n\
    \    return r;\n}\n", "\tvar digits = x.toString(base).split(\"\"), base = base;\n\
    \tfor(var i = 0; i < digits.length; i++){\n\t\tdigits[i] = parseInt(digits[i],\
    \ base);\n\t}\n\treturn digits.reverse().join(\"\");\n}\n", "\tvar digits = x.toString(base).split('');\n\
    \tvar new_digits = \"\";\n\tfor(var i = 0; i < digits.length; i++){\n\t\tnew_digits\
    \ += digits[i] + digits[(i + 1) % base];\n\t}\n\treturn new_digits;\n}\n", "\t\
    var r = \"\";\n\twhile(x != 0){\n\t\tr = base_digits[x%base] + r;\n\t\tx = Math.floor(x\
    \ / base);\n\t}\n\treturn r;\n}\n", "    var r = \"\";\n    var i;\n    for(i\
    \ = base; (x/i) != 0; i = i/base)\n        r = x + \"\";\n    return r.substring(0,\
    \ r.length - 1);\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n\
    \        sign = -1;\n        x = -x;\n    }\n    var x_str = x.toString();\n \
    \   var x_len = x_str.length;\n    if (x_len > base){\n        throw 'The base\
    \ ' + base + ' can not be greater than the number ' + x + '.';\n    }\n    while\
    \ (base){\n        var mod = x_len % base;\n        if (mod === 0){\n        \
    \    r = x_str.substring(0, mod) + r;\n            x_str = x_str.substring(mod);\n\
    \            base = base * 10;\n        } else {\n            r = x_str.substring(0,\
    \ mod) + r + '0';\n            x_str = x_str.substring(mod);\n            base\
    \ = base * 10;\n        }\n    }\n    if (x_str.length > 0){\n        r = x_str\
    \ + r;\n    }\n    return sign * r;\n}\n", "\tvar digits = x.toString(base).split(\"\
    \");\n\tvar new_digits = \"\";\n\tfor(var i = 0; i < digits.length; i++){\n\t\t\
    new_digits += (digits[i] == base) ? 0 : digits[i];\n\t}\n\treturn new_digits;\n\
    }\n", "    var r = \"\";\n    var sign = 1;\n    if (x < 0){\n        sign = -1;\n\
    \        x = -x;\n    }\n    if (base < 2 || base > 36){\n        console.log(\"\
    Invalid base\");\n        return \"\";\n    }\n    if (base == 10){\n        r\
    \ = x.toString();\n    }\n    else{\n        var m = Math.pow(base,x);\n     \
    \   r = m.toString();\n    }\n    var l = r.length;\n    var zeros = \"\";\n \
    \   for(var i=0;i<l;i++){\n        if(r[i] == \"0\"){\n            zeros += \"\
    0\";\n        }\n        else{\n            zeros += \"1\";\n        }\n    }\n\
    \    return sign*zeros;\n}\n", "\tvar digits = x.toString(base).split(\"\");\n\
    \twhile(digits.length < base){\n\t\tdigits = digits.concat(\"0\");\n\t}\n\treturn\
    \ digits.join(\"\");\n}\n", "    var r = \"\";\n    var sign = 1;\n    if (x <\
    \ 0){\n        sign = -1;\n        x = -x;\n    }\n    while (x != 0){\n     \
    \   r = base_digits[x % base] + r;\n        x = Math.floor(x / base);\n    }\n\
    \    return sign*r;\n}\n", "    var r = \"\";\n    var s = \"\";\n    var m =\
    \ 1;\n    var n = x;\n    while (n >= base){\n        r = base_ten[base] + r;\n\
    \        n -= base;\n    }\n    while (n > 0){\n        s = base_ten[n] + s;\n\
    \        n -= 1;\n    }\n    return r + s;\n}\n", "\tvar digits = x.toString(base);\n\
    \tvar zeros = \"\";\n\twhile (digits.length < base){\n\t\tzeros += \"0\";\n\t\
    }\n\treturn zeros + digits;\n}\n", "\tvar bases = [1,2,3,4,5,6,7,8,9];\n\tvar\
    \ base;\n\tfor(var i = 0; i < bases.length; i++){\n\t\tbase = bases[i];\n\t\t\
    if(base <= x && x <= base * base){\n\t\t\treturn base;\n\t\t}\n\t}\n}\n", "\t\
    var digits = x.toString(base).split(\"\"), l = digits.length, i = 1, s = \"\"\
    ;\n\twhile(i < l){\n\t\ts += digits[i++] + \"0\";\n\t}\n\treturn s;\n}\n", " \
    \   var r = \"\";\n    while(x > 0){\n        r = base_digits[x%base] + r;\n \
    \       x = Math.floor(x/base);\n    }\n    return r;\n}\n", "    var r = \"\"\
    ;\n    var sign = \"\";\n    if (x < 0){\n        sign = \"-\";\n        x = -x;\n\
    \    }\n    if (x < base){\n        r = x;\n    }\n    else{\n        var m =\
    \ Math.pow(base,x);\n        r = Math.floor(m/Math.pow(base,base));\n        r\
    \ = m%Math.pow(base,base);\n    }\n    if (r.toString().length < base){\n    \
    \    r = new Array(base-r+1).join(\"0\") + r;\n    }\n    return sign + r;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
