name: HumanEval_160_do_algebra
language: js
results:
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tvar result = 0;\n\tfor(var i=0; i<operator.length; i++){\n\t\tresult += operand[i]\
    \ * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpcy7catig.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcy7catig.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpg9_bavmi.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpg9_bavmi.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpoll_hd53.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoll_hd53.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpc5uuk2sw.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc5uuk2sw.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \t\n\t// If the operator list is empty\n\tif(operator.length == 0){\n\t\t\n\t\t\
    // If the operand list is empty\n\t\tif(operand.length == 0){\n\t\t\treturn 0;\n\
    \t\t}\n\t\t\n\t\t// If the operand list has only one element\n\t\tif(operand.length\
    \ == 1){\n\t\t\treturn operand[0];\n\t\t}\n\t\t\n\t\t// If the operand list has\
    \ two elements\n\t\tif(operand.length == 2){\n\t\t\treturn operand[0] + operand[1];\n\
    \t\t}\n\t\t\n\t\t// If the operand list has three elements\n\t\tif(operand.length\
    \ == 3){\n\t\t\treturn operand[0] + operand[1] + operand[2];\n\t\t}\n\t\t\n\t\t\
    // If the operand list has four elements\n\t\tif(operand.length == 4){\n\t\t\t\
    return operand[0] + operand[1] + operand[2] + operand[3];\n\t\t}\n\t\t\n\t\t//\
    \ If the operand list has five elements\n\t\tif(operand.length == 5){\n\t\t\t\
    return operand[0] + operand[1] + operand[2] + operand[3] + operand[4];\n\t\t}\n\
    \t\t\n\t\t// If the operand list has six elements\n\t\tif(operand.length == 6){\n\
    \t\t\treturn operand[0] + operand[1] + operand[2] + operand[3] + operand[4] +\
    \ operand[5];\n\t\t}\n\t\t\n\t\t// If the operand list has seven elements\n\t\t\
    if(operand.length == 7){\n\t\t\treturn operand[0] + operand[1] + operand[2] +\
    \ operand[3] + operand[4] + operand[5] + operand[6];\n\t\t}\n\t\t\n\t\t// If the\
    \ operand list has eight elements\n\t\tif(operand.length == 8){\n\t\t\treturn\
    \ operand[0] + operand[1] + operand[2] + operand[3] + operand[4] + operand[5]\
    \ + operand[6] + operand[7];\n\t\t}\n\t\t\n\t\t// If the operand list has nine\
    \ elements\n\t\tif(operand.length == 9){\n\t\t\treturn operand[0] + operand[1]\
    \ + operand[2] + operand[3] + operand[4] + operand[5] + operand[6] + operand[7]\
    \ + operand[8];\n\t\t}\n\t\t\n\t\t// If the operand list has ten elements\n\t\t\
    if(operand.length == 10){\n\t\t\treturn operand[0] + operand[1] + operand[2] +\
    \ operand[3] + operand[4] + operand[5] + operand[6] + operand[7] + operand[8]\
    \ + operand[9];\n\t\t}\n\t\t\n\t\t// If the operand list has eleven elements\n\
    \t\tif(operand.length == 11){\n\t\t\treturn operand[0] + operand[1] + operand[2]\
    \ + operand[3] + operand[4] + operand[5] + operand[6] + operand[7] + operand[8]\
    \ + operand[9] + operand[10];\n\t\t}\n\t\t\n\t\t// If the operand list has twelve\
    \ elements\n\t\tif(operand.length == 12){\n\t\t\treturn operand[0] + operand[1]\
    \ + operand[2] + operand[3] + operand[4] + operand[5] + operand[6] + operand[7]\
    \ + operand[8] + operand[9] + operand[10] + operand[11];\n\t\t}\n\t\t\n\t\t//\
    \ If the operand list has thirteen elements\n\t\tif(\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3gduf_k7.js:91\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    var operators = operator.split('+');\n    var operands\
    \ = operand.split('+');\n    \n    for(var i = 0; i < operators.length; i++){\n\
    \        result += operands[i] * operators[i];\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt1762q99.js:21\n    var operators = operator.split('+');\n    \
    \                         ^\n\nTypeError: operator.split is not a function\n \
    \   at do_algebra (/tmp/tmpt1762q99.js:21:30)\n    at test (/tmp/tmpt1762q99.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmpt1762q99.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tvar result = 0;\n\tfor (var i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmppt17bvz5.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmppt17bvz5.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmpqkjd85co.js:28:10)\n    at Object.<anonymous> (/tmp/tmpqkjd85co.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpxie416kv.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxie416kv.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpxmif9sl2.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpxmif9sl2.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpply10zb8.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpply10zb8.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpmls4u5oz.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmls4u5oz.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    \n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmpajo17vzf.js:29:10)\n    at Object.<anonymous> (/tmp/tmpajo17vzf.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpas1elr3q.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpas1elr3q.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp6xc8bjxy.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6xc8bjxy.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmptwcd_79v.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmptwcd_79v.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    var operators = operator.split('+');\n    var operands\
    \ = operand.split('+');\n    for(var i=0; i<operators.length; i++){\n        result\
    \ += operands[i] * operators[i];\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpugqgx4rz.js:21\n    var operators = operator.split('+');\n    \
    \                         ^\n\nTypeError: operator.split is not a function\n \
    \   at do_algebra (/tmp/tmpugqgx4rz.js:21:30)\n    at test (/tmp/tmpugqgx4rz.js:34:20)\n\
    \    at Object.<anonymous> (/tmp/tmpugqgx4rz.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpthyn_ra2.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpthyn_ra2.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmplvx2mz_d.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmplvx2mz_d.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmprf9f251s.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmprf9f251s.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    var operator_count = operator.length;\n    var operand_count\
    \ = operand.length - 1;\n    \n    for(var i = 0; i < operator_count; i++){\n\
    \        result += operand[operand_count] * operator[i];\n        operand_count--;\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpa7n83i1d.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa7n83i1d.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tvar result = 0;\n\tfor (var i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpplczj1f6.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpplczj1f6.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpog_4qkl8.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpog_4qkl8.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpji0wqmbh.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpji0wqmbh.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operand.length; i++){\n\t\tresult += operand[i]\
    \ * operator[operand.length - i - 1];\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpjrxyapid.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjrxyapid.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code goes here\n    var result = 0;\n    for(var i=0;i<operand.length;i++){\n\
    \        switch(operator[i]){\n            case '+':\n                result =\
    \ result + operand[i];\n                break;\n            case '-':\n      \
    \          result = result - operand[i];\n                break;\n           \
    \ case '*':\n                result = result * operand[i];\n                break;\n\
    \            case '/':\n                result = result / operand[i];\n      \
    \          break;\n            case '**':\n                result = result **\
    \ operand[i];\n                break;\n            default:\n                console.log(\"\
    Invalid operator\");\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: "Invalid operator\n"
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmpx3wj67ac.js:51:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx3wj67ac.js:56:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpyijnf40d.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyijnf40d.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    var operators = operator.split('+');\n    var operands\
    \ = operand.split('+');\n    \n    for(var i=0; i<operators.length; i++){\n  \
    \      result += operands[i] * operators[i];\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpout89lr8.js:21\n    var operators = operator.split('+');\n    \
    \                         ^\n\nTypeError: operator.split is not a function\n \
    \   at do_algebra (/tmp/tmpout89lr8.js:21:30)\n    at test (/tmp/tmpout89lr8.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmpout89lr8.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    \n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmplwcpzpkw.js:29:10)\n    at Object.<anonymous> (/tmp/tmplwcpzpkw.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp_sxpkqv8.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_sxpkqv8.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpw6rux5pd.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw6rux5pd.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpx1bdo6nw.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx1bdo6nw.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpvpnb9ngk.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvpnb9ngk.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operand.length; i++){\n\t\tresult += operand[i]\
    \ * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpr_swq1u1.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr_swq1u1.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    \n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmp2wtmowlh.js:29:10)\n    at Object.<anonymous> (/tmp/tmp2wtmowlh.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  var result = 0;\n  for (var i = 0; i < operand.length; i++){\n    result +=\
    \ operand[i] * operator[operand.length - 1 - i];\n  }\n  return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp5ma5whpo.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5ma5whpo.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpw2_0pb2n.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw2_0pb2n.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp8uyy1f0f.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8uyy1f0f.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpssj0dy5p.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpssj0dy5p.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp0cz22zxm.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0cz22zxm.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  var result = 0;\n  for (var i = 0; i < operator.length; i++){\n    result +=\
    \ operand[i] * operator[i];\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpm99gkv16.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm99gkv16.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp_ztq5lba.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_ztq5lba.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp1ambtcsd.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1ambtcsd.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    var operators = operator.split('+');\n    var operands\
    \ = operand.split('+');\n    var operators_length = operators.length;\n    var\
    \ operands_length = operands.length;\n    \n    for(var i = 0; i < operators_length;\
    \ i++){\n        result += operands[i] * operators[i];\n    }\n    \n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"],\
    \ [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph0k_hil9.js:21\n    var operators = operator.split('+');\n    \
    \                         ^\n\nTypeError: operator.split is not a function\n \
    \   at do_algebra (/tmp/tmph0k_hil9.js:21:30)\n    at test (/tmp/tmph0k_hil9.js:38:20)\n\
    \    at Object.<anonymous> (/tmp/tmph0k_hil9.js:43:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    var operators = operator.split('+');\n    var operands\
    \ = operand.split('+');\n    var operators_length = operators.length;\n    var\
    \ operands_length = operands.length;\n    var operator_length = operators_length\
    \ - 1;\n    var operand_length = operands_length - 1;\n    \n    for(var i = 0;\
    \ i <= operand_length; i++){\n        for(var j = 0; j <= operator_length; j++){\n\
    \            var operator = operators[j];\n            var operand = operands[j];\n\
    \            var operator_position = operators.indexOf(operator);\n          \
    \  var operand_position = operands.indexOf(operand);\n            var operator_position\
    \ = operator_position + 1;\n            var operand_position = operand_position\
    \ + 1;\n            \n            if(operator_position < operand_position){\n\
    \                result += operands[operand_position];\n            }\n      \
    \      else if(operator_position > operand_position){\n                result\
    \ -= operands[operand_position];\n            }\n            else{\n         \
    \       result *= operands[operand_position];\n            }\n        }\n    }\n\
    \    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptjclke9e.js:21\n    var operators = operator.split('+');\n    \
    \                         ^\n\nTypeError: operator.split is not a function\n \
    \   at do_algebra (/tmp/tmptjclke9e.js:21:30)\n    at test (/tmp/tmptjclke9e.js:56:20)\n\
    \    at Object.<anonymous> (/tmp/tmptjclke9e.js:61:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpv3ck6uck.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv3ck6uck.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tvar result = 0;\n\t\n\tfor(var i = 0; i < operator.length; i++){\n\t\tresult\
    \ += operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpgxkhgnd6.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgxkhgnd6.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \t\n\t// Your code goes here\n\t\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmpmulx25hd.js:30:10)\n    at Object.<anonymous> (/tmp/tmpmulx25hd.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpmzpgpbco.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmzpgpbco.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpt7fv3elx.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt7fv3elx.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    var operators = operator.split('+');\n    var operands\
    \ = operand.split('+');\n    for(var i = 0; i < operators.length; i++){\n    \
    \    result += operands[i] * operators[i];\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkolwrf3m.js:21\n    var operators = operator.split('+');\n    \
    \                         ^\n\nTypeError: operator.split is not a function\n \
    \   at do_algebra (/tmp/tmpkolwrf3m.js:21:30)\n    at test (/tmp/tmpkolwrf3m.js:34:20)\n\
    \    at Object.<anonymous> (/tmp/tmpkolwrf3m.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpsl2u1lg3.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsl2u1lg3.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpyxx_oglc.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyxx_oglc.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpdaw4b73c.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdaw4b73c.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  var result = 0;\n  for (var i = 0; i < operator.length; i++){\n    result +=\
    \ operand[i] * operator[i];\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpll0msfwu.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpll0msfwu.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    \n    // Your code here\n    \n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmpfqfsz_bo.js:30:10)\n    at Object.<anonymous> (/tmp/tmpfqfsz_bo.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tlet operator_index = 0;\n\tlet operand_index = 0;\n\tlet\
    \ operator = operator[operator_index];\n\tlet operand = operand[operand_index];\n\
    \twhile(operator_index < operator.length && operand_index < operand.length){\n\
    \t\tswitch(operator){\n\t\t\tcase '+':\n\t\t\t\tresult = result + operand;\n\t\
    \t\t\toperator_index++;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult = result\
    \ - operand;\n\t\t\t\toperator_index++;\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\
    \t\tresult = result * operand;\n\t\t\t\toperator_index++;\n\t\t\t\tbreak;\n\t\t\
    \tcase '//':\n\t\t\t\tresult = result // operand;\n\t\t\t\toperator_index++;\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\tresult = result ** operand;\n\t\t\t\t\
    operator_index++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\t\
    operand = operand[operand_index];\n\t}\n\treturn result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnl0mf5jk.js:23\n\tlet operator = operator[operator_index];\n\t\
    \    ^\n\nSyntaxError: Identifier 'operator' has already been declared\n    at\
    \ wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tlet operator_index = 0;\n\tlet operand_index = 0;\n\twhile(operator_index\
    \ < operator.length && operand_index < operand.length){\n\t\tswitch(operator[operator_index]){\n\
    \t\t\tcase '+':\n\t\t\t\tresult += operand[operand_index];\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult -= operand[operand_index];\n\
    \t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '*':\n\t\t\t\tresult *= operand[operand_index];\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\tresult /=\
    \ operand[operand_index];\n\t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\tresult **= operand[operand_index];\n\
    \t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\
    \t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmpywbx_psj.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpywbx_psj.js:67:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i <= operand.length - 1; i++){\n    \
    \    result += operand[i] * operator[i - 1];\n    }\n    return result;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp4zuqs3nq.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4zuqs3nq.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp3xl8c8l2.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3xl8c8l2.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                result += operand[i];\n              \
    \  break;\n            case '-':\n                result -= operand[i];\n    \
    \            break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmpv4q4e6fw.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmpv4q4e6fw.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpd9i9qcjh.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd9i9qcjh.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp1e6_pfl9.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1e6_pfl9.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i<operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp0d7j5h6g.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0d7j5h6g.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpa26dudty.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa26dudty.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tlet operator_index = 0;\n\tlet operand_index = 0;\n\twhile(operator_index\
    \ < operator.length && operand_index < operand.length){\n\t\tlet operator = operator[operator_index];\n\
    \t\tlet operand = operand[operand_index];\n\t\tswitch(operator){\n\t\t\tcase '+':\n\
    \t\t\t\tresult += operand;\n\t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\
    \t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult -= operand;\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\tresult *= operand;\n\
    \t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '//':\n\t\t\t\tresult /= operand;\n\t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\tresult **= operand;\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log('Error:\
    \ Invalid operator');\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpkfx5up7k.js:24\n\t\tlet operator = operator[operator_index];\n\t\
    \t               ^\n\nReferenceError: Cannot access 'operator' before initialization\n\
    \    at do_algebra (/tmp/tmpkfx5up7k.js:24:18)\n    at test (/tmp/tmpkfx5up7k.js:65:20)\n\
    \    at Object.<anonymous> (/tmp/tmpkfx5up7k.js:70:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    var operators = operator.split('+');\n    var operands\
    \ = operand.split('+');\n    for(var i=0; i<operators.length; i++){\n        result\
    \ += operands[i] * operators[i];\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4rebq5gu.js:21\n    var operators = operator.split('+');\n    \
    \                         ^\n\nTypeError: operator.split is not a function\n \
    \   at do_algebra (/tmp/tmp4rebq5gu.js:21:30)\n    at test (/tmp/tmp4rebq5gu.js:34:20)\n\
    \    at Object.<anonymous> (/tmp/tmp4rebq5gu.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpb3kft5i2.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb3kft5i2.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operand.length; i++){\n\t\tresult += operand[i]\
    \ * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpdbkg95zi.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdbkg95zi.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpco8p4b65.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpco8p4b65.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor (let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp7yr6901c.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7yr6901c.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                result += operand[i];\n              \
    \  break;\n            case '-':\n                result -= operand[i];\n    \
    \            break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmp_s8dtdfj.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_s8dtdfj.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmppc977mps.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmppc977mps.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    var result = 0;\n    for(var i = 0; i < operator.length;\
    \ i++){\n        result += operand[i] * operator[i];\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpr_1h4jta.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr_1h4jta.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor (let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmplda1uj54.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmplda1uj54.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp322q7jlx.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp322q7jlx.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tvar result = 0;\n\tfor (var i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpqcob49tf.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqcob49tf.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp6vlqnlsi.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6vlqnlsi.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operand.length; i++){\n\t\tresult += operand[i]\
    \ * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp7rpm23s4.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7rpm23s4.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpoeugy9fz.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoeugy9fz.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpgvkmvs0s.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgvkmvs0s.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \t\n\t// Initialization\n\tlet result = 0;\n\tlet i = 0;\n\t\n\t// Looping through\
    \ the operand\n\tfor(; i < operand.length; i++){\n\t\t\n\t\t// Looping through\
    \ the operator\n\t\tfor(let j = 0; j < operator.length; j++){\n\t\t\t\n\t\t\t\
    // If the operator is found\n\t\t\tif(operator[j] == operand[i]){\n\t\t\t\t\n\t\
    \t\t\t// If the operator is addition\n\t\t\t\tif(operator[j] == \"+\"){\n\t\t\t\
    \t\tresult += operand[i];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// If the operator is\
    \ subtraction\n\t\t\t\telse if(operator[j] == \"-\"){\n\t\t\t\t\tresult -= operand[i];\n\
    \t\t\t\t}\n\t\t\t\t\n\t\t\t\t// If the operator is multiplication\n\t\t\t\telse\
    \ if(operator[j] == \"*\"){\n\t\t\t\t\tresult *= operand[i];\n\t\t\t\t}\n\t\t\t\
    \t\n\t\t\t\t// If the operator is floor division\n\t\t\t\telse if(operator[j]\
    \ == \"//\"){\n\t\t\t\t\tresult /= operand[i];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\
    // If the operator is exponentiation\n\t\t\t\telse if(operator[j] == \"**\"){\n\
    \t\t\t\t\tresult **= operand[i];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// If the operator\
    \ is unrecognized \n\t\t\t\telse{\n\t\t\t\t\tconsole.log(\"Unrecognized operator:\
    \ \" + operator[j]);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Break out of the loop\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Return the result\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n0\n\nshould equal\n\n37\n    at test (/tmp/tmpk8_h1h71.js:79:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk8_h1h71.js:84:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \t\n\t// Your code goes here\n\t\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmpphyb2jtc.js:30:10)\n    at Object.<anonymous> (/tmp/tmpphyb2jtc.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpy6mngxf4.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy6mngxf4.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operand.length; i++){\n\t\tresult += operand[i]\
    \ * operator[operand.length - i - 1];\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp1gorin7m.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1gorin7m.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpzrks877q.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzrks877q.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmppr8kwtxc.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmppr8kwtxc.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpo8owwytc.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo8owwytc.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmprqk_9807.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmprqk_9807.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpidl1pn3b.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpidl1pn3b.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpx9d9g5k5.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpx9d9g5k5.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    let result = 0;\n    for(let i = 0; i < operator.length;\
    \ i++){\n        result += operand[i] * operator[i];\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpuf_angvt.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuf_angvt.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpr35pl55y.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr35pl55y.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[operand.length - 1 - i];\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp1uk_jtuz.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1uk_jtuz.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    var result = 0;\n    for(var i=0; i<operator.length;\
    \ i++){\n        result += operand[i] * operator[i];\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpc_gblw65.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc_gblw65.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpe8f_u8h9.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe8f_u8h9.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    \n    // Initialization\n    var result = 0;\n    var operator_index = 0;\n\
    \    var operand_index = 0;\n    \n    // Loop through the operator list\n   \
    \ while(operator_index < operator.length){\n        \n        // Get the current\
    \ operator from the operator list\n        var current_operator = operator[operator_index];\n\
    \        \n        // Get the current operand from the operand list\n        var\
    \ current_operand = operand[operand_index];\n        \n        // If the current\
    \ operator is '+', then add the current operand to the result\n        if(current_operator\
    \ === '+'){\n            result += current_operand;\n        }\n        \n   \
    \     // If the current operator is '-', then subtract the current operand from\
    \ the result\n        else if(current_operator === '-'){\n            result -=\
    \ current_operand;\n        }\n        \n        // If the current operator is\
    \ '*', then multiply the current operand to the result\n        else if(current_operator\
    \ === '*'){\n            result *= current_operand;\n        }\n        \n   \
    \     // If the current operator is '/', then floor the result and divide the\
    \ result by the current operand\n        else if(current_operator === '/'){\n\
    \            result = Math.floor(result/current_operand);\n        }\n       \
    \ \n        // If the current operator is '**', then raise the result to the current\
    \ operand\n        else if(current_operator === '**'){\n            result = Math.pow(result,current_operand);\n\
    \        }\n        \n        // Increment the operand index\n        operand_index++;\n\
    \        \n        // Increment the operator index\n        operator_index++;\n\
    \    }\n    \n    // Return the result\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmpvwz_bxhf.js:76:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvwz_bxhf.js:81:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpkc9647da.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkc9647da.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    var result = 0;\n    for(var i = 0; i < operand.length;\
    \ i++){\n        result += operand[i] * operator[i];\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmprzwfdf1z.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmprzwfdf1z.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpe_npt0g1.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe_npt0g1.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    var result = 0;\n    for(var i = 0; i < operand.length;\
    \ i++){\n        result += operand[i] * operator[i];\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpeb8vcxn9.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeb8vcxn9.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpdpoy5_s6.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdpoy5_s6.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpmqwuxmbc.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmqwuxmbc.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpvb5tj6ro.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvb5tj6ro.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp9xweeryt.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9xweeryt.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tlet operator_index = 0;\n\tlet operand_index = 0;\n\twhile(operator_index\
    \ < operator.length && operand_index < operand.length){\n\t\tswitch(operator[operator_index]){\n\
    \t\t\tcase '+':\n\t\t\t\tresult += operand[operand_index];\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult -= operand[operand_index];\n\
    \t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '*':\n\t\t\t\tresult *= operand[operand_index];\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\tresult /=\
    \ operand[operand_index];\n\t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\tresult **= operand[operand_index];\n\
    \t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\
    \t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmpunhxw_x1.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpunhxw_x1.js:67:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpoff7ukjb.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoff7ukjb.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp887xmqn0.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp887xmqn0.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpu0a99sd1.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu0a99sd1.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[operand.length - 1 - i];\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp23klxwnr.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp23klxwnr.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpup4obg87.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpup4obg87.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    \n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmp1wg_7g2b.js:29:10)\n    at Object.<anonymous> (/tmp/tmp1wg_7g2b.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    var operators = operator.split('+');\n    var operands\
    \ = operand.split('+');\n    for(var i = 0; i < operators.length; i++){\n    \
    \    result += eval(operators[i]) * eval(operands[i]);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmprj86i0ne.js:21\n    var operators = operator.split('+');\n    \
    \                         ^\n\nTypeError: operator.split is not a function\n \
    \   at do_algebra (/tmp/tmprj86i0ne.js:21:30)\n    at test (/tmp/tmprj86i0ne.js:34:20)\n\
    \    at Object.<anonymous> (/tmp/tmprj86i0ne.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \t\n\t// Your code here\n\t\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmptkag1z1a.js:30:10)\n    at Object.<anonymous> (/tmp/tmptkag1z1a.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpdbhfqkmu.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdbhfqkmu.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpeuubcod_.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeuubcod_.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp8bsftjur.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8bsftjur.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                result += operand[i];\n              \
    \  break;\n            case '-':\n                result -= operand[i];\n    \
    \            break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmphdk3c7bg.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmphdk3c7bg.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor (let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpaio9o4nq.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpaio9o4nq.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tvar result = 0;\n\tfor(var i = 0; i<operand.length; i++){\n\t\tswitch(operator[i]){\n\
    \t\t\tcase '+':\n\t\t\t\tresult += operand[i];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\
    \t\t\t\tresult -= operand[i];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\tresult\
    \ *= operand[i];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\tresult /= operand[i];\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\tresult **= operand[i];\n\t\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmpshh5ucxh.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmpshh5ucxh.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tlet operator_index = 0;\n\tlet operand_index = 0;\n\twhile(operator_index\
    \ < operator.length && operand_index < operand.length){\n\t\tswitch(operator[operator_index]){\n\
    \t\t\tcase '+':\n\t\t\t\tresult += operand[operand_index];\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult -= operand[operand_index];\n\
    \t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '*':\n\t\t\t\tresult *= operand[operand_index];\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '/':\n\t\t\t\tresult /= operand[operand_index];\n\
    \t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '**':\n\t\t\t\tresult **= operand[operand_index];\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log('Invalid\
    \ operator');\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmptueb6bx5.js:63:10)\n\
    \    at Object.<anonymous> (/tmp/tmptueb6bx5.js:68:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpjqzuwm9y.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjqzuwm9y.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp2t2gvoyi.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2t2gvoyi.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp_qta5r2b.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_qta5r2b.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpc5sdp5aw.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc5sdp5aw.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor (let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmph5ofog_1.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmph5ofog_1.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpyaodd97p.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyaodd97p.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    \n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmpwg7z38u9.js:29:10)\n    at Object.<anonymous> (/tmp/tmpwg7z38u9.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpepkqo4uo.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpepkqo4uo.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp3h2ama5m.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3h2ama5m.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    var result = 0;\n    for(var i=0; i<operator.length;\
    \ i++){\n        result += operand[i] * operator[i];\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpo0blxmnb.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo0blxmnb.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpsbt4y6f0.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsbt4y6f0.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpmfo6y096.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmfo6y096.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tlet operator_index = 0;\n\tlet operand_index = 0;\n\twhile(operator_index\
    \ < operator.length && operand_index < operand.length){\n\t\tlet operator = operator[operator_index];\n\
    \t\tlet operand = operand[operand_index];\n\t\tswitch(operator){\n\t\t\tcase '+':\n\
    \t\t\t\tresult = result + operand;\n\t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\
    \t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult = result - operand;\n\t\t\t\t\
    operator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\
    \t\t\t\tresult = result * operand;\n\t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\
    \t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\tresult = result / operand;\n\t\t\t\t\
    operator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\
    \t\t\t\tresult = result ** operand;\n\t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\
    \t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpysb9_64p.js:24\n\t\tlet operator = operator[operator_index];\n\t\
    \t               ^\n\nReferenceError: Cannot access 'operator' before initialization\n\
    \    at do_algebra (/tmp/tmpysb9_64p.js:24:18)\n    at test (/tmp/tmpysb9_64p.js:64:20)\n\
    \    at Object.<anonymous> (/tmp/tmpysb9_64p.js:69:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpjej8pl7d.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjej8pl7d.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp5qx93e04.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5qx93e04.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp955vais9.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp955vais9.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpdzdmdg_l.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdzdmdg_l.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    \n    // Your code here\n    \n    // Your code here\n\
    \    \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // \nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpe54j14qg.js:177\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code goes here\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmpb7o8gqd0.js:28:10)\n    at Object.<anonymous> (/tmp/tmpb7o8gqd0.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tlet operator_count = operator.length;\n\tlet operand_count\
    \ = operand.length - 1;\n\tlet operator_stack = [];\n\tlet operand_stack = [];\n\
    \tlet operator_stack_index = 0;\n\tlet operand_stack_index = 0;\n\tlet operator_stack_string\
    \ = \"\";\n\tlet operand_stack_string = \"\";\n\tlet operator_stack_string_index\
    \ = 0;\n\tlet operand_stack_string_index = 0;\n\tlet operator_stack_length = operator_stack.length;\n\
    \tlet operand_stack_length = operand_stack.length;\n\tlet operator_stack_pointer\
    \ = 0;\n\tlet operand_stack_pointer = 0;\n\tlet operator_stack_pointer_string\
    \ = \"\";\n\tlet operand_stack_pointer_string = \"\";\n\tlet operator_stack_pointer_string_index\
    \ = 0;\n\tlet operand_stack_pointer_string_index = 0;\n\tlet operator_stack_pointer_length\
    \ = operator_stack_pointer.length;\n\tlet operand_stack_pointer_length = operand_stack_pointer.length;\n\
    \tlet operator_stack_pointer_pointer = 0;\n\tlet operand_stack_pointer_pointer\
    \ = 0;\n\tlet operator_stack_pointer_pointer_string = \"\";\n\tlet operand_stack_pointer_pointer_string\
    \ = \"\";\n\tlet operator_stack_pointer_pointer_string_index = 0;\n\tlet operand_stack_pointer_pointer_string_index\
    \ = 0;\n\tlet operator_stack_pointer_pointer_length = operator_stack_pointer_pointer.length;\n\
    \tlet operand_stack_pointer_pointer_length = operand_stack_pointer_pointer.length;\n\
    \tlet operator_stack_pointer_pointer_pointer = 0;\n\tlet operand_stack_pointer_pointer_pointer\
    \ = 0;\n\tlet operator_stack_pointer_pointer_pointer_string = \"\";\n\tlet operand_stack_pointer_pointer_pointer_string\
    \ = \"\";\n\tlet operator_stack_pointer_pointer_pointer_string_index = 0;\n\t\
    let operand_stack_pointer_pointer_pointer_string_index = 0;\n\tlet operator_stack_pointer_pointer_pointer_length\
    \ = operator_stack_pointer_pointer_pointer.length;\n\tlet operand_stack_pointer_pointer_pointer_length\
    \ = operand_stack_pointer_pointer_pointer.length;\n\tlet operator_stack_pointer_pointer_pointer_pointer\
    \ = 0;\n\tlet operand_stack_pointer_pointer_pointer_pointer = 0;\n\tlet operator_stack_pointer_pointer_pointer_pointer_string\
    \ = \"\";\n\tlet operand_stack_pointer_pointer_pointer_pointer_string = \"\";\n\
    \tlet operator_stack_pointer_pointer_pointer_pointer_string_index = 0;\n\tlet\
    \ operand_stack_pointer_pointer_pointer_pointer_string_index = 0;\n\tlet operator_stack_pointer_pointer_pointer_pointer_length\
    \ = operator_stack_pointer_pointer_pointer_pointer.length;\n\tlet operand_stack_pointer_pointer\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfi7iyu9c.js:64\n\tlet operand_stack_pointer_pointer\n\t    ^\n\n\
    SyntaxError: Identifier 'operand_stack_pointer_pointer' has already been declared\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp9t2weh70.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9t2weh70.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tlet operator_index = 0;\n\tlet operand_index = 0;\n\twhile(operator_index\
    \ < operator.length && operand_index < operand.length){\n\t\tlet operator = operator[operator_index];\n\
    \t\tlet operand = operand[operand_index];\n\t\tswitch(operator){\n\t\t\tcase '+':\n\
    \t\t\t\tresult += operand;\n\t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\
    \t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult -= operand;\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\tresult *= operand;\n\
    \t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '//':\n\t\t\t\tresult /= operand;\n\t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\tresult **= operand;\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log('Invalid\
    \ operator');\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpruc0zyux.js:24\n\t\tlet operator = operator[operator_index];\n\t\
    \t               ^\n\nReferenceError: Cannot access 'operator' before initialization\n\
    \    at do_algebra (/tmp/tmpruc0zyux.js:24:18)\n    at test (/tmp/tmpruc0zyux.js:65:20)\n\
    \    at Object.<anonymous> (/tmp/tmpruc0zyux.js:70:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tlet operator_index = 0;\n\tlet operand_index = 0;\n\twhile(operator_index\
    \ < operator.length && operand_index < operand.length){\n\t\tlet operator = operator[operator_index];\n\
    \t\tlet operand = operand[operand_index];\n\t\tswitch(operator){\n\t\t\tcase '+':\n\
    \t\t\t\tresult += operand;\n\t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\
    \t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult -= operand;\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\tresult *= operand;\n\
    \t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '/':\n\t\t\t\tresult /= operand;\n\t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\tresult **= operand;\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log('Invalid\
    \ operator');\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpupiljxoe.js:24\n\t\tlet operator = operator[operator_index];\n\t\
    \t               ^\n\nReferenceError: Cannot access 'operator' before initialization\n\
    \    at do_algebra (/tmp/tmpupiljxoe.js:24:18)\n    at test (/tmp/tmpupiljxoe.js:65:20)\n\
    \    at Object.<anonymous> (/tmp/tmpupiljxoe.js:70:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmprgbtog1v.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmprgbtog1v.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpjnl2hbys.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjnl2hbys.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp2o1j6_sy.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2o1j6_sy.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpfwri21ys.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfwri21ys.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp6nmtq24g.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6nmtq24g.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpafiwonue.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpafiwonue.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpqc5m8ms9.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqc5m8ms9.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp_bxl3x6t.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_bxl3x6t.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tlet operator_index = 0;\n\tlet operand_index = 0;\n\twhile(operator_index\
    \ < operator.length && operand_index < operand.length){\n\t\tswitch(operator[operator_index]){\n\
    \t\t\tcase '+':\n\t\t\t\tresult += operand[operand_index];\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult -= operand[operand_index];\n\
    \t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '*':\n\t\t\t\tresult *= operand[operand_index];\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase '/':\n\t\t\t\tresult /= operand[operand_index];\n\
    \t\t\t\toperator_index++;\n\t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '**':\n\t\t\t\tresult **= operand[operand_index];\n\t\t\t\toperator_index++;\n\
    \t\t\t\toperand_index++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow 'Invalid\
    \ operator';\n\t\t}\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmphrh9b14k.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmphrh9b14k.js:67:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp7091ks6j.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7091ks6j.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    \n    // Your code goes here\n    \n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmp9wyam_su.js:30:10)\n    at Object.<anonymous> (/tmp/tmp9wyam_su.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmprvqtjvy9.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmprvqtjvy9.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp4sd_4bio.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4sd_4bio.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmprh0os3kk.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmprh0os3kk.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpb0qmx48o.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb0qmx48o.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  var result = 0;\n  for(var i=0; i<operator.length; i++){\n    result += operand[i]\
    \ * operator[i];\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp690l4jln.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp690l4jln.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    var result = 0;\n    for(var i = 0; i < operator.length;\
    \ i++){\n        result += operand[i] * operator[i];\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp8kuja43t.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8kuja43t.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpmqvjis0l.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmqvjis0l.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpwkxhwcku.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwkxhwcku.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp8bk0kaw9.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8bk0kaw9.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\"\
    , \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7,\
    \ 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmpropdm34d.js:28:10)\n    at Object.<anonymous> (/tmp/tmpropdm34d.js:33:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpat74huof.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpat74huof.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    // Your code here\n    var result = 0;\n    for(var i = 0; i < operand.length;\
    \ i++){\n        result += operand[i] * operator[i];\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpdn0ei7v9.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdn0ei7v9.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpi5qhok0m.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpi5qhok0m.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                result += operand[i];\n              \
    \  break;\n            case '-':\n                result -= operand[i];\n    \
    \            break;\n            case '*':\n                result *= operand[i];\n\
    \                break;\n            case '/':\n                result /= operand[i];\n\
    \                break;\n            case '**':\n                result **= operand[i];\n\
    \                break;\n        }\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmppo1ozb8y.js:48:10)\n\
    \    at Object.<anonymous> (/tmp/tmppo1ozb8y.js:53:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmplwdzhop3.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmplwdzhop3.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tlet operator_index = 0;\n\tlet operand_index = 0;\n\tlet\
    \ operator_string = \"\";\n\tlet operand_string = \"\";\n\tlet operator_length\
    \ = operator.length;\n\tlet operand_length = operand.length - 1;\n\tlet operator_counter\
    \ = 0;\n\tlet operand_counter = 0;\n\tlet operator_char;\n\tlet operand_char;\n\
    \tlet operator_char_index;\n\tlet operand_char_index;\n\tlet operator_char_length;\n\
    \tlet operand_char_length;\n\tlet operator_char_counter;\n\tlet operand_char_counter;\n\
    \tlet operator_char_char;\n\tlet operand_char_char;\n\tlet operator_char_char_length;\n\
    \tlet operand_char_char_length;\n\tlet operator_char_char_counter;\n\tlet operand_char_char_counter;\n\
    \tlet operator_char_char_char;\n\tlet operand_char_char_char;\n\tlet operator_char_char_char_length;\n\
    \tlet operand_char_char_char_length;\n\tlet operator_char_char_char_counter;\n\
    \tlet operand_char_char_char_counter;\n\tlet operator_char_char_char_char;\n\t\
    let operand_char_char_char_char;\n\tlet operator_char_char_char_char_length;\n\
    \tlet operand_char_char_char_char_length;\n\tlet operator_char_char_char_char_counter;\n\
    \tlet operand_char_char_char_char_counter;\n\tlet operator_char_char_char_char_char;\n\
    \tlet operand_char_char_char_char_char;\n\tlet operator_char_char_char_char_char_length;\n\
    \tlet operand_char_char_char_char_char_length;\n\tlet operator_char_char_char_char_char_counter;\n\
    \tlet operand_char_char_char_char_char_counter;\n\tlet operator_char_char_char_char_char_char;\n\
    \tlet operand_char_char_char_char_char_char;\n\tlet operator_char_char_char_char_char_char_char_length;\n\
    \tlet operand_char_char_char_char_char_char_char_length;\n\tlet operator_char_char_char_char_char_char_char_counter;\n\
    \tlet operand_char_char_char_char_char_char_char_counter;\n\tlet operator_char_char_char_char_char_char_char_char_length;\n\
    \tlet operand_char_char_char_char_char_char_char_length;\n\tlet operator_char_char_char_char_char_char_char_counter;\n\
    \tlet operand_char_char_char_char_char_char_char_counter;\n\tlet operator_char_char_char_char_char_char_char_char_char_length;\n\
    \tlet operand_char_char_char_char_char_char_char_char_char_length;\n\tlet operator_char_char_char_char_char_char_char_char_char_char_length;\n\
    \t\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpa0zlxoxn.js:68\n\tlet operand_char_char_char_char_char_char_char_length;\n\
    \t    ^\n\nSyntaxError: Identifier 'operand_char_char_char_char_char_char_char_length'\
    \ has already been declared\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpvy8hy8z5.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvy8hy8z5.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpjbxakmkw.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjbxakmkw.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpcm0alsn6.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcm0alsn6.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    var operators = operator.split('+');\n    var operands\
    \ = operand.split('+');\n    \n    for(var i = 0; i < operators.length; i++){\n\
    \        result += eval(operators[i]) * eval(operands[i]);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"\
    +\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"],\
    \ [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n\
    }\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpd7no3rer.js:21\n    var operators = operator.split('+');\n    \
    \                         ^\n\nTypeError: operator.split is not a function\n \
    \   at do_algebra (/tmp/tmpd7no3rer.js:21:30)\n    at test (/tmp/tmpd7no3rer.js:35:20)\n\
    \    at Object.<anonymous> (/tmp/tmpd7no3rer.js:40:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp6_mvs3a4.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6_mvs3a4.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    var operator_count = operator.length;\n    var operand_count\
    \ = operand.length - 1;\n    \n    for(var i=0; i<operator_count; i++){\n    \
    \    result += operand[operand_count] * operator[i];\n        operand_count--;\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpi8grhtnz.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpi8grhtnz.js:41:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp73lypjoe.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp73lypjoe.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \t\n\t// Your code here\n\t\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmp5blyd0ig.js:30:10)\n    at Object.<anonymous> (/tmp/tmp5blyd0ig.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp1t0_czek.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1t0_czek.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                result = result + operand[i];\n      \
    \          break;\n            case '-':\n                result = result - operand[i];\n\
    \                break;\n            case '*':\n                result = result\
    \ * operand[i];\n                break;\n            case '//':\n            \
    \    result = result / operand[i];\n                break;\n            case '**':\n\
    \                result = result ** operand[i];\n                break;\n    \
    \        default:\n                console.log(\"Invalid operator\");\n      \
    \  }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmp7hkmw3om.js:50:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7hkmw3om.js:55:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpd_r51ddy.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd_r51ddy.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpibmgr2c8.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpibmgr2c8.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpmvnqs7c1.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmvnqs7c1.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpo6jl_h9z.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo6jl_h9z.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  var result = 0;\n  for (var i = 0; i < operator.length; i++){\n    result +=\
    \ operand[i] * operator[i];\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpdqxx04yj.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdqxx04yj.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpwwapd6xe.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwwapd6xe.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tlet operator_index = 0;\n\tlet operand_index = 0;\n\tlet\
    \ operator_string = operator[operator_index];\n\tlet operand_string = operand[operand_index];\n\
    \twhile(operator_index < operator.length && operand_index < operand.length){\n\
    \t\tswitch(operator_string){\n\t\t\tcase '+':\n\t\t\t\tresult += operand_string;\n\
    \t\t\t\toperator_index++;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult -=\
    \ operand_string;\n\t\t\t\toperator_index++;\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\
    \t\t\t\tresult *= operand_string;\n\t\t\t\toperator_index++;\n\t\t\t\tbreak;\n\
    \t\t\tcase '//':\n\t\t\t\tresult /= operand_string;\n\t\t\t\toperator_index++;\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\tresult **= operand_string;\n\t\t\t\t\
    operator_index++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\t\
    operand_index++;\n\t\toperator_string = operator[operator_index];\n\t\toperand_string\
    \ = operand[operand_index];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n4\n\nshould equal\n\n37\n    at test (/tmp/tmptnsdywqo.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmptnsdywqo.js:67:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 4,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpqtv7gdtl.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqtv7gdtl.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    var operators = operator.split('+');\n    var operands\
    \ = operand.split('+');\n    for(var i = 0; i < operators.length; i++){\n    \
    \    result += eval(operators[i]) * eval(operands[i]);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
    \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
    \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1maakkh2.js:21\n    var operators = operator.split('+');\n    \
    \                         ^\n\nTypeError: operator.split is not a function\n \
    \   at do_algebra (/tmp/tmp1maakkh2.js:21:30)\n    at test (/tmp/tmp1maakkh2.js:34:20)\n\
    \    at Object.<anonymous> (/tmp/tmp1maakkh2.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmppomi61po.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmppomi61po.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpbyc76q1h.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbyc76q1h.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    let result = 0;\n    for(let i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmp1wa_sa8v.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1wa_sa8v.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpakw4wgdn.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpakw4wgdn.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \tlet result = 0;\n\tfor(let i = 0; i < operator.length; i++){\n\t\tresult +=\
    \ operand[i] * operator[i];\n\t}\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpkqbtiwnt.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkqbtiwnt.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \  var result = 0;\n  for(var i=0; i<operator.length; i++){\n    result += operand[i]\
    \ * operator[i];\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpqg1gh17a.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqg1gh17a.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operator.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmpdgq88d2a.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdgq88d2a.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i=0; i<operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmphxx6jen1.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmphxx6jen1.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \t\n\t// Your code goes here\n\t\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"\
    **\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\",\
    \ \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"\
    ], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n37\n    at\
    \ test (/tmp/tmptix8dpn1.js:30:10)\n    at Object.<anonymous> (/tmp/tmptix8dpn1.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 37,\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Given two lists operator, and operand. The first list has basic algebra\
    \ operations, and \n// the second list is a list of integers. Use the two given\
    \ lists to build the algebric \n// expression and return the evaluation of this\
    \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
    \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
    \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n\
    // result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
    \ list is equal to the length of operand list minus one.\n// Operand is a list\
    \ of of non-negative integers.\n// Operator list has at least one operator, and\
    \ operand list has at least two operands.\nfunction do_algebra(operator, operand){\n\
    \    var result = 0;\n    for(var i = 0; i < operand.length; i++){\n        result\
    \ += operand[i] * operator[i];\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = do_algebra;\n\
    \  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"\
    *\"], [7, 3, 4]),8);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n37\n    at test (/tmp/tmplvm3i19z.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmplvm3i19z.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 37,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
