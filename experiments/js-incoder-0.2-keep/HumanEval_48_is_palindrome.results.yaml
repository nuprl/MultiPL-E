name: HumanEval_48_is_palindrome
language: js
results:
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toString().split('').reverse().join('');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    let reversed = text\n        .toLowerCase()\n        .replace(/\\W+/g, '')\
    \ // remove all non-word characters\n        .reverse()\n        .replace(/\\\
    W+/g, '') // remove all non-word characters\n        .toLowerCase()\n    return\
    \ reversed === text;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
    ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4efy88tg.js:14\n        .reverse()\n         ^\n\nTypeError: text.toLowerCase(...).replace(...).reverse\
    \ is not a function\n    at is_palindrome (/tmp/tmp4efy88tg.js:14:10)\n    at\
    \ test (/tmp/tmp4efy88tg.js:25:20)\n    at Object.<anonymous> (/tmp/tmp4efy88tg.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    let reversed = text.reduce((reversed, char) => char + reversed, \"\");\n\
    \    return text === reversed;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxc82k0jk.js:11\n    let reversed = text.reduce((reversed, char)\
    \ => char + reversed, \"\");\n                        ^\n\nTypeError: text.reduce\
    \ is not a function\n    at is_palindrome (/tmp/tmpxc82k0jk.js:11:25)\n    at\
    \ test (/tmp/tmpxc82k0jk.js:20:20)\n    at Object.<anonymous> (/tmp/tmpxc82k0jk.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    let reversed = text;\n    for(let i = reversed.length-1; i >= 0; i--){\n\
    \        if(reversed[i] !== text.charAt(i)){\n            return false;\n    \
    \    }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\ntrue\n\nshould equal\n\nfalse\n    at test\
    \ (/tmp/tmpo5l9gls9.js:28:10)\n    at Object.<anonymous> (/tmp/tmpo5l9gls9.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: true,\n  expected: false,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toString().split('').reverse().join('');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    let reversed = text.reduce((reversed, char) => char + reversed, \"\");\n\
    \    return text === reversed;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwrv4bqs0.js:11\n    let reversed = text.reduce((reversed, char)\
    \ => char + reversed, \"\");\n                        ^\n\nTypeError: text.reduce\
    \ is not a function\n    at is_palindrome (/tmp/tmpwrv4bqs0.js:11:25)\n    at\
    \ test (/tmp/tmpwrv4bqs0.js:20:20)\n    at Object.<anonymous> (/tmp/tmpwrv4bqs0.js:29:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n</code>\n\
    <|/ a tags=javascript,algorithm |>\n<| c |>\nThis is not an answer to the question.\
    \ He asked for a solution in JavaScript.\n<|/ c |>\n<| c |>\nThe question was\
    \ about a solution in JavaScript. He didn't ask for a solution in JavaScript.\n\
    <|/ c |>\n<| c |>\nThe question was about a solution in JavaScript. He didn't\
    \ ask for a solution in JavaScript.\n<|/ c |>\n<| c |>\nThe question was about\
    \ a solution in JavaScript. He didn't ask for a solution in JavaScript.\n<|/ c\
    \ |>\n<| c |>\nThe question was about a solution in JavaScript. He didn't ask\
    \ for a solution in JavaScript.\n<|/ c |>\n<| a tags=javascript,algorithm |>\n\
    <code>\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"\
    aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfxdi6_se.js:13\n</code>\n^\n\nSyntaxError: Unexpected token '<'\n\
    \    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toString().split('').reverse().join('');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toString().split('').reverse().join('');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toString().split('').reverse().join('');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toString().split('').reverse().join('');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \  return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.split('').reverse().join('');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\
    \"),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
    aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
    xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
    xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toString().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n//\
    \ True\n// >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n\
    // True\n// >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text){\n\
    \    return text === text.toLowerCase().split('').reverse().join('');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_palindrome;\n\
    \  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"aba\"\
    ),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
    zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
    xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
