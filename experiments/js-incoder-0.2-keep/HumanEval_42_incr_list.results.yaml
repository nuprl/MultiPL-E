name: HumanEval_42_incr_list
language: js
results:
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [];\n  for(var i=0,\
    \ len=l.length; i<len; i++){\n    n.push(l[i] + 1);\n  }\n  return n;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = []\n  for(var i=0;i<l.length;i++){\n\
    \    n.push(l[i]+1)\n  }\n  return n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    n[i] = l[i+1]+1;\n  }\n  return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 2, NaN ]\n\nshould equal\n\n[ 4, 3,\
    \ 2 ]\n    at test (/tmp/tmp5rzcxb3y.js:20:10)\n    at Object.<anonymous> (/tmp/tmp5rzcxb3y.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, NaN ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp5ho1mgh9.js:20:10)\n    at Object.<anonymous> (/tmp/tmp5ho1mgh9.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpjk29lkxs.js:20:10)\n    at Object.<anonymous> (/tmp/tmpjk29lkxs.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = []\n  for(var i=0;i<l.length;i++){\n\
    \    n.push(l[i]+1)\n  }\n  return n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var out = [];\n  for(var\
    \ i=0, len=l.length; i<len; i++){\n    out.push(l[i]+1);\n  }\n  return out;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    n.push(l[i]+1);\n  }\n  return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmphrp22q74.js:20:10)\n    at Object.<anonymous> (/tmp/tmphrp22q74.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpvo3q52yj.js:20:10)\n    at Object.<anonymous> (/tmp/tmpvo3q52yj.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmprm4tahi9.js:20:10)\n    at Object.<anonymous> (/tmp/tmprm4tahi9.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [];\n  for(var i=0,\
    \ len = l.length; i < len; i++){\n    n.push(l[i] + 1);\n  }\n  return n;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret[i+1] = l[i]+1;\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ , 4, 3, 2 ]\n\nshould equal\n\n[ 4, 3,\
    \ 2 ]\n    at test (/tmp/tmp5qf1a3sd.js:20:10)\n    at Object.<anonymous> (/tmp/tmp5qf1a3sd.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, 4, 3, 2 ],\n  expected:\
    \ [ 4, 3, 2 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var n = [];\n    for(var\
    \ i=l.length-1; i>=0; i--){\n        n[i+1] = l[i]+1;\n    }\n    return n;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ , 4, 3, 2 ]\n\nshould equal\n\n[ 4, 3,\
    \ 2 ]\n    at test (/tmp/tmpbc9pptx6.js:20:10)\n    at Object.<anonymous> (/tmp/tmpbc9pptx6.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, 4, 3, 2 ],\n  expected:\
    \ [ 4, 3, 2 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var ret = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        ret.push(l[i]+1);\n    }\n    return ret;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = []\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i] + 1\n  }\n  return new_l\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmparhx_o8r.js:20:10)\n    at Object.<anonymous> (/tmp/tmparhx_o8r.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var ret = [];\n    for(var\
    \ i=l.length-1; i>=0; i--){\n        ret.push(l[i]+1);\n    }\n    return ret;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpjj1_f1ew.js:20:10)\n    at Object.<anonymous> (/tmp/tmpjj1_f1ew.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret[i+1] = l[i]+1;\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ , 4, 3, 2 ]\n\nshould equal\n\n[ 4, 3,\
    \ 2 ]\n    at test (/tmp/tmpqaqb13jx.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqaqb13jx.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, 4, 3, 2 ],\n  expected:\
    \ [ 4, 3, 2 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var r = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    r[i+1] = l[i]+1;\n  }\n  return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ , 4, 3, 2 ]\n\nshould equal\n\n[ 4, 3,\
    \ 2 ]\n    at test (/tmp/tmp_tep3pbq.js:20:10)\n    at Object.<anonymous> (/tmp/tmp_tep3pbq.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, 4, 3, 2 ],\n  expected:\
    \ [ 4, 3, 2 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpofhhu0dm.js:20:10)\n    at Object.<anonymous> (/tmp/tmpofhhu0dm.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i = 0; i < l.length; i++){\n    new_l[i] = l[i] + 1;\n  }\n  return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpcggzk9a7.js:20:10)\n    at Object.<anonymous> (/tmp/tmpcggzk9a7.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = []\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i] + 1\n  }\n  return new_l\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var res = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        res.push(l[i]+1);\n    }\n    return res;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_l = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        new_l[i] = l[i]+1;\n    }\n    return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpmtjl7gq7.js:20:10)\n    at Object.<anonymous> (/tmp/tmpmtjl7gq7.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpzozz1jep.js:20:10)\n    at Object.<anonymous> (/tmp/tmpzozz1jep.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_l = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        new_l[i] = l[i]+1;\n    }\n    return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpeuwgyeyz.js:20:10)\n    at Object.<anonymous> (/tmp/tmpeuwgyeyz.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret[i+1] = l[i]+1;\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ , 4, 3, 2 ]\n\nshould equal\n\n[ 4, 3,\
    \ 2 ]\n    at test (/tmp/tmpqr3indz8.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqr3indz8.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, 4, 3, 2 ],\n  expected:\
    \ [ 4, 3, 2 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var r = [];\n    for(var\
    \ i=l.length-1; i>=0; i--){\n        r.push(l[i]+1);\n    }\n    return r;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp6ht9o2it.js:20:10)\n    at Object.<anonymous> (/tmp/tmp6ht9o2it.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret[i] = l[i]+1;\n  }\n  return ret;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var res = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        res.push(l[i]+1);\n    }\n    return res;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpt5wb73bj.js:20:10)\n    at Object.<anonymous> (/tmp/tmpt5wb73bj.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpoasuvg6g.js:20:10)\n    at Object.<anonymous> (/tmp/tmpoasuvg6g.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var r = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    r.push(l[i]+1);\n  }\n  return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpfchr_9o2.js:20:10)\n    at Object.<anonymous> (/tmp/tmpfchr_9o2.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpbyh76vum.js:20:10)\n    at Object.<anonymous> (/tmp/tmpbyh76vum.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpt9pdqoz6.js:20:10)\n    at Object.<anonymous> (/tmp/tmpt9pdqoz6.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = []\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i] + 1\n  }\n  return new_l\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    ret[i] = l[i]+1;\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var out = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    out.push(l[i]+1);\n  }\n  return out;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var res = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        res.push(l[i]+1);\n    }\n    return res;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp7gf8artk.js:20:10)\n    at Object.<anonymous> (/tmp/tmp7gf8artk.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret[i] = l[i]+1;\n  }\n  return ret;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpjtoa3m23.js:20:10)\n    at Object.<anonymous> (/tmp/tmpjtoa3m23.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp56gt_gpw.js:20:10)\n    at Object.<anonymous> (/tmp/tmp56gt_gpw.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp03nut2n2.js:20:10)\n    at Object.<anonymous> (/tmp/tmp03nut2n2.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var ret = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        ret.push(l[i]+1);\n    }\n    return ret;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i = 0; i < l.length; i++){\n    new_l[i] = l[i] + 1;\n  }\n  return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var res = [];\n    for(var\
    \ i=l.length-1; i>=0; i--){\n        res.push(l[i]+1);\n    }\n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp033skfzp.js:20:10)\n    at Object.<anonymous> (/tmp/tmp033skfzp.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var ret = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        ret.push(l[i] + 1);\n    }\n    return ret;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [];\n  for(var i=0;i<l.length;i++){\n\
    \    n.push(l[i]+1);\n  }\n  return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i = 0; i < l.length; i++){\n    new_l[i] = l[i] + 1;\n  }\n  return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = []\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i] + 1\n  }\n  return new_l\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpp675s6nm.js:20:10)\n    at Object.<anonymous> (/tmp/tmpp675s6nm.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpdvcsm82y.js:20:10)\n    at Object.<anonymous> (/tmp/tmpdvcsm82y.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var ret = [];\n    for(var\
    \ i=l.length-1; i>=0; i--){\n        ret.push(l[i]+1);\n    }\n    return ret;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpyussd5qp.js:20:10)\n    at Object.<anonymous> (/tmp/tmpyussd5qp.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpuuo3i_y2.js:20:10)\n    at Object.<anonymous> (/tmp/tmpuuo3i_y2.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_l = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        new_l[i] = l[i]+1;\n    }\n    return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [];\n  for(var i=0;\
    \ i<l.length; i++){\n    n.push(l[i]+1);\n  }\n  return n;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp3r0niu_4.js:20:10)\n    at Object.<anonymous> (/tmp/tmp3r0niu_4.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  var i =\
    \ 0;\n  while(i < l.length){\n    ret.push(l[i++]);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 2, 1 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpbylztqw0.js:21:10)\n    at Object.<anonymous> (/tmp/tmpbylztqw0.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpt96_de50.js:20:10)\n    at Object.<anonymous> (/tmp/tmpt96_de50.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret[i+1] = l[i]+1;\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ , 4, 3, 2 ]\n\nshould equal\n\n[ 4, 3,\
    \ 2 ]\n    at test (/tmp/tmp5zd12t2n.js:20:10)\n    at Object.<anonymous> (/tmp/tmp5zd12t2n.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, 4, 3, 2 ],\n  expected:\
    \ [ 4, 3, 2 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    n.push(l[i]+1);\n  }\n  return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpg4v9pu1a.js:20:10)\n    at Object.<anonymous> (/tmp/tmpg4v9pu1a.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = []\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i] + 1\n  }\n  return new_l\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = []\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i] + 1\n  }\n  return new_l\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i = 0; i < l.length; i++){\n    new_l[i] = l[i] + 1;\n  }\n  return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret[i] = l[i]+1;\n  }\n  return ret;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var r = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    r.push(l[i]+1);\n  }\n  return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmprpgvemez.js:20:10)\n    at Object.<anonymous> (/tmp/tmprpgvemez.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret[i] = l[i]+1;\n  }\n  return ret;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i = 0; i < l.length; i++){\n    ret.push(l[i] + 1);\n  }\n  return ret;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var r = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    r.push(l[i]+1);\n  }\n  return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpcza1ie36.js:20:10)\n    at Object.<anonymous> (/tmp/tmpcza1ie36.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i = 0; i < l.length; i++){\n    new_l[i] = l[i] + 1;\n  }\n  return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  var i =\
    \ 0;\n  while(i < l.length){\n    ret.push(l[i++]);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 2, 1 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpu4dcodhn.js:21:10)\n    at Object.<anonymous> (/tmp/tmpu4dcodhn.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_l = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        new_l[i] = l[i]+1;\n    }\n    return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret[i] = l[i]+1;\n  }\n  return ret;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [], i = 1;\n  while(i\
    \ < l.length){\n    n.push(l[i++]);\n  }\n  return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 1 ]\n\nshould equal\n\n[ 4, 3, 2 ]\n\
    \    at test (/tmp/tmpbo1klp_v.js:20:10)\n    at Object.<anonymous> (/tmp/tmpbo1klp_v.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 1 ],\n  expected: [ 4, 3, 2 ],\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [], i;\n  for (i\
    \ = 0; i < l.length; i++){\n    n[i] = l[i] + 1;\n  }\n  return n;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var r = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    r.push(l[i]+1);\n  }\n  return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpvwaw2h23.js:20:10)\n    at Object.<anonymous> (/tmp/tmpvwaw2h23.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  var i =\
    \ 0;\n  var len = l.length;\n  while(i < len){\n    res.push(l[i++]);\n  }\n \
    \ return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 2, 1 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmppw1dfbfw.js:22:10)\n    at Object.<anonymous> (/tmp/tmppw1dfbfw.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret[i] = l[i]+1;\n  }\n  return ret;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var out = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    out.push(l[i]+1);\n  }\n  return out;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    n.push(l[i]+1);\n  }\n  return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpnl_7q9iy.js:20:10)\n    at Object.<anonymous> (/tmp/tmpnl_7q9iy.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var r = [];\n    for(var\
    \ i=l.length-1; i>=0; i--){\n        r.push(l[i]+1);\n    }\n    return r;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpc5emdu1p.js:20:10)\n    at Object.<anonymous> (/tmp/tmpc5emdu1p.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var out = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    out.push(l[i]+1);\n  }\n  return out;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var ret = [];\n    var\
    \ i = 0;\n    while(i < l.length){\n        ret.push(l[i++]);\n    }\n    return\
    \ ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 2, 1 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmphzfot27v.js:21:10)\n    at Object.<anonymous> (/tmp/tmphzfot27v.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = []\n  for(var i=0;\
    \ i<l.length; i++){\n    n.push(l[i]+1)\n  }\n  return n\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var res = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        res.push(l[i]+1);\n    }\n    return res;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = []\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    n.push(l[i]+1)\n  }\n  return n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpk9zy3l3x.js:20:10)\n    at Object.<anonymous> (/tmp/tmpk9zy3l3x.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_l = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        new_l[i] = l[i]+1;\n    }\n    return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpjuy0v_eg.js:20:10)\n    at Object.<anonymous> (/tmp/tmpjuy0v_eg.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpqj3lzi3e.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqj3lzi3e.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var r = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    r.push(l[i]+1);\n  }\n  return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmptdc0epkd.js:20:10)\n    at Object.<anonymous> (/tmp/tmptdc0epkd.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp1ljd041w.js:20:10)\n    at Object.<anonymous> (/tmp/tmp1ljd041w.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  var i =\
    \ 0;\n  while(i<l.length){\n    ret.push(l[i++]);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 2, 1 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmprqmfcn64.js:21:10)\n    at Object.<anonymous> (/tmp/tmprqmfcn64.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l.push(l[i]+1);\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [];\n  for(var i\
    \ = 0; i < l.length; i++){\n    n.push(l[i] + 1);\n  }\n  return n;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = []\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i] + 1\n  }\n  return new_l\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp_guh34nx.js:20:10)\n    at Object.<anonymous> (/tmp/tmp_guh34nx.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [];\n  for(var i=0,\
    \ len = l.length; i<len; i++){\n    n[i] = l[i]+1;\n  }\n  return n;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var out = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    out.push(l[i]+1);\n  }\n  return out;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpuk2g3m2e.js:20:10)\n    at Object.<anonymous> (/tmp/tmpuk2g3m2e.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp6of807zy.js:20:10)\n    at Object.<anonymous> (/tmp/tmp6of807zy.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    new_l.push(l[i]+1);\n  }\n  return new_l;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp_mhghlgp.js:20:10)\n    at Object.<anonymous> (/tmp/tmp_mhghlgp.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  var i =\
    \ 0;\n  while(i < l.length){\n    res.push(l[i++]);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 2, 1 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpfddva7ce.js:21:10)\n    at Object.<anonymous> (/tmp/tmpfddva7ce.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var r = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    r.push(l[i]+1);\n  }\n  return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp9eumv6v3.js:20:10)\n    at Object.<anonymous> (/tmp/tmp9eumv6v3.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var r = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    r.push(l[i]+1);\n  }\n  return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpfhmqldy7.js:20:10)\n    at Object.<anonymous> (/tmp/tmpfhmqldy7.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var r = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    r.push(l[i]+1);\n  }\n  return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpapniw2pk.js:20:10)\n    at Object.<anonymous> (/tmp/tmpapniw2pk.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var r = [];\n    for(var\
    \ i = 0, len = l.length; i < len; i++){\n        r[i] = l[i+1];\n    }\n    return\
    \ r;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 1, undefined ]\n\nshould equal\n\n\
    [ 4, 3, 2 ]\n    at test (/tmp/tmpi325niov.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpi325niov.js:24:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, undefined\
    \ ],\n  expected: [ 4, 3, 2 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpmfm3hhr6.js:20:10)\n    at Object.<anonymous> (/tmp/tmpmfm3hhr6.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp17dnzege.js:20:10)\n    at Object.<anonymous> (/tmp/tmp17dnzege.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    new_l.push(l[i]+1);\n  }\n  return new_l;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpv66f84mf.js:20:10)\n    at Object.<anonymous> (/tmp/tmpv66f84mf.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var r = [];\n  for(var i\
    \ = 0; i < l.length; i++){\n    r.push(l[i] + 1);\n  }\n  return r;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    new_l.push(l[i]+1);\n  }\n  return new_l;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpgk1p5dl8.js:20:10)\n    at Object.<anonymous> (/tmp/tmpgk1p5dl8.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    n.push(l[i]+1);\n  }\n  return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp2jx448nr.js:20:10)\n    at Object.<anonymous> (/tmp/tmp2jx448nr.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var r = [];\n  for(var i=l.length-1;\
    \ i>=0; i--){\n    r.push(l[i]+1);\n  }\n  return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp58f1hrp5.js:20:10)\n    at Object.<anonymous> (/tmp/tmp58f1hrp5.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i = 0; i < l.length; i++){\n    new_l[i] = l[i] + 1;\n  }\n  return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmphuxwkgfe.js:20:10)\n    at Object.<anonymous> (/tmp/tmphuxwkgfe.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var res = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        res.push(l[i]+1);\n    }\n    return res;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpmlxdwd3l.js:20:10)\n    at Object.<anonymous> (/tmp/tmpmlxdwd3l.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  var i =\
    \ 0;\n  while(i < l.length){\n    res.push(l[i++]);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 2, 1 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpf2krnm_y.js:21:10)\n    at Object.<anonymous> (/tmp/tmpf2krnm_y.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpdjgo3ogg.js:20:10)\n    at Object.<anonymous> (/tmp/tmpdjgo3ogg.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i = 0; i < l.length; i++){\n    new_l[i] = l[i] + 1;\n  }\n  return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmp8omm7xww.js:20:10)\n    at Object.<anonymous> (/tmp/tmp8omm7xww.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var n = [];\n  for(var i=0;i<l.length;i++){\n\
    \    n.push(l[i]+1);\n  }\n  return n;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_l = [];\n    for(var\
    \ i=0;i<l.length;i++){\n        new_l[i] = l[i]+1;\n    }\n    return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l.push(l[i]+1);\n  }\n  return new_l;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var ret = [];\n    for(var\
    \ i=l.length-1; i>=0; i--){\n        ret.push(l[i]+1);\n    }\n    return ret;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpt01rvqmi.js:20:10)\n    at Object.<anonymous> (/tmp/tmpt01rvqmi.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = []\n  for(var\
    \ i=0; i<l.length; i++){\n    new_l[i] = l[i] + 1\n  }\n  return new_l\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=l.length-1; i>=0; i--){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 4 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpkxynsisd.js:20:10)\n    at Object.<anonymous> (/tmp/tmpkxynsisd.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret[i+1] = l[i]+1;\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ , 4, 3, 2 ]\n\nshould equal\n\n[ 4, 3,\
    \ 2 ]\n    at test (/tmp/tmpi7avrcrw.js:20:10)\n    at Object.<anonymous> (/tmp/tmpi7avrcrw.js:24:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ <1 empty item>, 4, 3, 2 ],\n  expected:\
    \ [ 4, 3, 2 ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  var i =\
    \ 0;\n  while(i < l.length){\n    ret.push(l[i++]);\n  }\n  return ret;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 3, 2, 1 ]\n\nshould equal\n\n[ 4, 3, 2\
    \ ]\n    at test (/tmp/tmpbj2t06l2.js:21:10)\n    at Object.<anonymous> (/tmp/tmpbj2t06l2.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 3, 2, 1 ],\n  expected: [ 4, 3, 2 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i = 0; i < l.length; i++){\n    ret.push(l[i] + 1);\n  }\n  return ret;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var new_l = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    new_l[i] = l[i]+1;\n  }\n  return new_l;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var r = [];\n    for(var\
    \ i=0; i<l.length; i++){\n        r[i] = l[i]+1;\n    }\n    return r;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var ret = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    ret.push(l[i]+1);\n  }\n  return ret;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var res = [];\n  for(var\
    \ i=0;i<l.length;i++){\n    res.push(l[i]+1);\n  }\n  return res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
