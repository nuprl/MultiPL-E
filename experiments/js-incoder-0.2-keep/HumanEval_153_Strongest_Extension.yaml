name: HumanEval_153_Strongest_Extension
language: js
prompt: "//You will be given the name of a class (a string) and a list of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nfunction Strongest_Extension(class_name,\
  \ extensions){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = Strongest_Extension;\n  assert.deepEqual(candidate(\"Watashi\", [\"tEN\", \"\
  niNE\", \"eIGHt8OKe\"]),\"Watashi.eIGHt8OKe\");\n  assert.deepEqual(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]),\"Boku123.YEs.WeCaNe\"\
  );\n  assert.deepEqual(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\"\
  , \"zeR00\", \"NuLl__\", \"123NoooneB321\"]),\"__YESIMHERE.NuLl__\");\n  assert.deepEqual(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]),\"K.TAR\");\n  assert.deepEqual(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]),\"__HAHA.123\");\n  assert.deepEqual(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]),\"YameRore.okIWILL123\"\
  );\n  assert.deepEqual(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"\
  WoW\"]),\"finNNalLLly.WoW\");\n  assert.deepEqual(candidate(\"_\", [\"Bb\", \"91245\"\
  ]),\"_.Bb\");\n  assert.deepEqual(candidate(\"Sp\", [\"671235\", \"Bb\"]),\"Sp.671235\"\
  );\n}\n\ntest();"
completions: ["    let cap_extensions = extensions.filter(e => e.match(/[A-Z]/));\n\
    \    let sm_extensions = extensions.filter(e => e.match(/[a-z]/));\n    let cap_extensions_count\
    \ = cap_extensions.length;\n    let sm_extensions_count = sm_extensions.length;\n\
    \    let cap_extension_strength = cap_extensions_count - sm_extensions_count;\n\
    \    let sm_extension_strength = sm_extensions_count - cap_extensions_count;\n\
    \    let strongest_extension = extensions[0];\n    \n    if (cap_extension_strength\
    \ > sm_extension_strength){\n        strongest_extension = cap_extensions[0];\n\
    \    }\n    \n    return class_name + '.' + strongest_extension;\n}\n", "\tlet\
    \ strongest_extension = '';\n\tlet strongest_extension_strength = 0;\n\tfor(let\
    \ i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\t\
    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif(extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + '.' + strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", " \
    \   var strongest_extension = extensions[0];\n    for(var i = 1; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var cap = extension.charAt(0).toUpperCase();\n\
    \        var sm = extension.charAt(0).toLowerCase();\n        var strength = cap\
    \ - sm;\n        if(strength > strongest_extension.strength){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "  var max_strength = -1;\n  var max_extension = null;\n  for(var i=0; i<extensions.length;\
    \ i++){\n    var ext = extensions[i];\n    var cap = ext.charAt(0).toUpperCase();\n\
    \    var sm = ext.charAt(0).toLowerCase();\n    var strength = cap.length - sm.length;\n\
    \    if(cap != class_name || strength > max_strength){\n      max_strength = strength;\n\
    \      max_extension = ext;\n    }\n  }\n  return class_name + '.' + max_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \        let sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n        let\
    \ strength = cap - sm;\n        if (strength > strongest_extension.charCodeAt(0)){\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + '.' + strongest_extension;\n}\n", "\tlet strongest_extension = '';\n\tlet\
    \ strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - class_name_length;\n\t\tlet extension_uppercase_letters = extension.match(/[A-Z]/);\n\
    \t\tlet extension_lowercase_letters = extension.match(/[a-z]/);\n\t\tlet extension_uppercase_letters_count\
    \ = extension_uppercase_letters.length;\n\t\tlet extension_lowercase_letters_count\
    \ = extension_lowercase_letters.length;\n\t\tlet extension_strength_percentage\
    \ = (extension_strength / extension_length) * 100;\n\t\tlet extension_strength_percentage_rounded\
    \ = Math.round(extension_strength_percentage);\n\t\tif (extension_strength_percentage\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension_strength = extension_strength_percentage_rounded;\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + '.'\
    \ + strongest_extension;\n}\n", "\tlet strongest_extension = '';\n\tlet strongest_extension_strength\
    \ = 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + '.' + strongest_extension;\n}\n", "    let strongest_extension\
    \ = ''\n    let strongest_extension_strength = -1\n    extensions.forEach(extension\
    \ => {\n        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length\n\
    \        if (extension_strength > strongest_extension_strength){\n           \
    \ strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n        }\n    })\n    return class_name + '.' + strongest_extension\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n        if (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var max_strength = 0;\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var class_name_length = class_name.length;\n        var extension_length\
    \ = extension.length;\n        var extension_strength = extension_length - class_name_length;\n\
    \        if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + '.' + strongest_extension;\n}\n", "\tlet cap_extensions = extensions.map(e\
    \ => e.toUpperCase()).sort((a,b) => a.length - b.length);\n\tlet sm_extensions\
    \ = extensions.map(e => e.toLowerCase()).sort((a,b) => a.length - b.length);\n\
    \tlet strength = cap_extensions.length - sm_extensions.length;\n\treturn class_name\
    \ + cap_extensions[strength];\n}\n", "    let cap_exts = extensions.filter(ext\
    \ => ext.match(/[A-Z]/));\n    let sm_exts = extensions.filter(ext => ext.match(/[a-z]/));\n\
    \    let cap_exts_count = cap_exts.length;\n    let sm_exts_count = sm_exts.length;\n\
    \    let cap_exts_sm = cap_exts.filter(ext => ext.match(/[A-Z]/)).length;\n  \
    \  let sm_exts_sm = sm_exts.filter(ext => ext.match(/[a-z]/)).length;\n    let\
    \ cap_exts_cap = cap_exts.filter(ext => ext.match(/[A-Z]/)).map(ext => ext.match(/[A-Z]/)).length;\n\
    \    let sm_exts_cap = sm_exts.filter(ext => ext.match(/[a-z]/)).map(ext => ext.match(/[a-z]/)).length;\n\
    \    let cap_exts_sm = cap_exts.filter(ext => ext.match(/[A-Z]/)).map(ext => ext.match(/[A-Z]/)).length;\n\
    \    let sm_exts_sm = sm_exts.filter(ext => ext.match(/[a-z]/)).map(ext => ext.match(/[a-z]/)).length;\n\
    \    let cap_exts_cap = cap_exts.filter(ext => ext.match(/[A-Z]/)).map(ext =>\
    \ ext.match(/[A-Z]/)).length;\n    let sm_exts_cap = sm_exts.filter(ext => ext.match(/[a-z]/)).map(ext\
    \ => ext.match(/[a-z]/)).length;\n    let cap_exts_cap = cap_exts.filter(ext =>\
    \ ext.match(/[A-Z]/)).map(ext => ext.match(/[A-Z]/)).length;\n    let sm_exts_cap\
    \ = sm_exts.filter(ext => ext.match(/[a-z]/)).map(ext => ext.match(/[a-z]/)).length;\n\
    \    let cap_exts_cap = cap_exts.filter(ext => ext.match(/[A-Z]/)).map(ext =>\
    \ ext.match(/[A-Z]/)).length;\n    let sm_exts_cap = sm_exts.filter(ext => ext.match(/[a-z]/)).map(ext\
    \ => ext.match(/[a-z]/)).length;\n    let cap_exts_cap = cap_exts.filter(ext =>\
    \ ext.match(/[A-Z]/)).map(ext => ext.match(/[A-Z]/)).length;\n    let sm_exts_cap\
    \ = sm_exts.filter(ext => ext.match(/[a-z]/)).map(ext => ext.match(/[a-z]/)).length;\n\
    \    let cap_exts_cap = cap_exts.filter(ext => ext.match(/[A-Z]/)).map(ext =>\
    \ ext.match(/[A-Z]/)).length;\n    let sm_exts_cap = sm_exts.filter(ext => ext.match(/[a-z]/)).map(ext\
    \ => ext.match(/[a-z]/)).length;\n    let cap_exts_cap = cap_exts.filter(ext =>\
    \ ext.match(/[A-Z]/)).map(ext => ext.match(/[A-Z]/)).length;\n    let sm_", "\t\
    let strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ '.' + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].split(\"\
    \").reduce((acc, letter)=>{\n\t\t\treturn acc + letter.toUpperCase().charCodeAt(0)\
    \ - letter.toLowerCase().charCodeAt(0);\n\t\t}, 0);\n\t\tif (extension_strength\
    \ > strongest_extension.split(\"\").reduce((acc, letter)=>{\n\t\t\treturn acc\
    \ + letter.toUpperCase().charCodeAt(0) - letter.toLowerCase().charCodeAt(0);\n\
    \t\t}, 0)){\n\t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn\
    \ class_name + '.' + strongest_extension;\n}\n", "\tlet strongest_extension =\
    \ '';\n\tlet strongest_extension_strength = 0;\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - class_name_length;\n\t\tlet extension_strength_percentage = extension_strength\
    \ / class_name_length;\n\t\tif(extension_strength_percentage > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength_percentage;\n\
    \t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n}\n", "\tlet cap_exts\
    \ = extensions.map(ext => ext.replace(/[A-Z]/g, \"\").length);\n\tlet sml_exts\
    \ = extensions.map(ext => ext.replace(/[a-z]/g, \"\").length);\n\tlet strength\
    \ = cap_exts.reduce((acc, cur) => acc + cur) - sml_exts.reduce((acc, cur) => acc\
    \ + cur);\n\treturn class_name + extensions.find(ext => ext.replace(/[A-Z]/g,\
    \ \"\").length == cap_exts.reduce((acc, cur) => acc + cur)).replace(/[A-Z]/g,\
    \ \"\").replace(/[a-z]/g, \"\").replace(/[0-9]/g, \"\");\n}\n", "    let strongest_extension\
    \ = '';\n    let max_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let class_name_length\
    \ = class_name.length;\n        let extension_length = extension.length;\n   \
    \     let strength = class_name_length - extension_length;\n        if (strength\
    \ > max_strength){\n            max_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest = -1;\n    var strongest_extension = \"\";\n    for(var\
    \ i=0; i<extensions.length; i++){\n        var extension = extensions[i].toLowerCase();\n\
    \        var class_name = class_name.toLowerCase();\n        var cap = extension.charAt(0).toUpperCase();\n\
    \        var sm = extension.charAt(0).toLowerCase();\n        var strength = cap\
    \ - sm;\n        if(strength > strongest){\n            strongest = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;\n}\n", "    var strongest_extension = null;\n\
    \    var strongest_extension_strength = 0;\n    \n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     \n        if(extension_strength > strongest_extension_strength){\n     \
    \       strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    \n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var max_strength = 0;\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_class = class_name + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var max_strength = 0;\n    for(var\
    \ i = 0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_class = class_name + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            strongest_extension\
    \ = extension_class;\n        }\n    }\n    return strongest_extension;\n}\n",
  "    var strongest = -1;\n    var strongest_name = \"\";\n    for(var i = 0; i <\
    \ extensions.length; i++){\n        var extension = extensions[i];\n        var\
    \ class_name_length = class_name.length;\n        var extension_length = extension.length;\n\
    \        var extension_strength = extension_length - class_name_length;\n    \
    \    if(extension_strength > strongest){\n            strongest = extension_strength;\n\
    \            strongest_name = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_name;\n}\n", "\tlet strongest_extension = '';\n\tlet strongest_extension_strength\
    \ = 0;\n\tlet extensions_count = extensions.length;\n\tfor(let i = 0; i < extensions_count;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_class = class_name\
    \ + extension;\n\t\tlet extension_class_count = extension_class.split('.').length;\n\
    \t\tlet extension_class_strength = extension_class_count - extension_class.match(/[A-Z]/g).length;\n\
    \t\tif(extension_class_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_class_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\
    \t}\n\treturn class_name + '.' + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = '';\n\tlet strongest_extension_strength = 0;\n\t\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name +\
    \ extension;\n\t\tlet class_name_length = class_name.length;\n\t\tlet extension_length\
    \ = extension.length;\n\t\t\n\t\tlet extension_strength = class_name_length -\
    \ extension_length;\n\t\t\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\t\n\treturn class_name + strongest_extension;\n}\n", "    let strongest_extension\
    \ = null;\n    let strongest_extension_strength = 0;\n    for(let i = 0; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", "\t\
    let strongest_extension = extensions[0];\n\tfor(let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].split('').map(x => x.charCodeAt(0)\
    \ - x.charCodeAt(0).toLowerCase()).reduce((a, b) => a + b);\n\t\tif(extension_strength\
    \ > strongest_extension.charCodeAt(0) - strongest_extension.charCodeAt(0).toLowerCase()){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ '.' + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extensions[i];\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "    let strongest_extension = '';\n    let strongest_extension_strength\
    \ = 0;\n    for(let i = 0; i < extensions.length; i++){\n        let extension\
    \ = extensions[i];\n        let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ '.' + strongest_extension;\n}\n", "    var strongest_extension = null;\n   \
    \ var strongest_extension_strength = 0;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", " \
    \   var strongest = null;\n    var strongest_strength = 0;\n    for(var i = 0;\
    \ i < extensions.length; i++){\n        var extension = extensions[i];\n     \
    \   var class_name_length = class_name.length;\n        var extension_length =\
    \ extension.length;\n        var extension_strength = extension_length - class_name_length;\n\
    \        if(extension_strength > strongest_strength){\n            strongest =\
    \ extension;\n            strongest_strength = extension_strength;\n        }\n\
    \    }\n    return class_name + '.' + strongest;\n}\n", "    var strongest = -1;\n\
    \    var strongest_name = \"\";\n    for(var i=0; i<extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \        var sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n        var\
    \ strength = cap - sm;\n        if(strength > strongest){\n            strongest\
    \ = strength;\n            strongest_name = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_name;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = -1;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", "\t\
    let strongest_extension = extensions[0];\n\tlet strongest_extension_strength =\
    \ -1;\n\tfor(let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].toUpperCase().charCodeAt(0) - extensions[i].toLowerCase().charCodeAt(0);\n\
    \t\tif(extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t\
    }\n\treturn class_name + '.' + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = '';\n\tlet strongest_extension_strength = 0;\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor(let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].split(\"\").reduce((acc, cur) => acc + cur, 0);\n\t\tif(extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ \".\" + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tlet strongest_extension_strength = -1;\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tlet strongest_extension_strength = -1;\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].length\
    \ - extensions[i].toUpperCase().length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - extension_strength(extension);\n\
    \        if (extension_strength > strongest_extension.length){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ '.' + strongest_extension;\n}\n", "    var strongest_extension = extensions[0];\n\
    \    var strongest_extension_strength = -1;\n    for(var i = 1; i < extensions.length;\
    \ i++){\n        var extension_strength = extensions[i].split(\"\").reduce(function(prev,\
    \ curr, i){\n            return prev + curr.charCodeAt(0);\n        }, 0);\n \
    \       if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extensions[i];\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", " \
    \   var strongest = -1;\n    var strongest_extension = null;\n    extensions.forEach(function(extension){\n\
    \        var cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n        var\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n        var strength\
    \ = cap - sm;\n        if (strength > strongest){\n            strongest = strength;\n\
    \            strongest_extension = extension;\n        }\n    });\n    return\
    \ class_name + '.' + strongest_extension;\n}\n", "\tlet strongest_extension =\
    \ extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension\
    \ = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \t\tlet sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tlet strength\
    \ = cap - sm;\n\t\tif (strength > strongest_extension.strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest = -1;\n    var strongest_extension = '';\n    extensions.forEach(function(extension){\n\
    \        var cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n        var\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n        var strength\
    \ = cap - sm;\n        if(strength > strongest){\n            strongest = strength;\n\
    \            strongest_extension = extension;\n        }\n    });\n    return\
    \ class_name + '.' + strongest_extension;\n}\n", "    let cap_extensions = extensions.filter(extension\
    \ => extension.match(/[A-Z]/)).length;\n    let sml_extensions = extensions.filter(extension\
    \ => extension.match(/[a-z]/)).length;\n    let strength = cap_extensions - sml_extensions;\n\
    \    return class_name + extensions.find(extension => extension.match(/[A-Z]/)).charAt(0)\
    \ + extensions.find(extension => extension.match(/[a-z]/)).charAt(0) + extensions[extensions.length-1].charAt(0);\n\
    }\n", "    var strongest_extension = '';\n    var max_strength = 0;\n    var max_extension\
    \ = '';\n    for(var i=0; i<extensions.length; i++){\n        var extension =\
    \ extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + '.' + max_extension;\n}\n", "    let\
    \ strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - extension_strength;\n\
    \        if (extension_strength > strongest_extension.length){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest = -1;\n    var strongest_name = \"\";\n    var strongest_extension\
    \ = \"\";\n    \n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var class_name_extension = class_name + \".\" + extension;\n\
    \        var class_name_extension_lower = class_name_extension.toLowerCase();\n\
    \        var class_name_extension_upper = class_name_extension.toUpperCase();\n\
    \        var class_name_extension_length = class_name_extension.length;\n    \
    \    var class_name_extension_length_lower = class_name_extension_length.toLowerCase();\n\
    \        var class_name_extension_length_upper = class_name_extension_length.toUpperCase();\n\
    \        \n        var extension_strength = class_name_extension_upper.indexOf(class_name_extension_lower);\n\
    \        var extension_strength_lower = class_name_extension_upper.indexOf(class_name_extension_lower);\n\
    \        var extension_strength_upper = class_name_extension_upper.indexOf(class_name_extension_upper);\n\
    \        \n        if(extension_strength == -1){\n            extension_strength\
    \ = class_name_extension_lower.indexOf(class_name_extension_lower);\n        \
    \    extension_strength_lower = class_name_extension_lower.indexOf(class_name_extension_lower);\n\
    \            extension_strength_upper = class_name_extension_lower.indexOf(class_name_extension_upper);\n\
    \        }\n        \n        if(extension_strength > strongest){\n          \
    \  strongest = extension_strength;\n            strongest_name = class_name;\n\
    \            strongest_extension = extension;\n        }\n        \n        if(extension_strength_lower\
    \ > strongest){\n            strongest = extension_strength_lower;\n         \
    \   strongest_name = class_name;\n            strongest_extension = extension;\n\
    \        }\n        \n        if(extension_strength_upper > strongest){\n    \
    \        strongest = extension_strength_upper;\n            strongest_name = class_name;\n\
    \            strongest_extension = extension;\n        }\n    }\n    \n    return\
    \ strongest_name + \".\" + strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name_extension\
    \ = class_name + extension;\n        var class_name_extension_strength = Extension_Strength(class_name_extension);\n\
    \        if(class_name_extension_strength > strongest_extension_strength){\n \
    \           strongest_extension = class_name_extension;\n            strongest_extension_strength\
    \ = class_name_extension_strength;\n        }\n    }\n    return strongest_extension;\n\
    }\n", "\tlet cap_extensions = extensions.map(e => e.toUpperCase()).sort((a,b)\
    \ => b.length - a.length);\n\tlet sm_extensions = extensions.map(e => e.toLowerCase()).sort((a,b)\
    \ => a.length - b.length);\n\tlet strength = cap_extensions.length - sm_extensions.length;\n\
    \tlet strongest = cap_extensions[strength];\n\treturn class_name + '.' + strongest;\n\
    }\n", "\tlet strongest_extension = '';\n\tlet strongest_extension_strength = 0;\n\
    \tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + '.' + strongest_extension;\n}\n", "\tlet strongest_extension\
    \ = '';\n\tlet strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "\tlet cap_extensions = extensions.map(e => e.split('').map(e => e.toUpperCase()).join(''));\n\
    \tlet sm_extensions = extensions.map(e => e.split('').map(e => e.toLowerCase()).join(''));\n\
    \tlet cap_extensions_count = cap_extensions.reduce((acc, e) => acc + e.split('').filter(e\
    \ => e.toUpperCase() === e).length, 0);\n\tlet sm_extensions_count = sm_extensions.reduce((acc,\
    \ e) => acc + e.split('').filter(e => e.toLowerCase() === e).length, 0);\n\tlet\
    \ strength = cap_extensions_count - sm_extensions_count;\n\tlet strongest_extension\
    \ = extensions.find(e => e.split('').map(e => e.toUpperCase()).join('') == class_name);\n\
    \treturn strongest_extension ? `${class_name}.${strongest_extension}` : class_name;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension_str = extensions[i].toLowerCase();\n        let\
    \ extension_capital_letters = extension_str.replace(/[^A-Z]/g, '').length;\n \
    \       let extension_small_letters = extension_str.replace(/[^a-z]/g, '').length;\n\
    \        let extension_strength = extension_capital_letters - extension_small_letters;\n\
    \        if (extension_strength > strongest_extension.strength){\n           \
    \ strongest_extension = extensions[i];\n        }\n    }\n    return class_name\
    \ + '.' + strongest_extension;\n}\n", "    var strongest = -1;\n    var strongest_extension\
    \ = '';\n    var extension_length = extensions.length;\n    for(var i=0; i<extension_length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name_length\
    \ = class_name.length;\n        var extension_length = extension.length;\n   \
    \     var extension_strength = extension_length - class_name_length;\n       \
    \ if(extension_strength > strongest){\n            strongest = extension_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + '.' + strongest_extension;\n}\n", "    let strongest_extension = null;\n \
    \   let strongest_extension_strength = 0;\n    extensions.forEach(extension =>\
    \ {\n        let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength){\n           \
    \ strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    });\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var extension_strengths = [];\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     extension_strengths.push(extension_strength);\n    }\n    var max_strength\
    \ = Math.max.apply(null, extension_strengths);\n    var max_index = extension_strengths.indexOf(max_strength);\n\
    \    return class_name + extensions[max_index];\n}\n", "    var strongest_extension\
    \ = '';\n    var strongest_extension_strength = 0;\n    var extension_counter\
    \ = 0;\n    var class_counter = 0;\n    \n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name = class_name\
    \ + extension;\n        \n        if(class_counter == 0){\n            strongest_extension\
    \ = class_name;\n            strongest_extension_strength = extension_counter;\n\
    \        }\n        \n        if(class_counter == 1){\n            if(extension_counter\
    \ > strongest_extension_strength){\n                strongest_extension = class_name;\n\
    \                strongest_extension_strength = extension_counter;\n         \
    \   }\n        }\n        \n        class_counter++;\n        extension_counter++;\n\
    \    }\n    \n    return strongest_extension;\n}\n", "    var strongest_extension\
    \ = '';\n    var strongest_extension_strength = 0;\n    var extension_length =\
    \ extensions.length;\n    var class_length = class_name.length;\n    \n    for(var\
    \ i=0; i<extension_length; i++){\n        var extension = extensions[i];\n   \
    \     var extension_class = extension.charAt(0);\n        var extension_class_strength\
    \ = extension.charAt(1).toUpperCase().charCodeAt(0) - extension.charAt(1).toLowerCase().charCodeAt(0);\n\
    \        \n        if(extension_class_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_class_strength;\n      \
    \      strongest_extension = extension;\n        }\n    }\n    \n    for(var i=0;\
    \ i<class_length; i++){\n        var class_char = class_name.charAt(i);\n    \
    \    var class_char_strength = class_char.toUpperCase().charCodeAt(0) - class_char.toLowerCase().charCodeAt(0);\n\
    \        \n        if(class_char_strength > strongest_extension_strength){\n \
    \           strongest_extension_strength = class_char_strength;\n            strongest_extension\
    \ = class_char;\n        }\n    }\n    \n    return class_name + '.' + strongest_extension;\n\
    }\n", "\tlet max_strength = -1;\n\tlet max_extension = '';\n\tfor (let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\t\t\
    if (extension_strength > max_strength){\n\t\t\tmax_strength = extension_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + '.' + max_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ '.' + strongest_extension;\n}\n", "    let extension_strengths = {};\n    extensions.forEach(extension\
    \ => {\n        let cap = extension.charAt(0).toUpperCase();\n        let sm =\
    \ extension.charAt(0).toLowerCase();\n        let strength = cap - sm;\n     \
    \   extension_strengths[extension] = strength;\n    });\n    let max_strength\
    \ = -1;\n    let max_extension;\n    for(let extension in extension_strengths){\n\
    \        if(extension_strengths[extension] > max_strength){\n            max_strength\
    \ = extension_strengths[extension];\n            max_extension = extension;\n\
    \        }\n    }\n    return class_name + '.' + max_extension;\n}\n", "\tlet\
    \ strongest_extension = extensions[0];\n\tlet strongest_extension_strength = -1;\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = '';\n    var strongest_extension_strength\
    \ = 0;\n    var extension_counter = 0;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        extension_counter++;\n        var extension = extensions[i];\n\
    \        var extension_class = class_name + '.' + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return strongest_extension;\n}\n",
  "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].split(\"\").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length\
    \ - 1), 0);\n\t\tif (extension_strength > strongest_extension_strength){\n\t\t\
    \tstrongest_extension = extensions[i];\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n}\n", "    var extension_strengths\
    \ = [];\n    for(var i=0; i<extensions.length; i++){\n        var extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \        extension_strengths.push(extension_strength);\n    }\n    var max_strength\
    \ = Math.max.apply(null, extension_strengths);\n    var max_extension = extensions[extension_strengths.indexOf(max_strength)];\n\
    \    return class_name + '.' + max_extension;\n}\n</code>\n<|/ a tags=javascript,algorithm\
    \ |>\n<| c |>\nI like this solution, although it does require a lot of extra space.\
    \ I'm going to try and implement this and see how it goes.\n<|/ c |>\n<| c |>\n\
    I added a more compact version to my answer. Hope it helps.\n<|/ c |>\n<| c |>\n\
    I added a more compact version to my answer. Hope it helps.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet cap\
    \ = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\
    \t\tlet strength = cap - sm;\n\t\tif (strength > strongest_extension.strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + '.'\
    \ + strongest_extension;\n}\n", "    var strongest = -1;\n    var strongest_ext\
    \ = '';\n    for(var i=0; i<extensions.length; i++){\n        var ext = extensions[i];\n\
    \        var cap = ext.toUpperCase().charCodeAt(0) - ext.toLowerCase().charCodeAt(0);\n\
    \        var sm = ext.toLowerCase().charCodeAt(0) - ext.toUpperCase().charCodeAt(0);\n\
    \        var strength = cap - sm;\n        if(strength > strongest){\n       \
    \     strongest = strength;\n            strongest_ext = ext;\n        }\n   \
    \ }\n    return class_name + '.' + strongest_ext;\n}\n", "    var strongest =\
    \ -1;\n    var strongest_name = \"\";\n    for(var i=0; i<extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \        var sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n        var\
    \ strength = cap - sm;\n        if(strength > strongest){\n            strongest\
    \ = strength;\n            strongest_name = extension;\n        }\n    }\n   \
    \ return class_name + \".\" + strongest_name;\n}\n", "\tlet strongest_extension\
    \ = null;\n\tlet strongest_extension_strength = null;\n\t\n\textensions.forEach((extension)\
    \ => {\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\t\n\t\tif(strongest_extension_strength == null || extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t});\n\t\n\treturn class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest_extension = '';\n    var max_strength = 0;\n    for(var\
    \ i = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var class_name = class_name + extension;\n        var class_name = class_name.charAt(0).toUpperCase()\
    \ + class_name.slice(1);\n        var class_name = class_name.split('');\n   \
    \     var class_name_length = class_name.length;\n        var class_name_strength\
    \ = 0;\n        for(var j = 0; j < class_name_length; j++){\n            var letter\
    \ = class_name[j];\n            if(letter.toUpperCase() === letter){\n       \
    \         class_name_strength++;\n            }\n        }\n        var strength\
    \ = class_name_strength - 1;\n        if(strength > max_strength){\n         \
    \   max_strength = strength;\n            strongest_extension = extension;\n \
    \       }\n    }\n    return class_name + strongest_extension;\n}\n", "    var\
    \ strongest_extension = null;\n    var strongest_extension_strength = 0;\n   \
    \ for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "   \
    \ var strongest_extension = null;\n    var strongest_extension_strength = 0;\n\
    \    for(var i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", "\tlet\
    \ strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet current_extension = extensions[i];\n\t\tlet current_extension_strength\
    \ = current_extension.match(/[A-Z]/g).length - current_extension.match(/[a-z]/g).length;\n\
    \t\tlet current_extension_strength_percentage = current_extension_strength / extensions.length;\n\
    \t\tif (current_extension_strength_percentage > strongest_extension_strength_percentage){\n\
    \t\t\tstrongest_extension = current_extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + '.' + strongest_extension;\n}\n", "\tlet cap_extensions = extensions.map(e\
    \ => e.split('').map(e => e.toUpperCase()).join(''));\n\tlet sm_extensions = extensions.map(e\
    \ => e.split('').map(e => e.toLowerCase()).join(''));\n\tlet cap_extensions_count\
    \ = cap_extensions.reduce((acc, e) => acc + e.length, 0);\n\tlet sm_extensions_count\
    \ = sm_extensions.reduce((acc, e) => acc + e.length, 0);\n\tlet strength = cap_extensions_count\
    \ - sm_extensions_count;\n\tlet strongest_extension = extensions.find(e => e.split('').map(e\
    \ => e.toUpperCase()).join('') == class_name.split('').map(e => e.toUpperCase()).join(''));\n\
    \treturn strongest_extension ? `${class_name}.${strongest_extension}` : class_name;\n\
    }\n", "  let strongest_extension = extensions[0];\n  for (let i = 1; i < extensions.length;\
    \ i++){\n    let extension = extensions[i];\n    let extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n    if (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n      strongest_extension =\
    \ extension;\n    }\n  }\n  return class_name + '.' + strongest_extension;\n}\n",
  "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_str = extensions[i];\n\t\tlet extension_strength =\
    \ extension_str.match(/[A-Z]/g).length - extension_str.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extension_str;\n\t\t}\n\t}\n\treturn class_name +\
    \ '.' + strongest_extension;\n}\n", "\tlet max_strength = 0;\n\tlet max_extension\
    \ = '';\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet class_name = class_name + extension;\n\t\tlet class_object = eval(class_name);\n\
    \t\tlet class_strength = class_object.strength;\n\t\tif (class_strength > max_strength){\n\
    \t\t\tmax_strength = class_strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\
    \t}\n\treturn class_name + '.' + max_extension;\n}\n", "  let strongest_extension\
    \ = extensions[0];\n  let strongest_extension_strength = -1;\n  extensions.forEach((extension)\
    \ => {\n    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \    if(extension_strength > strongest_extension_strength){\n      strongest_extension\
    \ = extension;\n      strongest_extension_strength = extension_strength;\n   \
    \ }\n  });\n  return class_name + '.' + strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    let strongest_extension_strength = -1;\n    for(let i\
    \ = 1; i < extensions.length; i++){\n        let extension_strength = extensions[i].length\
    \ - extensions[i].toUpperCase().length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ '.' + strongest_extension;\n}\n", "    var strongest_extension = null;\n   \
    \ var strongest_extension_strength = -1;\n    extensions.forEach(function(extension){\n\
    \        var class_name_extension = class_name + extension;\n        var class_name_extension_strength\
    \ = Extension_Strength(class_name_extension);\n        if(strongest_extension_strength\
    \ < class_name_extension_strength){\n            strongest_extension_strength\
    \ = class_name_extension_strength;\n            strongest_extension = class_name_extension;\n\
    \        }\n    });\n    return strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = 0;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n",
  "    var strongest_extension = '';\n    var max_strength = 0;\n    for(var i = 0;\
    \ i < extensions.length; i++){\n        var extension = extensions[i];\n     \
    \   var extension_class = class_name + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            strongest_extension\
    \ = extension_class;\n        }\n    }\n    return strongest_extension;\n}\n",
  "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extension;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n}\n",
  "    var strongest = null;\n    var max_strength = 0;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var ext = extensions[i];\n        var cap = ext.toUpperCase().charCodeAt(0);\n\
    \        var sm = ext.toLowerCase();\n        var strength = cap - sm;\n     \
    \   if(strength > max_strength){\n            max_strength = strength;\n     \
    \       strongest = ext;\n        }\n    }\n    return class_name + '.' + strongest;\n\
    }\n", "    var strongest = -1;\n    var strongest_extension = \"\";\n    for(var\
    \ i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n  \
    \      var cap = extension.charAt(0).toUpperCase();\n        var sm = extension.charAt(0).toLowerCase();\n\
    \        var strength = cap - sm;\n        if(strength > strongest){\n       \
    \     strongest = strength;\n            strongest_extension = extension;\n  \
    \      }\n    }\n    return class_name + \".\" + strongest_extension;\n}\n", "\t\
    let strongest_extension = extensions[0];\n\tfor(let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet cap = extension.charAt(0).toUpperCase();\n\
    \t\tlet sm = extension.charAt(0).toLowerCase();\n\t\tlet strength = cap - sm;\n\
    \t\tif(cap > sm){\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t\telse if(strength\
    \ > 0){\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + '.' + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_length = extension.length;\n\t\tlet extension_strength = extension_length\
    \ - extension.match(/[a-z]/).length;\n\t\tlet extension_strength_percentage =\
    \ extension_strength / extension_length;\n\t\tif (extension_strength_percentage\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n}\n", "    let strongest_extension\
    \ = null;\n    let strongest_extension_strength = -1;\n    for(let i = 0; i <\
    \ extensions.length; i++){\n        let extension = extensions[i];\n        let\
    \ extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", "  let\
    \ cap_extensions = extensions.map(e => e.toUpperCase()).sort();\n  let sm_extensions\
    \ = extensions.map(e => e.toLowerCase()).sort();\n  let cap_extensions_count =\
    \ cap_extensions.length;\n  let sm_extensions_count = sm_extensions.length;\n\
    \  let strength = cap_extensions_count - sm_extensions_count;\n  \n  if (cap_extensions_count\
    \ > sm_extensions_count){\n    return class_name + cap_extensions[0];\n  }\n \
    \ else if (sm_extensions_count > cap_extensions_count){\n    return class_name\
    \ + sm_extensions[0];\n  }\n  else{\n    return class_name + cap_extensions[0]\
    \ + sm_extensions[0];\n  }\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor(let i = 1; i < extensions.length; i++){\n\t\tlet current_extension = extensions[i];\n\
    \t\tlet current_extension_strength = current_extension.match(/[A-Z]/g).length\
    \ - current_extension.match(/[a-z]/g).length;\n\t\tlet current_extension_strength_percentage\
    \ = current_extension_strength / extensions.length;\n\t\tif(current_extension_strength_percentage\
    \ > strongest_extension_strength_percentage){\n\t\t\tstrongest_extension = current_extension;\n\
    \t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n}\n", "\tlet max_strength\
    \ = 0;\n\tlet max_extension = '';\n\tfor(let i = 0; i < extensions.length; i++){\n\
    \t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tlet extension_class = class_name +\
    \ extension;\n\t\tlet extension_class_strength = extension_class.match(/[A-Z]/g).length\
    \ - extension_class.match(/[a-z]/g).length;\n\t\tlet extension_strength = extension_strength\
    \ - extension_class_strength;\n\t\t\n\t\tif(extension_strength > max_strength){\n\
    \t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + '.' + max_extension;\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ '.' + strongest_extension;\n}\n", "    var strongest_extension = null;\n   \
    \ var strongest_extension_strength = 0;\n    var extension_length = extensions.length;\n\
    \    for(var i=0; i<extension_length; i++){\n        var extension = extensions[i];\n\
    \        var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", "\tlet\
    \ strongest_extension = ''\n\tlet strongest_extension_strength = -1\n\tfor (let\
    \ i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i]\n\t\t\
    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength\n\t\t\tstrongest_extension = extension\n\t\t}\n\t}\n\t\
    return class_name + '.' + strongest_extension\n}\n", "\tlet strongest_extension\
    \ = '';\n\tlet strongest_extension_strength = 0;\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tstrongest_extension_strength = Math.max(strongest_extension_strength,\
    \ extension_strength);\n\t}\n\tstrongest_extension_strength = Math.ceil(strongest_extension_strength);\n\
    \tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif(extension_strength == strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest = -1;\n    var strongest_ext = '';\n    for(var i = 0;\
    \ i < extensions.length; i++){\n        var ext = extensions[i];\n        var\
    \ cap = ext.toUpperCase().charCodeAt(0) - ext.toLowerCase().charCodeAt(0);\n \
    \       var sm = ext.toLowerCase().charCodeAt(0) - ext.toUpperCase().charCodeAt(0);\n\
    \        var strength = cap - sm;\n        if(strength > strongest){\n       \
    \     strongest = strength;\n            strongest_ext = ext;\n        }\n   \
    \ }\n    return class_name + '.' + strongest_ext;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++){\n       \
    \ let extension_length = extensions[i].length;\n        let extension_strength\
    \ = extensions[i].length - extensions[i].toUpperCase().length;\n        let extension_strength_fraction\
    \ = extension_strength / extension_length;\n        if (extension_strength_fraction\
    \ > strongest_extension.strength){\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", " \
    \   var max_strength = -1;\n    var max_extension = null;\n    extensions.forEach(function(extension){\n\
    \        var strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(strength > max_strength){\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    });\n    return class_name\
    \ + '.' + max_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\t\
    for (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet cap = extension[0].toUpperCase().charCodeAt(0);\n\t\tlet sm = extension[0].toLowerCase().charCodeAt(0);\n\
    \t\tlet strength = cap - sm;\n\t\tif (strength > strongest_extension.strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + '.'\
    \ + strongest_extension;\n}\n", "  var strongest = -1;\n  var strongest_name =\
    \ \"\";\n  for(var i=0;i<extensions.length;i++){\n    var extension = extensions[i];\n\
    \    var extension_name = extension.substring(class_name.lastIndexOf(\".\")+1);\n\
    \    var extension_strength = extension.substring(class_name.lastIndexOf(\".\"\
    )+1).match(/[A-Z]/g).length;\n    var extension_strength_lower = extension.substring(class_name.lastIndexOf(\"\
    .\")+1).match(/[a-z]/g).length;\n    var extension_strength_upper = extension.substring(class_name.lastIndexOf(\"\
    .\")+1).match(/[A-Z]/g).length;\n    var extension_strength_total = extension_strength\
    \ + extension_strength_lower + extension_strength_upper;\n    if(extension_strength_total\
    \ > strongest){\n      strongest = extension_strength_total;\n      strongest_name\
    \ = extension_name;\n    }\n  }\n  return class_name + \".\" + strongest_name;\n\
    }\n", "    let extension_strength = {};\n    extensions.forEach((extension) =>\
    \ {\n        let extension_name = extension.charAt(0).toUpperCase() + extension.slice(1);\n\
    \        let extension_number = extension.match(/\\d/g).join('');\n        extension_strength[extension_name]\
    \ = parseInt(extension_number) - extension_number.toUpperCase().length;\n    });\n\
    \    let max_strength = 0;\n    let max_extension = '';\n    for(let extension\
    \ in extension_strength){\n        if(extension_strength[extension] > max_strength){\n\
    \            max_strength = extension_strength[extension];\n            max_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + max_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    let strongest_extension_strength\
    \ = -1;\n    for (let i = 1; i < extensions.length; i++){\n        let extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength){\n           \
    \ strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "  var strongest_extension = '';\n  var cap_extensions = extensions.map(function(x){return\
    \ x.toUpperCase()});\n  var sm_extensions = extensions.map(function(x){return\
    \ x.toLowerCase()});\n  var cap_extensions_count = cap_extensions.reduce(function(a,b){return\
    \ a+b},0);\n  var sm_extensions_count = sm_extensions.reduce(function(a,b){return\
    \ a+b},0);\n  var strength = cap_extensions_count - sm_extensions_count;\n  if(cap_extensions_count\
    \ > sm_extensions_count){\n    strongest_extension = class_name + cap_extensions[0];\n\
    \  }\n  else if(sm_extensions_count > cap_extensions_count){\n    strongest_extension\
    \ = class_name + sm_extensions[0];\n  }\n  else{\n    strongest_extension = class_name\
    \ + cap_extensions[0];\n  }\n  return strongest_extension;\n}\n", "    let strongest_extension\
    \ = ''\n    let strongest_extension_strength = -1\n    for (let i = 0; i < extensions.length;\
    \ i++){\n        let extension = extensions[i]\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length\n    \
    \    if (extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n        }\n\
    \    }\n    return class_name + '.' + strongest_extension\n}\n", "    let strongest_extension\
    \ = '';\n    let strongest_extension_strength = 0;\n    for (let i = 0; i < extensions.length;\
    \ i++){\n        let extension = extensions[i];\n        let extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if (extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", "    var\
    \ strongest = -1;\n    var strongest_extension = '';\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var cap = extension.charAt(0).toUpperCase();\n\
    \        var sm = extension.charAt(0).toLowerCase();\n        var strength = cap\
    \ - sm;\n        if(strength > strongest){\n            strongest = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + '.' + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet cap = extension.charAt(0).toUpperCase();\n\t\tlet sm = extension.charAt(0).toLowerCase();\n\
    \t\tlet strength = cap - sm;\n\t\tif (strength > strongest_extension.strength){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + '.'\
    \ + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\t\
    for (let i = 1; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\treturn class_name + '.'\
    \ + strongest_extension;\n}\n", "  let strongest_extension = ''\n  let cap_extensions\
    \ = extensions.filter(e => e.match(/[A-Z]/))\n  let sm_extensions = extensions.filter(e\
    \ => e.match(/[a-z]/))\n  let cap_extensions_length = cap_extensions.length\n\
    \  let sm_extensions_length = sm_extensions.length\n  let cap_extensions_count\
    \ = cap_extensions_length\n  let sm_extensions_count = sm_extensions_length\n\
    \  let cap_extension_strength = cap_extensions_length / cap_extensions_count\n\
    \  let sm_extension_strength = sm_extensions_length / sm_extensions_count\n  \n\
    \  for(let i = 0; i < extensions.length; i++){\n    let extension = extensions[i]\n\
    \    let cap_extension = extension.match(/[A-Z]/)\n    let sm_extension = extension.match(/[a-z]/)\n\
    \    if(cap_extension){\n      if(cap_extension_strength > sm_extension_strength){\n\
    \        strongest_extension = class_name\n      }\n      else if(cap_extension_strength\
    \ < sm_extension_strength){\n        strongest_extension = extension\n      }\n\
    \    }\n    if(sm_extension){\n      if(sm_extension_strength > cap_extension_strength){\n\
    \        strongest_extension = class_name\n      }\n      else if(sm_extension_strength\
    \ < cap_extension_strength){\n        strongest_extension = extension\n      }\n\
    \    }\n  }\n  return strongest_extension\n}\n", "\tlet strongest_extension =\
    \ extensions[0];\n\tlet strongest_extension_strength = -1;\n\tfor (let i = 0;\
    \ i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].length\
    \ - extensions[i].toUpperCase().length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = '';\n    var strongest_extension_strength\
    \ = 0;\n    var class_name_array = class_name.split('');\n    var extensions_array\
    \ = extensions.map(function(x){return x.toLowerCase()});\n    extensions_array.forEach(function(x){\n\
    \        var cap = x.length;\n        var sm = class_name_array.length - x.length;\n\
    \        var strength = cap - sm;\n        if(strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = strength;\n            strongest_extension\
    \ = x;\n        }\n    });\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = extensions[0];\n    for(var i = 1; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var cap = extension.charAt(0).toUpperCase();\n\
    \        var sm = extension.charAt(0).toLowerCase();\n        var strength = cap\
    \ - sm;\n        if(strength > strongest_extension.strength){\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "\tlet cap_extensions = extensions.map(e => e.toUpperCase()).sort((a,b)\
    \ => a.length - b.length);\n\tlet sm_extensions = extensions.map(e => e.toLowerCase()).sort((a,b)\
    \ => a.length - b.length);\n\tlet strength = cap_extensions.length - sm_extensions.length;\n\
    \treturn class_name + cap_extensions[strength];\n}\n", "    let extension_strengths\
    \ = {};\n    extensions.forEach(extension => {\n        let extension_letters\
    \ = extension.split('');\n        let extension_strength = extension_letters.reduce((acc,\
    \ letter) => {\n            let letter_upper = letter.toUpperCase();\n       \
    \     let letter_lower = letter.toLowerCase();\n            return acc + extension_letters.indexOf(letter_upper)\
    \ - extension_letters.indexOf(letter_lower);\n        }, 0);\n        extension_strengths[extension]\
    \ = extension_strength;\n    });\n    let max_strength = extension_strengths[extensions[0]];\n\
    \    extensions.forEach(extension => {\n        let extension_letters = extension.split('');\n\
    \        let extension_strength = extension_letters.reduce((acc, letter) => {\n\
    \            let letter_upper = letter.toUpperCase();\n            let letter_lower\
    \ = letter.toLowerCase();\n            return acc + extension_letters.indexOf(letter_upper)\
    \ - extension_letters.indexOf(letter_lower);\n        }, 0);\n        if (extension_strengths[extension]\
    \ > max_strength) {\n            max_strength = extension_strengths[extension];\n\
    \        }\n    });\n    return class_name + '.' + extensions[0];\n}\n", "\tlet\
    \ max_strength = -1;\n\tlet max_extension = '';\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name_length = class_name.length;\n\
    \t\tlet extension_length = extension.length;\n\t\tlet strength = class_name_length\
    \ - extension_length;\n\t\tif (strength > max_strength){\n\t\t\tmax_strength =\
    \ strength;\n\t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + '.' + max_extension;\n}\n", "\tlet strongest_extension = '';\n\tlet strongest_extension_strength\
    \ = 0;\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + '.' + strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    let strongest_extension_strength = -1;\n    for(let i\
    \ = 1; i < extensions.length; i++){\n        let extension_strength = extensions[i].length\
    \ - extensions[i].toLowerCase().length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extensions[i];\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    let strongest_extension = '';\n    let strongest_extension_strength\
    \ = 0;\n    for(let i = 0; i < extensions.length; i++){\n        let extension\
    \ = extensions[i];\n        let class_name = class_name + extension;\n       \
    \ let class_name_lower = class_name.toLowerCase();\n        let class_name_upper\
    \ = class_name.toUpperCase();\n        let class_name_length = class_name.length;\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - class_name_length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + strongest_extension;\n\
    }\n", "    let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension_str = extensions[i].toLowerCase();\n        let\
    \ extension_cap = extension_str.length;\n        let extension_sm = 0;\n     \
    \   for (let j = 0; j < extension_str.length; j++){\n            if (extension_str[j].toUpperCase()\
    \ === extension_str[j]){\n                extension_sm++;\n            }\n   \
    \     }\n        let extension_strength = extension_cap - extension_sm;\n    \
    \    if (extension_strength > strongest_extension.strength){\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest = null;\n    var max_strength = 0;\n    for(var i=0;\
    \ i<extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var extension_class = class_name + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            strongest = extension_class;\n\
    \        }\n    }\n    return strongest;\n}\n", "\tlet max_strength = 0;\n\tlet\
    \ max_extension = '';\n\tfor (let i = 0; i < extensions.length; i++){\n\t\tlet\
    \ extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > max_strength){\n\
    \t\t\tmax_strength = extension_strength;\n\t\t\tmax_extension = extension;\n\t\
    \t}\n\t}\n\treturn class_name + '.' + max_extension;\n}\n", "\tlet cap_extensions\
    \ = extensions.map(extension => extension.charAt(0).toUpperCase() + extension.slice(1))\n\
    \tlet sm_extensions = extensions.map(extension => extension.charAt(0).toLowerCase()\
    \ + extension.slice(1))\n\tlet max_extensions = cap_extensions.filter(extension\
    \ => sm_extensions.indexOf(extension) == -1)\n\tlet min_extensions = sm_extensions.filter(extension\
    \ => cap_extensions.indexOf(extension) == -1)\n\tlet max_extension = max_extensions[0]\n\
    \tlet min_extension = min_extensions[0]\n\tlet strength = cap_extensions.indexOf(max_extension)\
    \ - sm_extensions.indexOf(min_extension)\n\treturn class_name + '.' + max_extension\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    let cap_extensions = extensions.map(e => e.toUpperCase()).sort();\n\
    \    let sm_extensions = extensions.map(e => e.toLowerCase()).sort();\n    let\
    \ cap_extensions_length = cap_extensions.length;\n    let sm_extensions_length\
    \ = sm_extensions.length;\n    let max_extension_strength = -1;\n    let max_extension_extension\
    \ = '';\n    for (let i = 0; i < cap_extensions_length; i++){\n        for (let\
    \ j = 0; j < sm_extensions_length; j++){\n            let extension_strength =\
    \ cap_extensions[i].length - sm_extensions[j].length;\n            if (extension_strength\
    \ > max_extension_strength){\n                max_extension_strength = extension_strength;\n\
    \                max_extension_extension = cap_extensions[i];\n            }\n\
    \        }\n    }\n    return class_name + '.' + max_extension_extension;\n}\n",
  "    var strongest = -1;\n    var strongest_name = \"\";\n    for(var i = 0; i <\
    \ extensions.length; i++){\n        var extension = extensions[i];\n        var\
    \ extension_class = class_name + extension;\n        var extension_class_class_name\
    \ = extension_class.substr(0, extension_class.length - 1);\n        var extension_class_class_name_length\
    \ = extension_class_class_name.length;\n        var extension_class_class_name_upper\
    \ = extension_class_class_name.substr(0, extension_class_class_name_length - 1);\n\
    \        var extension_class_class_name_lower = extension_class_class_name.substr(0,\
    \ extension_class_class_name_length - 1);\n        var extension_class_class_name_strength\
    \ = extension_class_class_name_upper.length - extension_class_class_name_lower.length;\n\
    \        var extension_class_class_name_strength_percentage = extension_class_class_name_strength\
    \ / extension_class_class_name_length;\n        if(strongest == -1 || extension_class_class_name_strength_percentage\
    \ > strongest_name){\n            strongest = extension_class_class_name_strength_percentage;\n\
    \            strongest_name = extension_class_class_name_strength_percentage;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_name;\n}\n", "\t\
    let max_strength = 0;\n\tlet max_extension = '';\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name = class_name +\
    \ extension;\n\t\tlet class_obj = GetClass(class_name);\n\t\tlet strength = class_obj.strength;\n\
    \t\tif (strength > max_strength){\n\t\t\tmax_extension = extension;\n\t\t\tmax_strength\
    \ = strength;\n\t\t}\n\t}\n\treturn class_name + '.' + max_extension;\n}\n", " \
    \   let max_strength = -1\n    let max_extension = ''\n    for (let i = 0; i <\
    \ extensions.length; i++){\n        let extension = extensions[i]\n        let\
    \ strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length\n\
    \        if (strength > max_strength){\n            max_strength = strength\n\
    \            max_extension = extension\n        }\n    }\n    return class_name\
    \ + '.' + max_extension\n}\n", "    var strongest_extension = '';\n    var max_strength\
    \ = 0;\n    for(var i = 0; i<extensions.length; i++){\n        var extension =\
    \ extensions[i];\n        var class_name_extension = class_name + extension;\n\
    \        var class_name_extension_length = class_name_extension.length;\n    \
    \    var class_name_extension_strength = class_name_extension.match(/[A-Z]/g).length\
    \ - class_name_extension.match(/[a-z]/g).length;\n        if(class_name_extension_strength\
    \ > max_strength){\n            max_strength = class_name_extension_strength;\n\
    \            strongest_extension = class_name_extension;\n        }\n    }\n \
    \   return strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length\
    \ - strongest_extension.match(/[a-z]/g).length){\n\t\t\tstrongest_extension =\
    \ extensions[i];\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet current_extension = extensions[i];\n\t\tlet current_extension_strength\
    \ = current_extension.match(/[A-Z]/g).length - current_extension.match(/[a-z]/g).length;\n\
    \t\tlet current_extension_strength_percentage = current_extension_strength / extensions.length;\n\
    \t\tif (current_extension_strength_percentage > strongest_extension_strength_percentage){\n\
    \t\t\tstrongest_extension = current_extension;\n\t\t}\n\t}\n\treturn class_name\
    \ + '.' + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let extension_length = extension.length;\n        let extension_strength\
    \ = extension_length - extension_strength(extension);\n        if (extension_strength\
    \ > strongest_extension.length){\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", "\t\
    let strongest_extension = ''\n\tlet strongest_extension_strength = -1\n\tfor (let\
    \ i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i]\n\t\t\
    let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength\n\t\t\tstrongest_extension = extension\n\t\t}\n\t}\n\t\
    return class_name + '.' + strongest_extension\n}\n", "    let strongest_extension\
    \ = null;\n    let strongest_extension_strength = null;\n    for(let i = 0; i\
    \ < extensions.length; i++){\n        let extension = extensions[i];\n       \
    \ let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(strongest_extension_strength == null || extension_strength > strongest_extension_strength){\n\
    \            strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "\tlet strongest_extension = '';\n\tlet strongest_extension_strength = 0;\n\
    \tlet extension_counter = 0;\n\tfor(let extension of extensions){\n\t\textension_counter++;\n\
    \t\tlet extension_counter_string = extension_counter.toString();\n\t\tlet extension_counter_string\
    \ = extension_counter_string.substr(0, extension_counter_string.length-1);\n\t\
    \tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length-1);\n\
    \t\tlet extension_counter_string = extension_counter_string.substr(0, extension_counter_string.length",
  "    var strongest_extension = '';\n    var max_strength = 0;\n    for(var i = 0;\
    \ i < extensions.length; i++){\n        var extension = extensions[i];\n     \
    \   var extension_class = class_name + extension;\n        var extension_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_strength > max_strength){\n\
    \            max_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + strongest_extension;\n\
    }\n", "    var strongest = -1;\n    var strongest_name = \"\";\n    for(var i=0;\
    \ i<extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var cap = extension.charAt(0).toUpperCase();\n        var sm = extension.charAt(0).toLowerCase();\n\
    \        var strength = cap - sm;\n        if(strength > strongest){\n       \
    \     strongest = strength;\n            strongest_name = extension;\n       \
    \ }\n    }\n    return class_name + \".\" + strongest_name;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for(let i = 1; i < extensions.length; i++){\n        let\
    \ extension = extensions[i];\n        let cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \        let sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n        let\
    \ strength = cap - sm;\n        if(strength > strongest_extension.strength){\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + '.' + strongest_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tlet strongest_extension_strength = -1;\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
    \t\tif (extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t\tstrongest_extension_strength = extension_strength;\n\
    \t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n}\n", "\tlet cap_extensions\
    \ = extensions.map(e => e.toUpperCase());\n\tlet sm_extensions = extensions.map(e\
    \ => e.toLowerCase());\n\tlet cap_extensions_count = cap_extensions.filter(e =>\
    \ e.length > 0).length;\n\tlet sm_extensions_count = sm_extensions.filter(e =>\
    \ e.length > 0).length;\n\tlet strength = cap_extensions_count - sm_extensions_count;\n\
    \tlet strongest_extension = extensions[cap_extensions.indexOf(extensions[strength])];\n\
    \treturn class_name + '.' + strongest_extension;\n}\n", "\tlet max_strength =\
    \ 0;\n\tlet max_extension = '';\n\tfor (let i = 0; i < extensions.length; i++){\n\
    \t\tlet ext = extensions[i];\n\t\tlet cap = ext.toUpperCase().length;\n\t\tlet\
    \ sm = ext.toLowerCase();\n\t\tlet strength = cap - sm;\n\t\tif (strength > max_strength){\n\
    \t\t\tmax_strength = strength;\n\t\t\tmax_extension = ext;\n\t\t}\n\t}\n\treturn\
    \ class_name + '.' + max_extension;\n}\n", "\tlet strongest_extension = ''\n\t\
    let strongest_extension_strength = -1\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i]\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength\n\t\t\tstrongest_extension\
    \ = extension\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension\n}\n",
  "    var strongest_extension = '';\n    var strongest_extension_strength = 0;\n\
    \    var extension_counter = 0;\n    var extension_counter_strength = 0;\n   \
    \ var extension_counter_total = 0;\n    \n    for(var i=0; i<extensions.length;\
    \ i++){\n        extension_counter++;\n        extension_counter_strength += extensions[i].length;\n\
    \        extension_counter_total += extensions[i].length;\n    }\n    \n    for(var\
    \ i=0; i<extensions.length; i++){\n        extension_counter--;\n        extension_counter_strength\
    \ -= extensions[i].length;\n        extension_counter_total -= extensions[i].length;\n\
    \    }\n    \n    if(extension_counter_strength == 0){\n        return class_name;\n\
    \    }\n    \n    for(var i=0; i<extensions.length; i++){\n        extension_counter_strength\
    \ = extension_counter_strength / extension_counter_total;\n        if(extension_counter_strength\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ extension_counter_strength;\n            strongest_extension = extensions[i];\n\
    \        }\n    }\n    \n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = -1;\n    extensions.forEach(function(extension){\n        var class_name_length\
    \ = class_name.length;\n        var extension_length = extension.length;\n   \
    \     var extension_strength = extension_length - class_name_length;\n       \
    \ if (extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    });\n    return class_name + '.' + strongest_extension;\n}\n",
  "    var strongest_extension = null;\n    var max_strength = 0;\n    extensions.forEach(function(extension){\n\
    \        var strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(strength > max_strength){\n            max_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    });\n    return\
    \ class_name + '.' + strongest_extension;\n}\n", "\tlet strongest_extension =\
    \ '';\n\tlet strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "  var strongest = -1;\n  extensions.forEach(function(extension){\n    var\
    \ cap = extension.charAt(0).toUpperCase();\n    var sm = extension.charAt(0).toLowerCase();\n\
    \    var strength = cap.length - sm.length;\n    if (strength > strongest){\n\
    \      strongest = strength;\n    }\n  });\n  return class_name + extensions.filter(function(extension){\n\
    \    var cap = extension.charAt(0).toUpperCase();\n    var sm = extension.charAt(0).toLowerCase();\n\
    \    var strength = cap.length - sm.length;\n    return strength == strongest;\n\
    \  }).map(function(extension){\n    return extension.slice(strongest);\n  }).join('');\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = -1;\n    var extension_length = extensions.length;\n    for(var i=0; i<extension_length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", " \
    \   var strongest_extension = '';\n    var extension_strength = 0;\n    var extension_counter\
    \ = 0;\n    var extension_counter2 = 0;\n    var extension_counter3 = 0;\n   \
    \ var extension_counter4 = 0;\n    var extension_counter5 = 0;\n    var extension_counter6\
    \ = 0;\n    var extension_counter7 = 0;\n    var extension_counter8 = 0;\n   \
    \ var extension_counter9 = 0;\n    var extension_counter10 = 0;\n    var extension_counter11\
    \ = 0;\n    var extension_counter12 = 0;\n    var extension_counter13 = 0;\n \
    \   var extension_counter14 = 0;\n    var extension_counter15 = 0;\n    var extension_counter16\
    \ = 0;\n    var extension_counter17 = 0;\n    var extension_counter18 = 0;\n \
    \   var extension_counter19 = 0;\n    var extension_counter20 = 0;\n    var extension_counter21\
    \ = 0;\n    var extension_counter22 = 0;\n    var extension_counter23 = 0;\n \
    \   var extension_counter24 = 0;\n    var extension_counter25 = 0;\n    var extension_counter26\
    \ = 0;\n    var extension_counter27 = 0;\n    var extension_counter28 = 0;\n \
    \   var extension_counter29 = 0;\n    var extension_counter30 = 0;\n    var extension_counter31\
    \ = 0;\n    var extension_counter32 = 0;\n    var extension_counter33 = 0;\n \
    \   var extension_counter34 = 0;\n    var extension_counter35 = 0;\n    var extension_counter36\
    \ = 0;\n    var extension_counter37 = 0;\n    var extension_counter38 = 0;\n \
    \   var extension_counter39 = 0;\n    var extension_counter40 = 0;\n    var extension_counter41\
    \ = 0;\n    var extension_counter42 = 0;\n    var extension_counter43 = 0;\n \
    \   var extension_counter44 = 0;\n    var extension_counter45 = 0;\n    var extension_counter46\
    \ = 0;\n    var extension_counter47 = 0;\n    var extension_counter48 = 0;\n \
    \   var extension_counter49 = 0;\n    var extension_counter50 = 0;\n    var extension_counter51\
    \ = 0;\n    var extension_counter52 = 0;\n    var extension_counter53 = 0;\n \
    \   var extension_counter54 = 0;\n    var extension_counter55 = 0;\n    var extension_counter56\
    \ = 0;\n    var extension_counter57 = 0;\n    var extension_counter58 = 0;\n \
    \   var extension_counter59 = 0;\n    var extension_counter60 = 0;\n    var extension_counter61\
    \ = 0;\n    var extension_counter62 = 0;\n    var extension_counter63 = 0;\n \
    \   var extension_counter64 = 0;\n    var extension_counter65 = 0;\n    var extension_counter66\
    \ = 0;\n    var extension_counter67 = 0;\n    var extension_counter68 = 0;\n \
    \   var extension_counter69 = 0;\n    var extension_counter70 = 0;\n    var extension_counter71\
    \ = 0;\n    var extension_counter72 = 0;\n", "    var strongest_extension = null;\n\
    \    var strongest_extension_strength = 0;\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var extension_strength\
    \ = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n   \
    \     if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", " \
    \   var extension_strengths = {};\n    for(var i=0; i<extensions.length; i++){\n\
    \        var extension = extensions[i];\n        var class_name = class_name +\
    \ '.' + extension;\n        var strength = extension_strengths[class_name];\n\
    \        if(strength == undefined){\n            strength = extension_strengths[class_name]\
    \ = extension.match(/[A-Z]/g).length -\n                extension.match(/[a-z]/g).length;\n\
    \        }\n        if(strength > extension_strengths[class_name]){\n        \
    \    extension_strengths[class_name] = strength;\n        }\n    }\n    var strongest_extension\
    \ = extension_strengths[class_name];\n    if(strongest_extension == undefined){\n\
    \        strongest_extension = extension_strengths[class_name]\n    }\n    return\
    \ class_name + '.' + strongest_extension;\n}\n", "    let cap_extensions = extensions.map(e\
    \ => e.toUpperCase()).sort((a,b) => b.length - a.length);\n    let sm_extensions\
    \ = extensions.map(e => e.toLowerCase()).sort((a,b) => a.length - b.length);\n\
    \    let strength = cap_extensions.length - sm_extensions.length;\n    return\
    \ class_name + cap_extensions[strength];\n}\n", "    let strongest_extension =\
    \ extensions[0];\n    let strongest_extension_strength = -1;\n    for (let i =\
    \ 0; i < extensions.length; i++){\n        let extension = extensions[i];\n  \
    \      let extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension_strength){\n           \
    \ strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = null;\n    var strongest_extension_strength\
    \ = 0;\n    var extension_length = extensions.length;\n    for(var i = 0; i <\
    \ extension_length; i++){\n        var extension = extensions[i];\n        var\
    \ extension_class = class_name + extension;\n        var extension_class_strength\
    \ = Extension_Strength(extension_class);\n        if(extension_class_strength\
    \ > strongest_extension_strength){\n            strongest_extension = extension;\n\
    \            strongest_extension_strength = extension_class_strength;\n      \
    \  }\n    }\n    return class_name + strongest_extension;\n}\n", "    var strongest_extension\
    \ = '';\n    var strongest_extension_strength = 0;\n    var strongest_extension_counter\
    \ = 0;\n    var strongest_extension_counter2 = 0;\n    var strongest_extension_counter3\
    \ = 0;\n    \n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_counter = 0;\n        for(var j = 0;\
    \ j < class_name.length; j++){\n            if(class_name[j] == extension){\n\
    \                extension_counter++;\n            }\n        }\n        if(extension_counter\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ extension_counter;\n            strongest_extension = extension;\n        }\n\
    \    }\n    \n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_counter = 0;\n        for(var j = 0;\
    \ j < class_name.length; j++){\n            if(class_name[j] == extension){\n\
    \                extension_counter++;\n            }\n        }\n        if(extension_counter\
    \ > strongest_extension_strength){\n            strongest_extension_counter =\
    \ extension_counter;\n            strongest_extension_counter2 = i;\n        }\n\
    \    }\n    \n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_counter = 0;\n        for(var j = 0;\
    \ j < class_name.length; j++){\n            if(class_name[j] == extension){\n\
    \                extension_counter++;\n            }\n        }\n        if(extension_counter\
    \ > strongest_extension_strength){\n            strongest_extension_counter3 =\
    \ i;\n        }\n    }\n    \n    if(strongest_extension_strength == 0){\n   \
    \     return class_name;\n    }\n    else if(strongest_extension_strength == 1){\n\
    \        return class_name.substr(0, strongest_extension_counter + 1) + '.' +\
    \ extensions[strongest_extension_counter2];\n    }\n    else if(strongest_extension_strength\
    \ == 2){\n        return class_name.substr(0, strongest_extension_counter + 1)\
    \ + '.' + extensions[strongest_extension_counter2 + 1];\n    }\n    else if(strongest_extension_strength\
    \ == 3){\n        return class_name.substr(0, strongest_extension_counter + 1)\
    \ + '.' + extensions[strongest_extension_counter3];\n    }\n    else if(strongest_extension_strength\
    \ == 4){\n        return class_name.substr(0, strongest_extension_counter + 1)\
    \ + '.' + extensions[strongest_extension_counter3 + 1];\n    }\n    else if(strongest_extension_strength\
    \ == 5){\n        return class_name.substr(0, strongest_extension_counter + 1)\
    \ + '.' + extensions[strongest_extension_counter3 + 1];\n    }", "\tlet strongest_extension\
    \ = extensions[0];\n\tlet strongest_extension_strength = -1;\n\tfor (let i = 1;\
    \ i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length\
    \ - extensions[i].match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "    var max_strength = 0;\n    var best_extension = '';\n    for(var i=0;\
    \ i<extensions.length; i++){\n        var extension = extensions[i];\n       \
    \ var class_name = class_name + extension;\n        var class_obj = GetClass(class_name);\n\
    \        if(class_obj){\n            var strength = class_obj.StrongestExtensionName();\n\
    \            if(strength > max_strength){\n                max_strength = strength;\n\
    \                best_extension = extension;\n            }\n        }\n    }\n\
    \    return class_name + best_extension;\n}\n", "\tlet strongest_extension = extensions[0];\n\
    \tfor(let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength = extensions[i].split(\"\
    \").reduce((a, b) => a + b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0);\n\t\
    \tif(extension_strength > strongest_extension.split(\"\").reduce((a, b) => a +\
    \ b.charCodeAt(0) - b.charCodeAt(b.length - 1), 0)){\n\t\t\tstrongest_extension\
    \ = extensions[i];\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "\tlet strength = 0;\n\tlet strongest = '';\n\textensions.forEach((extension)\
    \ => {\n\t\tlet cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\t\tlet\
    \ sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n\t\tstrength += cap -\
    \ sm;\n\t});\n\tlet strongest_extension = class_name + '.' + extensions.find(extension\
    \ => extension.charAt(0).toLowerCase().charCodeAt(0) === strength);\n\treturn\
    \ strongest_extension;\n}\n", "    var strongest_extension = '';\n    var strongest_extension_strength\
    \ = 0;\n    var class_name_length = class_name.length;\n    var extensions_length\
    \ = extensions.length;\n    \n    for(var i = 0; i < extensions_length; i++){\n\
    \        var extension = extensions[i];\n        var extension_length = extension.length;\n\
    \        var extension_strength = extension_length - class_name_length;\n    \
    \    \n        if(extension_strength > strongest_extension_strength){\n      \
    \      strongest_extension = extension;\n            strongest_extension_strength\
    \ = extension_strength;\n        }\n    }\n    \n    return class_name + '.' +\
    \ strongest_extension;\n}\n", "\tlet strongest_extension = '';\n\tlet strongest_extension_strength\
    \ = 0;\n\t\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension =\
    \ extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\t\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\t\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "    var max_strength = -1;\n    var best_extension = null;\n    extensions.forEach(function(extension){\n\
    \        var strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(strength > max_strength){\n            max_strength = strength;\n\
    \            best_extension = extension;\n        }\n    });\n    return class_name\
    \ + best_extension;\n}\n", "    let strongest_extension = extensions[0];\n   \
    \ extensions.forEach((extension) => {\n        let cap = extension.charAt(0).toUpperCase().charCodeAt(0);\n\
    \        let sm = extension.charAt(0).toLowerCase().charCodeAt(0);\n        let\
    \ strength = cap - sm;\n        if (strength > strongest_extension.strength) {\n\
    \            strongest_extension = extension;\n        }\n    });\n    return\
    \ class_name + '.' + strongest_extension;\n}\n", "\tlet strongest_extension =\
    \ '';\n\tlet strongest_extension_strength = 0;\n\tfor(let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif(extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest = null;\n    var max = 0;\n    extensions.forEach(function(extension){\n\
    \        var cap = extension.charAt(0).toUpperCase();\n        var sm = extension.charAt(0).toLowerCase();\n\
    \        var strength = cap - sm;\n        if(strength > max){\n            max\
    \ = strength;\n            strongest = extension;\n        }\n    });\n    return\
    \ class_name + '.' + strongest;\n}\n", "    let cap_extensions = extensions.filter(extension\
    \ => extension.match(/[A-Z]/));\n    let sm_extensions = extensions.filter(extension\
    \ => extension.match(/[a-z]/));\n    let cap_extensions_count = cap_extensions.length;\n\
    \    let sm_extensions_count = sm_extensions.length;\n    let cap_extension_strength\
    \ = cap_extensions_count - sm_extensions_count;\n    let sm_extension_strength\
    \ = sm_extensions_count - cap_extensions_count;\n    let strongest_extension =\
    \ null;\n    if (cap_extension_strength > sm_extension_strength){\n        strongest_extension\
    \ = class_name + cap_extensions[0];\n    }\n    else if (sm_extension_strength\
    \ > cap_extension_strength){\n        strongest_extension = class_name + sm_extensions[0];\n\
    \    }\n    return strongest_extension;\n}\n", "    var strongest = -1;\n    var\
    \ strongest_extension = '';\n    for(var i = 0; i<extensions.length; i++){\n \
    \       var extension = extensions[i];\n        var class_name = class_name +\
    \ extension;\n        var class_exists = class_exists(class_name);\n        if(class_exists){\n\
    \            var class_extensions = class_extensions(class_name);\n          \
    \  var class_extensions_length = class_extensions.length;\n            for(var\
    \ j = 0; j<class_extensions_length; j++){\n                var extension_strength\
    \ = extension_strength(class_name, class_extensions[j]);\n                if(extension_strength\
    \ > strongest){\n                    strongest = extension_strength;\n       \
    \             strongest_extension = class_extensions[j];\n                }\n\
    \            }\n        }\n    }\n    return class_name + strongest_extension;\n\
    }\n", "\tlet strongest_extension = ''\n\tlet strongest_extension_strength = -1\n\
    \tlet extension_counter = 0\n\t\n\tfor(let i = 0; i < extensions.length; i++){\n\
    \t\tlet extension = extensions[i]\n\t\tlet extension_counter = extension_counter\
    \ + 1\n\t\tlet extension_strength = extension_counter - extension.length\n\t\t\
    \n\t\tif(extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength\n\t\t\tstrongest_extension = extension\n\t\t}\n\t}\n\t\n\
    \treturn class_name + '.' + strongest_extension\n}\n", "\tlet cap_extensions =\
    \ extensions.filter(e => e.match(/[A-Z]/));\n\tlet sm_extensions = extensions.filter(e\
    \ => e.match(/[a-z]/));\n\tlet cap_extensions_count = cap_extensions.length;\n\
    \tlet sm_extensions_count = sm_extensions.length;\n\tlet cap_extensions_strength\
    \ = cap_extensions_count - sm_extensions_count;\n\tlet sm_extensions_strength\
    \ = cap_extensions_count + sm_extensions_count;\n\tlet strongest_extension = null;\n\
    \tif(cap_extensions_strength > sm_extensions_strength){\n\t\tstrongest_extension\
    \ = class_name + cap_extensions[0];\n\t}\n\telse if(sm_extensions_strength > cap_extensions_strength){\n\
    \t\tstrongest_extension = class_name + sm_extensions[0];\n\t}\n\telse{\n\t\tstrongest_extension\
    \ = class_name + cap_extensions[0];\n\t}\n\treturn strongest_extension;\n}\n",
  "    var strongest_extension = '';\n    var strongest_extension_strength = 0;\n\
    \    var class_name_length = class_name.length;\n    var extensions_length = extensions.length;\n\
    \    var i;\n    for(i = 0; i < extensions_length; i++){\n        var extension_length\
    \ = extensions[i].length;\n        var extension_strength = extensions[i].length\
    \ - class_name_length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = '';\n    var cap_extensions = extensions.map(function(e){return\
    \ e.charAt(0).toUpperCase();});\n    var sm_extensions = extensions.map(function(e){return\
    \ e.charAt(0).toLowerCase();});\n    var cap_extensions_count = cap_extensions.reduce(function(a,b){return\
    \ a+b;}, 0);\n    var sm_extensions_count = sm_extensions.reduce(function(a,b){return\
    \ a+b;}, 0);\n    var strongest_extension_count = 0;\n    extensions.forEach(function(e){\n\
    \        var cap_extension = e.charAt(0).toUpperCase();\n        var sm_extension\
    \ = e.charAt(0).toLowerCase();\n        var cap_extension_count = cap_extensions.reduce(function(a,b){return\
    \ a+b;}, 0);\n        var sm_extension_count = sm_extensions.reduce(function(a,b){return\
    \ a+b;}, 0);\n        var extension_count = cap_extension_count+sm_extension_count;\n\
    \        var strength = extension_count/(cap_extension_count+sm_extension_count);\n\
    \        if(strength > strongest_extension_count){\n            strongest_extension_count\
    \ = strength;\n            strongest_extension = e;\n        }\n    });\n    return\
    \ class_name + '.' + strongest_extension;\n}\n", "    var strongest_extension\
    \ = null;\n    var strongest_extension_strength = null;\n    var strongest_extension_strength_counter\
    \ = 0;\n    var strongest_extension_strength_counter_max = 0;\n    var strongest_extension_strength_counter_max_index\
    \ = 0;\n    \n    for(var i=0; i<extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(strongest_extension_strength_counter\
    \ < extension_strength){\n            strongest_extension_strength = extension_strength;\n\
    \            strongest_extension_strength_counter = extension_strength;\n    \
    \        strongest_extension = extension;\n        }\n        else if(strongest_extension_strength_counter\
    \ == extension_strength){\n            strongest_extension_strength_counter++;\n\
    \        }\n        else if(strongest_extension_strength_counter > extension_strength){\n\
    \            strongest_extension_strength_counter_max++;\n            strongest_extension_strength_counter_max_index\
    \ = i;\n        }\n    }\n    \n    if(strongest_extension_strength_counter_max\
    \ > 1){\n        for(var i=0; i<extensions.length; i++){\n            var extension\
    \ = extensions[i];\n            var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n            if(extension_strength == strongest_extension_strength){\n\
    \                extensions[i] = extension.substring(0, strongest_extension_strength_counter_max_index)\
    \ + extension.substring(strongest_extension_strength_counter_max_index+1);\n \
    \           }\n        }\n    }\n    \n    return class_name + \".\" + strongest_extension;\n\
    }\n", "    var strongest = -1;\n    var strongest_name = \"\";\n    for(var i\
    \ = 0; i < extensions.length; i++){\n        var extension = extensions[i];\n\
    \        var class_name = class_name + extension;\n        var class_name_lower\
    \ = class_name.toLowerCase();\n        var class_name_upper = class_name.toUpperCase();\n\
    \        var class_name_length = class_name_upper.length;\n        var class_name_length_lower\
    \ = class_name_lower.length;\n        var class_name_length_upper = class_name_upper.length;\n\
    \        var class_name_length_diff = class_name_length - class_name_length_lower;\n\
    \        var class_name_length_diff_upper = class_name_length_upper - class_name_length_lower;\n\
    \        var class_name_length_diff_lower = class_name_length_lower - class_name_length;\n\
    \        var class_name_length_diff_diff_upper = class_name_length_diff_upper\
    \ - class_name_length_diff_lower;\n        var class_name_length_diff_diff_lower\
    \ = class_name_length_diff_lower - class_name_length_diff;\n        var class_name_length_diff_diff_diff_upper\
    \ = class_name_length_diff_diff_upper - class_name_length_diff_diff_lower;\n \
    \       var class_name_length_diff_diff_diff_lower = class_name_length_diff_diff_lower\
    \ - class_name_length_diff_diff;\n        var class_name_length_diff_diff_diff_upper\
    \ = class_name_length_diff_diff_diff_upper - class_name_length_diff_diff_diff_lower;\n\
    \        var class_name_length_diff_diff_diff_lower = class_name_length_diff_diff_diff_lower\
    \ - class_name_length_diff_diff_diff;\n        var class_name_length_diff_diff_diff_upper\
    \ = class_name_length_diff_diff_diff_upper - class_name_length_diff_diff_diff_lower;\n\
    \        var class_name_length_diff_diff_diff_lower = class_name_length_diff_diff_diff_lower\
    \ - class_name_length_diff_diff_diff;\n        var class_name_length_diff_diff_diff_upper\
    \ = class_name_length_diff_diff_diff_upper - class_name_length_diff_diff_diff_lower;\n\
    \        var class_name_length_diff_diff_diff_lower = class_name_length_diff_diff_diff_lower\
    \ - class_name_length_diff_diff_diff;\n        var class_name_length_diff_diff_diff_upper\
    \ = class_name_length_diff_diff_diff_upper - class_name_length_diff_diff_diff_lower;\n\
    \        var class_name_length_diff_diff_diff_lower = class_name_length_diff_diff_diff_lower\
    \ - class_name_length_diff_diff_diff;\n        var class_name_length_diff_diff_diff_upper\
    \ = class_name_length_diff_diff_diff_upper - class_name_length_diff_diff_diff_lower;\n\
    \        var class_name_length_diff_diff_diff_lower = class_name_length_diff_diff_diff_lower\
    \ - class_name_length_diff_diff_diff;\n        var class_name_length_diff_diff_diff_upper\
    \ = class_name_length_diff_diff_diff_upper - class_name_length_diff_diff_diff_lower;\n\
    \        var class_name_length_diff_diff_diff_lower = class_", "\tlet strongest_extension\
    \ = '';\n\tlet strongest_extension_strength = 0;\n\tfor (let i = 0; i < extensions.length;\
    \ i++){\n\t\tlet extension = extensions[i];\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tif (extension_strength > strongest_extension_strength){\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t\tstrongest_extension\
    \ = extension;\n\t\t}\n\t}\n\treturn class_name + '.' + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tlet strongest_extension_strength\
    \ = -1;\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].length - extensions[i].toUpperCase().length;\n\t\tif (extension_strength\
    \ > strongest_extension_strength){\n\t\t\tstrongest_extension = extensions[i];\n\
    \t\t\tstrongest_extension_strength = extension_strength;\n\t\t}\n\t}\n\treturn\
    \ class_name + '.' + strongest_extension;\n}\n", "    let strongest_extension\
    \ = extensions[0];\n    for (let i = 1; i < extensions.length; i++){\n       \
    \ let extension_str = extensions[i].toLowerCase();\n        let extension_cap\
    \ = extension_str.length;\n        let extension_sm = 0;\n        for (let j =\
    \ 0; j < extension_str.length; j++){\n            if (extension_str[j].toUpperCase()\
    \ === extension_str[j]){\n                extension_sm++;\n            }\n   \
    \     }\n        let extension_strength = extension_cap - extension_sm;\n    \
    \    if (extension_strength > strongest_extension.strength){\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = extensions[0];\n    var strongest_extension_strength\
    \ = -1;\n    for(var i = 1; i < extensions.length; i++){\n        var extension_strength\
    \ = extensions[i].toUpperCase().charCodeAt(0) - extensions[i].toLowerCase().charCodeAt(0);\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extensions[i];\n  \
    \      }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", " \
    \   let strongest_extension = null;\n    let strongest_extension_strength = 0;\n\
    \    for(let i = 0; i < extensions.length; i++){\n        let extension = extensions[i];\n\
    \        let class_name_length = class_name.length;\n        let extension_length\
    \ = extension.length;\n        let extension_strength = extension_length - class_name_length;\n\
    \        if(extension_strength > strongest_extension_strength){\n            strongest_extension\
    \ = extension;\n            strongest_extension_strength = extension_strength;\n\
    \        }\n    }\n    return class_name + '.' + strongest_extension;\n}\n", " \
    \   var max_strength = -1;\n    var max_extension = '';\n    for(var i=0; i<extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name_extension\
    \ = class_name + '.' + extension;\n        var strength = Extension_Strength(class_name_extension);\n\
    \        if(strength > max_strength){\n            max_strength = strength;\n\
    \            max_extension = extension;\n        }\n    }\n    return class_name\
    \ + '.' + max_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++){\n        let current_extension\
    \ = extensions[i];\n        let current_extension_strength = current_extension.match(/[A-Z]/g).length\
    \ - current_extension.match(/[a-z]/g).length;\n        if (current_extension_strength\
    \ > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \            strongest_extension = current_extension;\n        }\n    }\n    return\
    \ class_name + '.' + strongest_extension;\n}\n", "  var max_strength = -1;\n \
    \ var max_extension = '';\n  for(var i=0; i<extensions.length; i++){\n    var\
    \ extension = extensions[i];\n    var class_name_extension = class_name + '.'\
    \ + extension;\n    var strength = Extension_Strength(class_name_extension);\n\
    \    if(strength > max_strength){\n      max_strength = strength;\n      max_extension\
    \ = extension;\n    }\n  }\n  return class_name + '.' + max_extension;\n}\n",
  "\tlet strongest_extension = '';\n\tlet max_strength = 0;\n\tlet max_extension =\
    \ '';\n\textensions.forEach((extension) => {\n\t\tlet extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n\t\tlet extension_class_name = extension.match(/[A-Z]/g).join('');\n\
    \t\tlet extension_class_name_lower = extension_class_name.match(/[a-z]/g).join('');\n\
    \t\tlet extension_class_name_upper = extension_class_name.match(/[A-Z]/g).join('');\n\
    \t\tlet extension_class_name_upper_camel = extension_class_name_upper.charAt(0).toUpperCase()\
    \ + extension_class_name_upper.slice(1);\n\t\tlet extension_class_name_lower_camel\
    \ = extension_class_name_lower.charAt(0).toLowerCase() + extension_class_name_lower.slice(1);\n\
    \t\tlet extension_class_name_upper_camel_lower = extension_class_name_upper_camel.charAt(0).toLowerCase()\
    \ + extension_class_name_upper_camel.slice(1);\n\t\tlet extension_class_name_lower_camel_lower\
    \ = extension_class_name_lower_camel.charAt(0).toLowerCase() + extension_class_name_lower_camel.slice(1);\n\
    \t\tlet extension_class_name_upper_camel_upper = extension_class_name_upper_camel.charAt(0).toUpperCase()\
    \ + extension_class_name_upper_camel.slice(1);\n\t\tlet extension_class_name_lower_camel_upper\
    \ = extension_class_name_lower_camel.charAt(0).toUpperCase() + extension_class_name_lower_camel.slice(1);\n\
    \t\tlet extension_class_name_upper_camel_lower_upper = extension_class_name_upper_camel_lower.charAt(0).toUpperCase()\
    \ + extension_class_name_upper_camel_lower.slice(1);\n\t\tlet extension_class_name_lower_camel_lower_upper\
    \ = extension_class_name_lower_camel_lower.charAt(0).toUpperCase() + extension_class_name_lower_camel_lower.slice(1);\n\
    \t\tlet extension_class_name_upper_camel_lower_lower_upper = extension_class_name_upper_camel_lower_upper.charAt(0).toUpperCase()\
    \ + extension_class_name_upper_camel_lower_upper.slice(1);\n\t\tlet extension_class_name_lower_camel_lower_lower_upper\
    \ = extension_class_name_lower_camel_lower_upper.charAt(0).toUpperCase() + extension_class_name_lower_camel_lower_upper.slice(1);\n\
    \t\tlet extension_class_name_upper_camel_lower_lower_lower_upper = extension_class_name_upper_camel_lower_lower_upper.charAt(0).toUpperCase()\
    \ + extension_class_name_upper_camel_lower_lower_upper.slice(1);\n\t\tlet extension_class_name_lower_camel_lower_lower_lower_upper\
    \ = extension_class_name_lower_camel_lower_lower_upper.", "\tlet max_strength\
    \ = 0;\n\tlet max_extension = '';\n\tfor(let i = 0; i < extensions.length; i++){\n\
    \t\tlet extension = extensions[i];\n\t\tlet class_name = class_name + extension;\n\
    \t\tlet class_extensions = GetExtensions(class_name);\n\t\tlet class_extensions_length\
    \ = class_extensions.length;\n\t\tlet class_extensions_strength = 0;\n\t\tfor(let\
    \ j = 0; j < class_extensions_length; j++){\n\t\t\tlet extension = class_extensions[j];\n\
    \t\t\tlet class_extension = class_name + extension;\n\t\t\tlet class_extension_strength\
    \ = GetExtensionStrength(class_extension);\n\t\t\tclass_extensions_strength +=\
    \ class_extension_strength;\n\t\t}\n\t\tlet class_extensions_strength_percentage\
    \ = class_extensions_strength / class_extensions_length;\n\t\tif(class_extensions_strength_percentage\
    \ > max_strength){\n\t\t\tmax_strength = class_extensions_strength_percentage;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + max_extension;\n\
    }\n", "\tlet cap_extensions = extensions.map(e => e.toUpperCase()).sort((a,b)\
    \ => b.length - a.length);\n\tlet sm_extensions = extensions.map(e => e.toLowerCase()).sort((a,b)\
    \ => a.length - b.length);\n\tlet strength = cap_extensions.length - sm_extensions.length;\n\
    \treturn class_name + cap_extensions[strength];\n}\n", "\tlet strongest_extension\
    \ = extensions[0];\n\tfor (let i = 1; i < extensions.length; i++){\n\t\tlet extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ '.' + strongest_extension;\n}\n", "\tlet strongest_extension = '';\n\tlet strongest_extension_strength\
    \ = 0;\n\tfor(let i = 0; i < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\
    \t\tlet extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \t\t\n\t\tif(extension_strength > strongest_extension_strength){\n\t\t\tstrongest_extension_strength\
    \ = extension_strength;\n\t\t\tstrongest_extension = extension;\n\t\t}\n\t}\n\t\
    return class_name + '.' + strongest_extension;\n}\n", "    var strongest = -1;\n\
    \    var strongest_extension = null;\n    for(var i = 0; i < extensions.length;\
    \ i++){\n        var extension = extensions[i];\n        var class_name = class_name\
    \ + extension;\n        var class_obj = GetClassByName(class_name);\n        if(class_obj){\n\
    \            var class_extensions = class_obj.extensions;\n            for(var\
    \ j = 0; j < class_extensions.length; j++){\n                var extension = class_extensions[j];\n\
    \                var class_name = class_name + extension;\n                var\
    \ class_obj = GetClassByName(class_name);\n                if(class_obj){\n  \
    \                  var class_extensions = class_obj.extensions;\n            \
    \        for(var k = 0; k < class_extensions.length; k++){\n                 \
    \       var extension = class_extensions[k];\n                        var class_name\
    \ = class_name + extension;\n                        var class_obj = GetClassByName(class_name);\n\
    \                        if(class_obj){\n                            var class_extensions\
    \ = class_obj.extensions;\n                            for(var l = 0; l < class_extensions.length;\
    \ l++){\n                                var extension = class_extensions[l];\n\
    \                                var class_name = class_name + extension;\n  \
    \                              var class_obj = GetClassByName(class_name);\n \
    \                               if(class_obj){\n                             \
    \       var class_extensions = class_obj.extensions;\n                       \
    \             for(var m = 0; m < class_extensions.length; m++){\n            \
    \                            var extension = class_extensions[m];\n          \
    \                              var class_name = class_name + extension;\n    \
    \                                    var class_obj = GetClassByName(class_name);\n\
    \                                        if(class_obj){\n                    \
    \                        var class_extensions = class_obj.extensions;\n      \
    \                                      for(var n = 0; n < class_extensions.length;\
    \ n++){\n                                                var extension = class_extensions[n];\n\
    \                                                var class_name = class_name +\
    \ extension;\n                                                var class_obj =\
    \ GetClassByName(class_name);\n                                              \
    \  if(class_obj){\n                                                    var class_extensions\
    \ = class_obj.extensions;\n                                                  \
    \  for(var o = 0; o < class_extensions.length; o++){\n                       \
    \                                 var extension = class_extensions[o];\n     \
    \                                                   var class_name = class_name\
    \ + extension;\n                                                        var class_obj\
    \ = GetClassByName(class_name);\n                                            \
    \            if(class_obj){\n                                                \
    \            var class_extensions = class_obj.extensions;\n                  \
    \                                          for(var p = 0; p < class_extensions.length;\
    \ p++){\n                                                                var extension\
    \ = class_extensions[p];\n                                                   \
    \             var class_name = class_name + extension;\n                     \
    \                                           var class_obj = GetClassByName(class_name);\n\
    \                                                                if(class_obj){\n\
    \                                                                    var class_extensions\
    \ = class_obj.extensions;\n                                                  \
    \                  for(var q = 0; q < class_extensions.length; q++){\n       \
    \                                                                 var extension\
    \ = class_extensions[q];\n                                                   \
    \                     var class_name = class_name + extension;\n             \
    \                                                           var class_obj = GetClassByName(class_name);\n\
    \                                                                        ", " \
    \   var strongest_extension = null;\n    var strongest_extension_strength = 0;\n\
    \    \n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        \n        if(extension_strength\
    \ > strongest_extension_strength){\n            strongest_extension_strength =\
    \ extension_strength;\n            strongest_extension = extension;\n        }\n\
    \    }\n    \n    return class_name + '.' + strongest_extension;\n}\n", "  var\
    \ extension_strengths = {};\n  extensions.forEach(function(extension){\n    var\
    \ extension_str = extension.charAt(0).toUpperCase() + extension.slice(1);\n  \
    \  var extension_strength = extension_strengths[extension_str];\n    if(extension_strength\
    \ == undefined){\n      extension_strengths[extension_str] = extension_strength\
    \ = extension_str.length;\n    }\n  });\n  var max_strength = -1;\n  var max_extension\
    \ = '';\n  for(var extension in extension_strengths){\n    if(extension_strengths[extension]\
    \ > max_strength){\n      max_strength = extension_strengths[extension];\n   \
    \   max_extension = extension;\n    }\n  }\n  return class_name + '.' + max_extension;\n\
    }\n", "    var strongest_extension = null;\n    var max_strength = 0;\n    for(var\
    \ i=0; i<extensions.length; i++){\n        var extension = extensions[i];\n  \
    \      var extension_strength = extension.match(/[A-Z]/g).length - extension.match(/[a-z]/g).length;\n\
    \        if(extension_strength > max_strength){\n            max_strength = extension_strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + '.' + strongest_extension;\n}\n", "\tlet cap_extensions = extensions.map(e\
    \ => e.toUpperCase()).sort((a,b) => a.length - b.length);\n\tlet sm_extensions\
    \ = extensions.map(e => e.toLowerCase()).sort((a,b) => a.length - b.length);\n\
    \tlet cap_extension = cap_extensions[0];\n\tlet sm_extension = sm_extensions[0];\n\
    \tlet strength = cap_extension.length - sm_extension.length;\n\tlet strongest_extension\
    \ = class_name + cap_extension;\n\tfor (let i = 1; i < cap_extensions.length;\
    \ i++){\n\t\tlet current_extension = cap_extensions[i];\n\t\tlet current_extension_length\
    \ = current_extension.length;\n\t\tlet current_extension_strength = current_extension.length\
    \ - sm_extension.length;\n\t\tif (current_extension_strength > strength){\n\t\t\
    \tstrength = current_extension_strength;\n\t\t\tstrongest_extension = class_name\
    \ + current_extension;\n\t\t}\n\t}\n\treturn strongest_extension;\n}\n", "   \
    \ let strongest_extension = extensions[0];\n    for (let i = 1; i < extensions.length;\
    \ i++){\n        let extension_strength = extensions[i].length - extensions[i].toUpperCase().length;\n\
    \        if (extension_strength > strongest_extension.length){\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "    var strongest_extension = '';\n    var strongest_extension_strength\
    \ = 0;\n    for(var i = 0; i < extensions.length; i++){\n        var extension\
    \ = extensions[i];\n        var extension_strength = extension.match(/[A-Z]/g).length\
    \ - extension.match(/[a-z]/g).length;\n        if(extension_strength > strongest_extension_strength){\n\
    \            strongest_extension_strength = extension_strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "\tlet strongest_extension = extensions[0];\n\tfor (let i = 1; i < extensions.length;\
    \ i++){\n\t\tlet extension_strength = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \t\tif (extension_strength > strongest_extension.match(/[A-Z]/g).length - strongest_extension.match(/[a-z]/g).length){\n\
    \t\t\tstrongest_extension = extensions[i];\n\t\t}\n\t}\n\treturn class_name +\
    \ '.' + strongest_extension;\n}\n", "    let strongest_extension = extensions[0];\n\
    \    for (let i = 1; i < extensions.length; i++){\n        let extension_strength\
    \ = extensions[i].match(/[A-Z]/g).length - extensions[i].match(/[a-z]/g).length;\n\
    \        if (extension_strength > strongest_extension.match(/[A-Z]/g).length -\
    \ strongest_extension.match(/[a-z]/g).length){\n            strongest_extension\
    \ = extensions[i];\n        }\n    }\n    return class_name + '.' + strongest_extension;\n\
    }\n", "  let strongest_extension = '';\n  let cap_extensions = extensions.map(x\
    \ => x.toUpperCase()).sort();\n  let sm_extensions = extensions.map(x => x.toLowerCase()).sort();\n\
    \  let cap_extensions_length = cap_extensions.length;\n  let sm_extensions_length\
    \ = sm_extensions.length;\n  let cap_extensions_sm = cap_extensions.map(x => x.charCodeAt(0)\
    \ - x.charCodeAt(0).toLowerCase());\n  let sm_extensions_sm = sm_extensions.map(x\
    \ => x.charCodeAt(0) - x.charCodeAt(0).toLowerCase());\n  let cap_extensions_sm_length\
    \ = cap_extensions_sm.length;\n  let sm_extensions_sm_length = sm_extensions_sm.length;\n\
    \  let cap_extensions_sm_min = cap_extensions_sm.reduce((a, b) => Math.min(a,\
    \ b));\n  let sm_extensions_sm_min = sm_extensions_sm.reduce((a, b) => Math.min(a,\
    \ b));\n  let cap_extensions_sm_max = cap_extensions_sm.reduce((a, b) => Math.max(a,\
    \ b));\n  let sm_extensions_sm_max = sm_extensions_sm.reduce((a, b) => Math.max(a,\
    \ b));\n  let cap_extensions_sm_sum = cap_extensions_sm.reduce((a, b) => a + b);\n\
    \  let sm_extensions_sm_sum = sm_extensions_sm.reduce((a, b) => a + b);\n  let\
    \ cap_extensions_sm_avg = cap_extensions_sm.reduce((a, b) => a + b) / cap_extensions_sm_length;\n\
    \  let sm_extensions_sm_avg = sm_extensions_sm.reduce((a, b) => a + b) / sm_extensions_sm_length;\n\
    \  let cap_extensions_sm_min = cap_extensions_sm.reduce((a, b) => Math.min(a,\
    \ b));\n  let sm_extensions_sm_min = sm_extensions_sm.reduce((a, b) => Math.min(a,\
    \ b));\n  let cap_extensions_sm_max = cap_extensions_sm.reduce((a, b) => Math.max(a,\
    \ b));\n  let sm_extensions_sm_max = sm_extensions_sm.reduce((a, b) => Math.max(a,\
    \ b));\n  let cap_extensions_sm_sum = cap_extensions_sm.reduce((a, b) => a + b);\n\
    \  let sm_extensions_sm_sum = sm_extensions_sm.reduce((a, b) => a + b);\n  let\
    \ cap_extensions_sm_avg = cap_extensions_sm.reduce((a, b) => a + b) / cap_extensions_sm_length;\n\
    \  let sm_extensions_sm_avg = sm_extensions_sm.reduce((a, b) => a + b) / sm_extensions_sm_length;\n\
    \  let cap_extensions_sm_min = cap_extensions_sm.reduce((a, b) => Math.min(a,\
    \ b));\n  let sm_extensions_sm_min = sm_extensions_sm.reduce((a, b) => Math.min(a,\
    \ b));\n  let cap_extensions_sm_max = cap_", "  let cap_exts = extensions.map(ext\
    \ => ext.charAt(0).toUpperCase() + ext.slice(1))\n  let sm_exts = extensions.map(ext\
    \ => ext.charAt(0).toLowerCase() + ext.slice(1))\n  let cap_sum = cap_exts.reduce((sum,\
    \ ext) => sum + ext.charCodeAt(0), 0)\n  let sm_sum = sm_exts.reduce((sum, ext)\
    \ => sum + ext.charCodeAt(0), 0)\n  let strength = cap_sum - sm_sum\n  return\
    \ class_name + extensions.find(ext => ext.charCodeAt(0) === strength).slice(1)\n\
    }\n", "\tlet max_strength = 0;\n\tlet max_extension = '';\n\tfor (let i = 0; i\
    \ < extensions.length; i++){\n\t\tlet extension = extensions[i];\n\t\tlet class_name\
    \ = class_name + extension;\n\t\tlet class_extension = class_name.substr(class_name.lastIndexOf('.')+1);\n\
    \t\tlet class_extension_strength = class_extension.match(/[A-Z]/g).length - class_extension.match(/[a-z]/g).length;\n\
    \t\tif (class_extension_strength > max_strength){\n\t\t\tmax_strength = class_extension_strength;\n\
    \t\t\tmax_extension = extension;\n\t\t}\n\t}\n\treturn class_name + '.' + max_extension;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
