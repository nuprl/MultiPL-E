name: HumanEval_144_simplify
language: js
prompt: "//Your task is to implement a function that will simplify the expression\n\
  // x * n. The function returns True if x * n evaluates to a whole number and False\n\
  // otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n// <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n// You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n// simplify(\"1/5\", \"5/1\") = True\n//\
  \ simplify(\"1/6\", \"2/1\") = False\n// simplify(\"7/10\", \"10/2\") = False\n\
  function simplify(x, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = simplify;\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"\
  1/6\", \"2/1\"),false);\n  assert.deepEqual(candidate(\"5/1\", \"3/1\"),true);\n\
  \  assert.deepEqual(candidate(\"7/10\", \"10/2\"),false);\n  assert.deepEqual(candidate(\"\
  2/10\", \"50/10\"),true);\n  assert.deepEqual(candidate(\"7/2\", \"4/2\"),true);\n\
  \  assert.deepEqual(candidate(\"11/6\", \"6/1\"),true);\n  assert.deepEqual(candidate(\"\
  2/3\", \"5/2\"),false);\n  assert.deepEqual(candidate(\"5/2\", \"3/5\"),false);\n\
  \  assert.deepEqual(candidate(\"2/4\", \"8/4\"),true);\n  assert.deepEqual(candidate(\"\
  2/4\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n\
  \  assert.deepEqual(candidate(\"1/5\", \"1/5\"),false);\n}\n\ntest();"
completions: ["    // Your code goes here\n}\n", "    // Your code here\n}\n</cell>\n\
    <cell>\n# Run this cell to test your code\nassert(simplify(\"1/5\", \"5/1\") ==\
    \ True)\nassert(simplify(\"1/6\", \"2/1\") == False)\nassert(simplify(\"7/10\"\
    , \"10/2\") == False)\n</cell>\n<text>\n(IMPLEMENTATION) Evaluate simplified expression\n\
    Again, here is the function you created to simplify the expression:\n\n\n</text>\n\
    <cell>\n# Simplify an expression using your simplification function\ndef evaluate_simplified(x,\
    \ n):\n    # Your code here\n    return \n</cell>\n<text>\n(IMPLEMENTATION) Test\
    \ evaluate_simplified()\nTest your simplification function by running it on a\
    \ few examples. Make sure that it works with several test cases. We suggest that\
    \ you run your simplification function on the examples below, and also with test\
    \ cases that have a small number of inputs. In particular, cases where the inputs\
    \ have only two fractions, like 2/3 and 1/2, should work, but cases with more\
    \ complicated expressions, like (1/3)+(2/3)+(3/9), should return False. You may\
    \ also want to test cases with more complicated inputs like (1/3)+(2/3)+(3/9)\
    \ + (5/9), which should return True.\n\n\n</text>\n<cell>\n# Some test cases\n\
    assert(evaluate_simplified(\"1/5\", \"1/2\") == True)\nassert(evaluate_simplified(\"\
    1/5\", \"5/1\") == True)\nassert(evaluate_simplified(\"1/6\", \"2/1\") == False)\n\
    assert(evaluate_simplified(\"7/10\", \"10/2\") == False)\nassert(evaluate_simplified(\"\
    1/6\", \"3/2\") == True)\nassert(evaluate_simplified(\"1/6\", \"5/1\") == False)\n\
    assert(evaluate_simplified(\"1/6\", \"6/1\") == True)\nassert(evaluate_simplified(\"\
    1/6\", \"7/1\") == False)\nassert(evaluate_simplified(\"1/6\", \"8/1\") == True)\n\
    assert(evaluate_simplified(\"1/6\", \"9/1\") == False)\nassert(evaluate_simplified(\"\
    1/6\", \"10/1\") == True)\nassert(evaluate_simplified(\"1/6\", \"11/1\") == False)\n\
    assert(evaluate_simplified(\"1/6\", \"12/1\") == True)\nassert(evaluate_simplified(\"\
    1/6\", \"13/1\") == False)\nassert(evaluate_simplified(\"1/6\", \"14/1\") == True)\n\
    assert(evaluate_simplified(\"1/6\", \"15/1\") == False)\nassert(evaluate_simplified(\"\
    1/6\", \"16/1\") == True)\nassert(evaluate_simplified(\"1/6\", \"17/1\") == False)\n\
    assert(evaluate_simplified(\"1/6\", \"18/1\") == True)", "    // Your code goes\
    \ here\n}\n</cell>\n<text>\nTask 3: Implement a function that will evaluate a\
    \ mathematical expression and return the result as a float.\nThe function should\
    \ take two arguments: a string representing the expression to evaluate and a string\
    \ representing the variable that should be used to represent the result. The function\
    \ should evaluate the expression and return the result as a float.\nThe function\
    \ should raise an exception if the expression cannot be evaluated or if the variable\
    \ is not found in the expression. The function should raise an exception if the\
    \ variable is not found in the expression. The function should raise an exception\
    \ if the expression is an empty string. The function should raise an exception\
    \ if the expression is not a valid mathematical expression.\nThe function should\
    \ raise an exception if the expression is not a valid mathematical expression.\n\
    \n\n</text>\n<cell>", "    // Your code here\n}\n", "    // Your code here\n}\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string representation\
    \ of a fraction and returns the fraction itself. You can assume that x, and n\
    \ are valid fractions, and do not have zero as denominator.\n\n\n</text>\n<cell>",
  "  if(x === \"0\") return false;\n  if(x === \"1\") return true;\n  if(n.indexOf(\"\
    /\") === -1){\n    if(x === n) return true;\n    if(x === n+\"/1\") return true;\n\
    \    return false;\n  }\n  if(n.indexOf(\"/\") !== 0){\n    if(x === n) return\
    \ true;\n    if(x === n+\"/1\") return true;\n    return false;\n  }\n  let [numer,\
    \ denom] = n.split(\"/\");\n  if(numer === \"0\") return false;\n  if(numer ===\
    \ \"1\") return true;\n  if(denom === \"0\") return false;\n  if(denom === \"\
    1\") return true;\n  if(numer === denom) return true;\n  if(numer > denom){\n\
    \    if(numer > n+\"/1\") return true;\n    return false;\n  }\n  if(numer < denom){\n\
    \    if(denom > n+\"/1\") return true;\n    return false;\n  }\n  return false;\n\
    }\n", "    // Your code here\n}\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that takes a string representation of a fraction and returns the fraction represented\
    \ by the string.\n\nFor example, the function should return 1/2 if the string\
    \ \"1/2\" was passed as an argument.\n\nThe function should return None if the\
    \ string does not represent a fraction.\n\nYou can assume that the string does\
    \ not contain any leading or trailing whitespace.\n\nYou can assume that the string\
    \ contains only valid fractions.\n\nYou can assume that the string contains only\
    \ positive whole numbers.\n\nYou can assume that the string does not contain any\
    \ leading or trailing zeros.\n\nYou can assume that the string does not contain\
    \ any leading or trailing decimal points.\n\nYou can assume that the string does\
    \ not contain any leading or trailing decimal points.\n\nYou can assume that the\
    \ string does not contain any leading or trailing decimal points.\n\nYou can assume\
    \ that the string does not contain any leading or trailing decimal points.\n\n\
    \n</text>\n<cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that will take two fractions as arguments and return True if they\
    \ represent the same fraction, False otherwise.\n\nThe function should return\
    \ False for fractions that do not have the same numerator or denominator. For\
    \ example, simplify(\"1/5\", \"5/1\") should return False, but simplify(\"1/5\"\
    , \"1/1\") should return True.\n\nYou can assume that both fractions have the\
    \ same numerator and denominator.\n\n\n</text>\n<cell>", "  // Your code here\n\
    }\n", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nImplement a function\
    \ that will evaluate a mathematical expression. Your function should take two\
    \ arguments: a string representing a mathematical expression, and a dictionary\
    \ of variables that will hold the values of variables in the expression. The dictionary\
    \ should have the following format:\n\n{\n    \"x\": <value>,\n    \"y\": <value>,\n\
    \    ...\n}\nThe function should return True if the expression evaluates to a\
    \ number, False otherwise.\n\nevaluate(\"x + y\", {\"x\": 1, \"y\": 2}) = True\n\
    evaluate(\"x + y\", {\"x\": 2, \"y\": 2}) = False\nevaluate(\"x + y\", {\"x\"\
    : 2, \"y\": 3}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\": 4}) = True\nevaluate(\"\
    x + y\", {\"x\": 2, \"y\": 5}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\":\
    \ 6}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\": 7}) = False\nevaluate(\"\
    x + y\", {\"x\": 2, \"y\": 8}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\":\
    \ 9}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\": 10}) = False\nevaluate(\"\
    x + y\", {\"x\": 2, \"y\": 11}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\"\
    : 12}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\": 13}) = False\nevaluate(\"\
    x + y\", {\"x\": 2, \"y\": 14}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\"\
    : 15}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\": 16}) = False\nevaluate(\"\
    x + y\", {\"x\": 2, \"y\": 17}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\"\
    : 18}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\": 19}) = False\nevaluate(\"\
    x + y\", {\"x\": 2, \"y\": 20}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\"\
    : 21}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\": 22}) = False\nevaluate(\"\
    x + y\", {\"x\": 2, \"y\": 23}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\"\
    : 24}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\": 25}) = False\nevaluate(\"\
    x + y\", {\"x\": 2, \"y\": 26}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\"\
    : 27}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\": 28}) = False\nevaluate(\"\
    x + y\", {\"x\": 2, \"y\": 29}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\"\
    : 30}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\": 31}) = False\nevaluate(\"\
    x + y\", {\"x\": 2, \"y\": 32}) = False\nevaluate(\"x + y\", {\"x\": 2, \"y\"\
    : 33})", "    \n}\n</cell>\n<text>\nProblem 4\nWrite a function that will take\
    \ two fractions as input and return the greatest common denominator of the two\
    \ fractions. You can assume that both fractions have the same denominator.\n\n\
    \n</text>\n<cell>", "    // Your code goes here\n}\n</cell>\n<text>\nTask 2: Implement\
    \ a function that will evaluate a mathematical expression given in string form.\n\
    The function should return a float value representing the value of the expression.\
    \ \nThe expression can contain any number of variables and operators. \nThe function\
    \ should raise an exception if it encounters any invalid expression. \nThe function\
    \ should handle all valid expressions including those with zero as denominator.\
    \ \nThe function should handle all valid expressions including those with negative\
    \ denominator. \nThe function should handle all valid expressions including those\
    \ with fractional part. \nThe function should handle all valid expressions including\
    \ those with fractional part and negative denominator. \nThe function should handle\
    \ all valid expressions including those with fractional part and zero as denominator.\
    \ \nThe function should handle all valid expressions including those with fractional\
    \ part and negative denominator. \nThe function should handle all valid expressions\
    \ including those with fractional part and fractional part as numerator. \nThe\
    \ function should handle all valid expressions including those with fractional\
    \ part and fractional part as numerator and negative denominator. \nThe function\
    \ should handle all valid expressions including those with fractional part and\
    \ fractional part as numerator and zero as denominator. \nThe function should\
    \ handle all valid expressions including those with fractional part and fractional\
    \ part as numerator and negative denominator. \nThe function should handle all\
    \ valid expressions including those with fractional part and fractional part as\
    \ numerator and fractional part as denominator. \nThe function should handle all\
    \ valid expressions including those with fractional part and fractional part as\
    \ numerator and fractional part as denominator and negative denominator. \nThe\
    \ function should handle all valid expressions including those with fractional\
    \ part and fractional part as numerator and fractional part as denominator and\
    \ zero as denominator. \nThe function should handle all valid expressions including\
    \ those with fractional part and fractional part as numerator and fractional part\
    \ as denominator and negative denominator. \nThe function should handle all valid\
    \ expressions including those with fractional part and fractional part as numerator\
    \ and fractional part as denominator and fractional part as numerator. \nThe function\
    \ should handle all valid expressions including those with fractional part and\
    \ fractional part as numerator and fractional part as denominator and fractional\
    \ part as numerator and negative denominator. \nThe function should handle all\
    \ valid expressions including those with fractional part and fractional part as\
    \ numerator and fractional part as denominator and fractional ", "  // Your code\
    \ here\n}\n", "  // Your code goes here\n}\n", "  // Your code here\n}\n", " \
    \   // Your code here\n}\n</cell>\n<cell>\n# Run the cell below to test your solution\n\
    assert(simplify(\"1/5\", \"5/1\") == True)\nassert(simplify(\"1/6\", \"2/1\")\
    \ == False)\nassert(simplify(\"7/10\", \"10/2\") == False)\n</cell>\n<text>\n\
    Congratulations! You have implemented the simplification function! Next, given\
    \ the simplified fraction, x, and simplified exponent n, return a new simplified\
    \ fraction, y, where y is the simplified product of x and n. For example, given\
    \ x = 1/5 and n = 2, return 1/2.\n\n\n</text>\n<cell>\n# Your solution here\n\
    </cell>\n<cell>\n# Run the cell below to test your solution\nx = simplify(1/5,\
    \ 2)\nprint(x)\n</cell>\n<text>\nGreat! Now that you have a function that can\
    \ simplify fractions, you can start thinking about how to implement a function\
    \ that can simplify exponents. For example, given x = 1/5 and n = 2, return 1/2^2.\
    \ Similarly, given x = 1/5 and n = 4, return 1/2^4.\n\n\n</text>\n<cell>\n# Your\
    \ solution here\n</cell>\n<cell>\n# Run the cell below to test your solution\n\
    x = simplify(1/5, 2)\ny = simplify(x, 4)\nprint(y)\n</cell>\n<text>\nGreat! Now\
    \ that you have a function that can simplify fractions and exponents, you can\
    \ start thinking about how to implement a function that can simplify polynomials.\
    \ For example, given x = 3/1 and n = 2, return 3/2^2. Given x = 3/1 and n = 4,\
    \ return 3/2^4.\n\n\n</text>\n<cell>\n# Your solution here\n</cell>\n<cell>\n\
    # Run the cell below to test your solution\nx = 3/1\ny = simplify(x, 2)\nprint(y)\n\
    </cell>\n<text>\nGreat! Now that you have a function that can simplify fractions,\
    \ exponents, and polynomials, you can start thinking about how to implement a\
    \ function that can simplify a rational number. For example, given x = 1/5 and\
    \ n = 2, return 1/5.\n\n\n</text>\n<cell>\n# Your solution here\n</cell>\n<cell>\n\
    # Run the cell below to test your solution\nx = simplify(1/5, 2)\nprint(x)\n</cell>\n\
    <text>\nGreat! Now that you have a function that can simplify fractions, exponents,\
    \ polynomials, and rational numbers, you can start thinking about how to implement\
    \ a function that can simplify a complex number. For example, given x = 1 + 2i\
    \ and n = 2, return 3 + 2i.\n\n\n</text>\n<cell>\n# Your solution here\n</cell>\n\
    <cell>\n# Run the cell ", "    // Your code here\n}\n</cell>\n<cell>", "    //\
    \ Your code here\n}\n</cell>\n<cell>\n# Run this cell to test your code\nx = \"\
    1/5\"\nn = \"5/1\"\nsimplified1 = simplify(x, n)\nprint(\"simplified1 = \", simplified1)\n\
    x = \"1/6\"\nn = \"2/1\"\nsimplified2 = simplify(x, n)\nprint(\"simplified2 =\
    \ \", simplified2)\nx = \"7/10\"\nn = \"10/2\"\nsimplified3 = simplify(x, n)\n\
    print(\"simplified3 = \", simplified3)\n</cell>\n<text>\nExpected output:\n\n\
    simplified1 =  True\nsimplified2 =  False\nsimplified3 =  False\n\n</text>\n<text>\n\
    Task 4: Implement a function that will simplify a fraction to its lowest terms.\
    \ For example,\nsimplify(\"1/5\", \"5/1\") returns \"1/2\".\nsimplify(\"1/6\"\
    , \"2/1\") returns \"1/3\".\nsimplify(\"7/10\", \"10/2\") returns \"7/2\".\n\n\
    \n</text>\n<cell>\n# Run this cell to test your code\nx = \"1/5\"\nn = \"5/1\"\
    \nsimplified1 = simplify(x, n)\nprint(\"simplified1 = \", simplified1)\nx = \"\
    1/6\"\nn = \"2/1\"\nsimplified2 = simplify(x, n)\nprint(\"simplified2 = \", simplified2)\n\
    x = \"7/10\"\nn = \"10/2\"\nsimplified3 = simplify(x, n)\nprint(\"simplified3\
    \ = \", simplified3)\n</cell>\n<text>\nExpected output:\n\nsimplified1 =  1/2\n\
    simplified2 =  1/3\nsimplified3 =  7/2\n\n</text>\n<text>\nTask 5: Implement a\
    \ function that will simplify a fraction to its lowest terms. For example,\nsimplify(\"\
    1/5\", \"5/1\") returns \"1/2\".\nsimplify(\"1/6\", \"2/1\") returns \"1/3\".\n\
    simplify(\"7/10\", \"10/2\") returns \"7/2\".\n\n\n</text>\n<cell>\n# Run this\
    \ cell to test your code\nx = \"1/5\"\nn = \"5/1\"\nsimplified1 = simplify(x,\
    \ n)\nprint(\"simplified1 = \", simplified1)\nx = \"1/6\"\nn = \"2/1\"\nsimplified2\
    \ = simplify(x, n)\nprint(\"simplified2 = \", simplified2)\nx = \"7/10\"\nn =\
    \ \"10/2\"\nsimplified3 = simplify(x, n)\nprint(\"simplified3 = \", simplified3)\n\
    </cell>\n<text>\nExpected output:\n\nsimplified1 =  1/2\nsimplified2 =  1/3\n\
    simplified3 =  7/2\n\n</text>\n<text>\n", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string representation of a fraction\
    \ and returns the fraction itself. You can assume that x, and n are valid fractions,\
    \ and do not have zero as denominator.\n\n\n</text>\n<cell>", "    // Your code\
    \ here\n}\n</cell>\n<text>\nExercise 2\nWrite a function that will simplify a\
    \ fraction into its lowest terms. For example, simplify(\"1/5\", \"5/1\") returns\
    \ \"1/2\".\n\nThe function should return string with lowest terms separated by\
    \ \"/\".\n\n\n</text>\n<cell>", "  // Your code here\n}\n</cell>\n<text>\nProblem\
    \ 3\nThe function below takes in a string representing a fraction and returns\
    \ True if that fraction can be simplified to a whole number, False otherwise.\
    \ For example, simplify(\"1/5\", \"5/1\") returns True. simplify(\"1/6\", \"2/1\"\
    ) returns False.\n\n\n</text>\n<cell>", "    // Your code goes here\n}\n</cell>\n\
    <text>\nProblem 7: Implement a function that will evaluate a polynomial expression.\
    \ Your function should take two strings as input. The first string represents\
    \ the expression to be evaluated, and the second string represents the variable\
    \ that should be used to represent the coefficients of the expression. Your function\
    \ should return True if and only if the expression can be evaluated and False\
    \ otherwise. For example, the following expression is valid:\n\n5x + 3y + 2z +\
    \ 3\nThe variable x represents the coefficient of x. The variable y represents\
    \ the coefficient of y. The variable z represents the coefficient of z. The variable\
    \ represents the coefficient of x. Your function should return True if and only\
    \ if the expression can be evaluated and False otherwise. For example, the following\
    \ expression is valid:\n\n5x + 3y + 2z + 3\nThe variable x represents the coefficient\
    \ of x. The variable y represents the coefficient of y. The variable z represents\
    \ the coefficient of z. The variable represents the coefficient of x. Your function\
    \ should return True if and only if the expression can be evaluated and False\
    \ otherwise. For example, the following expression is valid:\n\n5x + 3y + 2z +\
    \ 3\nThe variable x represents the coefficient of x. The variable y represents\
    \ the coefficient of y. The variable z represents the coefficient of z. The variable\
    \ represents the coefficient of x. Your function should return True if and only\
    \ if the expression can be evaluated and False otherwise. For example, the following\
    \ expression is valid:\n\n5x + 3y + 2z + 3\nThe variable x represents the coefficient\
    \ of x. The variable y represents the coefficient of y. The variable z represents\
    \ the coefficient of z. The variable represents the coefficient of x. Your function\
    \ should return True if and only if the expression can be evaluated and False\
    \ otherwise. For example, the following expression is valid:\n\n5x + 3y + 2z +\
    \ 3\nThe variable x represents the coefficient of x. The variable y represents\
    \ the coefficient of y. The variable z represents the coefficient of z. The variable\
    \ represents the coefficient of x. Your function should return True if and only\
    \ if the expression can be evaluated and False otherwise. For example, the following\
    \ expression is valid:\n\n5x + 3y + 2z + 3\nThe variable x represents the coefficient\
    \ of x. The variable y represents the coefficient of y. The variable z represents\
    \ the coefficient of z. The variable represents the coefficient of x. Your function\
    \ should return True if and only if the expression can be evaluated and False\
    \ otherwise. For example, the following expression is valid:\n\n5x + 3y + 2z +\
    \ 3\nThe variable x represents the coefficient of x. The variable y represents\
    \ the coefficient of y. The variable z represents the coefficient of z. The variable\
    \ represents the coefficient of x. Your function should return True if and only\
    \ if the expression can be evaluated and False otherwise. For example, the following\
    \ expression is valid:\n\n5x + 3y + 2z + 3\nThe variable x represents the ", " \
    \   // Your code here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that will\
    \ take a string representation of a fraction and return its numerator and denominator.\n\
    \n\n</text>\n<cell>", "  if(x === n || x === \"\" || n === \"\"){\n    return\
    \ true;\n  }\n  if(x === \"1/2\"){\n    return true;\n  }\n  if(x === \"1/3\"\
    ){\n    return false;\n  }\n  if(x === \"1/4\"){\n    return false;\n  }\n  if(x\
    \ === \"1/5\"){\n    return true;\n  }\n  if(x === \"1/6\"){\n    return false;\n\
    \  }\n  if(x === \"1/7\"){\n    return false;\n  }\n  if(x === \"1/8\"){\n   \
    \ return false;\n  }\n  if(x === \"1/9\"){\n    return false;\n  }\n  if(x ===\
    \ \"1/10\"){\n    return false;\n  }\n  if(x === \"1/11\"){\n    return false;\n\
    \  }\n  if(x === \"1/12\"){\n    return false;\n  }\n  if(x === \"1/13\"){\n \
    \   return false;\n  }\n  if(x === \"1/14\"){\n    return false;\n  }\n  if(x\
    \ === \"1/15\"){\n    return false;\n  }\n  if(x === \"1/16\"){\n    return false;\n\
    \  }\n  if(x === \"1/17\"){\n    return false;\n  }\n  if(x === \"1/18\"){\n \
    \   return false;\n  }\n  if(x === \"1/19\"){\n    return false;\n  }\n  if(x\
    \ === \"1/20\"){\n    return false;\n  }\n  if(x === \"1/21\"){\n    return false;\n\
    \  }\n  if(x === \"1/22\"){\n    return false;\n  }\n  if(x === \"1/23\"){\n \
    \   return false;\n  }\n  if(x === \"1/24\"){\n    return false;\n  }\n  if(x\
    \ === \"1/25\"){\n    return false;\n  }\n  if(x === \"1/26\"){\n    return false;\n\
    \  }\n  if(x === \"1/27\"){\n    return false;\n  }\n  if(x === \"1/28\"){\n \
    \   return false;\n  }\n  if(x === \"1/29\"){\n    return false;\n  }\n  if(x\
    \ === \"1/30\"){\n    return false;\n  }\n  if(x === \"1/31\"){\n    return false;\n\
    \  }\n  if(x === \"1/32\"){\n    return false;\n  }\n  if(x === \"1/33\"){\n \
    \   return false;\n  }\n  if(x === \"1/34\"){\n    return false;\n  }\n  if(x\
    \ === \"1/35\"){\n    return false;\n  }\n  if(x === \"1/36\"){\n    return false;\n\
    \  }\n  if(x === \"1/37\"){\n    return false;\n  }\n  if(x === \"1/38\"){\n \
    \   return false;\n  }\n  if(x === \"1/39\"){\n    return false;\n  }\n  if(x ",
  "  // Your code goes here\n}\n</cell>\n<text>\nProblem 3\nImplement a function that\
    \ will evaluate a mathematical expression given in string form and return its\
    \ value.\nThe function should return an error if the expression cannot be evaluated\
    \ or if the expression contains invalid operators.\nYou can assume that all operators\
    \ are valid and do not contain any invalid operators.\nThe function should return\
    \ an error if the expression contains invalid operators.\nYou can assume that\
    \ all operators are valid and do not contain any invalid operators.\nThe function\
    \ should return an error if the expression contains invalid operators.\nYou can\
    \ assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can assume that all operators are valid and do not contain any invalid operators.\n\
    The function should return an error if the expression contains invalid operators.\n\
    You can ", "    let nums = x.split(\"/\");\n    let dens = n.split(\"/\");\n \
    \   let numsNum = nums[0].split(\"+\");\n    let numsDen = nums[1].split(\"+\"\
    );\n    let densNum = dens[0].split(\"+\");\n    let densDen = dens[1].split(\"\
    +\");\n    let numsNumNum = numsNum[0].split(\"-\");\n    let numsNumDen = numsNum[1].split(\"\
    -\");\n    let numsDenNum = numsDen[0].split(\"-\");\n    let numsDenDen = numsDen[1].split(\"\
    -\");\n    let densNumNum = densNum[0].split(\"-\");\n    let densNumDen = densNum[1].split(\"\
    -\");\n    let densDenNum = densDen[0].split(\"-\");\n    let densDenDen = densDen[1].split(\"\
    -\");\n    let numsNumNumNum = numsNumNum[0].split(\"*\");\n    let numsNumNumDen\
    \ = numsNumNum[1].split(\"*\");\n    let numsNumDenNum = numsNumDen[0].split(\"\
    *\");\n    let numsNumDenDen = numsNumDen[1].split(\"*\");\n    let numsDenNumNum\
    \ = numsDenNum[0].split(\"*\");\n    let numsDenNumDen = numsDenNum[1].split(\"\
    *\");\n    let numsDenDenNum = numsDenDen[0].split(\"*\");\n    let numsDenDenDen\
    \ = numsDenDen[1].split(\"*\");\n    let densNumNumNum = densNumNum[0].split(\"\
    *\");\n    let densNumNumDen = densNumNum[1].split(\"*\");\n    let densNumDenNum\
    \ = densNumDen[0].split(\"*\");\n    let densNumDenDen = densNumDen[1].split(\"\
    *\");\n    let densDenNumNum = densDenNum[0].split(\"*\");\n    let densDenNumDen\
    \ = densDenNum[1].split(\"*\");\n    let densDenDenNum = densDenDen[0].split(\"\
    *\");\n    let densDenDenDen = densDenDen[1].split(\"*\");\n    let numsNumNumNumNum\
    \ = numsNumNumNum[0].split(\"+\");\n    let numsNumNumNumDen = numsNumNumNum[1].split(\"\
    +\");\n    let numsNumNumDenNum = numsNumNumDen[0].split(\"+\");\n    let numsNumNumDenDen\
    \ = numsNumNumDen[1].split(\"+\");\n    let numsNumDenNumNum = numsNumDen", " \
    \   // Your code here\n}\n", "  // Your code here\n}\n", "    // Your code here\n\
    }\n</cell>\n<text>\nProblem 3\nWrite a function that will calculate the factorial\
    \ of a number. Factorial of a number $n$ is defined as\n\n$$n! = n  (n-1)  (n-2)\
    \  ...  2  1$$\n\nFor example, $5! = 5 x 4 x 3 x 2 x 1 = 120$. Your function should\
    \ take in a positive integer $n$ and return the factorial of that number.\n\n\
    factorial(5) = 120\nfactorial(10) = 5040\nfactorial(100) = 40320\n\n\n</text>\n\
    <cell>", "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell to test your\
    \ solution\nassert(simplify(\"1/5\", \"5/1\") == True)\nassert(simplify(\"1/6\"\
    , \"2/1\") == False)\nassert(simplify(\"7/10\", \"10/2\") == False)\n</cell>\n\
    <text>\nTask 3: Write a function that will simplify a fraction to its lowest terms.\
    \ For example, simplify(\"1/5\", \"5/1\") returns 1/5.\n\n\n</text>\n<cell>\n\
    # Run this cell to test your solution\ndef simplify(x, n):\n    # Your code here\n\
    \    pass\n</cell>\n<cell>\n# Run this cell to test your solution\nassert(simplify(\"\
    1/5\", \"5/1\") == \"1/5\")\n</cell>\n<text>\nTask 4: Write a function that will\
    \ simplify a fraction to its lowest terms. For example, simplify(\"1/5\", \"5/1\"\
    ) returns 1/5.\n\n\n</text>\n<cell>\n# Run this cell to test your solution\ndef\
    \ simplify(x, n):\n    # Your code here\n    pass\n</cell>\n<cell>\n# Run this\
    \ cell to test your solution\nassert(simplify(\"1/5\", \"5/1\") == \"1/5\")\n\
    </cell>\n<text>\nTask 5: Write a function that will simplify a fraction to its\
    \ lowest terms. For example, simplify(\"1/5\", \"5/1\") returns 1/5.\n\n\n</text>\n\
    <cell>\n# Run this cell to test your solution\ndef simplify(x, n):\n    # Your\
    \ code here\n    pass\n</cell>\n<cell>\n# Run this cell to test your solution\n\
    assert(simplify(\"1/5\", \"5/1\") == \"1/5\")\n</cell>\n<text>\nTask 6: Write\
    \ a function that will simplify a fraction to its lowest terms. For example, simplify(\"\
    1/5\", \"5/1\") returns 1/5.\n\n\n</text>\n<cell>\n# Run this cell to test your\
    \ solution\ndef simplify(x, n):\n    # Your code here\n    pass\n</cell>\n<cell>\n\
    # Run this cell to test your solution\nassert(simplify(\"1/5\", \"5/1\") == \"\
    1/5\")\n</cell>\n<text>\nTask 7: Write a function that will simplify a fraction\
    \ to its lowest terms. For example, simplify(\"1/5\", \"5/1\") returns 1/5.\n\n\
    \n</text>\n<cell>\n# Run this cell to test your solution\ndef simplify(x, n):\n\
    \    # Your code here\n    pass\n</cell>\n<cell>\n# Run this cell to test your\
    \ solution\nassert(simplify(\"1/5\", \"5/1\") == \"1/5\")\n</cell>\n<text>\nTask ",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ take two fractions as input and return the greatest common denominator of the\
    \ two fractions. You can assume that both fractions have the same denominator\
    \ and do not have zero as denominator. For example,\ngcd(1/3, 2/5) = 1/5\ngcd(1/6,\
    \ 2/3) = 2/3\ngcd(7/10, 10/2) = 7/2\nYou can assume that both fractions are valid\
    \ fractions.\n\n\n</text>\n<cell>", "  // Your code here\n}\n", "    // Your code\
    \ here\n}\n</cell>\n<cell>", "    // Your code here\n}\n</cell>\n<cell>", "  //\
    \ Your code here\n}\n</cell>\n<text>\nProblem 3\nImplement a function that will\
    \ evaluate a mathematical expression in prefix notation. For example, given an\
    \ expression of type $x^2 + 3x + 2$, your function should return $x + 3$. Your\
    \ function should return None if the expression is invalid or incomplete.\n\n\n\
    </text>\n<cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nImplement\
    \ a function that will evaluate a mathematical expression given as a string. \n\
    The function should return True if and only if the expression evaluates to a whole\
    \ number.\n\nYou can assume that x, and n are valid fractions, and do not have\
    \ zero as denominator.\n\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"1/6\"\
    , \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"7/2\", \"\
    2/2\") = True\nsimplify(\"7/2\", \"2/3\") = False\nsimplify(\"7/2\", \"3/2\")\
    \ = False\nsimplify(\"7/2\", \"3/3\") = False\nsimplify(\"7/2\", \"4/3\") = False\n\
    simplify(\"7/2\", \"4/4\") = False\nsimplify(\"7/2\", \"4/5\") = False\nsimplify(\"\
    7/2\", \"4/6\") = False\nsimplify(\"7/2\", \"5/2\") = False\nsimplify(\"7/2\"\
    , \"5/3\") = False\nsimplify(\"7/2\", \"5/4\") = False\nsimplify(\"7/2\", \"5/5\"\
    ) = False\nsimplify(\"7/2\", \"5/6\") = False\nsimplify(\"7/2\", \"6/2\") = False\n\
    simplify(\"7/2\", \"6/3\") = False\nsimplify(\"7/2\", \"6/4\") = False\nsimplify(\"\
    7/2\", \"6/5\") = False\nsimplify(\"7/2\", \"6/6\") = False\nsimplify(\"7/2\"\
    , \"7/2\") = True\nsimplify(\"7/2\", \"7/3\") = False\nsimplify(\"7/2\", \"7/4\"\
    ) = False\nsimplify(\"7/2\", \"7/5\") = False\nsimplify(\"7/2\", \"7/6\") = False\n\
    simplify(\"7/2\", \"8/2\") = False\nsimplify(\"7/2\", \"8/3\") = False\nsimplify(\"\
    7/2\", \"8/4\") = False\nsimplify(\"7/2\", \"8/5\") = False\nsimplify(\"7/2\"\
    , \"8/6\") = False\nsimplify(\"7/2\", \"9/2\") = False\nsimplify(\"7/2\", \"9/3\"\
    ) = False\nsimplify(\"7/2\", \"9/4\") = False\nsimplify(\"7/2\", \"9/5\") = False\n\
    simplify(\"7/2\", \"9/6\") = False\nsimplify(\"7/2\", \"10/2\") = False\nsimplify(\"\
    7/2\", \"10/3\") = False\nsimplify(\"7/2\", \"10/4\") = False\nsimplify(\"7/2\"\
    , \"10/5\") = False\nsimplify(\"7/2\", \"10/6\") = False\nsimplify(\"7/2\", \"\
    11/2\") = False\nsimplify(\"7/2\", \"11/3\") = False\nsimplify(\"7/2\", \"11/4\"\
    ) = False\nsimplify(\"7/2\", \"11/5\") = False\nsimplify(\"7/2\", \"11/6\") =\
    \ False\nsimplify(\"7/2\", \"12/2\") = False\nsimplify(\"7/2\", \"12/3\") = False\n\
    simplify(\"7/2\", \"12/4\") = False\nsimplify(\"7/2\", \"12/5\") = False\nsimplify(\"\
    7/2\", \"12/6\") = False\nsimplify(\"7/2\", \"13/2\") = False\nsimplify(\"7/2\"\
    , \"13/3\") = False\nsimplify(\"7/2\", \"13/4\") = False\nsimplify(\"7/2\", \"\
    13/5\")", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that will take two fractions as input and return the greatest common denominator.\n\
    \n\n</text>\n<cell>", "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell\
    \ to test your code\nassert(simplify(\"1/5\", \"5/1\") == True)\nassert(simplify(\"\
    1/6\", \"2/1\") == False)\nassert(simplify(\"7/10\", \"10/2\") == False)\n</cell>\n\
    <text>\n(IMPLEMENTATION) Evaluate (a fraction) to a whole number\n\n</text>\n\
    <cell>\n# Write a function that evaluates fractions to a whole number. \n# Fractions\
    \ are represented as strings, and can have the following formats:\n# <numerator>/<denominator>\n\
    # <numerator>/<denominator><numerator>/<ddenominator>\n# <numerator><denominator>\n\
    # <numerator><denominator><numerator>/<ddenominator>\n# <numerator><denominator><numerator><denominator>\n\
    # For example, simplify(\"1/2\") == \"1/2\".\n# simplify(1/2) == 0.5\n# simplify(1/3)\
    \ == 0.333\n# simplify(1/4) == 0.25\n# simplify(1/5) == 0.1666\n# simplify(1/6)\
    \ == 0.1666\n# simplify(1/7) == 0.1666\n# simplify(1/8) == 0.1666\n# simplify(1/9)\
    \ == 0.1666\n# simplify(1/10) == 0.1666\n# simplify(1/11) == 0.1666\n# simplify(1/12)\
    \ == 0.1666\n# simplify(1/13) == 0.1666\n# simplify(1/14) == 0.1666\n# simplify(1/15)\
    \ == 0.1666\n# simplify(1/16) == 0.1666\n# simplify(1/17) == 0.1666\n# simplify(1/18)\
    \ == 0.1666\n# simplify(1/19) == 0.1666\n# simplify(1/20) == 0.1666\n# simplify(1/21)\
    \ == 0.1666\n# simplify(1/22) == 0.1666\n# simplify(1/23) == 0.1666\n# simplify(1/24)\
    \ == 0.1666\n# simplify(1/25) == 0.1666\n# simplify(1/26) == 0.1666\n# simplify(1/27)\
    \ == 0.1666\n# simplify(1/28) == 0.1666\n# simplify(1/29) == 0.1666\n# simplify(1/30)\
    \ == 0.1666\n# simplify(1/31) == 0.1666\n# simplify(1/32) == 0.1666\n# simplify(1/33)\
    \ == 0.1666\n# simplify(1/34) == 0.1666\n# simplify(1/35) == 0.1666\n# simplify(1/36)\
    \ == 0.1666\n# simplify(1/37) == 0.1666\n# simplify(1/38) == 0.1666\n# simplify(1/39",
  "  // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ take a string as input and return the string with all occurrences of its first\
    \ character replaced by its second character. For example, the string \"hello\"\
    \ would become \"hheellllo\".\n\nThe function should work for strings containing\
    \ any number of characters, including none.\n\nThe function should work for strings\
    \ containing only lower case letters.\n\nThe function should work for strings\
    \ containing only upper case letters.\n\nThe function should work for strings\
    \ containing only digits (0-9).\n\nThe function should work for strings containing\
    \ only special characters (!@#$%^&*).\n\nThe function should work for strings\
    \ containing any number of special characters (!@#$%^&*).\n\nThe function should\
    \ work for strings containing any number of digits (0-9).\n\nThe function should\
    \ work for strings containing any number of lower case letters.\n\nThe function\
    \ should work for strings containing any number of upper case letters.\n\nThe\
    \ function should work for strings containing any number of special characters\
    \ (!@#$%^&*).\n\nThe function should work for strings containing any number of\
    \ digits (0-9).\n\nThe function should work for strings containing any number\
    \ of lower case letters.\n\nThe function should work for strings containing any\
    \ number of upper case letters.\n\nThe function should work for strings containing\
    \ any number of special characters (!@#$%^&*).\n\nThe function should work for\
    \ strings containing any number of digits (0-9).\n\nThe function should work for\
    \ strings containing any number of lower case letters.\n\nThe function should\
    \ work for strings containing any number of upper case letters.\n\nThe function\
    \ should work for strings containing any number of special characters (!@#$%^&*).\n\
    \nThe function should work for strings containing any number of digits (0-9).\n\
    \nThe function should work for strings containing any number of lower case letters.\n\
    \nThe function should work for strings containing any number of upper case letters.\n\
    \nThe function should work for strings containing any number of special characters\
    \ (!@#$%^&*).\n\nThe function should work for strings containing any number of\
    \ digits (0-9).\n\nThe function should work for strings containing any number\
    \ of lower case letters.\n\nThe function should work for strings containing any\
    \ number of upper case letters.\n\nThe function should work for strings containing\
    \ any number of special characters (!@#$%^&*).\n\nThe function should work for\
    \ strings containing any number of digits (0-9).\n\nThe function should work for\
    \ strings containing any number of lower case letters.\n\nThe function should\
    \ work for strings containing any number of upper case letters.\n\nThe function\
    \ should work for strings containing any number of special characters (!@#$%^&*).\n\
    \nThe function should work for strings containing any number of digits (0-9).\n\
    \nThe function ", "    // Your code here\n}\n", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will evaluate a mathematical expression\
    \ given as a string. For example, the string \"(5 + 3) * (6 - 4)\" should return\
    \ \"(5 + 3) * (6 - 4)\". Your function should return None if the string does not\
    \ represent a valid mathematical expression.\n\n\n</text>\n<cell>", "    // Your\
    \ code goes here\n}\n</cell>\n<text>\nProblem 4\nWrite a function that will evaluate\
    \ a mathematical expression given as a string and return the result as a float.\n\
    The function should raise an error if the expression is not a valid mathematical\
    \ expression.\n\nExamples:\n\nevaluate(\"2 + 3\") = 4\nevaluate(\"2 + 3 * 4\"\
    ) = 12\nevaluate(\"2 + 3 * 4\") = 12\nevaluate(\"2 + 3 * 4\") raises an error\n\
    evaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"\
    2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 +\
    \ 3\") raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\"\
    ) raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises\
    \ an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an\
    \ error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an error\n\
    evaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"\
    2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 +\
    \ 3\") raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\"\
    ) raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises\
    \ an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an\
    \ error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an error\n\
    evaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"\
    2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 +\
    \ 3\") raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\"\
    ) raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises\
    \ an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an\
    \ error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an error\n\
    evaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"\
    2 + 3\") raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 +\
    \ 3\") raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3\"\
    ) raises an error\nevaluate(\"2 + 3\") raises an error\nevaluate(\"2 + 3", " \
    \   // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ take two strings as arguments. The first string represents the expression that\
    \ needs to be simplified. The second string represents the expression that needs\
    \ to be simplified against.\n\nThe function should return True if both expressions\
    \ are valid fractions and False otherwise.\n\nYou can assume that both expressions\
    \ are valid fractions, and do not have zero as denominator.\n\n\n</text>\n<cell>",
  "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell to test your code. Make\
    \ sure you get 'True' as the answer.\nassert simplify(\"1/5\", \"5/1\") == True,\
    \ \"Expected simplify('1/5', '5/1') == True\"\nassert simplify(\"1/6\", \"2/1\"\
    ) == False, \"Expected simplify('1/6', '2/1') == False\"\nassert simplify(\"7/10\"\
    , \"10/2\") == False, \"Expected simplify('7/10', '10/2') == False\"\n</cell>\n\
    <text>\nNow that we have implemented the simplify function, we can use it in the\
    \ next cell to simplify the fractions.\n\n\n</text>\n<cell>\n# Run this cell to\
    \ simplify fractions\ndef simplify(x, n):\n    return simplify(x, n) == True\n\
    \ndef simplify(x, n):\n    numerator, denominator = x.split(\"/\")\n    numerator\
    \ = numerator.split(\"/\")[0]\n    denominator = denominator.split(\"/\")[0]\n\
    \    \n    if numerator == \"\" and denominator == \"\":\n        return True\n\
    \    \n    if numerator == \"\" and denominator != \"\":\n        return False\n\
    \    \n    if numerator != \"\" and denominator == \"\":\n        return False\n\
    \    \n    if numerator != \"\" and denominator != \"\":\n        if int(numerator)\
    \ == int(denominator):\n            return True\n        else:\n            return\
    \ False\n    \n    if int(numerator) == int(denominator):\n        return True\n\
    \    else:\n        return False\n    \nassert simplify(\"1/5\", \"5/1\") == True,\
    \ \"Expected simplify('1/5', '5/1') == True\"\nassert simplify(\"1/6\", \"2/1\"\
    ) == False, \"Expected simplify('1/6', '2/1') == False\"\nassert simplify(\"7/10\"\
    , \"10/2\") == False, \"Expected simplify('7/10', '10/2') == False\"\n</cell>\n\
    <text>\nCongratulations, you have implemented the simplify function!\n\nNow that\
    \ we have implemented the simplify function, we can use it in the next cell to\
    \ simplify the fractions.\n\n\n</text>\n<cell>\n# Run this cell to simplify fractions\n\
    def simplify(x, n):\n    return simplify(x, n) == True\n\ndef simplify(x, n):\n\
    \    numerator, denominator = x.split(\"/\")\n    numerator = numerator.split(\"\
    /\")[0]\n    denominator = denominator.split(\"/\")[0]\n    \n    if numerator\
    \ == \"\" and denominator == \"\":\n        return True\n    \n    if numerator\
    \ == \"\" and denominator != \"\":\n        return False\n    \n    if numerator\
    \ != \"\" and denominator == \"\":\n        return False\n    \n    if numerator\
    \ != \"\" and denominator != \"\":\n        if int(numerator) == int(denominator):\n\
    \            return True\n        else:\n            return False\n    \n    if\
    \ int(numerator) == int(denominator):\n", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 4\nImplement a function that will calculate the factorial of a\
    \ number. Factorial of a number is the product of all positive integers less than\
    \ or equal to that number.\n\nFor example, the factorial of 5 is 5*4*3*2*1 = 120.\
    \ The factorial of 0 is 1.\n\nThe function should return an integer and take one\
    \ argument, x, that represents the number whose factorial is to be calculated.\n\
    \nThe function should return None if the argument x is 0.\n\nYou can assume that\
    \ x is a valid integer.\n\n\n</text>\n<cell>", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will take a string as input and return\
    \ the number of digits in that string.\nThe function should return 0 if the string\
    \ does not contain any digits, and 1 otherwise.\nThe function should also handle\
    \ negative numbers by adding or subtracting 1 from the string before counting\
    \ the digits.\n\n\n</text>\n<cell>", "    // Your code here\n}\n</cell>\n<text>\n\
    Task 3\nImplement a function that will evaluate a mathematical expression. Your\
    \ function should take two arguments: an expression and a variable name. The function\
    \ should return True if the expression evaluates to a whole number and False otherwise.\
    \ Both expression and variable name are strings, and have the following format,\
    \ <expression>/<variable_name> where both expression and variable_name are positive\
    \ whole numbers. You can assume that expression and variable_name are valid expressions,\
    \ and do not have zero as their denominator. For example, simplify(\"1/5\", \"\
    5/1\") returns True, and simplify(\"1/6\", \"2/1\") returns False.\n\n\n</text>\n\
    <cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a string representation of a fraction and returns the fraction represented\
    \ by the string.\nThe function should return None if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise a ValueError if the string does not represent\
    \ a fraction.\nThe function should raise a TypeError if the string does not represent\
    \ a fraction.\nThe function should raise ", "  // Your code here\n}\n", "  //\
    \ Your code here\n}\n", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\n\
    Implement a function that will evaluate a mathematical expression given as a string\
    \ and return the result as a float.\nThe function should raise an exception if\
    \ the expression cannot be evaluated or if the expression is invalid.\nThe function\
    \ should also raise an exception if the expression is too complicated for the\
    \ computer to evaluate.\nYou can assume that all expressions are valid and do\
    \ not have zero as denominator.\n\n\n</text>\n<cell>", "    // Your code here\n\
    }\n", "    \n}\n</cell>\n<text>\nProblem 3\nWrite a function that will evaluate\
    \ a mathematical expression and return its value.\n\nThe function should take\
    \ two arguments: an expression and a variable name. The function should evaluate\
    \ the expression and return the value of the variable.\n\nThe function should\
    \ raise an exception if the variable name is not in the expression.\n\nThe function\
    \ should raise an exception if the expression is not a valid mathematical expression.\n\
    \nThe function should raise an exception if the expression is not a valid mathematical\
    \ expression.\n\nThe function should raise an exception if the expression is not\
    \ a valid mathematical expression.\n\nThe function should raise an exception if\
    \ the expression is not a valid mathematical expression.\n\nThe function should\
    \ raise an exception if the expression is not a valid mathematical expression.\n\
    \nThe function should raise an exception if the expression is not a valid mathematical\
    \ expression.\n\nThe function should raise an exception if the expression is not\
    \ a valid mathematical expression.\n\nThe function should raise an exception if\
    \ the expression is not a valid mathematical expression.\n\nThe function should\
    \ raise an exception if the expression is not a valid mathematical expression.\n\
    \nThe function should raise an exception if the expression is not a valid mathematical\
    \ expression.\n\nThe function should raise an exception if the expression is not\
    \ a valid mathematical expression.\n\nThe function should raise an exception if\
    \ the expression is not a valid mathematical expression.\n\nThe function should\
    \ raise an exception if the expression is not a valid mathematical expression.\n\
    \nThe function should raise an exception if the expression is not a valid mathematical\
    \ expression.\n\nThe function should raise an exception if the expression is not\
    \ a valid mathematical expression.\n\nThe function should raise an exception if\
    \ the expression is not a valid mathematical expression.\n\nThe function should\
    \ raise an exception if the expression is not a valid mathematical expression.\n\
    \nThe function should raise an exception if the expression is not a valid mathematical\
    \ expression.\n\nThe function should raise an exception if the expression is not\
    \ a valid mathematical expression.\n\nThe function should raise an exception if\
    \ the expression is not a valid mathematical expression.\n\nThe function should\
    \ raise an exception if the expression is not a valid mathematical expression.\n\
    \nThe function should raise an exception if the expression is not a valid mathematical\
    \ expression.\n\nThe function should raise an exception if the expression is not\
    \ a valid mathematical expression.\n\nThe function should raise an exception if\
    \ the expression is not a valid mathematical expression.\n\nThe function should\
    \ raise an exception if the expression is not a valid mathematical expression.\n\
    \nThe function should raise an exception if the expression is not a valid mathematical\
    \ expression.\n\nThe function should raise an exception if the expression is not\
    \ a valid mathematical expression.\n\nThe function should raise an exception if\
    \ the expression is not a valid mathematical expression.\n\nThe function should\
    \ raise an exception if the expression is not a valid mathematical expression.\n\
    \nThe function should raise an exception if the expression is not a valid mathematical\
    \ expression.\n\nThe function should raise an exception if the expression is not\
    \ a valid mathematical expression.\n\nThe function should raise an exception if\
    \ the expression is not a valid mathematical expression.\n\n", "    // Your code\
    \ here\n}\n</cell>\n<cell>", "  // Your code here\n}\n", "  // Your code goes\
    \ here\n}\n", "    // Your code here\n}\n</cell>\n<cell>", "    // Your code here\n\
    }\n</cell>\n<cell>", "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell\
    \ to check your answer\nsimplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(",
  "    // Your code here\n}\n", "    // Your code goes here\n}\n", "    // Your code\
    \ here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will return the number\
    \ of digits in an integer.\nThe function should take one integer argument and\
    \ return an integer that represents the number of digits in that integer.\nThe\
    \ function should return 0 if the integer is zero or less.\nThe function should\
    \ return -1 if the integer is greater than or equal to 0.\n\n\n</text>\n<cell>",
  "    // Your code here\n}\n</cell>\n<cell>\n# Run the cell below to test your solution\n\
    assert simplify( \"1/5\", \"5/1\") == True, \"Should be True\"\nassert simplify(\
    \ \"1/6\", \"2/1\") == False, \"Should be False\"\nassert simplify( \"7/10\",\
    \ \"10/2\") == False, \"Should be False\"\n</cell>\n<text>\nCongratulations!\n\
    You've finished the challenge. Nice job!\n\n</text>\n<text>\nChallenge Problem\
    \ #3\nThe function below takes a string representing a fraction and returns the\
    \ fraction simplified to a whole number.\n\nThe function should simplify the fraction\
    \ by removing any fractional part that has a denominator of 1. For example, \"\
    1/2\" should be simplified to \"1/2\".\n\nThe function should return the simplified\
    \ fraction as a string.\n\nsimplify(\"1/2\") = \"1/2\"\nsimplify(\"1/3\") = \"\
    1/3\"\nsimplify(\"3/4\") = \"3/4\"\nsimplify(\"1/4\") = \"1/4\"\nsimplify(\"1/5\"\
    ) = \"1/5\"\nsimplify(\"1/6\") = \"1/6\"\nsimplify(\"1/7\") = \"1/7\"\nsimplify(\"\
    3/8\") = \"3/8\"\nsimplify(\"1/8\") = \"1/8\"\nsimplify(\"3/10\") = \"3/10\"\n\
    simplify(\"1/10\") = \"1/10\"\nsimplify(\"1/12\") = \"1/12\"\nsimplify(\"1/14\"\
    ) = \"1/14\"\nsimplify(\"1/16\") = \"1/16\"\nsimplify(\"3/16\") = \"3/16\"\nsimplify(\"\
    1/16\") = \"1/16\"\nsimplify(\"1/32\") = \"1/32\"\nsimplify(\"1/64\") = \"1/64\"\
    \nsimplify(\"1/128\") = \"1/128\"\nsimplify(\"1/256\") = \"1/256\"\nsimplify(\"\
    1/512\") = \"1/512\"\nsimplify(\"1/1024\") = \"1/1024\"\nsimplify(\"1/2048\")\
    \ = \"1/2048\"\nsimplify(\"1/4096\") = \"1/4096\"\nsimplify(\"1/8192\") = \"1/8192\"\
    \nsimplify(\"1/16384\") = \"1/16384\"\nsimplify(\"1/32768\") = \"1/32768\"\nsimplify(\"\
    1/65536\") = \"1/65536\"\nsimplify(\"1/131072\") = \"1/131072\"\nsimplify(\"1/262144\"\
    ) = \"1/262144\"\nsimplify(\"1/524288\") = \"1/524288\"\nsimplify(\"1/1048576\"\
    ) = \"1/1048576\"\nsimplify(\"1/2097152\") = \"1/2097152\"\nsimplify(\"1/", " \
    \   // Your code here\n}\n</cell>\n<text>\nProblem 3\nThe function below will\
    \ return the number of digits in an integer.\n\n\n</text>\n<cell>", "    // Your\
    \ code goes here\n}\n</cell>\n<cell>\n# Run the code cell below to test your solution\n\
    assert(simplify(\"1/5\", \"5/1\") == True)\nassert(simplify(\"1/6\", \"2/1\")\
    \ == False)\nassert(simplify(\"7/10\", \"10/2\") == False)\n</cell>\n<text>\n\
    In the above examples, we used the simplify function with two arguments. You can\
    \ test the effect of different numbers of arguments by uncommenting the cells\
    \ below.\n\n\n</text>\n<cell>\n# Run this cell to test the effect of different\
    \ numbers of arguments on your solution\n# simplify() has two required arguments:\
    \ x and n. Try changing values of n and x in the test cells below.\n# To see different\
    \ behavior, uncomment the test cases in the next cell\n# Test case 1: simplify(\"\
    1/5\", \"5/1\") = True\n# Test case 2: simplify(\"1/6\", \"2/1\") = False\n# Test\
    \ case 3: simplify(\"7/10\", \"10/2\") = False\n# Test case 4: simplify(\"1\"\
    , \"2\") = False\n# Test case 5: simplify(\"1/1\", \"1\") = True\n# Test case\
    \ 6: simplify(\"1/1\", \"2\") = False\n# Test case 7: simplify(\"1\", \"1/1\"\
    ) = True\n# Test case 8: simplify(\"1\", \"1/2\") = False\n</cell>\n<text>\nIn\
    \ the above examples, we used the simplify function with two arguments. You can\
    \ test the effect of different numbers of arguments by uncommenting the cells\
    \ below.\n\n\n</text>\n<cell>\n# Run this cell to test the effect of different\
    \ numbers of arguments on your solution\n# simplify() has two required arguments:\
    \ x and n. Try changing values of n and x in the test cells below.\n# To see different\
    \ behavior, uncomment the test cases in the next cell\n# Test case 1: simplify(\"\
    1/5\", \"5/1\") = True\n# Test case 2: simplify(\"1/6\", \"2/1\") = False\n# Test\
    \ case 3: simplify(\"7/10\", \"10/2\") = False\n# Test case 4: simplify(\"1\"\
    , \"2\") = False\n# Test case 5: simplify(\"1/1\", \"1\") = True\n# Test case\
    \ 6: simplify(\"1/1\", \"2\") = False\n# Test case 7: simplify(\"1\", \"1/1\"\
    ) = True\n# Test case 8: simplify(\"1\", \"1/2\") = False\n</cell>\n<text>\nIn\
    \ the above examples, we used the simplify function with two arguments. You can\
    \ test the effect of different numbers of arguments by uncommenting the cells\
    \ below.\n\n\n</text>\n<cell>\n# Run this cell to test the effect of different\
    \ numbers of arguments on your solution\n# simplify() has two required arguments: ",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ evaluate a mathematical expression given as a string.\nThe function should return\
    \ True if and only if the expression evaluates to a whole number.\nThe function\
    \ should return False otherwise. Both x and n, are string representation of a\
    \ fraction, and have the following format,\n<numerator>/<denominator> where both\
    \ numerator and denominator are positive whole numbers.\nYou can assume that x,\
    \ and n are valid fractions, and do not have zero as denominator.\n\n</text>\n\
    <cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nThe function below\
    \ will take a string of any length, and return True if it is valid fraction, False\
    \ otherwise.\nThe function will take two arguments: a string and an integer. Both\
    \ arguments are strings, and they do not have zero as denominator. For example,\
    \ simplify(\"1/5\", \"5/1\") is True, while simplify(\"1/6\", \"2/1\") is False.\n\
    \nThe function should return False if the string is not valid fraction, True if\
    \ it is valid fraction.\n\nYou can assume that both arguments are valid fractions,\
    \ and do not have zero as denominator.\n\n\n</text>\n<cell>", "  // Your code\
    \ goes here\n}\n</cell>\n<cell>", "    // Your code here\n}\n</cell>\n<cell>",
  "    // Your code here\n}\n</cell>\n<cell>\n# Run the cell below to test your solution\n\
    assert(simplify(\"1/5\", \"5/1\") == True)\nassert(simplify(\"1/6\", \"2/1\")\
    \ == False)\nassert(simplify(\"7/10\", \"10/2\") == False)\n</cell>\n<text>\n\
    Step 4: Implement a function that checks whether a fraction is simplified or not.\n\
    The function should take in two strings as input. The first string is a fraction\
    \ expressed as <numerator>/<denominator>, and the second string is a fraction\
    \ expressed as <numerator>/<denominator>. Both strings are valid fractions, and\
    \ do not have zero as denominator. The function should return True if both strings\
    \ are simplified and False otherwise.\n\nThe function simplify() should return\
    \ True if both strings are simplified and False otherwise.\n\n\n</text>\n<cell>\n\
    # Your code here\n</cell>\n<cell>\n# Run the cell below to test your solution\n\
    assert(simplify(\"1/5\", \"5/1\") == True)\nassert(simplify(\"1/6\", \"2/1\")\
    \ == False)\nassert(simplify(\"7/10\", \"10/2\") == False)\n</cell>\n<text>\n\
    Step 5: Implement a function that checks whether a fraction is simplified or not.\n\
    The function should take in two strings as input. The first string is a fraction\
    \ expressed as <numerator>/<denominator>, and the second string is a fraction\
    \ expressed as <numerator>/<denominator>. Both strings are valid fractions, and\
    \ do not have zero as denominator. The function should return True if both strings\
    \ are simplified and False otherwise.\n\nThe function simplify() should return\
    \ True if both strings are simplified and False otherwise.\n\n\n</text>\n<cell>\n\
    # Your code here\n</cell>\n<cell>\n# Run the cell below to test your solution\n\
    assert(simplify(\"1/5\", \"5/1\") == True)\nassert(simplify(\"1/6\", \"2/1\")\
    \ == False)\nassert(simplify(\"7/10\", \"10/2\") == False)\n</cell>\n<text>\n\
    Step 6: Implement a function that checks whether a fraction is simplified or not.\n\
    The function should take in two strings as input. The first string is a fraction\
    \ expressed as <numerator>/<denominator>, and the second string is a fraction\
    \ expressed as <numerator>/<denominator>. Both strings are valid fractions, and\
    \ do not have zero as denominator. The function should return True if both strings\
    \ are simplified and False otherwise.\n\nThe function simplify() should return\
    \ True if both strings are simplified and False otherwise.\n\n\n</text>\n<cell>\n\
    # Your code here\n</cell>\n<cell>\n# Run the cell below ", "    // Your code goes\
    \ here\n}\n", "    // Your code here\n}\n", "    // Your code here\n}\n", "  \
    \  // Your code goes here\n}\n</cell>\n<text>\nProblem 3\nThe function below takes\
    \ a string representation of a fraction and returns the fraction it represents.\
    \ For example, simplify(\"1/5\", \"5/1\") returns 1/5.\n\n\n</text>\n<cell>",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ take two fractions as arguments and return True if they represent the same fraction,\
    \ False otherwise. Both fractions are represented in the following format, <numerator>/<denominator>\
    \ where both numerator and denominator are positive whole numbers. You can assume\
    \ that both fractions do not have zero as denominator.\n\n\n</text>\n<cell>",
  "    // Your code here\n}\n</cell>\n<cell>", "  // Your code here\n}\n", "    //\
    \ Your code here\n}\n</cell>\n<cell>", "    // Your code here\n}\n", "  // Your\
    \ code goes here\n}\n", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\n\
    Write a function that will take a string of any length, and return True if that\
    \ string is a valid fraction and False otherwise.\n\nThe function should take\
    \ two arguments - the first one is a string representing the fraction, and the\
    \ second one is a string representing the numerator and denominator of the fraction.\n\
    \nThe function should return True if both arguments are valid fractions and False\
    \ otherwise.\n\nYou can assume that both arguments are valid fractions, and do\
    \ not have zero as denominator.\n\nExamples\nsimplify(\"1/5\", \"5/1\") = True\n\
    simplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"\
    7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\"\
    , \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"\
    1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\"\
    ) = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") =\
    \ False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\n\
    simplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"\
    7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\"\
    , \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"\
    1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\"\
    ) = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") =\
    \ False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\n\
    simplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"\
    7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\"\
    , \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"\
    1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\"\
    ) = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") =\
    \ False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\n\
    simplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"\
    7/10\", \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/10\"\
    , \"1/2\") = False\nsimplify(\"7/10\", \"1/2\") = False\nsimplify(\"7/", "   \
    \ // Your code here\n}\n</cell>\n<cell>\n# Run the code cell below to test your\
    \ solution\nassert simplify( \"1/5\", \"5/1\") == True, \"Expected simplify(\\\
    \"1/5\\\", \\\"5/1\\\") to return True\"\nassert simplify( \"1/6\", \"2/1\") ==\
    \ False, \"Expected simplify(\\\"1/6\\\", \\\"2/1\\\") to return False\"\nassert\
    \ simplify( \"7/10\", \"10/2\") == False, \"Expected simplify(\\\"7/10\\\", \\\
    \"10/2\\\") to return False\"\n</cell>\n<text>\nThe next cell contains some test\
    \ cases for your solution. After you run each cell, you should see the output\
    \ returned after.\n\n\n</text>\n<cell>\n# Test cell\nassert simplify(\"1/5\",\
    \ \"5/1\") == True, \"Expected simplify('1/5', '5/1') to return True\"\nassert\
    \ simplify(\"1/6\", \"2/1\") == False, \"Expected simplify('1/6', '2/1') to return\
    \ False\"\nassert simplify(\"7/10\", \"10/2\") == False, \"Expected simplify('7/10',\
    \ '10/2') to return False\"\n</cell>\n<text>\nFinally, take a look at the solution\
    \ cell to see how we compare your output to the output of the Simplify function.\n\
    \n\n</text>\n<cell>\n# Run this cell to see how your solution compares to the\
    \ expected output\nif simplify( \"1/5\", \"5/1\") == True and simplify( \"1/6\"\
    , \"2/1\") == False and simplify( \"7/10\", \"10/2\") == False:\n    assert True\n\
    else:\n    assert False\n</cell>\n<text>\nCongratulations!\nYou've finished the\
    \ challenge!\n\nTo practice with your new skills, we have provided a solution\
    \ above in the cell below. Run the cell to see if you were correct.\n\n\n</text>\n\
    <cell>\n# Run this cell to see if your results are as expected\nif simplify( \"\
    1/5\", \"5/1\") == True and simplify( \"1/6\", \"2/1\") == False and simplify(\
    \ \"7/10\", \"10/2\") == False:\n    assert True\nelse:\n    assert False\n</cell>\n\
    <text>\nWhen we covered the Simplify function in class, you also wrote a function\
    \ that simplifies fractions. You will now complete the function so that it can\
    \ simplify fractions given as strings. For example, the function should return\
    \ True if given a string that is a fraction and False otherwise.\n\nThe function\
    \ should first simplify the fraction and then return True if both simplified fractions\
    \ are equal to each other. For example, simplify(\"1/2\", \"3/4\") should return\
    \ True, as should simplify(\"1/4\", \"3/2\").\n\nThe function should only use\
    \ mathematical operation", "    // Your code here\n}\n", "  // Your code here\n\
    }\n</cell>\n<cell>", "  // Your code here\n}\n", "    // Your code here\n}\n</cell>\n\
    <cell>", "  if(x.includes(\"/\")){\n    let [numer, denom] = x.split(\"/\");\n\
    \    if(numer === \"0\" && denom === \"0\"){\n      return true;\n    }\n    if(numer\
    \ === \"0\" && denom !== \"0\"){\n      return false;\n    }\n    if(numer !==\
    \ \"0\" && denom === \"0\"){\n      return false;\n    }\n    if(numer !== \"\
    0\" && denom !== \"0\"){\n      return simplifyFraction(numer, denom);\n    }\n\
    \  }\n  return false;\n}\n", "    // Your code here\n}\n</cell>\n<text>\nExercise\
    \ 4\nImplement a function that will evaluate a mathematical expression given as\
    \ a string. For example,\n\"(x + y)\" evaluates to 5 + x, where x and y are integers.\
    \ You can assume that x and y are valid expressions.\n\n\n</text>\n<cell>", " \
    \   // Your code here\n}\n</cell>\n<cell>\n# Run the cell below to test your simplification\
    \ function\nx = \"1/5\"\nassert simplify(x, \"5/1\") == True, \"Expected simplify(x,\
    \ \\\"5/1\\\") to return True\"\nx = \"1/6\"\nassert simplify(x, \"2/1\") == False,\
    \ \"Expected simplify(x, \\\"2/1\\\") to return False\"\nx = \"7/10\"\nassert\
    \ simplify(x, \"10/2\") == False, \"Expected simplify(x, \\\"10/2\\\") to return\
    \ False\"\n</cell>\n<text>\nProblem 3\nThe fraction 49/98 is a curious fraction,\
    \ as an inexperienced mathematician in attempting to simplify it may incorrectly\
    \ believe that 49 + 2 is equal to 49 - 2. Nonetheless, 49 + 2 should equal 49\
    \ + 1.\n\nWe shall consider fractions like, 30/50 = 3 + 1/2. First, write simplify,\
    \ which you implemented above.\n\n\n</text>\n<cell>\n# Make sure the fraction\
    \ 49/98 is a curious fraction\nx = \"49/98\"\nassert simplify(x, \"98/2\") ==\
    \ False, \"Expected simplify(x, \\\"98/2\\\") to return False\"\n</cell>\n<text>\n\
    Now that we have our simplify function, we can test it on a few fractions. Do\
    \ you expect simplify(x, \"98/2\") to simplify to x + 1?\n\n\n</text>\n<cell>\n\
    # Test your simplify function here\nx = \"49/98\"\nassert simplify(x, \"98/2\"\
    ) == True, \"Expected simplify(x, \\\"98/2\\\") to simplify to x + 1\"\nx = \"\
    1/2\"\nassert simplify(x, \"2/1\") == False, \"Expected simplify(x, \\\"2/1\\\"\
    ) to simplify to x + 1\"\nx = \"30/50\"\nassert simplify(x, \"50/2\") == False,\
    \ \"Expected simplify(x, \\\"50/2\\\") to simplify to x + 1\"\n</cell>\n<text>\n\
    Problem 4\nThe fraction 123/148 has an interesting mathematical property. Consider\
    \ 45/6 and the fraction 123/148:\n\n$$\\frac{123}{148} = \\frac{7}{8} \\qquad\
    \ \\text{and} \\qquad \\frac{7}{8} = \\frac{123}{148}$$\n\nUsing the rule above\
    \ we can simplify the first fraction:\n\n$$\\frac{7}{8} = \\frac{7}{6} \\qquad\
    \ \\text{and} \\qquad \\frac{123}{148} = \\frac{7}{6}$$\n\nNow we repeat the process\
    \ of simplifying until we obtain $\\frac{123}{148}$ from $\\frac{45}{6}$:\n\n\
    $$\\frac{7", "  // Your code here\n}\n", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 7\nWrite a function that will take two fractions as input and\
    \ return the greatest common divisor of them. Both fractions are represented as\
    \ strings, and have the following format, <numerator>/<denominator> where both\
    \ numerator and denominator are positive whole numbers. You can assume that x,\
    \ and n are valid fractions, and do not have zero as denominator.\n\n\n</text>\n\
    <cell>", "  // Your code here\n}\n", "    // Your code here\n}\n</cell>\n<cell>",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ return the number of digits in an integer.\n\n\n</text>\n<cell>", "    \n}\n\
    </cell>\n<text>\nProblem 4\nWrite a function that takes a string as input and\
    \ returns a list of integers representing the numbers in the string. Your function\
    \ should ignore non-numeric characters and return a list of integers. You can\
    \ assume that all characters are digits and that all numbers are valid integers.\n\
    \nFor example, your function should return [1,2,3,4,5,6,7,8,9,10] for the input\
    \ \"123abc456\".\n\n\n</text>\n<cell>", "  // Your code here\n}\n", "  // Your\
    \ code here\n}\n</cell>\n<cell>", "    // Your code here\n}\n</cell>\n<cell>",
  "    // Your code here\n}\n</cell>\n<cell>", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will take a string as input and return\
    \ the string with all the characters in lower case. For example,\n\n\"Hello World\"\
    \ -> \"hello world\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"\
    helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\
    \n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello\
    \ World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\"\
    \ -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"\
    helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\
    \n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello\
    \ World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\"\
    \ -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"\
    helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\
    \n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello\
    \ World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\"\
    \ -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"\
    helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\
    \n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello\
    \ World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\"\
    \ -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"\
    helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\
    \n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello\
    \ World\" -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\"\
    \ -> \"helloworld\"\n\"Hello World\" -> \"helloworld\"\n\"Hello World\" -> \"",
  "  // Your code here\n}\n", "    // Your code here\n}\n</cell>\n<text>\nProblem\
    \ 3\nThe function below takes in two fractions as strings and returns the fraction\
    \ with the smallest denominator.\n\n\n</text>\n<cell>", "    // Your code here\n\
    }\n</cell>\n<cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nThe\
    \ function below will return the number of digits in an integer.\n\n\n</text>\n\
    <cell>", "    // Your code here\n}\n</cell>\n<cell>", "    // Your code here\n\
    }\n</cell>\n<cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that will take two fractions as input and return the greatest common\
    \ divisor of them. Both fractions are represented as strings with numerator and\
    \ denominator separated by '/' characters. You can assume that both fractions\
    \ have a valid format and do not have zero as denominator. For example, the following\
    \ two fractions are valid fractions:\n\n\"1/2\"\n\"1/3\"\n\nThe function should\
    \ return \"2\" as the greatest common divisor of \"1/2\" and \"1/3\".\n\n\n</text>\n\
    <cell>", "    // Your code here\n}\n</cell>\n<text>\nTask 3: Implement the function\
    \ is_valid_fraction() that takes two strings as inputs and returns True if both\
    \ are valid fractions and False otherwise.\n\n\n</text>\n<cell>", "  // Your code\
    \ here\n}\n", "    // Your code goes here\n}\n</cell>\n<cell>\n# Run the cell\
    \ below to test your code. Do not change the code.\nassert(simplify(\"1/5\", \"\
    5/1\") == True)\nassert(simplify(\"1/6\", \"2/1\") == False)\nassert(simplify(\"\
    7/10\", \"10/2\") == False)\n</cell>\n<text>\nExpected Output\nTrue\nFalse\nFalse\n\
    \n</text>\n<text>\nFinally, we write a function that can convert a fraction into\
    \ its decimal equivalent. Complete the function so that it returns the decimal\
    \ equivalent of fraction when fraction has the following format:\n<numerator>/<denominator>.\
    \ For example, simplify(\"1/5\", \"5/1\") returns \"0.(6)\".\n\n\n</text>\n<cell>\n\
    # Complete the function so that it returns the decimal equivalent of fraction\
    \ when fraction has the following format\n# <numerator>/<denominator>. For example,\
    \ simplify(\"1/5\", \"5/1\") returns \"0.(6)\".\ndef simplify(fraction):\n   \
    \ # Your code goes here\n    return \"\"\n</cell>\n<cell>\n# Run the cell below\
    \ to test your code. Do not change the code.\nprint(simplify(\"1/5\", \"5/1\"\
    ))\n</cell>\n<text>\nExpected output\n0.(6)\n\n\n</text>\n<text>\n1.4 Evaluating\
    \ Expressions\nNow that we have written a function to simplify fractions, we can\
    \ use it in a function that evaluates expressions.\n\nComplete the function so\
    \ that it returns the value of the expression when expression is in the following\
    \ format:\n<expression> where <expression> is a valid fraction in string format.\
    \ For example, evaluate(\"1/2\") returns 0.5.\n\n\n</text>\n<cell>\n# Complete\
    \ the function so that it returns the value of the expression when expression\
    \ is in the following format\n# <expression> where <expression> is a valid fraction\
    \ in string format. For example, evaluate(\"1/2\") returns 0.5.\ndef evaluate(expression):\n\
    \    # Your code goes here\n    return \"\"\n</cell>\n<cell>\n# Run the cell below\
    \ to test your code. Do not change the code.\nprint(evaluate(\"1/2\"))\n</cell>\n\
    <text>\nExpected output\n0.5\n\n</text>\n<text>\n1.5 Finding Primes\nThe function\
    \ is_prime was given to us and we must complete it.\n\nComplete the function so\
    \ that it returns True if n is prime and False otherwise.\n\n\n</text>\n<cell>\n\
    def is_prime(n):\n    # Your code goes here\n    return \"\"\n</cell>\n<cell>\n\
    # Run the cell below to test your code. Do not change the code.\nprint(is_prime(2))\n\
    </cell>\n<text>\nExpected output\nTrue\n\n", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nThe function below will take a string as input and return a\
    \ string as output. The input string will always be a valid fraction, with two\
    \ positive whole numbers, separated by a single slash (/). For example, the input\
    \ \"1/2\" will output \"1/2\".\n\nThe function will also accept a second string\
    \ as input, which will always be the denominator of the fraction. For example,\
    \ the input \"1/2\" will output \"1/2\".\n\nThe function will also accept a third\
    \ string as input, which will always be the numerator of the fraction. For example,\
    \ the input \"1/2\" will output \"1/2\".\n\nThe function will also accept a fourth\
    \ string as input, which will always be the sign of the fraction. For example,\
    \ the input \"1/2\" will output \"-1/2\".\n\nThe function will also accept a fifth\
    \ string as input, which will always be the denominator of the fraction. For example,\
    \ the input \"1/2\" will output \"1/2\".\n\nThe function will also accept a sixth\
    \ string as input, which will always be the numerator of the fraction. For example,\
    \ the input \"1/2\" will output \"1/2\".\n\nThe function will also accept a seventh\
    \ string as input, which will always be the sign of the fraction. For example,\
    \ the input \"1/2\" will output \"-1/2\".\n\nThe function will also accept a eighth\
    \ string as input, which will always be the denominator of the fraction. For example,\
    \ the input \"1/2\" will output \"1/2\".\n\nThe function will also accept a ninth\
    \ string as input, which will always be the numerator of the fraction. For example,\
    \ the input \"1/2\" will output \"1/2\".\n\nThe function will also accept a tenth\
    \ string as input, which will always be the sign of the fraction. For example,\
    \ the input \"1/2\" will output \"-1/2\".\n\nThe function will also accept a eleventh\
    \ string as input, which will always be the denominator of the fraction. For example,\
    \ the input \"1/2\" will output \"1/2\".\n\nThe function will also accept a twelfth\
    \ string as input, which will always be the numerator of the fraction. For example,\
    \ the input \"1/2\" will output \"1/2\".\n\nThe function will also accept a thirteenth\
    \ string as input, which will always be the sign of the fraction. For example,\
    \ the input \"1/2\" will output \"-1/2\".\n\nThe function will also accept a fourteenth\
    \ string as input, which will always be the denominator of the fraction. For example,\
    \ the input \"1/2\" will output \"1/2\".\n\nThe function will also accept a fifteenth\
    \ string as input, which will always be the numerator ", "    // Your code here\n\
    }\n</cell>\n<cell>\n# Run this cell to test your code\nassert simplify(\"1/5\"\
    , \"5/1\") == True, \"Expected simplify('1/5', '5/1') == True\"\nassert simplify(\"\
    1/6\", \"2/1\") == False, \"Expected simplify('1/6', '2/1') == False\"\nassert\
    \ simplify(\"7/10\", \"10/2\") == False, \"Expected simplify('7/10', '10/2') ==\
    \ False\"\n</cell>\n<text>\nThe function simplify has passed all the assert tests.\
    \ You should be able to use simplify to simplify expressions.\n\n\n</text>\n<text>\n\
    Task 3\nImplement a function that will simplify the expression\nx + y. The function\
    \ returns True if x + y evaluates to a whole number and False otherwise. Both\
    \ x and y, are string representation of a fraction, and have the following format,\
    \ <numerator>/<denominator> where both numerator and denominator are positive\
    \ whole numbers.\nYou can assume that x and y are valid fractions, and do not\
    \ have zero as denominator.\n\n\n</text>\n<cell>\n# Run this cell to test your\
    \ code\nassert simplify(\"1/5\", \"5/1\") == True, \"Expected simplify('1/5',\
    \ '5/1') == True\"\nassert simplify(\"1/6\", \"2/1\") == False, \"Expected simplify('1/6',\
    \ '2/1') == False\"\nassert simplify(\"7/10\", \"10/2\") == False, \"Expected\
    \ simplify('7/10', '10/2') == False\"\n</cell>\n<text>\nThe function simplify\
    \ has passed all the assert tests. You should be able to use simplify to simplify\
    \ expressions.\n\n\n</text>\n<text>\nTask 4\nImplement a function that will simplify\
    \ the expression\nx ** y. The function returns True if x ** y evaluates to a whole\
    \ number and False otherwise. Both x and y, are string representation of a fraction,\
    \ and have the following format, <numerator>/<denominator> where both numerator\
    \ and denominator are positive whole numbers.\nYou can assume that x and y are\
    \ valid fractions, and do not have zero as denominator.\n\n\n</text>\n<cell>\n\
    # Run this cell to test your code\nassert simplify(\"1/5\", \"5/1\") == True,\
    \ \"Expected simplify('1/5', '5/1') == True\"\nassert simplify(\"1/6\", \"2/1\"\
    ) == False, \"Expected simplify('1/6', '2/1') == False\"\nassert simplify(\"7/10\"\
    , \"10/2\") == False, \"Expected simplify('7/10', '10/2') == False\"\n</cell>\n\
    <text>\nThe function simplify has passed all the assert tests. You should be able\
    \ to use simplify to simplify expressions.\n\n\n</text>\n<text>\nTask 5\nImplement\
    \ a function that will simplify the expression\nx + y * z. The function returns\
    \ True if x + y * z evaluates to a whole number and False otherwise. Both x, y, ",
  "  // Your code here\n}\n</cell>\n<cell>", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will evaluate a mathematical expression\
    \ given as a string. Your function should return a number or raise a SyntaxError\
    \ exception.\n\nThe function should evaluate expressions such as \"(1 + 2) * 3\"\
    \ as (1 + 2) * 3, and expressions such as \"(1 + 2) * 3 + 4\" as (1 + 2) * 3 +\
    \ 4.\n\nYou can assume that all operators are valid and do not contain any parentheses.\n\
    \nThe function should raise a SyntaxError exception if it encounters a character\
    \ that does not belong to an operator. For example, if the string contains \"\
    (\" then it should raise a SyntaxError exception.\n\nYou can assume that all operators\
    \ are valid and do not contain any parentheses.\n\nThe function should raise a\
    \ SyntaxError exception if it encounters a character that does not belong to an\
    \ operator. For example, if the string contains \"(\" then it should raise a SyntaxError\
    \ exception.\n\nYou can assume that all operators are valid and do not contain\
    \ any parentheses.\n\nThe function should raise a SyntaxError exception if it\
    \ encounters a character that does not belong to an operator. For example, if\
    \ the string contains \"(\" then it should raise a SyntaxError exception.\n\n\
    You can assume that all operators are valid and do not contain any parentheses.\n\
    \nThe function should raise a SyntaxError exception if it encounters a character\
    \ that does not belong to an operator. For example, if the string contains \"\
    (\" then it should raise a SyntaxError exception.\n\nYou can assume that all operators\
    \ are valid and do not contain any parentheses.\n\nThe function should raise a\
    \ SyntaxError exception if it encounters a character that does not belong to an\
    \ operator. For example, if the string contains \"(\" then it should raise a SyntaxError\
    \ exception.\n\nYou can assume that all operators are valid and do not contain\
    \ any parentheses.\n\nThe function should raise a SyntaxError exception if it\
    \ encounters a character that does not belong to an operator. For example, if\
    \ the string contains \"(\" then it should raise a SyntaxError exception.\n\n\
    You can assume that all operators are valid and do not contain any parentheses.\n\
    \nThe function should raise a SyntaxError exception if it encounters a character\
    \ that does not belong to an operator. For example, if the string contains \"\
    (\" then it should raise a SyntaxError exception.\n\nYou can assume that all operators\
    \ are valid and do not contain any parentheses.\n\nThe function should raise a\
    \ SyntaxError exception if it encounters a character that does not belong to an\
    \ operator. For example, if the string contains \"(\" then it should raise a SyntaxError\
    \ exception.\n\nYou can assume that all operators are valid and do not contain\
    \ any parentheses.\n\nThe function should raise a SyntaxError exception if it\
    \ encounters a character that does not belong to an operator", "  // Your code\
    \ here\n}\n", "  // Your code here\n}\n</cell>\n<cell>", "    // Your code here\n\
    }\n</cell>\n<cell>\n# Run the code cell below to test your solution\nx = \"1/5\"\
    \nn = \"5/1\"\nsimplifiedOutput = simplify(x, n)\nprint(f\"The simplified expression\
    \ is {simplifiedOutput}\")\n</cell>\n<text>\nThe above cell should return True.\
    \ Next, use the code cell below to test your simplification function.\n\n\n</text>\n\
    <cell>\n# Run the code cell below to test your simplification function\nprint(f\"\
    Are the outputs of simplify('1/5', '5/1') and simplify('1/6', '2/1') the same?\
    \ {simplifiedOutput == True}\")\n</cell>\n<text>\nThe above cell should return\
    \ False.\n\nNow, simplify the function so that it returns True if both numerator\
    \ and denominator are whole numbers, and False otherwise.\n\n\n</text>\n<cell>\n\
    # Modify the function so that it returns True if both numerator and denominator\
    \ are whole numbers\n# and False otherwise.\ndef simplify(x, n): \n    # Your\
    \ code here\n    \n</cell>\n<text>\nRun the code cell below to test your simplification\
    \ function.\n\n\n</text>\n<cell>\n# Run the code cell below to test your simplification\
    \ function\nprint(f\"Are the outputs of simplify('1/5', '5/1') and simplify('1/6',\
    \ '2/1') the same? {simplifiedOutput == True}\")\n</cell>\n<text>\nThe above cell\
    \ should return True.\n\n\n</text>\n<text>\nNow that you have learned how to simplify\
    \ fractions, you can begin to solve more complex equations.\n\nFor example, what\
    \ if we wanted to know the largest possible value of x / y where x and y are both\
    \ fractions?\n\nRun the code cell below to see how this can be done.\n\n\n</text>\n\
    <cell>\n# Example of a complex expression where we know the value of x / y \n\
    # where x and y are both fractions\nx = 5\ny = 4\nprint(f\"The value of x / y\
    \ where x and y are both fractions is {x / y}\")\n</cell>\n<text>\nThe above cell\
    \ should return 2.\n\n\n</text>\n<text>\nFractions cannot be added to or subtracted\
    \ from one another. Run the code cell below to see an example of this.\n\n\n</text>\n\
    <cell>\n# Example of fraction addition where we cannot add or subtract fractions\n\
    x = 5\ny = 2\nprint(f\"The value of x + y where x + y are both fractions is {x\
    \ + y}\")\n</cell>\n<text>\nThe above cell should return 3.\n\nFractions can also\
    \ be multiplied or divided by integers. Run the code cell below to see an example\
    \ of this.\n\n\n</text>\n<cell>\n", "    // Your code here\n}\n</cell>\n<cell>\n\
    # Run the code cell below to test your solution\nassert simplify( \"1/5\", \"\
    5/1\") == True, \"Expected simplify(\\\"1/5\\\", \\\"5/1\\\") to return True\"\
    \nassert simplify( \"1/6\", \"2/1\") == False, \"Expected simplify(\\\"1/6\\\"\
    , \\\"2/1\\\") to return False\"\nassert simplify( \"7/10\", \"10/2\") == False,\
    \ \"Expected simplify(\\\"7/10\\\", \\\"10/2\\\") to return False\"\n</cell>\n\
    <text>\nIn the above examples, we used the simplify function to simplify the fractions.\
    \ However, we did not use a loop to simplify the fractions. In Python, we can\
    \ use list comprehensions to simplify the fractions using a for loop. Check out\
    \ the code cell below for an example.\n\n\n</text>\n<cell>\n# Example of list\
    \ comprehension to simplify fractions\ndef simplify(x, n):\n    # Your code here\n\
    \    \n# Test cell\nassert simplify(\"1/5\", \"5/1\") == True, \"Expected simplify('1/5',\
    \ '5/1') to return True\"\nassert simplify(\"1/6\", \"2/1\") == False, \"Expected\
    \ simplify('1/6', '2/1') to return False\"\nassert simplify(\"7/10\", \"10/2\"\
    ) == False, \"Expected simplify('7/10', '10/2') to return False\"\n</cell>\n<text>\n\
    In the above example, we used the simplify function with a list comprehension\
    \ to simplify the fractions. However, we did not use a for loop to simplify the\
    \ fractions. In Python, we can use list comprehensions to simplify the fractions\
    \ using a for loop. Check out the code cell below for an example.\n\n\n</text>\n\
    <cell>\n# Example of list comprehension to simplify fractions\ndef simplify(x,\
    \ n):\n    # Your code here\n    \n# Test cell\nassert simplify(\"1/5\", \"5/1\"\
    ) == True, \"Expected simplify('1/5', '5/1') to return True\"\nassert simplify(\"\
    1/6\", \"2/1\") == False, \"Expected simplify('1/6', '2/1') to return False\"\n\
    assert simplify(\"7/10\", \"10/2\") == False, \"Expected simplify('7/10', '10/2')\
    \ to return False\"\n</cell>\n<text>\nCongratulations! You have now implemented\
    \ the simplify function!\n\nThe next step is to complete the body of the function\
    \ check_fraction to take in two strings and simplify the fraction represented\
    \ by the first string according to the rules of the second string. For example,\
    \ if the first string is \"1/3\" and the second string is \"1/2\" then the function\
    \ should return True.\n\nThe check_fraction function should only take in two strings\
    \ and return a boolean.", "    // Your code here\n}\n</cell>\n<cell>", "    //\
    \ Your code goes here\n}\n</cell>\n<cell>\n# Run the code cell below to test your\
    \ solution\nassert simplify( \"1/5\", \"5/1\") == True, \"Expected simplify(\\\
    \"1/5\\\", \\\"5/1\\\") to return True\"\nassert simplify( \"1/6\", \"2/1\") ==\
    \ False, \"Expected simplify(\\\"1/6\\\", \\\"2/1\\\") to return False\"\nassert\
    \ simplify( \"7/10\", \"10/2\") == False, \"Expected simplify(\\\"7/10\\\", \\\
    \"10/2\\\") to return False\"\n</cell>\n<text>\nIn the following cells, you will\
    \ implement a function that calculates the greatest common divisor (GCD) of a\
    \ and b.\n\n\n</text>\n<cell>\n# UNQ_C1 (UNIQUE CELL IDENTIFIER, DO NOT EDIT)\n\
    # GRADED FUNCTION: greatest_common_divisor\ndef greatest_common_divisor(a, b):\n\
    \    \"\"\"\n    Finds the greatest common divisor of a and b.\n    \n    Parameters:\
    \ \n        a (str): numerator of a fraction, denominator of a fraction\n    \
    \    b (str): numerator of a fraction, denominator of a fraction\n    \n    Returns:\
    \ \n        int: GCD\n    \"\"\"\n    \n    # Initialize your variables here\n\
    \    \n    # Write your code here\n    \n    return gcd # return your result\n\
    </cell>\n<cell>\n# UNIT TEST\nassert greatest_common_divisor(\"1/2\", \"3/2\"\
    ) == 1, \"Expected greatest_common_divisor(\\\"1/2\\\", \\\"3/2\\\") to return\
    \ 1\"\nassert greatest_common_divisor(\"1/2\", \"1/2\") == 1, \"Expected greatest_common_divisor(\\\
    \"1/2\\\", \\\"1/2\\\") to return 1\"\nassert greatest_common_divisor(\"3\", \"\
    9\") == 1, \"Expected greatest_common_divisor(\\\"3\\\", \\\"9\\\") to return\
    \ 1\"\nassert greatest_common_divisor(\"9\", \"3\") == 1, \"Expected greatest_common_divisor(\\\
    \"9\\\", \\\"3\\\") to return 1\"\nassert greatest_common_divisor(\"3\", \"1\"\
    ) == 1, \"Expected greatest_common_divisor(\\\"3\\\", \\\"1\\\") to return 1\"\
    \nassert greatest_common_divisor(\"1\", \"3\") == 1, \"Expected greatest_common_divisor(\\\
    \"1\\\", \\\"3\\\") to return 1\"\nassert greatest_common_divisor(\"9\", \"9\"\
    ) == 1, \"Expected greatest_common_divisor(\\\"9\\\", \\\"9\\\") to return 1\"\
    \nassert greatest_common_divisor(\"10\", \"1\") == 10, \"Expected greatest_common_divisor(",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ convert a fraction to its decimal representation. For example,\nsimplify(\"\
    1/5\", \"5/1\") = \"0.(6)\"\nsimplify(\"1/6\", \"2/1\") = \"0.(6)\"\nsimplify(\"\
    7/10\", \"10/2\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/3\") = \"0.(14)\"\nsimplify(\"\
    7/10\", \"10/4\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/5\") = \"0.(14)\"\nsimplify(\"\
    7/10\", \"10/6\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/7\") = \"0.(14)\"\nsimplify(\"\
    7/10\", \"10/8\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/9\") = \"0.(14)\"\nsimplify(\"\
    7/10\", \"10/10\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/11\") = \"0.(14)\"\n\
    simplify(\"7/10\", \"10/12\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/13\") = \"\
    0.(14)\"\nsimplify(\"7/10\", \"10/14\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/15\"\
    ) = \"0.(14)\"\nsimplify(\"7/10\", \"10/16\") = \"0.(14)\"\nsimplify(\"7/10\"\
    , \"10/17\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/18\") = \"0.(14)\"\nsimplify(\"\
    7/10\", \"10/19\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/20\") = \"0.(14)\"\n\
    simplify(\"7/10\", \"10/21\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/22\") = \"\
    0.(14)\"\nsimplify(\"7/10\", \"10/23\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/24\"\
    ) = \"0.(14)\"\nsimplify(\"7/10\", \"10/25\") = \"0.(14)\"\nsimplify(\"7/10\"\
    , \"10/26\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/27\") = \"0.(14)\"\nsimplify(\"\
    7/10\", \"10/28\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/29\") = \"0.(14)\"\n\
    simplify(\"7/10\", \"10/30\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/31\") = \"\
    0.(14)\"\nsimplify(\"7/10\", \"10/32\") = \"0.(14)\"\nsimplify(\"7/10\", \"10/33\"\
    ) = \"0.(14)\"\nsimplify(\"7/10\", \"10/34\") = \"0.(", "  // Your code goes here\n\
    }\n", "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell to test your\
    \ solution\nassert simplify(\"1/5\", \"5/1\") == True, \"1/5 should be simplified\
    \ to True\"\nassert simplify(\"1/6\", \"2/1\") == False, \"1/6 should be simplified\
    \ to False\"\nassert simplify(\"7/10\", \"10/2\") == False, \"7/10 should be simplified\
    \ to False\"\n</cell>\n<text>\nThe function simplify should only simplify fractions\
    \ that evaluate to a whole number. For example, simplify(\"1/3\", \"3/2\") ==\
    \ True but simplify(\"1/3\", \"2/3\") == False.\n\n</text>\n<text>\nProblem 7:\
    \ Simplify fractions\nImplement a function that will simplify fractions using\
    \ the rules we developed in the last section.\n\nFor example, simplify(\"1/3\"\
    , \"3/2\") == True but simplify(\"1/3\", \"2/3\") == False.\n\n</text>\n<cell>\n\
    # Run this cell to test your solution\nassert simplify(\"1/3\", \"3/2\") == True,\
    \ \"1/3 should be simplified to True\"\nassert simplify(\"1/3\", \"2/3\") == False,\
    \ \"1/3 should be simplified to False\"\n</cell>\n<text>\nProblem 8: Simplify\
    \ fractions\nImplement a function that will simplify fractions using the rules\
    \ we developed in the last section.\n\nFor example, simplify(\"1/3\", \"3/2\"\
    ) == True but simplify(\"1/3\", \"2/3\") == False.\n\n</text>\n<cell>\n# Run this\
    \ cell to test your solution\nassert simplify(\"1/3\", \"3/2\") == True, \"1/3\
    \ should be simplified to True\"\nassert simplify(\"1/3\", \"2/3\") == False,\
    \ \"1/3 should be simplified to False\"\n</cell>\n<text>\nProblem 9: Simplify\
    \ fractions\nImplement a function that will simplify fractions using the rules\
    \ we developed in the last section.\n\nFor example, simplify(\"1/3\", \"3/2\"\
    ) == True but simplify(\"1/3\", \"2/3\") == False.\n\n</text>\n<cell>\n# Run this\
    \ cell to test your solution\nassert simplify(\"1/3\", \"3/2\") == True, \"1/3\
    \ should be simplified to True\"\nassert simplify(\"1/3\", \"2/3\") == False,\
    \ \"1/3 should be simplified to False\"\n</cell>\n<text>\nProblem 10: Simplify\
    \ fractions\nImplement a function that will simplify fractions using the rules\
    \ we developed in the last section.\n\nFor example, simplify(\"1/3\", \"3/2\"\
    ) == True but simplify(\"1/3\", \"2/3\") == False.\n\n</text>\n<cell>\n# Run this\
    \ cell to test your solution\nassert simplify(\"1/3\", \"3/2\") == True, \"1/3\
    \ should be simplified to True\"\nassert simplify(\"1/3\", \"2/3\") == False,\
    \ \"", "    // Your code here\n}\n</cell>\n<cell>", "    // Your code here\n}\n\
    </cell>\n<cell>", "    // Your code here\n}\n</cell>\n<text>\nTask 3\nWrite a\
    \ function that will evaluate a polynomial expression given in string form and\
    \ return its value as a float.\nThe function should accept two arguments - the\
    \ expression in string form and the variable that represents the constant term\
    \ in the expression.\nThe function should return None if the expression is invalid\
    \ or if the variable is not present in the expression.\nThe function should raise\
    \ a ValueError if the variable is not present in the expression or if the variable\
    \ is present more than once in the expression.\n\n\n</text>\n<cell>\n# Your code\
    \ here\n</cell>\n<text>\nTask 4\nWrite a function that will evaluate a polynomial\
    \ expression given in string form and return its value as a float.\nThe function\
    \ should accept two arguments - the expression in string form and the variable\
    \ that represents the constant term in the expression.\nThe function should return\
    \ None if the expression is invalid or if the variable is not present in the expression.\n\
    The function should raise a ValueError if the variable is not present in the expression\
    \ or if the variable is present more than once in the expression.\n\n\n</text>\n\
    <cell>\n# Your code here\n</cell>\n<text>\nTask 5\nWrite a function that will\
    \ evaluate a polynomial expression given in string form and return its value as\
    \ a float.\nThe function should accept two arguments - the expression in string\
    \ form and the variable that represents the constant term in the expression.\n\
    The function should return None if the expression is invalid or if the variable\
    \ is not present in the expression.\nThe function should raise a ValueError if\
    \ the variable is not present in the expression or if the variable is present\
    \ more than once in the expression.\n\n\n</text>\n<cell>\n# Your code here\n</cell>\n\
    <text>\nTask 6\nWrite a function that will evaluate a polynomial expression given\
    \ in string form and return its value as a float.\nThe function should accept\
    \ two arguments - the expression in string form and the variable that represents\
    \ the constant term in the expression.\nThe function should return None if the\
    \ expression is invalid or if the variable is not present in the expression.\n\
    The function should raise a ValueError if the variable is not present in the expression\
    \ or if the variable is present more than once in the expression.\n\n\n</text>\n\
    <cell>\n# Your code here\n</cell>\n<text>\nTask 7\nWrite a function that will\
    \ evaluate a polynomial expression given in string form and return its value as\
    \ a float.\nThe function should accept two arguments - the expression in string\
    \ form and the variable that represents the constant term in the expression.\n\
    The function should return None if the expression is invalid or if the variable\
    \ is not present in the expression.\nThe function should raise a ValueError if\
    \ the variable is not present in the expression or if the variable is present\
    \ more than once in the expression.\n\n\n</text>\n<cell>\n# Your code here\n</cell>\n\
    <text>\nTask 8\nWrite a function that will evaluate a polynomial expression given\
    \ in string ", "    \n}\n", "    // Your code here\n}\n</cell>\n<text>\nTask 2:\
    \ Implement a function that will evaluate a polynomial expression. Your function\
    \ should take two arguments: a string representing a polynomial expression, and\
    \ an integer representing a variable that should be replaced with its value.\n\
    \nThe function should return True if and only if the polynomial expression can\
    \ be evaluated using the given variable and False otherwise.\n\nThe function should\
    \ return False if the given variable is not part of the polynomial expression.\
    \ For example, simplify(\"x^2 + 5x + 6\", \"x\") should return False, but simplify(\"\
    x^2 + 5x + 6\", \"y\") should return True.\n\nThe function should return False\
    \ if the given variable is not part of the polynomial expression. For example,\
    \ simplify(\"x^2 + 5x + 6\", \"x\") should return False, but simplify(\"x^2 +\
    \ 5x + 6\", \"y\") should return True.\n\nYou can assume that x, and n are valid\
    \ fractions, and do not have zero as denominator.\n\nsimplify(\"x^2 + 5x + 6\"\
    , \"x\") = True\nsimplify(\"x^2 + 5x + 6\", \"y\") = False\nsimplify(\"x^2 + 5x\
    \ + 6\", \"z\") = False\nsimplify(\"x^2 + 5x + 6\", \"x\") = True\nsimplify(\"\
    x^2 + 5x + 6\", \"y\") = False\nsimplify(\"x^2 + 5x + 6\", \"z\") = False\nsimplify(\"\
    x^2 + 5x + 6\", \"x\") = True\nsimplify(\"x^2 + 5x + 6\", \"y\") = False\nsimplify(\"\
    x^2 + 5x + 6\", \"z\") = False\nsimplify(\"x^2 + 5x + 6\", \"x\") = True\nsimplify(\"\
    x^2 + 5x + 6\", \"y\") = False\nsimplify(\"x^2 + 5x + 6\", \"z\") = False\nsimplify(\"\
    x^2 + 5x + 6\", \"x\") = True\nsimplify(\"x^2 + 5x + 6\", \"y\") = False\nsimplify(\"\
    x^2 + 5x + 6\", \"z\") = False\nsimplify(\"x^2 + 5x + 6\", \"x\") = True\nsimplify(\"\
    x^2 + 5x + 6\", \"y\") = False\nsimplify(\"x^2 + 5x + 6\", \"z\") = False\nsimplify(\"\
    x^2 + 5x + 6\", \"x\") = True\nsimplify(\"x^2 + 5x + 6\", \"y\") = False\nsimplify(\"\
    x^2 + 5x + 6\", \"z\") = False\nsimplify(\"x^2 + 5x + 6\", \"x\") = True\nsimplify(\"\
    x^2 + 5x + 6\", \"y\") = False\nsimplify(\"x^2 + 5x + 6\", \"z\") = False\nsimplify(\"\
    x^2 + 5x + 6\", \"x\") = True\nsimplify(\"x^2 + 5x + 6\", \"y\") = False\nsimplify(\"\
    x^2 + 5x + 6\", \"z\")", "    \n}\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that will return the greatest common divisor of two positive integers. You can\
    \ assume that both integers are positive.\n\n\n</text>\n<cell>", "    \n}\n",
  "    // Your code goes here\n}\n", "    // Your code here\n}\n", "    \n}\n", " \
    \   // Your code here\n}\n</cell>\n<cell>", "    \n}\n</cell>\n<text>\nProblem\
    \ 3\nThe function below takes in two fractions as strings and returns True if\
    \ they can be simplified into each other. Otherwise, False is returned.\n\nThe\
    \ function should return True if both fractions can be simplified into each other,\
    \ and False otherwise.\n\nThe function should return False if either of the fractions\
    \ is zero or if both fractions are negative.\n\nsimplify(\"1/5\", \"5/1\") = True\n\
    simplify(\"1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"\
    1/0\", \"1/0\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"0/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/-1\") = False\nsimplify(\"-1/-1\", \"-1/-1\") = False\nsimplify(\"-1/-1\"\
    , \"-1/", "    // Your code goes here\n}\n</cell>\n<cell>\n# Run this cell to\
    \ check your answer\nsimplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(simplify(",
  "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nThe function below takes\
    \ in two strings as input and returns the product of those two strings. If the\
    \ two strings are equal, return an empty string. Otherwise, return the product\
    \ of those two strings.\n\n\n</text>\n<cell>", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will calculate the factorial of a number.\
    \ The function should take one parameter, x, and return the factorial of x.\n\n\
    The factorial of a number $n$ is defined as:\n\n$$n! = n \\times n-1 \\times n-2\
    \ \\times .... 1 \\times 0 $$\n\nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\n\n\
    You can assume that x is a valid positive integer.\n\nExample\nFor x = 5, the\
    \ function should return 120.\n\nFor x = 1, the function should return 1.\n\n\n\
    </text>\n<cell>", "    // Your code here\n}\n</cell>\n<cell>", "    // Your code\
    \ here\n}\n", "  // Your code goes here\n}\n", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will evaluate a mathematical expression\
    \ given as string and return the result as a float.\n\nThe function should support\
    \ the following:\n\nAddition (+)\nSubtraction (-)\nMultiplication (*)\nDivision\
    \ (/)\nExponentiation (**)\nModulo (%)\nFloor division (//)\nRemainder operator\
    \ (%)\nInteger division (//)\nFloor division (//)\nRemainder operator (%)\nInteger\
    \ division (//)\nFloor division (//)\nRemainder operator (%)\nInteger division\
    \ (//)\nFloor division (//)\nRemainder operator (%)\nInteger division (//)\nFloor\
    \ division (//)\nRemainder operator (%)\nInteger division (//)\nFloor division\
    \ (//)\nRemainder operator (%)\nInteger division (//)\nFloor division (//)\nRemainder\
    \ operator (%)\nInteger division (//)\nFloor division (//)\nRemainder operator\
    \ (%)\nInteger division (//)\nFloor division (//)\nRemainder operator (%)\nInteger\
    \ division (//)\nFloor division (//)\nRemainder operator (%)\nInteger division\
    \ (//)\nFloor division (//)\nRemainder operator (%)\nInteger division (//)\nFloor\
    \ division (//)\nRemainder operator (%)\nInteger division (//)\nFloor division\
    \ (//)\nRemainder operator (%)\nInteger division (//)\nFloor division (//)\nRemainder\
    \ operator (%)\nInteger division (//)\nFloor division (//)\nRemainder operator\
    \ (%)\nInteger division (//)\nFloor division (//)\nRemainder operator (%)\nInteger\
    \ division (//)\nFloor division (//)\nRemainder operator (%)\nInteger division\
    \ (//)\nFloor division (//)\nRemainder operator (%)\nInteger division (//)\nFloor\
    \ division (//)\nRemainder operator (%)\nInteger division (//)\nFloor division\
    \ (//)\nRemainder operator (%)\nInteger division (//)\nFloor division (//)\nRemainder\
    \ operator (%)\nInteger division (//)\nFloor division (//)\nRemainder operator\
    \ (%)\nInteger division", "    \n}\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that will take two fractions as arguments and return True if they are equal\
    \ and False otherwise.\nThe function should return False if either of the arguments\
    \ are None, or if both arguments are None.\n\n\n</text>\n<cell>", "    // Your\
    \ code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string\
    \ as input and returns a string with the first letter of each word capitalized.\
    \ For example, if the input string is \"Hello World\", the function should return\
    \ \"Hello World\".\n\n\n</text>\n<cell>", "    // Your code here\n}\n</cell>\n\
    <cell>", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that will calculate the number of ways to represent a given fraction in denominator\
    \ and numerator form. For example, the fractions 1/3, 1/4, and 1/5 can be represented\
    \ as the following ways:\n\n1/3\n1/4\n1/5\n\nThe function should return the number\
    \ of ways to represent a given fraction in denominator and numerator form. For\
    \ example, the function should return 3 if given fractions 1/3, 1/4, and 1/5 are\
    \ represented as the following ways:\n\n1/3\n1/4\n1/5\n\n</text>\n<cell>", " \
    \   // Your code here\n}\n</cell>\n<text>\nProblem 3\nWrite a function that will\
    \ take a string of any length and return the number of words in the string.\n\n\
    \n</text>\n<cell>", "  if(x === n || x === \"\" || n === \"\"){\n    return true;\n\
    \  }\n  if(n.indexOf(\"/\") === -1){\n    return false;\n  }\n  let [numer, denom]\
    \ = n.split(\"/\");\n  if(numer === \"\" || numer === null || numer === undefined){\n\
    \    return false;\n  }\n  if(denom === \"\" || denom === null || denom === undefined){\n\
    \    return false;\n  }\n  if(numer === \"0\" && denom === \"0\"){\n    return\
    \ false;\n  }\n  if(numer === \"0\" && denom !== \"0\"){\n    return false;\n\
    \  }\n  if(numer !== \"0\" && denom === \"0\"){\n    return false;\n  }\n  if(numer\
    \ === \"0\" && denom === \"0\"){\n    return false;\n  }\n  if(numer === \"0\"\
    \ && denom !== \"0\"){\n    return false;\n  }\n  if(numer === \"0\" && denom\
    \ === \"0\"){\n    return false;\n  }\n  if(numer === \"0\" && denom !== \"0\"\
    ){\n    return false;\n  }\n  if(numer === \"0\" && denom !== \"0\"){\n    return\
    \ false;\n  }\n  if(numer === \"0\" && denom !== \"0\"){\n    return false;\n\
    \  }\n  if(numer === \"0\" && denom !== \"0\"){\n    return false;\n  }\n  if(numer\
    \ === \"0\" && denom !== \"0\"){\n    return false;\n  }\n  if(numer === \"0\"\
    \ && denom !== \"0\"){\n    return false;\n  }\n  if(numer === \"0\" && denom\
    \ !== \"0\"){\n    return false;\n  }\n  if(numer === \"0\" && denom !== \"0\"\
    ){\n    return false;\n  }\n  if(numer === \"0\" && denom !== \"0\"){\n    return\
    \ false;\n  }\n  if(numer === \"0\" && denom !== \"0\"){\n    return false;\n\
    \  }\n  if(numer === \"0\" && denom !== \"0\"){\n    return false;\n  }\n  if(numer\
    \ === \"0\" && denom !== \"0\"){\n    return false;\n  }\n  if(numer === \"0\"\
    \ && denom !== \"0\"){\n    return false;\n  }\n  if(numer === \"0\" && denom\
    \ !== \"0\"){\n    return false;\n  }\n  if(numer === \"0\" && denom !== \"0\"\
    ){\n    return false;\n  }\n  if(numer === \"0\" && denom !== \"0\"){\n    return\
    \ false;\n  }\n  if(numer === \"0\" && denom !== \"0\"){\n    return false;\n\
    \  }\n  if(numer === \"0\" && denom !== \"0\"){\n    return false;\n  }\n  if(numer\
    \ === \"0\" && denom !== \"0\"){\n    return false;\n  }\n  if(", "    // Your\
    \ code here\n}\n</cell>\n<cell>", "    // Your code here\n}\n</cell>\n<text>\n\
    Task 4\nWrite a function that will take a number as input and return the number\
    \ of digits in that number.\n\n\n</text>\n<cell>", "  // Your code here\n}\n</cell>\n\
    <cell>", "    // Your code goes here\n}\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that will take a fraction as input and return the fraction with the denominator\
    \ equal to the specified integer. For example, fraction(\"1/5\", 2) should return\
    \ \"1/2\". fraction(\"1/5\", 0) should return \"1/5\".\n\n\n</text>\n<cell>",
  "    // Your code here\n}\n</cell>\n<cell>\n# Run the cell below to test your solution\n\
    assert simplify( \"1/5\", \"5/1\") == True, \"Expected simplify(\\\"1/5\\\", \\\
    \"5/1\\\") to return True\"\nassert simplify( \"1/6\", \"2/1\") == False, \"Expected\
    \ simplify(\\\"1/6\\\", \\\"2/1\\\") to return False\"\nassert simplify( \"7/10\"\
    , \"10/2\") == False, \"Expected simplify(\\\"7/10\\\", \\\"10/2\\\") to return\
    \ False\"\n</cell>\n<text>\nCongratulations! You've finished the challenge. Now,\
    \ you just need to put it together into a function that takes a fraction as input\
    \ and returns the simplified version. Make sure you test it on fractions that\
    \ have no denominator (such as \"1/3\" or \"2/7\").\n\n\n</text>\n<cell>\n# Complete\
    \ the simplify function\ndef simplify(x, n):\n    # Your code here\n    \n</cell>\n\
    <cell>\n# Run the cell below to test your solution\nassert simplify( \"1/5\",\
    \ \"5/1\") == True, \"Expected simplify(\\\"1/5\\\", \\\"5/1\\\") to return True\"\
    \nassert simplify( \"1/6\", \"2/1\") == False, \"Expected simplify(\\\"1/6\\\"\
    , \\\"2/1\\\") to return False\"\nassert simplify( \"7/10\", \"10/2\") == False,\
    \ \"Expected simplify(\\\"7/10\\\", \\\"10/2\\\") to return False\"\nassert simplify(\
    \ \"1/3\", \"3/4\") == False, \"Expected simplify(\\\"1/3\\\", \\\"3/4\\\") to\
    \ return False\"\nassert simplify( \"1/7\", \"1/7\") == True, \"Expected simplify(\\\
    \"1/7\\\", \\\"1/7\\\") to return True\"\n</cell>\n<text>\nChallenge Problem\n\
    The function you just wrote is missing one key ingredient: it must handle fractions\
    \ with no denominator. For example, \"1/3\" should be simplified to \"1/2\", not\
    \ \"0\".\n\nThe function should also handle fractions with denominators that are\
    \ not whole numbers. For example, \"1/7\" should be simplified to \"1/3\".\n\n\
    Here are some examples to test your function:\n\nsimplify(\"1/3\", \"3/4\") should\
    \ return True\nsimplify(\"1/7\", \"1/7\") should return True\nsimplify(\"1/10\"\
    , \"2/3\") should return False\nsimplify(\"1/7\", \"5/6\") should return False\n\
    simplify(\"1/3\", \"0/1\") should return False\nsimplify(\"1/3\", \"2/7\") should\
    \ return False\n\n\n</text>\n<cell>\n# Complete the simplify function\ndef simplify(x,\
    \ n):\n    # Your code here\n    ", "    // Your code here\n}\n</cell>\n<cell>",
  "    // Your code here\n}\n</cell>\n<cell>", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will take two fractions as input and\
    \ return the greatest common denominator.\n\n\n</text>\n<cell>", "    // Your\
    \ code here\n}\n</cell>\n<cell>\n# Run the code cell below to test your solution\n\
    x = \"1/5\"\nn = \"5/1\"\nsimplifiedSolution = simplify(x, n)\nprint(f\"Solution:\
    \ {simplifiedSolution}\")\n</cell>\n<text>\nCongratulations!\nYou've completed\
    \ your first fraction-simplifying program. In the next week of the course we will\
    \ look at ways to improve it.\n\n\n</text>\n<text>\nPart 2: Fraction Addition\n\
    Now that we have learned how to evaluate fractions, we will learn how to add fractions.\
    \ Complete the function frac2add() below to convert a fraction into a sum of two\
    \ fractions. Assume that you have already converted the numerator and denominator\
    \ of the fraction into a floating point number.\n\n\n</text>\n<cell>\n# Complete\
    \ the frac2add function\ndef frac2add(num1, denom1, num2, denom2):\n    \n   \
    \ # Your code here\n    \n    return fraction\n</cell>\n<text>\nRun the cell below\
    \ to check your implementation\n\n\n</text>\n<cell>\n# Check your frac2add function\n\
    num1 = float(input(\"Enter numerator of fraction 1:\"))\ndenom1 = float(input(\"\
    Enter denominator of fraction 1:\"))\nnum2 = float(input(\"Enter numerator of\
    \ fraction 2:\"))\ndenom2 = float(input(\"Enter denominator of fraction 2:\"))\n\
    fraction = frac2add(num1, denom1, num2, denom2)\nprint(f\"Fraction: {fraction}\"\
    )\n</cell>\n<text>\nYou should get the following output:\n\nEnter numerator of\
    \ fraction 1: 4\nEnter denominator of fraction 1: 2\nEnter numerator of fraction\
    \ 2: 5\nEnter denominator of fraction 2: 1\nFraction: 11/10\n\n</text>\n<text>\n\
    Part 3: Fraction Multiplication\nNow that we have learned how to evaluate fractions,\
    \ we will learn how to multiply fractions. Complete the function frac2mult below\
    \ to convert a fraction into a product of two fractions. Assume that you have\
    \ already converted the numerator and denominator of the fraction into a floating\
    \ point number.\n\n\n</text>\n<cell>\n# Complete the frac2mult function\ndef frac2mult(num1,\
    \ denom1, num2, denom2):\n    \n    # Your code here\n    \n    return fraction\n\
    </cell>\n<text>\nRun the cell below to check your implementation\n\n\n</text>\n\
    <cell>\n# Check your frac2mult function\nnum1 = float(input(\"Enter numerator\
    \ of fraction 1:\"))\ndenom1 = float(input(\"Enter denominator of fraction 1:\"\
    ))\nnum2 = float(input(\"Enter numerator of fra", "    // Your code goes here\n\
    }\n</cell>\n<cell>", "  // Your code goes here\n}\n", "    // Your code here\n\
    }\n</cell>\n<text>\nTask 4\nImplement a function that will simplify the expression\n\
    x + y. The function returns True if x + y evaluates to a whole number and False\n\
    otherwise. Both x and y, are string representation of a fraction, and have the\
    \ following format,\n<numerator>/<denominator> where both numerator and denominator\
    \ are positive whole numbers.\nYou can assume that x, and y are valid fractions,\
    \ and do not have zero as denominator.\nsimplify(\"1/5\", \"5/1\") = True\nsimplify(\"\
    1/6\", \"2/1\") = False\nsimplify(\"7/10\", \"10/2\") = False\nsimplify(\"1/3\"\
    , \"3/2\") = True\nsimplify(\"1/2\", \"2/1\") = True\nsimplify(\"1/1\", \"1/1\"\
    ) = True\nsimplify(\"1/1\", \"1/2\") = False\nsimplify(\"1/1\", \"1/3\") = False\n\
    simplify(\"1/1\", \"1/4\") = False\nsimplify(\"1/1\", \"1/5\") = False\nsimplify(\"\
    1/1\", \"1/6\") = False\nsimplify(\"1/1\", \"1/7\") = False\nsimplify(\"1/1\"\
    , \"1/8\") = False\nsimplify(\"1/1\", \"1/9\") = False\nsimplify(\"1/1\", \"1/10\"\
    ) = False\nsimplify(\"1/1\", \"1/11\") = False\nsimplify(\"1/1\", \"1/12\") =\
    \ False\nsimplify(\"1/1\", \"1/13\") = False\nsimplify(\"1/1\", \"1/14\") = False\n\
    simplify(\"1/1\", \"1/15\") = False\nsimplify(\"1/1\", \"1/16\") = False\nsimplify(\"\
    1/1\", \"1/17\") = False\nsimplify(\"1/1\", \"1/18\") = False\nsimplify(\"1/1\"\
    , \"1/19\") = False\nsimplify(\"1/1\", \"1/20\") = False\nsimplify(\"1/1\", \"\
    1/21\") = False\nsimplify(\"1/1\", \"1/22\") = False\nsimplify(\"1/1\", \"1/23\"\
    ) = False\nsimplify(\"1/1\", \"1/24\") = False\nsimplify(\"1/1\", \"1/25\") =\
    \ False\nsimplify(\"1/1\", \"1/26\") = False\nsimplify(\"1/1\", \"1/27\") = False\n\
    simplify(\"1/1\", \"1/28\") = False\nsimplify(\"1/1\", \"1/29\") = False\nsimplify(\"\
    1/1\", \"1/30\") = False\nsimplify(\"1/1\", \"1/31\") = False\nsimplify(\"1/1\"\
    , \"1/32\") = False\nsimplify(\"1/1\", \"1/33\") = False\nsimplify(\"1/1\", \"\
    1/34\") = False\nsimplify(\"1/1\", \"1/35\") = False\nsimplify(\"1/1\", \"1/36\"\
    ) = False\nsimplify(\"1/1\", \"1/37\") = False\nsimplify(\"1/1\", \"1/38\") =\
    \ False\nsimplify(\"1/1\", \"1/39\") = False\nsimplify(\"1/1\", \"1/40\") = False\n\
    simplify(\"1/1\", \"1/41\") = False\nsimplify(\"1/1\", \"1/42\") = False\nsimplify(\"\
    1/1\", \"1/43\") = False", "  if(x.includes(\"/\")){\n    let [numer, denom] =\
    \ x.split(\"/\");\n    if(numer.includes(\"0\") || numer.includes(\".\") || numer.includes(\"\
    -\")){\n      return false;\n    }\n    if(denom.includes(\"0\") || denom.includes(\"\
    .\") || denom.includes(\"-\")){\n      return false;\n    }\n    if(numer.includes(\"\
    .\") && denom.includes(\".\")){\n      return false;\n    }\n    if(numer.includes(\"\
    -\") && denom.includes(\"-\")){\n      return false;\n    }\n    if(numer.includes(\"\
    .\") || denom.includes(\".\")){\n      return true;\n    }\n    if(numer.includes(\"\
    -\") || denom.includes(\"-\")){\n      return false;\n    }\n    if(numer.includes(\"\
    0\") || denom.includes(\"0\")){\n      return false;\n    }\n    if(numer.includes(\"\
    -\") || denom.includes(\"-\")){\n      return true;\n    }\n    if(numer.includes(\"\
    .\") || denom.includes(\".\")){\n      return true;\n    }\n    if(numer.includes(\"\
    -\") || denom.includes(\"-\")){\n      return true;\n    }\n    if(numer.includes(\"\
    0\") || denom.includes(\"0\")){\n      return true;\n    }\n    if(numer.includes(\"\
    -\") || denom.includes(\"-\")){\n      return true;\n    }\n    if(numer.includes(\"\
    .\") || denom.includes(\".\")){\n      return true;\n    }\n    if(numer.includes(\"\
    -\") || denom.includes(\"-\")){\n      return true;\n    }\n    if(numer.includes(\"\
    0\") || denom.includes(\"0\")){\n      return true;\n    }\n    if(numer.includes(\"\
    -\") || denom.includes(\"-\")){\n      return true;\n    }\n    if(numer.includes(\"\
    .\") || denom.includes(\".\")){\n      return true;\n    }\n    if(numer.includes(\"\
    -\") || denom.includes(\"-\")){\n      return true;\n    }\n    if(numer.includes(\"\
    0\") || denom.includes(\"0\")){\n      return true;\n    }\n    if(numer.includes(\"\
    -\") || denom.includes(\"-\")){\n      return true;\n    }\n    if(numer.includes(\"\
    .\") || denom.includes(\".\")){\n      return true;\n    }\n    if(numer.includes(\"\
    -\") || denom.includes(\"-\")){\n      return true;\n    }\n    if(numer.includes(\"\
    0\") || denom.includes(\"0\")){\n      return true;\n    }\n    if(numer.includes(\"\
    -\") || denom.includes(\"-\")){\n      return true;\n", "    let splitX = x.split(\"\
    /\");\n    let splitN = n.split(\"/\");\n    let splitXN = splitX[0].split(\"\
    /\");\n    let splitXN2 = splitXN[1].split(\"/\");\n    let splitXN3 = splitXN[2].split(\"\
    /\");\n    let splitXN4 = splitXN[3].split(\"/\");\n    let splitXN5 = splitXN[4].split(\"\
    /\");\n    let splitXN6 = splitXN[5].split(\"/\");\n    let splitXN7 = splitXN[6].split(\"\
    /\");\n    let splitXN8 = splitXN[7].split(\"/\");\n    let splitXN9 = splitXN[8].split(\"\
    /\");\n    let splitXN10 = splitXN[9].split(\"/\");\n    let splitXN11 = splitXN[10].split(\"\
    /\");\n    let splitXN12 = splitXN[11].split(\"/\");\n    let splitXN13 = splitXN[12].split(\"\
    /\");\n    let splitXN14 = splitXN[13].split(\"/\");\n    let splitXN15 = splitXN[14].split(\"\
    /\");\n    let splitXN16 = splitXN[15].split(\"/\");\n    let splitXN17 = splitXN[16].split(\"\
    /\");\n    let splitXN18 = splitXN[17].split(\"/\");\n    let splitXN19 = splitXN[18].split(\"\
    /\");\n    let splitXN20 = splitXN[19].split(\"/\");\n    let splitXN21 = splitXN[20].split(\"\
    /\");\n    let splitXN22 = splitXN[21].split(\"/\");\n    let splitXN23 = splitXN[22].split(\"\
    /\");\n    let splitXN24 = splitXN[23].split(\"/\");\n    let splitXN25 = splitXN[24].split(\"\
    /\");\n    let splitXN26 = splitXN[25].split(\"/\");\n    let splitXN27 = splitXN[26].split(\"\
    /\");\n    let splitXN28 = splitXN[27].split(\"/\");\n    let splitXN29 = splitXN[28].split(\"\
    /\");\n    let splitXN30 = splitXN[29].split(\"/\");\n    let splitXN31 = splitXN[30].split(\"\
    /\");\n    let splitXN32 = splitXN[31].split(\"/\");\n    let splitXN33 = splitXN[32].split(\"\
    /\");\n", "    \n}\n", "    // Your code here\n}\n</cell>\n<text>\nProblem 4\n\
    Write a function that will take two fractions as input and return the greatest\
    \ common denominator.\n\n\n</text>\n<cell>", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will take a string representing a fraction\
    \ and return the numerator and denominator of that fraction.\nThe function should\
    \ return None if the string does not represent a fraction.\nThe function should\
    \ raise a ValueError if the string does not represent a fraction.\n\n\n</text>\n\
    <cell>", "    let splitX = x.split(\"/\");\n    let splitN = n.split(\"/\");\n\
    \    if(splitX.length != splitN.length){\n        return false;\n    }\n    for(let\
    \ i = 0; i < splitX.length; i++){\n        if(splitX[i] != splitN[i]){\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n", "  // Your code\
    \ here\n}\n</cell>\n<cell>", "  // Your code goes here\n}\n", "  // Your code\
    \ here\n}\n", "    // Your code here\n}\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that will take a fraction as input and return the fraction simplified to a whole\
    \ number. For example, simplify(\"1/5\", \"5/1\") = 1 and simplify(\"1/6\", \"\
    2/1\") = 2. Assume that x, and n are valid fractions, and do not have zero as\
    \ denominator.\n\n\n</text>\n<cell>", "  // Your code here\n}\n</cell>\n<text>\n\
    Problem 4\nImplement a function that will calculate the factorial of a number.\
    \ The function should take one parameter, x, and return the factorial of x.\n\n\
    The factorial of a number $n$ is defined as:\n\n$$n! = n \\times n-1 \\times n-2\
    \ \\times .... 1 \\times 0$$\n\nFor example, the factorial of $5$ is $5! = 5 \\\
    times 4 \\times 3 \\times 2 \\times 1 = 120$. Note that the factorial of a number\
    \ other than 0 is 1.\n\nYou can assume that x is a valid integer.\n\n\n</text>\n\
    <cell>", "    \n}\n", "    // Your code here\n}\n</cell>\n<cell>\n# Run this cell\
    \ to test your solution\nassert simplify(\"1/5\", \"5/1\") == True, \"1/5 should\
    \ be simplified to True\"\nassert simplify(\"1/6\", \"2/1\") == False, \"1/6 should\
    \ be simplified to False\"\nassert simplify(\"7/10\", \"10/2\") == False, \"7/10\
    \ should be simplified to False\"\n</cell>\n<text>\nThe function simplify has\
    \ passed all the tests. You should be able to implement a function that evaluates\
    \ whether the given fraction is simplified or not.\n\n\n</text>\n<cell>\n# Run\
    \ this cell to check your function\ndef isSimplified(x, n):\n    # Your code here\n\
    \    \n</cell>\n<cell>\n# Run this cell to test your function\nassert isSimplified(\"\
    1/5\", \"5/1\") == True, \"1/5 should be simplified to True\"\nassert isSimplified(\"\
    1/6\", \"2/1\") == False, \"1/6 should be simplified to False\"\nassert isSimplified(\"\
    7/10\", \"10/2\") == False, \"7/10 should be simplified to False\"\n</cell>\n\
    <text>\nTask 3: Simplify fractions\nImplement a function that will simplify fractions.\
    \ Given two strings representing a fraction, simplify the fraction by dividing\
    \ numerator and denominator by their GCD. If GCD is 1, then simplify the fraction.\
    \ Otherwise, return the fraction as it is. You can assume that both numerator\
    \ and denominator are valid fractions.\n\nExample\nsimplify(\"1/5\", \"5/1\")\
    \ = \"1/5\"\nsimplify(\"1/6\", \"2/1\") = \"1/3\"\nsimplify(\"7/10\", \"10/2\"\
    ) = \"7/2\"\nsimplify(\"1/3\", \"2/3\") = \"1/3\"\nsimplify(\"1/4\", \"3/4\")\
    \ = \"1/4\"\nsimplify(\"1/5\", \"2/5\") = \"1/5\"\nsimplify(\"1/6\", \"3/6\")\
    \ = \"1/6\"\nsimplify(\"1/7\", \"4/7\") = \"1/7\"\nsimplify(\"1/8\", \"5/8\")\
    \ = \"1/8\"\nsimplify(\"1/9\", \"6/9\") = \"1/9\"\nsimplify(\"1/10\", \"7/10\"\
    ) = \"1/10\"\nsimplify(\"1/11\", \"8/11\") = \"1/11\"\nsimplify(\"1/12\", \"9/12\"\
    ) = \"1/12\"\nsimplify(\"1/13\", \"10/13\") = \"1/13\"\nsimplify(\"1/14\", \"\
    11/14\") = \"1/14\"\nsimplify(\"1/15\", \"12/15\") = \"1/15\"\nsimplify(\"1/16\"\
    , \"13/16\") = \"1/16\"\nsimplify(\"1/", "    // Your code here\n}\n</cell>\n\
    <cell>", "    // Your code here\n}\n", "    // Your code here\n}\n", "    // Your\
    \ code here\n}\n</cell>\n<cell>", "    // Your code goes here\n}\n</cell>\n<cell>\n\
    # Run the code cell below to test your solution\nassert(simplify(\"1/5\", \"5/1\"\
    ) == True)\nassert(simplify(\"1/6\", \"2/1\") == False)\nassert(simplify(\"7/10\"\
    , \"10/2\") == False)\n</cell>\n<text>\nThe function simplify checks if a fraction\
    \ can be simplified into a whole number. If it can, then it returns True, otherwise\
    \ it returns False.\n\n\n</text>\n<text>\nQuestion 8\nWrite a function that takes\
    \ a fraction represented as a string and returns the simplified fraction.\n\n\n\
    </text>\n<cell>\n# Modify the function below so that it takes a fraction represented\
    \ as a string and returns the simplified fraction.\n# Make sure it simplifies\
    \ the fraction before returning it\ndef simplify(x):\n    # Your code goes here\n\
    \    \n# Test the function below\nassert(simplify(\"1/5\") == 1/5)\nassert(simplify(\"\
    1/6\") == 1/6)\nassert(simplify(\"7/10\") == 7/10)\n</cell>\n<text>\nThe function\
    \ simplify takes a fraction represented as a string and returns the simplified\
    \ fraction.\n\n\n</text>\n<text>\nQuestion 9\nWrite a function that takes a fraction\
    \ represented as a string and returns the simplified fraction when simplification\
    \ is possible.\n\n\n</text>\n<cell>\n# Modify the function below so that it takes\
    \ a fraction represented as a string and returns the simplified fraction when\
    \ simplification is possible.\n# Make sure it simplifies the fraction before returning\
    \ it\ndef simplify(x):\n    # Your code goes here\n    \n# Test the function below\n\
    assert(simplify(\"1/5\") == 1/5)\nassert(simplify(\"1/6\") == 1/6)\nassert(simplify(\"\
    7/10\") == 7/10)\nassert(simplify(\"1/4\") == 1/4)\n</cell>\n<text>\nThe function\
    \ simplify takes a fraction represented as a string and returns the simplified\
    \ fraction when simplification is possible.\n\n\n</text>\n<text>\nQuestion 10\n\
    Write a function that takes a fraction represented as a string and returns the\
    \ simplified fraction when simplification is not possible.\n\n\n</text>\n<cell>\n\
    # Modify the function below so that it takes a fraction represented as a string\
    \ and returns the simplified fraction when simplification is not possible.\n#\
    \ Make sure it simplifies the fraction before returning it\ndef simplify(x):\n\
    \    # Your code goes here\n    \n# Test the function below\nassert(simplify(\"\
    1/5\") == 1/5)\nassert(simplify(\"1/6\") == 1/6)\nassert(simplify(\"7/10\") ==\
    \ 7/10)\nassert(simplify(\"1/4\") == 1/4)\nassert(simplify(\"", "    // Your code\
    \ here\n}\n</cell>\n<text>\nProblem 7\nWrite a function that will return the greatest\
    \ common divisor of two positive integers. You can assume that both integers are\
    \ positive whole numbers. You can assume that both integers have at least one\
    \ digit.\n", "    let nums = x.split(\"/\");\n    let dens = n.split(\"/\");\n\
    \    let numsLength = nums.length;\n    let densLength = dens.length;\n    \n\
    \    if(numsLength != densLength){\n        return false;\n    }\n    \n    for(let\
    \ i = 0; i < numsLength; i++){\n        if(nums[i] === \"0\" && dens[i] === \"\
    0\"){\n            return false;\n        }\n    }\n    \n    let result = 0;\n\
    \    for(let i = 0; i < numsLength; i++){\n        result += (parseInt(nums[i])\
    \ * parseInt(dens[i]));\n    }\n    \n    if(result === 0){\n        return true;\n\
    \    }\n    \n    return false;\n}\n", "  // Your code goes here\n}\n</cell>\n\
    <text>\nProblem 3\nWrite a function that will take two fractions as input and\
    \ return the greatest common divisor of them. Both fractions are represented as\
    \ strings, with <numerator>/<denominator> format. Your function should return\
    \ an integer representing the greatest common divisor of both fractions.\n", " \
    \   // Your code here\n}\n</cell>\n<cell>\n# Run this cell to test your solution\n\
    assert simplify(\"1/5\", \"5/1\") == True, \"1/5 should be simplified to True\"\
    \nassert simplify(\"1/6\", \"2/1\") == False, \"1/6 should be simplified to False\"\
    \nassert simplify(\"7/10\", \"10/2\") == False, \"7/10 should be simplified to\
    \ False\"\n</cell>\n<text>\n4.4 Simplify the expression\nThe function simplify()\
    \ should simplify the fraction expressed in string x, to fraction expressed in\
    \ string n.\nThe function simplify() should return True if x can be simplified\
    \ to n, and False otherwise.\nThe function simplify() should only simplify fractions\
    \ that have denominators that are whole numbers. \nThe function simplify() should\
    \ only simplify fractions that have numerators that are whole numbers. \nIf the\
    \ fraction is already simplified, then it should return False.\nIf the fraction\
    \ is not simplifiable, return False.\n\nExample 1:\nInput: x = \"1/5\", n = \"\
    5/1\"\nOutput: True\nExplanation: Fractions can be simplified to whole numbers.\
    \ 1/5 is simplified to 1, and 5/1 is simplified to 1.\n\nExample 2:\nInput: x\
    \ = \"1/6\", n = \"2/1\"\nOutput: False\nExplanation: Fractions cannot be simplified\
    \ to whole numbers. 1/6 is not simplifiable to 2/1, and 6/1 is not simplifiable\
    \ to 2/1.\n\nExample 3:\nInput: x = \"7/10\", n = \"10/2\"\nOutput: False\nExplanation:\
    \ Fractions cannot be simplified to whole numbers. 7/10 is not simplifiable to\
    \ 10/2, and 10/2 is not simplifiable to 10/2.\n\nExample 4:\nInput: x = \"1/3\"\
    , n = \"1/2\"\nOutput: True\nExplanation: Fractions can be simplified to whole\
    \ numbers. 1/3 is simplified to 1, and 1/2 is simplified to 1.\n\nExample 5:\n\
    Input: x = \"1/4\", n = \"1/2\"\nOutput: True\nExplanation: Fractions can be simplified\
    \ to whole numbers. 1/4 is simplified to 1, and 1/2 is simplified to 1.\n\nExample\
    \ 6:\nInput: x = \"1/5\", n = \"1/6\"\nOutput: True\nExplanation: Fractions can\
    \ be simplified to whole numbers. 1/5 is simplified to 1, and 1/6 is simplified\
    \ to 1.\n\nExample 7:\nInput: x = \"1/5\", n = \"1/7\"\nOutput: False\nExplanation:\
    \ Fractions cannot be simplified to whole numbers. 1/5 is not simplifiable to\
    \ 1/7, and 1/7 is not ", "    // Your code here\n}\n</cell>\n<text>\nProblem 3\n\
    Write a function that will take two fractions as input and return the greatest\
    \ common divisor of them. Both fractions are represented as strings with numerator\
    \ and denominator separated by \"/\". For example, \"1/3\" represents one third\
    \ and \"1/5\" represents one half (1/5 is represented as \"1/5\").\n\n\n</text>\n\
    <cell>", "  // Your code goes here\n}\n</cell>\n<text>\nProblem 3\nThe function\
    \ below will take in a string representing a fraction and return True if it is\
    \ simplified and False otherwise. For example, simplify(\"1/5\", \"5/1\") is True,\
    \ and simplify(\"1/6\", \"2/1\") is False.\n\n\n</text>\n<cell>", "    // Your\
    \ code here\n}\n", "    // Your code here\n}\n</cell>\n<text>\nTask 3: Implement\
    \ a function that will evaluate an expression using eval().\nThe function should\
    \ take two arguments: a string expression and a boolean flag indicating whether\
    \ to evaluate in strict or non-strict mode.\nThe function should return an integer\
    \ representing the result of the expression.\nThe function should evaluate expressions\
    \ using the following rules:\n\nIf the expression contains only numbers, return\
    \ its integer value.\nIf the expression contains only letters, return -1.\nIf\
    \ the expression contains only operators, return 0.\nIf the expression contains\
    \ only parentheses, return 0.\nIf the expression contains only square brackets,\
    \ return 0.\nIf the expression contains only curly brackets, return 0.\nIf the\
    \ expression contains only white spaces, return 0.\nIf the expression contains\
    \ only operators and parentheses, evaluate it in strict mode.\nIf the expression\
    \ contains only operators and curly brackets, evaluate it in non-strict mode.\n\
    If the expression contains only operators and square brackets, evaluate it in\
    \ strict mode.\nIf the expression contains only operators and curly brackets,\
    \ evaluate it in non-strict mode.\nIf the expression contains only operators and\
    \ square brackets, evaluate it in strict mode.\nIf the expression contains only\
    \ operators and parentheses, evaluate it in strict mode.\nIf the expression contains\
    \ only operators and parentheses, evaluate it in non-strict mode.\nIf the expression\
    \ contains only operators and curly brackets, evaluate it in strict mode.\nIf\
    \ the expression contains only operators and curly brackets, evaluate it in non-strict\
    \ mode.\nIf the expression contains only operators and square brackets, evaluate\
    \ it in strict mode.\nIf the expression contains only operators and square brackets,\
    \ evaluate it in non-strict mode.\nIf the expression contains only operators and\
    \ parentheses, evaluate it in strict mode.\nIf the expression contains only operators\
    \ and parentheses, evaluate it in non-strict mode.\nIf the expression contains\
    \ only operators and curly brackets, evaluate it in strict mode.\nIf the expression\
    \ contains only operators and curly brackets, evaluate it in non-strict mode.\n\
    If the expression contains only operators and square brackets, evaluate it in\
    \ strict mode.\nIf the expression contains only operators and square brackets,\
    \ evaluate it in non-strict mode.\nIf the expression contains only operators and\
    \ parentheses, evaluate it in strict mode.\nIf the expression contains only operators\
    \ and parentheses, evaluate it in non-strict mode.\nIf the expression contains\
    \ only operators and curly brackets, evaluate it in strict mode.\nIf the expression\
    \ contains only operators and curly brackets, evaluate it in non-strict mode.\n\
    If the expression contains only operators and square brackets, evaluate it in\
    \ strict mode.\nIf the expression contains only operators and square brackets,\
    \ evaluate it in non-strict mode.\nIf the expression contains only operators and\
    \ parentheses, evaluate it in strict mode.\nIf the expression contains only operators\
    \ and parentheses, evaluate it in non-strict mode.\nIf the expression contains\
    \ only operators and curly brackets, evaluate it in ", "    // Your code here\n\
    }\n</cell>\n<text>\nProblem 7\nWrite a function that will evaluate a mathematical\
    \ expression given in string form and return its value.\n\nThe function should\
    \ take two arguments: a string expression and a variable name as string. The function\
    \ should return an integer representing the value of the expression. The function\
    \ should raise an exception if the expression cannot be evaluated or if the variable\
    \ name is not found in the local scope.\n\nYou can assume that the expression\
    \ is valid and does not contain any errors.\n\n\n</text>\n<cell>", "  // Your\
    \ code goes here\n}\n", "    // Your code here\n}\n</cell>\n<text>\nProblem 7\n\
    Write a function that will take two fractions as arguments and return True if\
    \ they represent the same fraction, False otherwise.\n\n\n</text>\n<cell>", " \
    \   // Your code here\n}\n</cell>\n<cell>", "    // Your code here\n}\n</cell>\n\
    <text>\nProblem 3\nThe function below takes in two fractions as strings and returns\
    \ the fraction with the smallest denominator.\n\nThe function should return False\
    \ if the fractions are equal, True if they are not. \nThe function should return\
    \ False if the fractions are equal, True if they are not. \nThe function should\
    \ return False if the fractions are equal, True if they are not. \nThe function\
    \ should return False if the fractions are equal, True if they are not. \nThe\
    \ function should return False if the fractions are equal, True if they are not.\
    \ \nThe function should return False if the fractions are equal, True if they\
    \ are not. \nThe function should return False if the fractions are equal, True\
    \ if they are not. \nThe function should return False if the fractions are equal,\
    \ True if they are not. \nThe function should return False if the fractions are\
    \ equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not. \nThe function should return False if the fractions\
    \ are equal, True if they are not", "    \n}\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes a string representing a fraction and returns the fraction\
    \ represented as a float.\nThe function should raise an error if the string does\
    \ not represent a fraction.\n\n\n</text>\n<cell>", "    // Your code here\n}\n\
    </cell>\n<text>\nProblem 4\nWrite a function that will calculate the number of\
    \ ways to represent a given fraction in base 10. For example, given fraction \"\
    1/3\" return 3.\n\nThe function should take two parameters: a string representing\
    \ the fraction, and an integer representing the base of the numerator and denominator\
    \ of the fraction.\n\nThe function should return an integer representing the number\
    \ of ways to represent the fraction in base 10.\n\n\n</text>\n<cell>", "  // Your\
    \ code goes here\n}\n", "    // Your code goes here\n}\n", "    // Your code here\n\
    }\n", "  // Your code here\n}\n", "  // Your code here\n}\n</cell>\n<text>\nProblem\
    \ 3\nThe function below takes a string representation of a fraction and returns\
    \ the fraction represented as a string. For example, simplify(\"1/5\", \"5/1\"\
    ) returns \"1/2\".\n\n\n</text>\n<cell>", "    // Your code here\n}\n", "    //\
    \ Your code here\n}\n</cell>\n<cell>\n# Run this cell to test your code\nx = \"\
    1/5\"\nn = \"5/1\"\nsimplifiedOutput = simplify(x, n)\nprint(f\"The simplified\
    \ expression is {simplifiedOutput}\")\n</cell>\n<text>\nProblem 3\nThe function\
    \ below takes in a string representing a fraction and returns the fraction represented\
    \ by the string.\nThe fraction string can have one or more of the following formats:\n\
    \n<numerator>/<denominator>\n<numerator>/<denominator>/<remainder>\n<numerator>/<remainder>\n\
    \nThe function should return False if the string does not represent a fraction,\
    \ and True if it does.\n\n\n</text>\n<cell>\n# Run this cell to test your code\n\
    fractionString = \"1/5\"\nsimplifiedOutput = simplify(fractionString)\nprint(f\"\
    The simplified expression is {simplifiedOutput}\")\n</cell>\n<text>\nProblem 4\n\
    The function below takes in a string representing a fraction and returns the fraction\
    \ represented by the string.\nThe fraction string can have one or more of the\
    \ following formats:\n\n<numerator>/<denominator>\n<numerator>/<denominator>/<remainder>\n\
    <numerator>/<remainder>\n\nThe function should return False if the string does\
    \ not represent a fraction, and True if it does.\n\n\n</text>\n<cell>\n# Run this\
    \ cell to test your code\nfractionString = \"1/5\"\nsimplifiedOutput = simplify(fractionString)\n\
    print(f\"The simplified expression is {simplifiedOutput}\")\n</cell>\n<text>\n\
    Problem 5\nThe function below takes in a string representing a fraction and returns\
    \ the fraction represented by the string.\nThe fraction string can have one or\
    \ more of the following formats:\n\n<numerator>/<denominator>\n<numerator>/<denominator>/<remainder>\n\
    <numerator>/<remainder>\n\nThe function should return False if the string does\
    \ not represent a fraction, and True if it does.\n\n\n</text>\n<cell>\n# Run this\
    \ cell to test your code\nfractionString = \"1/5\"\nsimplifiedOutput = simplify(fractionString)\n\
    print(f\"The simplified expression is {simplifiedOutput}\")\n</cell>\n<text>\n\
    Problem 6\nThe function below takes in a string representing a fraction and returns\
    \ the fraction represented by the string.\nThe fraction string can have one or\
    \ more of the following formats:\n\n<numerator>/<denominator>\n<numerator>/<denominator>/<remainder>\n\
    <numerator>/<remainder>\n\nThe function should return False if the string does\
    \ not represent a fraction, and True if it does."]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
