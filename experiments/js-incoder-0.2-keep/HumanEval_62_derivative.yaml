name: HumanEval_62_derivative
language: js
prompt: "//xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>>\
  \ derivative([3, 1, 2, 4, 5])\n// [1, 4, 12, 20]\n// >>> derivative([1, 2, 3])\n\
  // [2, 6]\nfunction derivative(xs){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = derivative;\n  assert.deepEqual(candidate([3, 1, 2, 4, 5]),[1, 4, 12, 20]);\n\
  \  assert.deepEqual(candidate([1, 2, 3]),[2, 6]);\n  assert.deepEqual(candidate([3,\
  \ 2, 1]),[2, 2]);\n  assert.deepEqual(candidate([3, 2, 1, 0, 4]),[2, 2, 0, 16]);\n\
  \  assert.deepEqual(candidate([1]),[]);\n}\n\ntest();"
completions: ["    var n = xs.length;\n    var f = new Array(n);\n    for(var i=0;\
    \ i<n; i++){\n        f[i] = xs[i+1];\n    }\n    return f;\n}\n", "    var n\
    \ = xs.length;\n    var dxs = [];\n    for(var i = 0; i< n; i++){\n        dxs.push(xs[i+1]\
    \ - xs[i]);\n    }\n    return dxs;\n}\n", "  var n = xs.length,\n      out =\
    \ new Array(n),\n      m = xs[0].length,\n      f = [];\n  for(var i = 0; i !=\
    \ n; i++){\n    f[i] = new Array(m);\n    for(var j = 0; j != m; j++){\n     \
    \ f[i][j] = xs[i][j]; // evaluate polynomial\n    }\n  }\n  for(var i = 0; i !=\
    \ n; i++){\n    for(var j = 0; j != m; j++){\n      out[i][j] = (f[i][j+1] - f[i][j])\
    \ / (xs[i+1][j+1] - xs[i][j+1]);\n    }\n  }\n  return out;\n}\n", "  var n =\
    \ xs.length,\n      out = new Array(n),\n      m, i;\n  for(i = 0; i < n; i++){\n\
    \    m = (i+1)*(i+2);\n    out[i] = xs[i] + (xs[i+1] * xs[i]) + (xs[i+2] * xs[i]\
    \ * xs[i]);\n  }\n  return out;\n}\n", "    var n = xs.length;\n    var arr =\
    \ [];\n    for(var i=0; i<n; i++){\n        arr.push(xs[i+1] - xs[i]);\n    }\n\
    \    return arr;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i\
    \ = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n \
    \ }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow = 1;\n \
    \ for(var i = 1; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *=\
    \ xs[i];\n  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow\
    \ = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow = 1;\n\
    \  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i] = xs[i + 1];\n  }\n\n\
    \  for (i = n - 2; i >= 0; --i) {\n    m = n - i - 1;\n    out[i] = ((xs[m] *\
    \ xs[i]) - (xs[m + 1] * xs[m])) / xs[m];\n  }\n\n  return out;\n}\n", "    var\
    \ n = xs.length,\n        ds = [];\n    for(var i=0; i< n; i++){\n        ds[i]\
    \ = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n", "  var derivatives = [];\n\
    \  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n  \
    \  derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    for(var i=0; i< n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n  \n  for(i=0; i<n; i++){\n    m = 0;\n    while(xs[i] !== 0) m++;\n\
    \    out[i] = m;\n  }\n  \n  return out;\n}\n", "  var n = xs.length,\n      out\
    \ = new Array(n),\n      m, i;\n\n  for (i=n; i--; ) out[i] = xs[i+1] * xs[i];\n\
    \n  for (i=n; m=xs[i]; i--) out[i] = m / out[i];\n\n  return out;\n}\n", "  var\
    \ n = xs.length,\n      out = new Array(n),\n      m, i;\n  \n  for(i=0; i<n;\
    \ i++){\n    xs[i] -= xs[i-1];\n    if(xs[i] < 0) xs[i] += 1;\n  }\n  \n  for(i=1;\
    \ i<n; i++){\n    m = n - i;\n    out[i] = xs[m] * xs[i];\n  }\n  \n  return out;\n\
    }\n", "  var derivatives = [];\n  var x = 0;\n  var j;\n  for(var i = 0; i < xs.length;\
    \ i++){\n    derivatives.push(0);\n  }\n  for(j = 1; j < xs.length; j++){\n  \
    \  x = xs[j];\n    for(var i = 0; i < xs.length; i++){\n      derivatives[i] +=\
    \ xs[i] * x;\n    }\n  }\n  return derivatives;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i]\
    \ = xs[i] - ((i === 0) ? 0 : xs[i - 1] * xs[i]);\n  }\n\n  for (i = 1; i < n;\
    \ ++i) {\n    m = xs[i - 1];\n    out[i] = m + ((i > 0) ? out[i - 1] : 0);\n \
    \ }\n\n  return out;\n}\n", "    var n = xs.length,\n        ds = [];\n    while(n--){\n\
    \        ds[n] = xs[n+1] - xs[n];\n    }\n    return ds;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    for(var i=0; i< n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var x = 0;\n  for\
    \ (var i = 0; i < xs.length; i++){\n    x += xs[i];\n    derivatives.push(x);\n\
    \  }\n  return derivatives;\n}\n", "    var n = xs.length;\n    var deriv = [];\n\
    \    for(var i = 0; i < n; i++){\n        deriv[i] = xs[i+1];\n    }\n    return\
    \ deriv;\n}\n", "    var n = xs.length;\n    var dxs = [];\n    for(var i = 0;\
    \ i !== n; i++){\n        dxs[i] = xs[i+1];\n    }\n    return dxs;\n}\n", " \
    \ var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n\
    \    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n}\n",
  "  var n = xs.length,\n      out = new Array(n),\n      m = xs[0].length,\n    \
    \  f = [];\n  for(var i=0; i<n; i++){\n    f[i] = new Array(m);\n    for(var j=0;\
    \ j<m; j++){\n      f[i][j] = xs[i][j]; // fill the derivative matrix\n    }\n\
    \  }\n  for(var i=0; i<n; i++){\n    for(var j=0; j<m; j++){\n      out[i][j]\
    \ = f[i][j+1];\n    }\n  }\n  return out;\n}\n", "    var n = xs.length,\n   \
    \     ds = [];\n    for(var i=0; i< n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "    var n = xs.length,\n        dxs = new Array(n),\n\
    \        x = 1,\n        i;\n    for(i = 0; i < n; i++){\n        dxs[i] = xs[i]\
    \ - x;\n        x *= xs[i];\n    }\n    return dxs;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m = xs[0].length,\n      f = [];\n  for(var\
    \ i=0; i<n; i++){\n    f[i] = new Array(m);\n    for(var j=0; j<m; j++){\n   \
    \   f[i][j] = xs[i][j]; // evaluate polynomial\n    }\n  }\n  for(var i=0; i<n;\
    \ i++){\n    out[i] = [];\n    for(var j=0; j<m; j++){\n      out[i][j] = f[i][j+1]\
    \ - f[i][j]; // differentiate polynomial\n    }\n  }\n  return out;\n}\n", " \
    \   var n = xs.length;\n    var dxs = [];\n    for(var i = 1; i < n; i++){\n \
    \       dxs.push(xs[i] - xs[i-1]);\n    }\n    return dxs;\n}\n", "  var derivatives\
    \ = [];\n  var pows = [];\n  for(var x = 0; x < xs.length; x++){\n    pows[x]\
    \ = 1;\n    for(var i = 1; i < xs.length; i++){\n      pows[x] *= xs[i];\n   \
    \ }\n    derivatives[x] = pows[x];\n  }\n  return derivatives;\n}\n", "    var\
    \ n = xs.length;\n    var f = new Array(n);\n    var i;\n    for(i = 0; i < n;\
    \ i++){\n        f[i] = xs[i+1];\n    }\n    f[n-1] = 1;\n    for(i = n-2; i >=\
    \ 0; i--){\n        f[i] = (f[i+1] * xs[i+1] + f[i]) * xs[i];\n    }\n    return\
    \ f;\n}\n", "    var n = xs.length,\n        ds = [];\n    while(n--){\n     \
    \   ds[n] = xs[n+1] - xs[n];\n    }\n    return ds;\n}\n", "  var n = xs.length;\n\
    \  var dxs = [];\n  for(var i=0; i<n; i++){\n    dxs.push(xs[i+1] - xs[i]);\n\
    \  }\n  return dxs;\n}\n", "  var n = xs.length;\n  var deriv = [];\n  for(var\
    \ i = 0; i < n; i++){\n    deriv[i] = xs[i+1];\n  }\n  return deriv;\n}\n", " \
    \ var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n\
    \    pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n}\n",
  "    var n = xs.length,\n        dxs = new Array(n),\n        x = 1,\n        i;\n\
    \    for(i=0;i<n;i++){\n        dxs[i] = xs[i] - x;\n        x *= xs[i];\n   \
    \ }\n    return dxs;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i = 0; i !== n; ++i) {\n    out[i] = xs[i + 1];\n    m\
    \ = xs[i] / i;\n    for (i++; i !== n; ) {\n      out[i] = (out[i] - m) * xs[i];\n\
    \      m += xs[i] / i;\n    }\n  }\n\n  return out;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 0; i !== n; i++){\n        dxs[i] = xs[i +\
    \ 1];\n    }\n    return dxs;\n}\n", "    var n = xs.length;\n    var arr = [];\n\
    \    for(var i=0; i<n; i++){\n        arr.push(xs[i+1] - xs[i]);\n    }\n    return\
    \ arr;\n}\n", "    var n = xs.length;\n    var arr = [];\n    for(var i=0; i<n;\
    \ i++){\n        arr.push(xs[i+1] - xs[i]);\n    }\n    return arr;\n}\n", " \
    \   var n = xs.length;\n    var dxs = [];\n    for(var i = 0; i !== n; i++){\n\
    \        dxs[i] = xs[i+1];\n    }\n    return dxs;\n}\n", "  var n = xs.length;\n\
    \  var dxs = [];\n  for(var i = 0; i !== n; i++){\n    dxs[i] = xs[i+1] - xs[i];\n\
    \  }\n  return dxs;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i=n; i--; ) out[i] = xs[i+1] * xs[i];\n\n  for (i=n; i--;\
    \ ) out[i] = out[i] / xs[i];\n\n  return out;\n}\n", "  var n = xs.length;\n \
    \ var dxs = [];\n  for(var i = 1; i < n; i++){\n    dxs[i] = xs[i] - xs[i - 1];\n\
    \  }\n  return dxs;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i=n-1; i>=0; i--){\n    m = n - i;\n    out[i] = xs[i]\
    \ + (xs[i+1] * xs[i]) / m;\n  }\n  return out;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m, i;\n\n  for (i=n; i>0; --i) out[i] = xs[i-1]*(i==1\
    \ ? -1 : 1);\n\n  for (i=1; i<n; ++i) out[i] = out[i-1] + xs[i]*(i==n ? 1 : -1);\n\
    \n  return out;\n}\n", "  var derivatives = [];\n  var x = 0;\n  var y = 0;\n\
    \  for (var i = 0; i < xs.length; i++){\n    x += xs[i];\n    y += xs[i] * x;\n\
    \    derivatives.push(y);\n  }\n  return derivatives;\n}\n", "  var derivatives\
    \ = [];\n  var x = 0;\n  for(var i = 1; i < xs.length; i++){\n    x += xs[i];\n\
    \    derivatives.push(x);\n  }\n  return derivatives;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "    var n = xs.length;\n\
    \    var deriv = [];\n    for(var i = 0; i< n; i++){\n        deriv[i] = xs[i+1];\n\
    \    }\n    return deriv;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var n = xs.length;\n  var deriv = [];\n\
    \  for(var i = 0; i < n; i++){\n    deriv[i] = xs[i + 1];\n  }\n  return deriv;\n\
    }\n", "    var n = xs.length;\n    var out = [];\n    for(var i=0; i<n; i++){\n\
    \        out.push(xs[i+1] - xs[i]);\n    }\n    return out;\n}\n", "    var n\
    \ = xs.length,\n        ds = [],\n        d;\n    while(n){\n        if(n%2){\n\
    \            ds[ds.length] = xs[--n];\n        }else{\n            ds[ds.length]\
    \ = (d=xs[--n])/ds[ds.length-1];\n        }\n    }\n    return ds;\n}\n", "  \
    \  var n = xs.length;\n    var deriv = [];\n    for(var i = 1; i < n; i++){\n\
    \        deriv.push(xs[i] - xs[i - 1]);\n    }\n    return deriv;\n}\n", "   \
    \ var n = xs.length;\n    var dxs = [];\n    for(var i = 0; i< n; i++){\n    \
    \    dxs[i] = xs[i+1] - xs[i];\n    }\n    return dxs;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "  var n = xs.length;\n\
    \  var dxs = [];\n  for(var i = 1; i < n; i++){\n    dxs.push(xs[i] - xs[i - 1]);\n\
    \  }\n  return dxs;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for (var\
    \ i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n\
    \  }\n  return derivatives;\n}\n", "    var n = xs.length,\n        ds = [],\n\
    \        d;\n    while(n){\n        if(n%2){\n            ds[ds.length] = xs[--n];\n\
    \        }else{\n            ds[ds.length] = (d=xs[--n]) * (xs[n-1]);\n      \
    \  }\n    }\n    return ds;\n}\n", "    var n = xs.length;\n    var dxs = [];\n\
    \    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i - 1]);\n    }\n\
    \    return dxs;\n}\n", "    var n = xs.length,\n        ds = [],\n        d;\n\
    \    while(n){\n        d = Number(xs[--n]);\n        if(!ds) return d;\n    \
    \    ds.push(d * (n-1));\n    }\n    return ds;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    while(n--){\n        ds[n] = xs[n+1] - xs[n];\n    }\n\
    \    return ds;\n}\n", "    var n = xs.length;\n    var dxs = [];\n    for(var\
    \ i = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i - 1]);\n    }\n    return\
    \ dxs;\n}\n", "    var n = xs.length,\n        ds = [];\n    for(var i=0; i< n;\
    \ i++){\n        ds[i] = xs[i+1] - xs[i];\n    }\n    return ds;\n}\n", "    var\
    \ n = xs.length;\n    var deriv = [];\n    for(var i = 1; i < n; i++){\n     \
    \   deriv.push(xs[i] - xs[i-1]);\n    }\n    return deriv;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n\
    \    derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n\
    \        dxs = new Array(n);\n    for(var i = 0; i < n; i++){\n        dxs[i]\
    \ = xs[i+1] - xs[i];\n    }\n    return dxs;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    for(var i=0; i<n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for\
    \ (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n\
    \  }\n  return derivatives;\n}\n", "    var n = xs.length;\n    var arr = [];\n\
    \    for(var i=0; i<n; i++){\n        arr.push(xs[i+1] - xs[i]);\n    }\n    return\
    \ arr;\n}\n", "    var n = xs.length;\n    var deriv = [];\n    for(var i = 0;\
    \ i < n; i++){\n        deriv[i] = xs[i+1];\n    }\n    return deriv;\n}\n", " \
    \ var n = xs.length,\n      out = new Array(n),\n      m, i;\n  \n  if(n === 0){\n\
    \    return [];\n  }\n  \n  for(i = 0; i !== n; ++i){\n    out[i] = xs[i + 1];\n\
    \  }\n  \n  for(i = 0; ++i !== n){\n    m = xs[i] / out[i];\n    out[i] -= m *\
    \ out[i - 1];\n  }\n  \n  return out;\n}\n", "  var n = xs.length;\n  var dxs\
    \ = [];\n  for(var i=0; i<n; i++){\n    dxs[i] = xs[i+1] - xs[i];\n  }\n  return\
    \ dxs;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n\
    \  for (i = 0; i < n; ++i) {\n    out[i] = xs[i + 1];\n  }\n\n  for (i = n - 2;\
    \ i >= 0; --i) {\n    m = n - i - 1;\n    out[i] = ((xs[m] * xs[i]) - (xs [m]\
    \ * out[i + 1])) / (xs[m] * xs[i]);\n  }\n\n  return out;\n}\n", "    var n =\
    \ xs.length,\n        dxs = new Array(n),\n        x = 1,\n        i;\n    for(i\
    \ = 0; i < n; i++){\n        dxs[i] = xs[i] - x;\n        x *= xs[i];\n    }\n\
    \    return dxs;\n}\n", "  var n = xs.length;\n  var deriv = [];\n  for(var i\
    \ = 1; i < n; i++){\n    deriv.push(xs[i] - xs[i - 1]);\n  }\n  return deriv;\n\
    }\n", "    var n = xs.length,\n        out = new Array(n),\n        m, i;\n\n\
    \    for (i = 0; i < n; ++i) {\n        m = xs[i];\n        out[i] = m;\n    }\n\
    \n    for (i = 0; i < n; ++i) {\n        m = xs[i];\n        out[i] = out[i] *\
    \ m;\n    }\n\n    return out;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i] = xs[i + 1];\n  }\n\n\
    \  for (i = 1; i < n; ++i) {\n    m = xs[i] / i;\n    out[i] = out[i - 1] * m;\n\
    \  }\n\n  return out;\n}\n", "  var n = xs.length;\n  var dxs = [];\n  for(var\
    \ i=0; i<n; i++){\n    dxs[i] = xs[i+1];\n  }\n  return dxs;\n}\n", "    var n\
    \ = xs.length,\n        out = new Array(n),\n        pows = new Array(n);\n  \
    \  for(var i=0; i<n; i++){\n        pows[i] = 1;\n    }\n    for(var i=0; i<n;\
    \ i++){\n        for(var j=0; j<n; j++){\n            if(i == j) continue;\n \
    \           pows[i] *= xs[j];\n        }\n    }\n    for(var i=0; i<n; i++){\n\
    \        for(var j=i+1; j<n; j++){\n            if(i == j) continue;\n       \
    \     out[i] += pows[j] / pows[i];\n        }\n    }\n    return out;\n}\n", " \
    \ var derivatives = [];\n  var x = 0;\n  for (var i = 0; i < xs.length; i++){\n\
    \    x += xs[i];\n    derivatives.push(x);\n  }\n  return derivatives;\n}\n",
  "    var n = xs.length;\n    var deriv = [];\n    for(var i = 0; i< n; i++){\n \
    \       deriv[i] = xs[i+1];\n    }\n    return deriv;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n\
    \        out = new Array(n),\n        pows = new Array(n);\n    for(var i=0; i<n;\
    \ i++){\n        pows[i] = 1;\n    }\n    for(var i=0; i<n; i++){\n        for(var\
    \ j=0; j<n; j++){\n            if(i == j) continue;\n            pows[i] *= xs[j];\n\
    \        }\n    }\n    for(var i=0; i<n; i++){\n        for(var j=i+1; j<n; j++){\n\
    \            if(i == j) continue;\n            out[i] += pows[j] / pows[i];\n\
    \        }\n    }\n    return out;\n}\n", "    var n = xs.length;\n    var dxs\
    \ = [];\n    for(var i = 0; i !== n; i++){\n        dxs[i] = xs[i+1];\n    }\n\
    \    return dxs;\n}\n", "    var n = xs.length;\n    var dxs = [];\n    for(var\
    \ i = 0; i !== n; i++){\n        dxs.push(xs[i+1] - xs[i]);\n    }\n    return\
    \ dxs;\n}\n", "    var n = xs.length,\n        dxs = new Array(n),\n        x\
    \ = void 0,\n        dx = void 0,\n        i = void 0,\n        j = void 0,\n\
    \        k = void 0,\n        l = void 0;\n    for(i = 0; i < n; i++){\n     \
    \   dxs[i] = 0;\n    }\n    for(i = 0; i < n; i++){\n        x = xs[i];\n    \
    \    dx = 1;\n        for(j = i; j >= 0; j--){\n            dx = dx * x;\n   \
    \     }\n        dxs[i] = dx;\n    }\n    for(i = n - 1; i >= 0; i--){\n     \
    \   x = xs[i];\n        dx = 1;\n        for(j = i + 1; j < n; j++){\n       \
    \     dx = dx * x;\n        }\n        dxs[i] = dx;\n    }\n    return dxs;\n\
    }\n", "    var n = xs.length;\n    var out = [];\n    for(var i=0; i<n; i++){\n\
    \        out.push(xs[i+1] - xs[i]);\n    }\n    return out;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    for(var i=0; i<n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "    var n = xs.length;\n    var deriv = [];\n \
    \   for(var i = 1; i < n; i++){\n        deriv.push(xs[i] - xs[i - 1]);\n    }\n\
    \    return deriv;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n \
    \     m, i;\n\n  for (i = 0; i != n; ++i) {\n    out[i] = xs[i + 1];\n    m =\
    \ xs[i] / i;\n    for (i++; i != n; ) {\n      out[i] += m * out[i - 1];\n   \
    \   m /= i;\n    }\n  }\n  return out;\n}\n", "  var derivatives = [];\n  var\
    \ pow = 1;\n  for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    for(var i=0; i< n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i=n-1; i>=0; i--){\n    m = n - i;\n    out[i] = xs[i]\
    \ - (xs[m-2]*xs[m])/(xs[m-1]*xs[m]);\n  }\n  return out;\n}\n", "  var n = xs.length;\n\
    \  var deriv = [];\n  for(var i = 1; i < n; i++){\n    deriv[i] = xs[i] - xs[i-1];\n\
    \  }\n  return deriv;\n}\n", "  var n = xs.length;\n  var dxs = [];\n  for(var\
    \ i=0; i<n; i++){\n    dxs.push(xs[i+1] - xs[i]);\n  }\n  return dxs;\n}\n", " \
    \ var derivatives = [];\n  var pow = 1;\n  for(var i = 0; i < xs.length; i++){\n\
    \    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n}\n",
  "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i=n; i--;\
    \ ) {\n    out[i] = xs[i] + (derivate(xs[i+1], xs[i], xs[i-1]) || 0);\n  }\n\n\
    \  return out;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i=0;i<xs.length;i++){\n\
    \    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n}\n",
  "    var n = xs.length,\n        ds = [];\n    while(n--){\n        ds[n] = xs[n+1]\
    \ - xs[n];\n    }\n    return ds;\n}\n", "    var n = xs.length,\n        out\
    \ = new Array(n),\n        m, i;\n    for(i=0; i<n; i++){\n        m = xs[i];\n\
    \        // use m * m to prevent double evaluation\n        out[i] = (m * m *\
    \ m) >> 0;\n    }\n    return out;\n}\n", "    var n = xs.length;\n    var out\
    \ = [];\n    for(var i=0; i<n; i++){\n        out.push(xs[i+1] - xs[i]);\n   \
    \ }\n    return out;\n}\n", "    var n = xs.length,\n        out = [],\n     \
    \   pow = [];\n    for(var i=0; i<n; i++){\n        pow[i] = 1;\n    }\n    for(var\
    \ i=1; i<n; i++){\n        for(var j=0; j<i; j++){\n            pow[i] += xs[j]\
    \ * pow[j];\n        }\n    }\n    for(i=n-2; i>=0; i--){\n        pow[i] /= i;\n\
    \    }\n    for(i=1; i<n; i++){\n        out.push(pow[i]);\n    }\n    return\
    \ out;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 0; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length;\
    \ i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n\
    }\n", "    var n = xs.length;\n    var arr = [];\n    for(var i=0; i<n; i++){\n\
    \        arr.push(xs[i+1] - xs[i]);\n    }\n    return arr;\n}\n", "  var n =\
    \ xs.length;\n  var dxs = [];\n  for(var i = 1; i < n; i++){\n    dxs[i - 1] =\
    \ xs[i] - xs[i - 1];\n  }\n  return dxs;\n}\n", "    var n = xs.length;\n    var\
    \ dxs = [];\n    for(var i = 0; i !== n; i++){\n        dxs.push(xs[i+1] - xs[i]);\n\
    \    }\n    return dxs;\n}\n", "    var n = xs.length,\n        out = [],\n  \
    \      m, i;\n    for(i = 0; i < n; i++){\n        m = xs[i];\n        out.push(m\
    \ * Derivative(m));\n    }\n    return out;\n}\n", "    var n = xs.length;\n \
    \   var arr = [];\n    for(var i=0; i<n; i++){\n        arr.push(xs[i+1] - xs[i]);\n\
    \    }\n    return arr;\n}\n", "    var n = xs.length;\n    var dxs = [];\n  \
    \  for(var i = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i - 1]);\n    }\n\
    \    return dxs;\n}\n", "    var n = xs.length;\n    var arr = [];\n    for(var\
    \ i=0; i<n; i++){\n        arr.push(xs[i+1] - xs[i]);\n    }\n    return arr;\n\
    }\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length;\
    \ i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n\
    }\n", "  var derivatives = [];\n  var pow = 1;\n  for (var i = 0; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 0; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "    var n = xs.length,\n        ds = [];\n    for(var i=0; i!==n; i++){\n\
    \        ds[i] = xs[i+1];\n    }\n    return ds;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 0; i !== n; i++){\n        dxs[i] = xs[i+1];\n\
    \    }\n    dxs[n-1] = 1;\n    return dxs;\n}\n", "    var n = xs.length;\n  \
    \  var deriv = [];\n    for(var i = 1; i < n; i++){\n        deriv[i] = xs[i]\
    \ - xs[i-1];\n    }\n    return deriv;\n}\n", "    var n = xs.length;\n    var\
    \ dxs = [];\n    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i -\
    \ 1]);\n    }\n    return dxs;\n}\n", "    var n = xs.length,\n        out = new\
    \ Array(n),\n        m, i;\n\n    for (i = 0; i < n; i++) {\n        m = xs[i];\n\
    \        out[i] = m;\n    }\n\n    for (i = 1; i < n; i++) {\n        m = out[i-1];\n\
    \        out[i] = out[i] - m * out[i];\n    }\n\n    return out;\n}\n", "  var\
    \ derivatives = [];\n  var pow = 1;\n  for(var i = 0; i < xs.length; i++){\n \
    \   derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n}\n",
  "    var n = xs.length;\n    var deriv = [];\n    for(var i = 0; i< n; i++){\n \
    \       deriv[i] = xs[i+1];\n    }\n    return deriv;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 0; i !== n; i++){\n        dxs[i] = xs[i+1];\n\
    \    }\n    return dxs;\n}\n", "    var n = xs.length;\n    var dxs = [];\n  \
    \  for(var i=0; i< n; i++){\n        dxs.push(xs[i+1] - xs[i]);\n    }\n    return\
    \ dxs;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 0; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n  \n  for(i=0;\
    \ i<n; i++){\n    m = 0;\n    while(xs[i] !== 0) m++;\n    out[i] = m;\n  }\n\
    \  \n  return out;\n}\n", "    var n = xs.length,\n        ds = [];\n    while(n--){\n\
    \        ds[n] = xs[n+1] - xs[n];\n    }\n    return ds;\n}\n", "    var n = xs.length,\n\
    \        ds = [];\n    while(n--){\n        ds[n] = xs[n+1] - xs[n];\n    }\n\
    \    return ds;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i =\
    \ 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n  }\n\
    \  return derivatives;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n\
    \  }\n  return derivatives;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i] = xs[i] - xs[i - 1];\n\
    \  }\n\n  for (i = n - 2; i >= 0; --i) {\n    m = n - i - 1;\n    out[i] = out[i\
    \ + 1] * xs[m];\n  }\n\n  return out;\n}\n", "  var n = xs.length,\n      out\
    \ = new Array(n),\n      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i] = xs[i\
    \ + 1];\n  }\n\n  for (i = n - 2; i >= 0; --i) {\n    m = (i + 1) * out;\n   \
    \ out[i] = (m !== undefined) ? m[0] : 0;\n  }\n\n  return out;\n}\n", "    var\
    \ n = xs.length;\n    var deriv = [];\n    for(var i=0; i< n; i++){\n        deriv[i]\
    \ = xs[i+1];\n    }\n    return deriv;\n}\n", "  var derivatives = [];\n  var\
    \ pows = [];\n  for(var i = 0, len = xs.length; i < len; i++){\n    pows[i] =\
    \ xs[i] * xs[i];\n  }\n  for(i = len - 1; i >= 0; i--){\n    derivatives[i] =\
    \ 1;\n    for(var j = 0; j < len; j++){\n      derivatives[i] *= xs[j] / pows[j];\n\
    \    }\n  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var x =\
    \ 0;\n  var y = 0;\n  for (var i = 0; i < xs.length; i++){\n    x += xs[i];\n\
    \    y += xs[i] * x;\n    derivatives.push(y);\n  }\n  return derivatives;\n}\n",
  "    var n = xs.length,\n        dxs = new Array(n),\n        x = 1,\n        i;\n\
    \    for(i = 0; i < n; i++){\n        dxs[i] = xs[i] - x;\n        x *= xs[i];\n\
    \    }\n    return dxs;\n}\n", "    var n = xs.length;\n    var dxs = [];\n  \
    \  for(var i = 1; i < n; i++){\n        dxs.push(xs[i] - xs[i - 1]);\n    }\n\
    \    return dxs;\n}\n", "    var n = xs.length,\n        dxs = new Array(n),\n\
    \        x = 1,\n        i;\n    for(i=0;i<n;i++){\n        dxs[i] = xs[i] - x;\n\
    \        x = dxs[i];\n    }\n    return dxs;\n}\n", "  var derivatives = [];\n\
    \  var pow = 1;\n  for (var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    dxs[1] = 1;\n    for (var i = 2; i < n; ++i){\n      \
    \  dxs[i] = dxs[i-1] * xs[i-1];\n    }\n    return dxs;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i]\
    \ = xs[i] - xs[i - 1];\n  }\n\n  m = xs.length;\n  for (i = n - 1; i >= 0; --i)\
    \ {\n    out[i] = out[i + 1] * m - xs[i];\n  }\n\n  return out;\n}\n", "  var\
    \ derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n \
    \   pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n}\n",
  "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n\
    \    pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n}\n",
  "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n\
    \    pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n}\n",
  "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n\
    \    pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n}\n",
  "  var derivatives = [];\n  var x = 0;\n  for (var i = 0; i < xs.length; i++){\n\
    \    x += xs[i];\n    derivatives.push(x);\n  }\n  return derivatives;\n}\n",
  "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n\
    \    pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n}\n",
  "  var n = xs.length,\n      out = new Array(n),\n      m = xs[0].length,\n    \
    \  f = 0;\n  for(var i = 0; i != n; i++){\n    out[i] = new Array(m);\n    for(var\
    \ j = 0; j != m; j++){\n      out[i][j] = (j > 0) ? xs[i][j-1] : 0;\n    }\n \
    \ }\n  for(var i = 0; i != n; i++){\n    for(var j = 0; j != m; j++){\n      out[i][j]\
    \ = out[i][j] - xs[i][j] * f;\n      f += xs[i][j];\n    }\n  }\n  return out;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i=n;\
    \ i--; ) out[i] = xs[i+1] * xs[i];\n\n  m = xs.length;\n  for (i=m; --i; ) out[i]\
    \ = derivative(out.slice(i));\n\n  return out;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 0; i< n; i++){\n        dxs.push(xs[i+1] -\
    \ xs[i]);\n    }\n    return dxs;\n}\n", "  var n = xs.length,\n      out = new\
    \ Array(n),\n      m, i;\n\n  for (i=n; i>0; --i) out[i] = xs[i-1]*(i==1 ? -1\
    \ : 1);\n  m = xs[0]*2;\n  for (i=1; i<n; ++i) m -= xs[i]*(xs[i-1]+i);\n  for\
    \ (i=n; i>0; --i) out[i] = out[i-1] + m;\n  return out;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "  var derivatives = [];\n\
    \  var x = 0;\n  for (var i = 0; i < xs.length; i++){\n    derivatives.push(xs[i]);\n\
    \    x += xs[i];\n  }\n  return derivatives;\n}\n", "  var n = xs.length,\n  \
    \    out = new Array(n),\n      m, i;\n  for(i=0; i<n; i++){\n    m = 0;\n   \
    \ while(xs[i] !== 0) m++;\n    out[i] = m;\n  }\n  return out;\n}\n", "  var n\
    \ = xs.length;\n  var deriv = [];\n  for(var i = 1; i < n; i++){\n    deriv[i]\
    \ = xs[i] - xs[i - 1];\n  }\n  return deriv;\n}\n", "    var n = xs.length;\n\
    \    var arr = [];\n    for(var i=0; i<n; i++){\n        arr.push(xs[i+1] - xs[i]);\n\
    \    }\n    return arr;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow = 1;\n\
    \  for(var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n    pow *=\
    \ xs[i];\n  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pow\
    \ = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "    var n = xs.length,\n        ds = [];\n\
    \    for(var i=0; i<n; i++){\n        ds[i] = xs[i+1] - xs[i];\n    }\n    return\
    \ ds;\n}\n", "  var derivatives = [];\n  var pows = [];\n  for(var i = 0, len\
    \ = xs.length; i < len; i++){\n    pows[i] = xs[i] * xs[i];\n  }\n  for(var i\
    \ = 0, len = xs.length; i < len; i++){\n    derivatives[i] = 1;\n    for(var j\
    \ = 0, len2 = xs.length; j < len2; j++){\n      derivatives[i] *= xs[j];\n   \
    \ }\n  }\n  for(var i = 0, len = xs.length; i < len; i++){\n    derivatives[i]\
    \ /= pows[i];\n  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var\
    \ pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "  var derivatives = [];\n\
    \  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n  \
    \  derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "  var derivatives\
    \ = [];\n  var pow = 1;\n  for(var i = 0; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length;\n\
    \    var dxs = [];\n    for(var i = 1; i < n; i++){\n        dxs.push(xs[i] -\
    \ xs[i - 1]);\n    }\n    return dxs;\n}\n", "  var n = xs.length,\n      out\
    \ = new Array(n),\n      m, i;\n\n  for (i=n; i--; ) {\n    out[i] = xs[i+1] *\
    \ xs[i];\n  }\n\n  for (i=n; i--; ) {\n    m = xs[i] * xs[i];\n    out[i] -= m;\n\
    \  }\n\n  return out;\n}\n", "    var n = xs.length,\n        ds = [],\n     \
    \   d;\n    while(n){\n        if(n%2) d = xs[n-1]; else d = xs[--n];\n      \
    \  ds.push(d)\n    }\n    if(ds.length == 1) return ds[0];\n    return ds;\n}\n",
  "    var n = xs.length;\n    var deriv = [];\n    for(var i = 0; i < n; i++){\n\
    \        deriv[i] = xs[i+1];\n    }\n    return deriv;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m, i;\n\n  for (i = 0; i < n; ++i) {\n    out[i]\
    \ = xs[i] - ((m = i % 2) ? xs[i - 1] : 0);\n  }\n\n  return out;\n}\n", "  var\
    \ derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n \
    \   pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n}\n",
  "    var n = xs.length;\n    var dxs = [];\n    for(var i = 0; i< n; i++){\n   \
    \     dxs[i] = xs[i+1] - xs[i];\n    }\n    return dxs;\n}\n", "  var derivatives\
    \ = [];\n  var x = 0;\n  for (var i = 0; i < xs.length; i++){\n    x += xs[i];\n\
    \    derivatives.push(x);\n  }\n  return derivatives;\n}\n", "  var n = xs.length,\n\
    \      out = new Array(n),\n      m, i;\n  \n  for(i=0; i<n; i++){\n    m = 0;\n\
    \    while(xs[i] !== 0) m++;\n    out[i] = m;\n  }\n  return out;\n}\n", "  var\
    \ n = xs.length;\n  var deriv = [];\n  for(var i = 0; i < n; i++){\n    deriv[i]\
    \ = xs[i+1];\n  }\n  return deriv;\n}\n", "    var n = xs.length,\n        dxs\
    \ = new Array(n),\n        x = 1,\n        i;\n    for(i=0;i<n;i++){\n       \
    \ dxs[i] = xs[i] - x;\n        x *= xs[i];\n    }\n    return dxs;\n}\n", "  var\
    \ derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n \
    \   pow *= xs[i];\n    derivatives.push(pow);\n  }\n  return derivatives;\n}\n",
  "    var n = xs.length,\n        dxs = new Array(n),\n        x = void 0,\n    \
    \    dx = void 0,\n        i = void 0,\n        dxi = 0,\n        power = 0,\n\
    \        k = void 0,\n        j = void 0,\n        power = void 0,\n        j\
    \ = void 0,\n        power = void 0,\n        j = void 0,\n        power = void\
    \ 0,\n        j = void 0,\n        power = void 0,\n        j = void 0,\n    \
    \    power = void 0,\n        j = void 0,\n        power = void 0,\n        j\
    \ = void 0,\n        power = void 0,\n        j = void 0,\n        power = void\
    \ 0,\n        j = void 0,\n        power = void 0,\n        j = void 0,\n    \
    \    power = void 0,\n        j = void 0,\n        power = void 0,\n        j\
    \ = void 0,\n        power = void 0,\n        j = void 0,\n        power = void\
    \ 0,\n        j = void 0,\n        power = void 0,\n        j = void 0,\n    \
    \    power = void 0,\n        j = void 0,\n        power = void 0,\n        j\
    \ = void 0,\n        power = void 0,\n        j = void 0,\n        power = void\
    \ 0,\n        j = void 0,\n        power = void 0,\n        j = void 0,\n    \
    \    power = void 0,\n        j = void 0,\n        power = void 0,\n        j\
    \ = void 0,\n        power = void 0,\n        j = void 0,\n        power = void\
    \ 0,\n        j = void 0,\n        power = void 0,\n        j = void 0,\n    \
    \    power = void 0,\n        j = void 0,\n        power = void 0,\n        j\
    \ = void 0,\n        power = void 0,\n        j = void 0,\n        power = void\
    \ 0,\n        j = void 0,\n        power = void 0,\n        j = void 0,\n    \
    \    power = void 0,\n        j = void 0,\n        power = void 0,\n        j\
    \ = void 0,\n        power = void 0,\n        j = void 0,\n        power = void\
    \ 0,\n        j = void 0,\n        power = void 0,\n        j = void 0,\n    \
    \    power = void 0,\n        j = void 0,\n        power = void 0,\n        j\
    \ = void 0,\n        power = void 0,\n        j = void 0,\n        power = void\
    \ 0,\n        j = void 0,\n        power = void 0,\n        j = void 0,\n    \
    \    power = void 0,\n        j = void 0,\n        power = void 0,\n        j\
    \ = void 0,\n        power = void 0,\n        j = void 0,\n        power = void\
    \ 0,\n", "    var n = xs.length,\n        dxs = new Array(n),\n        x = 1,\n\
    \        i;\n    for(i = 1; i < n; i++){\n        dxs[i] = xs[i] - x;\n      \
    \  x += xs[i];\n    }\n    return dxs;\n}\n", "  var derivatives = [];\n  var\
    \ pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    derivatives.push(pow);\n\
    \    pow *= xs[i];\n  }\n  return derivatives;\n}\n", "  var derivatives = [];\n\
    \  var pow = 1;\n  for(var i = 1; i < xs.length; i++){\n    pow *= xs[i];\n  \
    \  derivatives.push(pow);\n  }\n  return derivatives;\n}\n", "  var derivatives\
    \ = [];\n  var xlen = xs.length;\n  if(xlen == 0){\n    return derivatives;\n\
    \  }\n  for(var i = 1; i < xlen; i++){\n    derivatives.push(xs[i] - xs[i - 1]);\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var x = 0;\n  var\
    \ y = 0;\n  for (var i = 0; i < xs.length; i++){\n    x += xs[i];\n    y += xs[i]\
    \ * x;\n    derivatives.push(y);\n  }\n  return derivatives;\n}\n", "  var n =\
    \ xs.length,\n      out = new Array(n),\n      m, i;\n\n  for (i = 0; i != n;\
    \ ++i) {\n    out[i] = xs[i] - xs[i - 1];\n  }\n\n  for (i = 0; i != n; ++i) {\n\
    \    m = xs[i] / out[i];\n    out[i] -= m * out[i - 1];\n  }\n\n  return out;\n\
    }\n", "  var derivatives = [];\n  var pow = 1;\n  for(var i = 1; i < xs.length;\
    \ i++){\n    derivatives.push(pow);\n    pow *= xs[i];\n  }\n  return derivatives;\n\
    }\n", "  var n = xs.length,\n      out = new Array(n),\n      m, i;\n  \n  for(i=0;\
    \ i<n; i++){\n    m = 0;\n    while(xs[i] !== 0) m += xs[i--];\n    out[i] = m;\n\
    \  }\n  return out;\n}\n", "  var derivatives = [];\n  var pow = 1;\n  for(var\
    \ i = 1; i < xs.length; i++){\n    pow *= xs[i];\n    derivatives.push(pow);\n\
    \  }\n  return derivatives;\n}\n", "  var derivatives = [];\n  var pows = [];\n\
    \  var diff = [];\n  for(var x = 0; x < xs.length; x++){\n    pows[x] = 1;\n \
    \   diff[x] = 0;\n    for(var i = x-1; i >= 0; i--){\n      diff[x] += xs[i] *\
    \ pows[i];\n      pows[i] *= x;\n    }\n    derivatives[x] = diff[x];\n  }\n \
    \ return derivatives;\n}\n", "    var n = xs.length,\n        out = new Array(n),\n\
    \        m, i;\n    for(i=0; i<n; i++){\n        m = xs[i];\n        // m is now\
    \ the first term of the nth derivative\n        // get its second coefficient\n\
    \        out[i] = (m * derivative(Array.prototype.slice.call(arguments, 1)))[0];\n\
    \    }\n    return out;\n}\n", "  var n = xs.length,\n      out = new Array(n),\n\
    \      m, i;\n\n  for (i=n; i--; ) out[i] = xs[i+1] * xs[i];\n\n  for (i=n; m=xs[i],\
    \ i--; ) out[i] = m / out[i];\n\n  return out;\n}\n", "    var n = xs.length;\n\
    \    var deriv = [];\n    for(var i = 0; i < n; i++){\n        deriv[i] = xs[i\
    \ + 1];\n    }\n    return deriv;\n}\n", "  var derivatives = [];\n  var pow =\
    \ 1;\n  for(var i = 1; i < xs.length; i++){\n    derivatives.push(pow);\n    pow\
    \ *= xs[i];\n  }\n  return derivatives;\n}\n", "    var n = xs.length,\n     \
    \   ds = [];\n    for(var i=0; i< n; i++){\n        ds[i] = xs[i+1] - xs[i];\n\
    \    }\n    return ds;\n}\n", "    var n = xs.length,\n        out = new Array(n),\n\
    \        pows = new Array(n),\n        pow;\n\n    for(var i=0; i<n; i++){\n \
    \       pows[i] = 1;\n    }\n\n    for(var i=2; i<n; i++){\n        pow = pows[i-1];\n\
    \        for(var j=0; j<i; j++){\n            pow *= xs[j];\n        }\n     \
    \   pows[i] = pow;\n    }\n\n    for(i=n-1; i>=0; i--){\n        pow = pows[i];\n\
    \        pows[i] -= pow;\n        out[i] = pow;\n    }\n\n    return out;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
