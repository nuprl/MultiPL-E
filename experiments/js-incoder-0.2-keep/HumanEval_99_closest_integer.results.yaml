name: HumanEval_99_closest_integer
language: js
results:
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4ml6n3h0.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpeti2rmdl.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjm6aly_m.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (closest_integer == value){\n    return value;\n\
    \  }\n  else if (closest_integer < value){\n    return closest_integer;\n  }\n\
    \  else{\n    return value - 1;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n13.5\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmpfwbx5ucm.js:33:10)\n    at Object.<anonymous> (/tmp/tmpfwbx5ucm.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 13.5,\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    closest_integer = Math.round(value*(-1));\n  }\n  return closest_integer;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-10\n\nshould equal\n\n10\n    at test (/tmp/tmp86iip49y.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmp86iip49y.js:34:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -10,\n  expected: 10,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n  var diffAbsMaxValAbsIndex4;\n\
    \  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n  var diffAbsMaxValAbsIndex7;\n\
    \  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n  var diffAbsMaxValAbsIndex10;\n\
    \  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n  var diffAbsMaxValAbsIndex13;\n\
    \  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n  var diffAbsMaxValAbsIndex16;\n\
    \  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n  var diffAbsMaxValAbsIndex19;\n\
    \  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n  var diffAbsMaxValAbsIndex22;\n\
    \  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n  var diffAbsMaxValAbsIndex25;\n\
    \  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n  var diffAbsMaxValAbsIndex28;\n\
    \  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n  var diffAbsMaxValAbsIndex31;\n\
    \  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n  var diffAbsMaxValAbsIndex34;\n\
    \  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n  var diffAbsMaxValAbsIndex37;\n\
    \  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n  var diffAbsMaxValAbsIndex40;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqec8rcox.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppz82z2bu.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDistance = null;\n  for(var i in this.integers){\n    var\
    \ int = this.integers[i];\n    var distance = Math.abs(value - int);\n    if(closest\
    \ == null || distance < closestDistance){\n      closest = int;\n      closestDistance\
    \ = distance;\n    }\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nnull\n\nshould equal\n\n10\n    at test\
    \ (/tmp/tmpfn63k81b.js:33:10)\n    at Object.<anonymous> (/tmp/tmpfn63k81b.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: null,\n  expected: 10,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueAbs;\n\
    \  var diffValueAbsMax;\n  var diffValueAbsMaxIndex;\n  var diffValueAbsMaxValue;\n\
    \  var diffValueAbsMin;\n  var diffValueAbsMinIndex;\n  var diffValueAbsMinValue;\n\
    \  var diffValueAbsValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var\
    \ diffValueValueAbs;\n  var diffValueValueAbsMax;\n  var diffValueValueAbsMaxIndex;\n\
    \  var diffValueValueAbsMaxValue;\n  var diffValueValueAbsMin;\n  var diffValueValueAbsMinIndex;\n\
    \  var diffValueValueAbsMinValue;\n  var diffValueValueAbsValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueAbs;\n  var diffValueValueValueAbsMax;\n\
    \  var diffValueValueValueAbsMaxIndex;\n  var diffValueValueValueAbsMaxValue;\n\
    \  var diffValueValueValueAbsMin;\n  var diffValueValueValueAbsMinIndex;\n  var\
    \ diffValueValueValueAbsMinValue;\n  var diffValueValueValueAbsValue;\n  var diffValueValueValueIndex;\n\
    \  var diffValueValueValueValue;\n  var diffValueValueValueValueAbs;\n  var diffValueValueValueValueAbsMax;\n\
    \  var diffValueValueValueValueAbsMaxIndex;\n  var diffValueValueValueValueAbsMaxValue;\n\
    \  var diffValueValueValueValueAbsMin;\n  var diffValueValueValueValueAbsMinIndex;\n\
    \  var diffValueValueValueValueAbsMinValue;\n  var diffValueValueValueValueAbsValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueAbs;\n  var diffValueValueValueValueAbsMax;\n \
    \ var diffValueValueValueValueAbsMaxIndex;\n  var diffValueValueValueValueAbsMaxValue;\n\
    \  var diffValueValueValueValueAbsMin;\n  var diffValueValueValueValueAbsMinIndex;\n\
    \  var diffValueValueValueValueAbsMinValue;\n  var diffValueValueValueValueAbsValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjlm4d2x5.js:89\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_d9dtm1e.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n  var diffAbsMaxValAbsIndex4;\n\
    \  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n  var diffAbsMaxValAbsIndex7;\n\
    \  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n  var diffAbsMaxValAbsIndex10;\n\
    \  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n  var diffAbsMaxValAbsIndex13;\n\
    \  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n  var diffAbsMaxValAbsIndex16;\n\
    \  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n  var diffAbsMaxValAbsIndex19;\n\
    \  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n  var diffAbsMaxValAbsIndex22;\n\
    \  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n  var diffAbsMaxValAbsIndex25;\n\
    \  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n  var diffAbsMaxValAbsIndex28;\n\
    \  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n  var diffAbsMaxValAbsIndex31;\n\
    \  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n  var diffAbsMaxValAbsIndex34;\n\
    \  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n  var diffAbsMaxValAbsIndex37;\n\
    \  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n  var diffAbsMaxValAbsIndex40;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgs3r48kw.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var closest;\n  var diff;\n  if(num < 0){\n    closest = -Infinity;\n    diff\
    \ = Infinity;\n  }else{\n    closest = Infinity;\n    diff = -1;\n  }\n  if(Math.abs(num)\
    \ < 1){\n    return num;\n  }\n  if(Math.abs(num) < 2){\n    return closest;\n\
    \  }\n  if(Math.abs(num) < 3){\n    return closest;\n  }\n  if(Math.abs(num) <\
    \ 4){\n    return closest;\n  }\n  if(Math.abs(num) < 5){\n    return closest;\n\
    \  }\n  if(Math.abs(num) < 6){\n    return closest;\n  }\n  if(Math.abs(num) <\
    \ 7){\n    return closest;\n  }\n  if(Math.abs(num) < 8){\n    return closest;\n\
    \  }\n  if(Math.abs(num) < 9){\n    return closest;\n  }\n  if(Math.abs(num) <\
    \ 10){\n    return closest;\n  }\n  if(Math.abs(num) < 11){\n    return closest;\n\
    \  }\n  if(Math.abs(num) < 12){\n    return closest;\n  }\n  if(Math.abs(num)\
    \ < 13){\n    return closest;\n  }\n  if(Math.abs(num) < 14){\n    return closest;\n\
    \  }\n  if(Math.abs(num) < 15){\n    return closest;\n  }\n  if(Math.abs(num)\
    \ < 16){\n    return closest;\n  }\n  if(Math.abs(num) < 17){\n    return closest;\n\
    \  }\n  if(Math.abs(num) < 18){\n    return closest;\n  }\n  if(Math.abs(num)\
    \ < 19){\n    return closest;\n  }\n  if(Math.abs(num) < 20){\n    return closest;\n\
    \  }\n  if(Math.abs(num) < 21){\n    return closest;\n  }\n  if(Math.abs(num)\
    \ < 22){\n    return closest;\n  }\n  if(Math.abs(num) < 23){\n    return closest;\n\
    \  }\n  if(Math.abs(num) < 24){\n    return closest;\n  }\n  if(Math.abs(num)\
    \ < 25){\n    return closest;\n  }\n  if(Math.abs(num) < 26){\n    return closest;\n\
    \  }\n  if(Math.abs(num) < 27){\n    return closest;\n  }\n  if(Math.abs(num)\
    \ < 28){\n    return closest;\n  }\n  if(Math.abs(num) < 29){\n    return closest;\n\
    \  }\n  if(Math.abs(num) < 30){\n    return closest;\n  }\n  if(Math.abs(num)\
    \ < 31){\n    return closest;\n  }\n  if(Math.abs(num) < 32){\n    return closest;\n\
    \  }\n  if(Math.abs(num) < 33){\n    return closest;\n  }\n  if(Math.abs(\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7ycxud8r.js:125\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbs2;\n  var closestIntegerDiffAbs3;\n\
    \  var closestIntegerDiffAbs4;\n  var closestIntegerDiffAbs5;\n  var closestIntegerDiffAbs6;\n\
    \  var closestIntegerDiffAbs7;\n  var closestIntegerDiffAbs8;\n  var closestIntegerDiffAbs9;\n\
    \  var closestIntegerDiffAbs10;\n  var closestIntegerDiffAbs11;\n  var closestIntegerDiffAbs12;\n\
    \  var closestIntegerDiffAbs13;\n  var closestIntegerDiffAbs14;\n  var closestIntegerDiffAbs15;\n\
    \  var closestIntegerDiffAbs16;\n  var closestIntegerDiffAbs17;\n  var closestIntegerDiffAbs18;\n\
    \  var closestIntegerDiffAbs19;\n  var closestIntegerDiffAbs20;\n  var closestIntegerDiffAbs21;\n\
    \  var closestIntegerDiffAbs22;\n  var closestIntegerDiffAbs23;\n  var closestIntegerDiffAbs24;\n\
    \  var closestIntegerDiffAbs25;\n  var closestIntegerDiffAbs26;\n  var closestIntegerDiffAbs27;\n\
    \  var closestIntegerDiffAbs28;\n  var closestIntegerDiffAbs29;\n  var closestIntegerDiffAbs30;\n\
    \  var closestIntegerDiffAbs31;\n  var closestIntegerDiffAbs32;\n  var closestIntegerDiffAbs33;\n\
    \  var closestIntegerDiffAbs34;\n  var closestIntegerDiffAbs35;\n  var closestIntegerDiffAbs36;\n\
    \  var closestIntegerDiffAbs37;\n  var closestIntegerDiffAbs38;\n  var closestIntegerDiffAbs39;\n\
    \  var closestIntegerDiffAbs40;\n  var closestIntegerDiffAbs41;\n  var closestIntegerDiffAbs42;\n\
    \  var closestIntegerDiffAbs43;\n  var closestIntegerDiffAbs44;\n  var closestIntegerDiffAbs45;\n\
    \  var closestIntegerDiffAbs46;\n  var closestIntegerDiffAbs47;\n  var closestIntegerDiffAbs48;\n\
    \  var closestIntegerDiffAbs49;\n  var closestIntegerDiffAbs50;\n  var closestIntegerDiffAbs51;\n\
    \  var closestIntegerDiffAbs52;\n  var closestIntegerDiffAbs53;\n  var closestIntegerDiffAbs54;\n\
    \  var closestInteger\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7h2ajutp.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfoit0fet.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjo2x1vu2.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMaxValueIndex;\n    var diffAbsMaxValueValue;\n\
    \    var diffAbsMaxValueValueIndex;\n    var diffAbsMaxValueValueValue;\n    var\
    \ diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n \
    \   var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbs\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6m32vlab.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcmxn7sov.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value - Math.floor(value)) < Math.abs(value - Math.ceil(value))){\n\
    \    closest = Math.floor(value);\n  } else {\n    closest = Math.ceil(value);\n\
    \  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-15\n\nshould equal\n\n-16\n    at test\
    \ (/tmp/tmpp7w9fxjx.js:31:10)\n    at Object.<anonymous> (/tmp/tmpp7w9fxjx.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp24sgcy2e.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptmfgnc_r.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmpck7he1s7.js:28:10)\n    at Object.<anonymous> (/tmp/tmpck7he1s7.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n  var diffAbsMaxValAbsIndex4;\n\
    \  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n  var diffAbsMaxValAbsIndex7;\n\
    \  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n  var diffAbsMaxValAbsIndex10;\n\
    \  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n  var diffAbsMaxValAbsIndex13;\n\
    \  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n  var diffAbsMaxValAbsIndex16;\n\
    \  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n  var diffAbsMaxValAbsIndex19;\n\
    \  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n  var diffAbsMaxValAbsIndex22;\n\
    \  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n  var diffAbsMaxValAbsIndex25;\n\
    \  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n  var diffAbsMaxValAbsIndex28;\n\
    \  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n  var diffAbsMaxValAbsIndex31;\n\
    \  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n  var diffAbsMaxValAbsIndex34;\n\
    \  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n  var diffAbsMaxValAbsIndex37;\n\
    \  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n  var diffAbsMaxValAbsIndex40;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppa2s7qp0.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5h_1nvww.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2myh3v1z.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if(closest == value){\n    return closest;\n  }\n  if(Math.abs(closest\
    \ - value) < Math.abs(value - closest)){\n    return closest;\n  }\n  return value;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmp19bzq31u.js:31:10)\n    at Object.<anonymous> (/tmp/tmp19bzq31u.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest\
    \ = null;\n    var closestDiff = null;\n    var diff = null;\n    var diffAbs\
    \ = null;\n    var absDiff = null;\n    var absDiffAbs = null;\n    var absDiffAbsMin\
    \ = null;\n    var absDiffAbsMax = null;\n    var absDiffAbsMaxMin = null;\n \
    \   var absDiffAbsMaxMinMin = null;\n    var absDiffAbsMaxMinMinMax = null;\n\
    \    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbsMaxMinMinMaxMax = null;\n    var absDiffAbsMaxMinMinMaxMax\
    \ = null;\n    var absDiffAbs\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpudap4m7_.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest\
    \ = null;\n    var closestDistance = null;\n    var closestDistanceSquared = null;\n\
    \    var closestSquareDistance = null;\n    var closestSquareDistanceSquared =\
    \ null;\n    var closestSquareDistanceCubed = null;\n    var closestCubedDistance\
    \ = null;\n    var closestCubedDistanceSquared = null;\n    var closestCubedDistanceCubed\
    \ = null;\n    var closestCubedDistanceCubedSquared = null;\n    var closestCubedDistanceCubedSquared\
    \ = null;\n    var closestCubedDistanceCubedCubed = null;\n    var closestCubedDistanceCubedCubedSquared\
    \ = null;\n    var closestCubedDistanceCubedCubedCubed = null;\n    var closestCubedDistanceCubedCubedCubedSquared\
    \ = null;\n    var closestCubedDistanceCubedCubedCubedCubed = null;\n    var closestCubedDistanceCubedCubedCubedCubedSquared\
    \ = null;\n    var closestCubedDistanceCubedCubedCubedCubedCubed = null;\n   \
    \ var closestCubedDistanceCubedCubedCubedCubedCubedSquared = null;\n    var closestCubedDistanceCubedCubedCubedCubedCubedCubed\
    \ = null;\n    var closestCubedDistanceCubedCubedCubedCubedCubedCubedSquared =\
    \ null;\n    var closestCubedDistanceCubedCubedCubedCubedCubedCubedCubed = null;\n\
    \    var closestCubedDistanceCubedCubedCubedCubedCubedCubedCubedSquared = null;\n\
    \    var closestCubedDistanceCubedCubedCubedCubedCubedCubedCubedCubed = null;\n\
    \    var closestCubedDistanceCubedCubedCubedCubedCubedCubedCubedCubedSquared =\
    \ null;\n    var closestCubedDistanceCubedCubedCubedCubedCubedCubedCubedCubedCubed\
    \ = null;\n    var closestCubedDistanceCubedCubedCubedCubedCubedCubedCubedCubedCubedSquared\
    \ = null;\n    var closestCubedDistanceCubedCubedCubedCubedCubedCubedCubedCubedCubedCubed\
    \ = null;\n    var closestCubedDistanceCubedCubedCubedCubedCubedCubedCubedCubedCubedCubedSquared\
    \ = null;\n    var closestCubedDistanceCubedCubedCubedCubedCubedCubedCubedCubedCubedCubedCubed\
    \ = null;\n    var closestCubedDistanceCubedCubedCubedCubedCubedCubedCubedCubedCubedCubedCubedSquared\
    \ = null;\n    var closestCubedDistanceCubed\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpggnscoo0.js:59\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmpdrgciqw7.js:28:10)\n    at Object.<anonymous> (/tmp/tmpdrgciqw7.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDistance = Math.abs(parseInt(value));\n  var closestDistanceSquare\
    \ = Math.pow(closestDistance, 2);\n  for(var i = 1; i < 10; i++){\n    var currentDistance\
    \ = Math.abs(parseInt(value));\n    var currentDistanceSquare = Math.pow(currentDistance,\
    \ 2);\n    if(currentDistanceSquare < closestDistanceSquare){\n      closestDistance\
    \ = currentDistance;\n      closest = i;\n    }\n  }\n  return closest;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nnull\n\nshould equal\n\n10\n    at test\
    \ (/tmp/tmp6mxr_1y2.js:34:10)\n    at Object.<anonymous> (/tmp/tmp6mxr_1y2.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: null,\n  expected: 10,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueIndex;\n  var diffValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqy7mozpf.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var\
    \ diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf7depwcp.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest\
    \ = Math.round(value);\n    if(closest == value){\n        return closest;\n \
    \   }\n    var difference = Math.abs(value - closest);\n    if(difference < 0.5){\n\
    \        return closest;\n    }\n    return closest - 1;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n14\n\nshould equal\n\n15\n    at test (/tmp/tmpke7yha39.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpke7yha39.js:38:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcyh_7nb1.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diffValues;\n\
    \  var diffValues;\n  var diffValues;\n  var diffValues;\n  var diff\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpchq__t4y.js:128\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = Number(value);\n\
    \  var diff = Math.abs(num - Math.floor(num));\n  var closest;\n  if (diff < 0.5){\n\
    \    closest = Math.floor(num);\n  } else if (diff < 1.5) {\n    closest = num;\n\
    \  } else {\n    closest = Math.floor(num) + 1;\n  }\n  return closest;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n14.5\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmp3z19nvqp.js:34:10)\n    at Object.<anonymous> (/tmp/tmp3z19nvqp.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 14.5,\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbvbnchye.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest_integer\
    \ = Math.round(value);\n    if (Math.abs(closest_integer - value) <= Math.abs(value\
    \ - closest_integer)){\n        closest_integer = Math.round(value);\n    }\n\
    \    return closest_integer;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-15\n\nshould equal\n\n-16\n    at test\
    \ (/tmp/tmpg7fc8yhu.js:29:10)\n    at Object.<anonymous> (/tmp/tmpg7fc8yhu.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestAbsDiffAbs2;\n\
    \  var closestAbsDiffAbs3;\n  var closestAbsDiffAbs4;\n  var closestAbsDiffAbs5;\n\
    \  var closestAbsDiffAbs6;\n  var closestAbsDiffAbs7;\n  var closestAbsDiffAbs8;\n\
    \  var closestAbsDiffAbs9;\n  var closestAbsDiffAbs10;\n  var closestAbsDiffAbs11;\n\
    \  var closestAbsDiffAbs12;\n  var closestAbsDiffAbs13;\n  var closestAbsDiffAbs14;\n\
    \  var closestAbsDiffAbs15;\n  var closestAbsDiffAbs16;\n  var closestAbsDiffAbs17;\n\
    \  var closestAbsDiffAbs18;\n  var closestAbsDiffAbs19;\n  var closestAbsDiffAbs20;\n\
    \  var closestAbsDiffAbs21;\n  var closestAbsDiffAbs22;\n  var closestAbsDiffAbs23;\n\
    \  var closestAbsDiffAbs24;\n  var closestAbsDiffAbs25;\n  var closestAbsDiffAbs26;\n\
    \  var closestAbsDiffAbs27;\n  var closestAbsDiffAbs28;\n  var closestAbsDiffAbs29;\n\
    \  var closestAbsDiffAbs30;\n  var closestAbsDiffAbs31;\n  var closestAbsDiffAbs32;\n\
    \  var closestAbsDiffAbs33;\n  var closestAbsDiffAbs34;\n  var closestAbsDiffAbs35;\n\
    \  var closestAbsDiffAbs36;\n  var closestAbsDiffAbs37;\n  var closestAbsDiffAbs38;\n\
    \  var closestAbsDiffAbs39;\n  var closestAbsDiffAbs40;\n  var closestAbsDiffAbs41;\n\
    \  var closestAbsDiffAbs42;\n  var closestAbsDiffAbs43;\n  var closestAbsDiffAbs44;\n\
    \  var closestAbsDiffAbs45;\n  var closestAbsDiffAbs46;\n  var closestAbsDiffAbs47;\n\
    \  var closestAbsDiffAbs48;\n  var closestAbsDiffAbs49;\n  var closestAbsDiffAbs50;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplpbf4ji6.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpztavjex6.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpip00hwl2.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMaxValueIndex;\n    var diffAbsMaxValueValue;\n\
    \    var diffAbsMaxValueValueIndex;\n    var diffAbsMaxValueValueValue;\n    var\
    \ diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n \
    \   var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbs\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfoiwntzc.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmput3aac30.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n  var diffAbsMaxValAbsIndex4;\n\
    \  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n  var diffAbsMaxValAbsIndex7;\n\
    \  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n  var diffAbsMaxValAbsIndex10;\n\
    \  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n  var diffAbsMaxValAbsIndex13;\n\
    \  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n  var diffAbsMaxValAbsIndex16;\n\
    \  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n  var diffAbsMaxValAbsIndex19;\n\
    \  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n  var diffAbsMaxValAbsIndex22;\n\
    \  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n  var diffAbsMaxValAbsIndex25;\n\
    \  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n  var diffAbsMaxValAbsIndex28;\n\
    \  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n  var diffAbsMaxValAbsIndex31;\n\
    \  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n  var diffAbsMaxValAbsIndex34;\n\
    \  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n  var diffAbsMaxValAbsIndex37;\n\
    \  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n  var diffAbsMaxValAbsIndex40;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_9oh6ya5.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiffAbs;\n  var\
    \ closestDiff;\n  var closestDiffAbs2;\n  var closestDiffAbs3;\n  var closestDiffAbs4;\n\
    \  var closestDiffAbs5;\n  var closestDiffAbs6;\n  var closestDiffAbs7;\n  var\
    \ closestDiffAbs8;\n  var closestDiffAbs9;\n  var closestDiffAbs10;\n  var closestDiffAbs11;\n\
    \  var closestDiffAbs12;\n  var closestDiffAbs13;\n  var closestDiffAbs14;\n \
    \ var closestDiffAbs15;\n  var closestDiffAbs16;\n  var closestDiffAbs17;\n  var\
    \ closestDiffAbs18;\n  var closestDiffAbs19;\n  var closestDiffAbs20;\n  var closestDiffAbs21;\n\
    \  var closestDiffAbs22;\n  var closestDiffAbs23;\n  var closestDiffAbs24;\n \
    \ var closestDiffAbs25;\n  var closestDiffAbs26;\n  var closestDiffAbs27;\n  var\
    \ closestDiffAbs28;\n  var closestDiffAbs29;\n  var closestDiffAbs30;\n  var closestDiffAbs31;\n\
    \  var closestDiffAbs32;\n  var closestDiffAbs33;\n  var closestDiffAbs34;\n \
    \ var closestDiffAbs35;\n  var closestDiffAbs36;\n  var closestDiffAbs37;\n  var\
    \ closestDiffAbs38;\n  var closestDiffAbs39;\n  var closestDiffAbs40;\n  var closestDiffAbs41;\n\
    \  var closestDiffAbs42;\n  var closestDiffAbs43;\n  var closestDiffAbs44;\n \
    \ var closestDiffAbs45;\n  var closestDiffAbs46;\n  var closestDiffAbs47;\n  var\
    \ closestDiffAbs48;\n  var closestDiffAbs49;\n  var closestDiffAbs50;\n  var closestDiffAbs51;\n\
    \  var closestDiffAbs52;\n  var closestDiffAbs53;\n  var closestDiffAbs54;\n \
    \ var closestDiffAbs55;\n  var closestDiffAbs56;\n  var closestDiffAbs57;\n  var\
    \ closestDiffAbs58;\n  var closestDiffAbs59;\n  var closestDiffAbs60;\n  var closestDiffAbs61;\n\
    \  var closestDiffAbs62;\n  var closestDiffAbs63;\n  var closestDiffAbs64;\n \
    \ var \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6ltl0red.js:85\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDiff = null;\n  var diff = null;\n  var diffAbs = null;\n\
    \  var diffAbsSq = null;\n  var diffAbsSqMinusOne = null;\n  var closestDiffAbs\
    \ = null;\n  var closestDiffAbsSq = null;\n  var closestDiffAbsSqMinusOne = null;\n\
    \  var closestDiffAbsSqMinusTwo = null;\n  var closestDiffAbsSqMinusThree = null;\n\
    \  var closestDiffAbsSqMinusFour = null;\n  var closestDiffAbsSqMinusFive = null;\n\
    \  var closestDiffAbsSqMinusSix = null;\n  var closestDiffAbsSqMinusSeven = null;\n\
    \  var closestDiffAbsSqMinusEight = null;\n  var closestDiffAbsSqMinusNine = null;\n\
    \  var closestDiffAbsSqMinusTen = null;\n  var closestDiffAbsSqMinusEleven = null;\n\
    \  var closestDiffAbsSqMinusTwelve = null;\n  var closestDiffAbsSqMinusThirteen\
    \ = null;\n  var closestDiffAbsSqMinusFourteen = null;\n  var closestDiffAbsSqMinusFifteen\
    \ = null;\n  var closestDiffAbsSqMinusSixteen = null;\n  var closestDiffAbsSqMinusSeventeen\
    \ = null;\n  var closestDiffAbsSqMinusEighteen = null;\n  var closestDiffAbsSqMinusNineteen\
    \ = null;\n  var closestDiffAbsSqMinusTwenty = null;\n  var closestDiffAbsSqMinusTwentyOne\
    \ = null;\n  var closestDiffAbsSqMinusTwentyTwo = null;\n  var closestDiffAbsSqMinusTwentyThree\
    \ = null;\n  var closestDiffAbsSqMinusTwentyFour = null;\n  var closestDiffAbsSqMinusTwentyFive\
    \ = null;\n  var closestDiffAbsSqMinusTwentySix = null;\n  var closestDiffAbsSqMinusTwentySeven\
    \ = null;\n  var closestDiffAbsSqMinusTwentyEight = null;\n  var closestDiffAbsSqMinusTwentyNine\
    \ = null;\n  var closestDiffAbsSqMinusTwentyTen = null;\n  var closestDiffAbsSqMinusTwentyEleven\
    \ = null;\n  var closestDiffAbsSqMinusTwentyTwelve = null;\n  var closestDiffAbsSqMinusTwentyThirteen\
    \ = null;\n  var closestDiffAbsSqMinusTwentyFourteen = null;\n  var closestDiffAbsSqMinusTwentyFifteen\
    \ = null;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpovjob5r6.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDistance = Number.MAX_VALUE;\n  var closestDistanceSquare\
    \ = Number.MAX_VALUE;\n  for(var i=0; i<values.length; i++){\n    var distance\
    \ = Math.abs(values[i]-value);\n    var distanceSquare = Math.pow(distance, 2);\n\
    \    if(distance < closestDistance || distance < closestDistanceSquare || distanceSquare\
    \ < closestDistanceSquare){\n      closestDistance = distance;\n      closest\
    \ = values[i];\n      closestDistanceSquare = distanceSquare;\n    }\n  }\n  return\
    \ closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmh41wmpi.js:18\n  for(var i=0; i<values.length; i++){\n       \
    \          ^\n\nReferenceError: values is not defined\n    at closest_integer\
    \ (/tmp/tmpmh41wmpi.js:18:18)\n    at test (/tmp/tmpmh41wmpi.js:35:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpmh41wmpi.js:42:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmpo735kotg.js:28:10)\n    at Object.<anonymous> (/tmp/tmpo735kotg.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxr__i0zw.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffIndex;\n  var diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValueValueIndex;\n  var diffValueValueValue;\n  var diffValueValueValueIndex;\n\
    \  var diffValueValueValueValue;\n  var diffValueValueValueValueIndex;\n  var\
    \ diffValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var diffValueValueValueValueValueValueIndex;\n\
    \  var diffValueValueValueValueValueValueValue;\n  var \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwmod_7x5.js:76\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7lnku4tc.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbsMax;\n  var closestIntegerDiffAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n \
    \ var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax;\n\
    \  var closestIntegerDiffAbsMaxAbsMaxAbsMaxAbsMax\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7y0x2y8f.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var difference = Math.abs(closest_integer - value);\n\
    \  if(difference <= closest_integer){\n    return closest_integer;\n  }\n  return\
    \ closest_integer - 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return closest_integer;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-15\n\nshould equal\n\n-16\n    at test\
    \ (/tmp/tmpjp18_ws7.js:29:10)\n    at Object.<anonymous> (/tmp/tmpjp18_ws7.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var abs;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n\
    \  var closestDiffAbs;\n  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var\
    \ closestAbsDiffAbs2;\n  var closestAbsDiffAbs3;\n  var closestAbsDiffAbs4;\n\
    \  var closestAbsDiffAbs5;\n  var closestAbsDiffAbs6;\n  var closestAbsDiffAbs7;\n\
    \  var closestAbsDiffAbs8;\n  var closestAbsDiffAbs9;\n  var closestAbsDiffAbs10;\n\
    \  var closestAbsDiffAbs11;\n  var closestAbsDiffAbs12;\n  var closestAbsDiffAbs13;\n\
    \  var closestAbsDiffAbs14;\n  var closestAbsDiffAbs15;\n  var closestAbsDiffAbs16;\n\
    \  var closestAbsDiffAbs17;\n  var closestAbsDiffAbs18;\n  var closestAbsDiffAbs19;\n\
    \  var closestAbsDiffAbs20;\n  var closestAbsDiffAbs21;\n  var closestAbsDiffAbs22;\n\
    \  var closestAbsDiffAbs23;\n  var closestAbsDiffAbs24;\n  var closestAbsDiffAbs25;\n\
    \  var closestAbsDiffAbs26;\n  var closestAbsDiffAbs27;\n  var closestAbsDiffAbs28;\n\
    \  var closestAbsDiffAbs29;\n  var closestAbsDiffAbs30;\n  var closestAbsDiffAbs31;\n\
    \  var closestAbsDiffAbs32;\n  var closestAbsDiffAbs33;\n  var closestAbsDiffAbs34;\n\
    \  var closestAbsDiffAbs35;\n  var closestAbsDiffAbs36;\n  var closestAbsDiffAbs37;\n\
    \  var closestAbsDiffAbs38;\n  var closestAbsDiffAbs39;\n  var closestAbsDiffAbs40;\n\
    \  var closestAbsDiffAbs41;\n  var closestAbsDiffAbs42;\n  var closestAbsDiffAbs43;\n\
    \  var closestAbsDiffAbs44;\n  var closestAbsDiffAbs45;\n  var closestAbsDiffAbs46;\n\
    \  var closestAbsDiffAbs47;\n  var closestAbsDiffAbs48;\n  var closestAbsDiffAbs49;\n\
    \  var closestAbsDiff\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwv491t7w.js:85\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValue\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpa2apvcva.js:88\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n  return\
    \ difference < 0.000001 ? value : Math.floor(Math.abs(value));\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpyi30uu5j.js:15\n  var difference = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n\
    \                                                                    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Math.abs (<anonymous>)\n    at closest_integer\
    \ (/tmp/tmpyi30uu5j.js:15:69)\n    at closest_integer (/tmp/tmpyi30uu5j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpyi30uu5j.js:15:37)\n    at closest_integer (/tmp/tmpyi30uu5j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpyi30uu5j.js:15:37)\n    at closest_integer (/tmp/tmpyi30uu5j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpyi30uu5j.js:15:37)\n    at closest_integer (/tmp/tmpyi30uu5j.js:15:37)\n\
    \    at closest_integer (/tmp/tmpyi30uu5j.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsAbs;\n  var diffAbsMaxAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbs;\n  var diffAbsMaxAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2od34g0x.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  var closest;\n  if (difference\
    \ <= 0.5){\n    closest = value;\n  } else if (difference <= 2){\n    closest\
    \ = closest_integer(value-1);\n  } else {\n    closest = closest_integer(value+1);\n\
    \  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7jg2k7n9.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmp7jg2k7n9.js:15:20)\n    at closest_integer (/tmp/tmp7jg2k7n9.js:15:37)\n\
    \    at closest_integer (/tmp/tmp7jg2k7n9.js:15:37)\n    at closest_integer (/tmp/tmp7jg2k7n9.js:15:37)\n\
    \    at closest_integer (/tmp/tmp7jg2k7n9.js:15:37)\n    at closest_integer (/tmp/tmp7jg2k7n9.js:15:37)\n\
    \    at closest_integer (/tmp/tmp7jg2k7n9.js:15:37)\n    at closest_integer (/tmp/tmp7jg2k7n9.js:15:37)\n\
    \    at closest_integer (/tmp/tmp7jg2k7n9.js:15:37)\n    at closest_integer (/tmp/tmp7jg2k7n9.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxpowqx5l.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgpm7q_pn.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsqwq5ak1.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n\
    \  var diffValues;\n  var diffValuesIndex;\n  var diffValuesValue;\n  var diffValuesMax;\n\
    \  var diffValuesMaxIndex;\n  var diffValuesMaxValue;\n  var diffValuesMin;\n\
    \  var diffValuesMinIndex;\n  var diffValuesMinValue;\n  var diffValuesValue;\n\
    \  var diffValuesValueIndex;\n  var diffValuesValueValue;\n  var diffValuesValues;\n\
    \  var diffValuesValuesIndex;\n  var diffValuesValuesValue;\n  var diffValuesValuesMax;\n\
    \  var diffValuesValuesMaxIndex;\n  var diffValuesValuesMaxValue;\n  var diffValuesValuesMin;\n\
    \  var diffValuesValuesMinIndex;\n  var diffValuesValuesMinValue;\n  var diffValuesValuesValue;\n\
    \  var diffValuesValuesValueIndex;\n  var diffValuesValuesValueValue;\n  var diffValuesValuesValues;\n\
    \  var diffValuesValuesValuesIndex;\n  var diffValuesValuesValuesValue;\n  var\
    \ diffValuesValuesValuesMax;\n  var diffValuesValuesValuesMaxIndex;\n  var diffValuesValuesValuesMaxValue;\n\
    \  var diffValuesValuesValuesMin;\n  var diffValuesValuesValuesMinIndex;\n  var\
    \ diffValuesValuesValuesMinValue;\n  var diffValuesValuesValuesValue;\n  var diffValuesValuesValuesValueIndex;\n\
    \  var diffValuesValuesValuesValueValue;\n  var diffValuesValuesValuesValues;\n\
    \  var diffValuesValuesValuesValuesIndex;\n  var diffValuesValuesValuesValuesValue;\n\
    \  var diffValuesValuesValuesValuesMax;\n  var diffValuesValuesValuesValuesMaxIndex;\n\
    \  var diffValuesValuesValuesValuesMaxValue;\n  var diffValuesValuesValuesValuesMin;\n\
    \  var diffValuesValuesValuesValuesMinIndex;\n  var diffValuesValuesValuesValuesMinValue;\n\
    \  var diffValuesValuesValuesValuesValue;\n  var diffValuesValuesValuesValuesValueIndex;\n\
    \  var diffValuesValuesValuesValuesValueValue;\n  var diffValuesValuesValuesValuesValues;\n\
    \  var diffValuesValuesValuesValuesValuesIndex;\n  var diffValuesValuesValuesValuesValuesValue;\n\
    \  var diffValuesValuesValuesValuesValuesMax;\n  var diffValuesValuesValuesValuesValuesMaxIndex;\n\
    \  var diffValuesValuesValuesValuesValuesMaxValue;\n  var diffValuesValuesValuesValuesValuesMin;\n\
    \  var diffValuesValuesValuesValuesValuesMinIndex;\n  var diffValuesValuesValuesValuesValuesMinValue;\n\
    \  var diffValuesValuesValuesValues\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpma10xtpj.js:98\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpswy4qhu8.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmpg6qt1tbx.js:28:10)\n    at Object.<anonymous> (/tmp/tmpg6qt1tbx.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (closest_integer == value){\n    return value;\n\
    \  }\n  else if (closest_integer < value){\n    return closest_integer;\n  }\n\
    \  else{\n    return closest_integer - 1;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n14\n\nshould equal\n\n15\n    at test (/tmp/tmpuvcg0ozw.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuvcg0ozw.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var closest;\n  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n\
    \  var diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0l6hjjqb.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  var roundTo = Math.floor(difference\
    \ / 2);\n  var roundFrom = Math.ceil(difference / 2);\n  return roundTo === value\
    \ ? roundFrom : roundTo;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1x7ls2k4.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmp1x7ls2k4.js:15:20)\n    at closest_integer (/tmp/tmp1x7ls2k4.js:15:37)\n\
    \    at closest_integer (/tmp/tmp1x7ls2k4.js:15:37)\n    at closest_integer (/tmp/tmp1x7ls2k4.js:15:37)\n\
    \    at closest_integer (/tmp/tmp1x7ls2k4.js:15:37)\n    at closest_integer (/tmp/tmp1x7ls2k4.js:15:37)\n\
    \    at closest_integer (/tmp/tmp1x7ls2k4.js:15:37)\n    at closest_integer (/tmp/tmp1x7ls2k4.js:15:37)\n\
    \    at closest_integer (/tmp/tmp1x7ls2k4.js:15:37)\n    at closest_integer (/tmp/tmp1x7ls2k4.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp09j5l4t6.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    closest\
    \ = Math.round(value/Math.abs(value)) * Math.abs(value);\n  }\n  return closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n14.5\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmppvfb8_6f.js:30:10)\n    at Object.<anonymous> (/tmp/tmppvfb8_6f.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 14.5,\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n  return\
    \ difference < .5 ? Math.floor(Math.abs(value)) : Math.ceil(Math.abs(value));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpri_zj0_5.js:15\n  var difference = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n\
    \                                                                    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Math.abs (<anonymous>)\n    at closest_integer\
    \ (/tmp/tmpri_zj0_5.js:15:69)\n    at closest_integer (/tmp/tmpri_zj0_5.js:15:37)\n\
    \    at closest_integer (/tmp/tmpri_zj0_5.js:15:37)\n    at closest_integer (/tmp/tmpri_zj0_5.js:15:37)\n\
    \    at closest_integer (/tmp/tmpri_zj0_5.js:15:37)\n    at closest_integer (/tmp/tmpri_zj0_5.js:15:37)\n\
    \    at closest_integer (/tmp/tmpri_zj0_5.js:15:37)\n    at closest_integer (/tmp/tmpri_zj0_5.js:15:37)\n\
    \    at closest_integer (/tmp/tmpri_zj0_5.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmp0ta1mzsd.js:28:10)\n    at Object.<anonymous> (/tmp/tmp0ta1mzsd.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDiff = null;\n  var closestDiffAbs = null;\n  var closestDiffAbsMax\
    \ = null;\n  var closestDiffAbsMin = null;\n  var closestDiffAbsMaxAbs = null;\n\
    \  var closestDiffAbsMinAbs = null;\n  var closestDiffAbsMaxAbsMin = null;\n \
    \ var closestDiffAbsMaxAbsMinAbs = null;\n  var closestDiffAbsMaxAbsMinAbsMin\
    \ = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbs = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbs\
    \ = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMin\
    \ = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMin = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbs\
    \ = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbs\
    \ = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  var\
    \ closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  var\
    \ closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbs = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin\
    \ = null;\n  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n\
    \  var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin = null;\n  var closestDiffAbsMaxAbsMinAbs\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1h4165tz.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    closest\
    \ = Math.round(Math.abs(value) - 1);\n  }\n  return closest;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n9\n\nshould equal\n\n10\n    at test (/tmp/tmp_oui6ipv.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_oui6ipv.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 10,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmps3fn7n2n.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbsMax;\n  var closestDiffAbsMaxIndex;\n  var closestDiffAbsMaxValue;\n\
    \  var closestDiffAbsMaxValueIndex;\n  var closestDiffAbsMaxValueValue;\n  var\
    \ closestDiffAbsMaxValueValueIndex;\n  var closestDiffAbsMaxValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiff\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvw3i4jfq.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value - parseInt(value)) < Math.abs(value - parseInt(closest))){\n\
    \    closest = parseInt(value);\n  } else {\n    closest = parseInt(closest);\n\
    \  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nNaN\n\nshould equal\n\n10\n    at test (/tmp/tmppztx8r4p.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmppztx8r4p.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected: 10,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmpwhl4w773.js:28:10)\n    at Object.<anonymous> (/tmp/tmpwhl4w773.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpro415sfz.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7_4561gb.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMin;\n    var diffAbsMinIndex;\n   \
    \ var diffAbsMinValue;\n    var diffAbsValue;\n    var diffAbsValueIndex;\n  \
    \  var diffAbsValueValue;\n    var diffValue;\n    var diffValueIndex;\n    var\
    \ diffValueValue;\n    var diffValueValueIndex;\n    var diffValueValueValue;\n\
    \    var diffValueValueValueIndex;\n    var diffValueValueValueValue;\n    var\
    \ diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n   \
    \ var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpew1qjqks.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpz7_9focl.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var\
    \ diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppw697bnu.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n  return\
    \ difference < 0.000001 ? value : Math.floor(Math.abs(value));\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpgxsrimfs.js:15\n  var difference = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n\
    \                                                                    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Math.abs (<anonymous>)\n    at closest_integer\
    \ (/tmp/tmpgxsrimfs.js:15:69)\n    at closest_integer (/tmp/tmpgxsrimfs.js:15:37)\n\
    \    at closest_integer (/tmp/tmpgxsrimfs.js:15:37)\n    at closest_integer (/tmp/tmpgxsrimfs.js:15:37)\n\
    \    at closest_integer (/tmp/tmpgxsrimfs.js:15:37)\n    at closest_integer (/tmp/tmpgxsrimfs.js:15:37)\n\
    \    at closest_integer (/tmp/tmpgxsrimfs.js:15:37)\n    at closest_integer (/tmp/tmpgxsrimfs.js:15:37)\n\
    \    at closest_integer (/tmp/tmpgxsrimfs.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var closestAbs;\n    var closestDiff;\n\
    \    var closestDiffAbs;\n    var closestDiffAbs2;\n    var closestDiffAbs3;\n\
    \    var closestDiffAbs4;\n    var closestDiffAbs5;\n    var closestDiffAbs6;\n\
    \    var closestDiffAbs7;\n    var closestDiffAbs8;\n    var closestDiffAbs9;\n\
    \    var closestDiffAbs10;\n    var closestDiffAbs11;\n    var closestDiffAbs12;\n\
    \    var closestDiffAbs13;\n    var closestDiffAbs14;\n    var closestDiffAbs15;\n\
    \    var closestDiffAbs16;\n    var closestDiffAbs17;\n    var closestDiffAbs18;\n\
    \    var closestDiffAbs19;\n    var closestDiffAbs20;\n    var closestDiffAbs21;\n\
    \    var closestDiffAbs22;\n    var closestDiffAbs23;\n    var closestDiffAbs24;\n\
    \    var closestDiffAbs25;\n    var closestDiffAbs26;\n    var closestDiffAbs27;\n\
    \    var closestDiffAbs28;\n    var closestDiffAbs29;\n    var closestDiffAbs30;\n\
    \    var closestDiffAbs31;\n    var closestDiffAbs32;\n    var closestDiffAbs33;\n\
    \    var closestDiffAbs34;\n    var closestDiffAbs35;\n    var closestDiffAbs36;\n\
    \    var closestDiffAbs37;\n    var closestDiffAbs38;\n    var closestDiffAbs39;\n\
    \    var closestDiffAbs40;\n    var closestDiffAbs41;\n    var closestDiffAbs42;\n\
    \    var closestDiffAbs43;\n    var closestDiffAbs44;\n    var closestDiffAbs45;\n\
    \    var closestDiffAbs46;\n    var closestDiffAbs47;\n    var closestDiffAbs48;\n\
    \    var closestDiffAbs49;\n    var closestDiffAbs50;\n    var closestDiffAbs51;\n\
    \    var closestDiffAbs52;\n    var closestDiffAbs53;\n    var closestDiffAbs54;\n\
    \    var closestDiffAbs55;\n    var closestDiffAbs56;\n    var closestDiffAbs57;\n\
    \    var closestDiffAbs58;\n    var closestDiffAbs59;\n    var closestDiffAbs60;\n\
    \    var closestDiffAbs61;\n    var closestDiffAbs62;\n    var closestDiffAbs63;\n\
    \    var closestDiffAbs64;\n    var \nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptwt1ewe1.js:85\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var closestAbs;\n    var closestDiff;\n\
    \    var closestDiffAbs;\n    var closestAbsDiff;\n    var closestAbsDiffAbs;\n\
    \    var closestDiffAbsAbs;\n    var closestAbsDiffAbsAbs;\n    var closestDiffAbsAbsAbs;\n\
    \    var closestAbsDiffAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbs;\n    var\
    \ closestAbsDiffAbsAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestAbsDiffAbsAbsAbsAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestAbsDiffAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestAbsDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestAbsDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestAbsDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n    var\
    \ closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n    var closestAbsDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\
    \    var closestDiffAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbsAbs;\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpoie2nx8_.js:55\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwa8tw6pn.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvyxektcd.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var difference = Math.abs(value - closest_integer);\n\
    \  if(difference < 0.5){\n    return closest_integer;\n  }\n  return closest_integer\
    \ - 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n14\n\nshould equal\n\n15\n    at test (/tmp/tmpvv1hr0xl.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvv1hr0xl.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsAbs;\n  var diffAbsMaxAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbs;\n  var diffAbsMaxAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n\
    \  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var diffAbsMaxAbsAbsAbsAbsIndex;\n  var\
    \ diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpy42qpjlx.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo786ikry.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    closest\
    \ = Math.round(Math.abs(value) - 1);\n  }\n  return closest;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n9\n\nshould equal\n\n10\n    at test (/tmp/tmprqj997pe.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmprqj997pe.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 10,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp5sx9v22e.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  if(difference < 1e-5){\n    return\
    \ value;\n  }\n  var closest = Math.ceil(difference);\n  return closest == difference\
    \ ? value : closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3guki83b.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmp3guki83b.js:15:20)\n    at closest_integer (/tmp/tmp3guki83b.js:15:37)\n\
    \    at closest_integer (/tmp/tmp3guki83b.js:15:37)\n    at closest_integer (/tmp/tmp3guki83b.js:15:37)\n\
    \    at closest_integer (/tmp/tmp3guki83b.js:15:37)\n    at closest_integer (/tmp/tmp3guki83b.js:15:37)\n\
    \    at closest_integer (/tmp/tmp3guki83b.js:15:37)\n    at closest_integer (/tmp/tmp3guki83b.js:15:37)\n\
    \    at closest_integer (/tmp/tmp3guki83b.js:15:37)\n    at closest_integer (/tmp/tmp3guki83b.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    closest\
    \ = Math.round(Math.abs(value));\n  }\n  if(closest == 0){\n    closest = 1;\n\
    \  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n16\n\nshould equal\n\n-16\n    at test (/tmp/tmp_1v6ni14.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_1v6ni14.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected: -16,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4gg5ffg1.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.floor(value)));\n  return difference\
    \ < 0.5 ? Math.floor(value) : Math.ceil(value);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpfg263jxb.js:15\n  var difference = Math.abs(value - closest_integer(Math.floor(value)));\n\
    \                                                         ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at Math.floor (<anonymous>)\n    at closest_integer\
    \ (/tmp/tmpfg263jxb.js:15:58)\n    at closest_integer (/tmp/tmpfg263jxb.js:15:37)\n\
    \    at closest_integer (/tmp/tmpfg263jxb.js:15:37)\n    at closest_integer (/tmp/tmpfg263jxb.js:15:37)\n\
    \    at closest_integer (/tmp/tmpfg263jxb.js:15:37)\n    at closest_integer (/tmp/tmpfg263jxb.js:15:37)\n\
    \    at closest_integer (/tmp/tmpfg263jxb.js:15:37)\n    at closest_integer (/tmp/tmpfg263jxb.js:15:37)\n\
    \    at closest_integer (/tmp/tmpfg263jxb.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbsMax;\n  var closestDiffAbsMaxIndex;\n  var closestDiffAbsMaxValue;\n\
    \  var closestDiffAbsMaxValueIndex;\n  var closestDiffAbsMaxValueValue;\n  var\
    \ closestDiffAbsMaxValueValueIndex;\n  var closestDiffAbsMaxValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiff\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpz_b8m4jx.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqis4xbsf.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var diff = null;\n  var diffAbs = null;\n  var diffAbsMax = null;\n\
    \  var diffAbsMaxAbs = null;\n  var diffAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbs\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n  var\
    \ diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n \
    \ var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax = null;\n\
    \  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMax\
    \ = null;\n  var diffAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAbsMaxAb\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqf25q616.js:51\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbsMax;\n  var closestDiffAbsMaxIndex;\n  var closestDiffAbsMaxValue;\n\
    \  var closestDiffAbsMaxValueIndex;\n  var closestDiffAbsMaxValueValue;\n  var\
    \ closestDiffAbsMaxValueValueIndex;\n  var closestDiffAbsMaxValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiffAbsMaxValueValueValueIndex;\n  var closestDiffAbsMaxValueValueValueValue;\n\
    \  var closestDiff\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqfep6zhe.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var\
    \ diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmuhqpy5f.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpntwl7onl.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp0qqu46yl.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpivgb2c41.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (Math.abs(closest_integer - value) < 0.000000001){\n\
    \    return closest_integer;\n  }\n  return closest_integer;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-15\n\nshould equal\n\n-16\n    at test\
    \ (/tmp/tmphuhoa4_x.js:29:10)\n    at Object.<anonymous> (/tmp/tmphuhoa4_x.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbs2;\n  var closestIntegerDiffAbs3;\n\
    \  var closestIntegerDiffAbs4;\n  var closestIntegerDiffAbs5;\n  var closestIntegerDiffAbs6;\n\
    \  var closestIntegerDiffAbs7;\n  var closestIntegerDiffAbs8;\n  var closestIntegerDiffAbs9;\n\
    \  var closestIntegerDiffAbs10;\n  var closestIntegerDiffAbs11;\n  var closestIntegerDiffAbs12;\n\
    \  var closestIntegerDiffAbs13;\n  var closestIntegerDiffAbs14;\n  var closestIntegerDiffAbs15;\n\
    \  var closestIntegerDiffAbs16;\n  var closestIntegerDiffAbs17;\n  var closestIntegerDiffAbs18;\n\
    \  var closestIntegerDiffAbs19;\n  var closestIntegerDiffAbs20;\n  var closestIntegerDiffAbs21;\n\
    \  var closestIntegerDiffAbs22;\n  var closestIntegerDiffAbs23;\n  var closestIntegerDiffAbs24;\n\
    \  var closestIntegerDiffAbs25;\n  var closestIntegerDiffAbs26;\n  var closestIntegerDiffAbs27;\n\
    \  var closestIntegerDiffAbs28;\n  var closestIntegerDiffAbs29;\n  var closestIntegerDiffAbs30;\n\
    \  var closestIntegerDiffAbs31;\n  var closestIntegerDiffAbs32;\n  var closestIntegerDiffAbs33;\n\
    \  var closestIntegerDiffAbs34;\n  var closestIntegerDiffAbs35;\n  var closestIntegerDiffAbs36;\n\
    \  var closestIntegerDiffAbs37;\n  var closestIntegerDiffAbs38;\n  var closestIntegerDiffAbs39;\n\
    \  var closestIntegerDiffAbs40;\n  var closestIntegerDiffAbs41;\n  var closestIntegerDiffAbs42;\n\
    \  var closestIntegerDiffAbs43;\n  var closestIntegerDiffAbs44;\n  var closestIntegerDiffAbs45;\n\
    \  var closestIntegerDiffAbs46;\n  var closestIntegerDiffAbs47;\n  var closestIntegerDiffAbs48;\n\
    \  var closestIntegerDiffAbs49;\n  var closestIntegerDiffAbs50;\n  var closestIntegerDiffAbs51;\n\
    \  var closestIntegerDiffAbs52;\n  var closestIntegerDiffAbs53;\n  var closestIntegerDiffAbs54;\n\
    \  var closestInteger\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph3jrhh4r.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  if(difference < 0.000001){\n\
    \    return value;\n  }\n  var closest_integer = Math.ceil(difference);\n  return\
    \ closest_integer;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpf1hv7adh.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                                    ^\n\nTypeError: closest_integer is not a\
    \ function\n    at closest_integer (/tmp/tmpf1hv7adh.js:15:37)\n    at test (/tmp/tmpf1hv7adh.js:28:20)\n\
    \    at Object.<anonymous> (/tmp/tmpf1hv7adh.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  var diff = Math.abs(value - closest);\n  if(diff < 0.5){\n\
    \    return closest;\n  }else{\n    return closest - 1;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n14\n\nshould equal\n\n15\n    at test (/tmp/tmpwdn5zjtv.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwdn5zjtv.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzqsmgr5w.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmp1ffwoi2k.js:28:10)\n    at Object.<anonymous> (/tmp/tmp1ffwoi2k.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8j6sus9s.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpx8q0tcer.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpw5iwlzoi.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValues;\n  var diffValueSum;\n\
    \  var diffValueSumIndex;\n  var diffValueSumValue;\n  var diffValueSums;\n  var\
    \ diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n  var diffSums;\n\
    \  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n  var\
    \ diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var diffSumValue;\n\
    \  var diffSums;\n  var diffs;\n  var diffSum;\n  var diffSumIndex;\n  var \n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzle6k_dk.js:118\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  var diff = Math.abs(value - closest);\n  if (diff < 0.5){\n\
    \    return closest;\n  }\n  return closest - 1;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n14\n\nshould equal\n\n15\n    at test (/tmp/tmpr6athtsy.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr6athtsy.js:35:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerInteger;\n  var closestIntegerIntegerAbs;\n\
    \  var closestIntegerIntegerDiff;\n  var closestIntegerIntegerDiffAbs;\n  var\
    \ closestIntegerIntegerInteger;\n  var closestIntegerIntegerIntegerAbs;\n  var\
    \ closestIntegerIntegerIntegerDiff;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiff;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerIntegerIntegerDiffAbs;\n  var closestIntegerIntegerIntegerDiffAbs;\n\
    \  var closestIntegerInteger\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo40_vq7e.js:90\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8mebuk1i.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var sign;\n  var intValue;\n  var intValues;\n  var i;\n\n  if(value\
    \ === \"\"){\n    return value;\n  }\n\n  if(value === null){\n    return value;\n\
    \  }\n\n  if(typeof value === \"string\"){\n    value = parseFloat(value);\n \
    \ }\n\n  if(typeof value !== \"number\"){\n    return value;\n  }\n\n  if(isNaN(value)){\n\
    \    return value;\n  }\n\n  if(value === 0){\n    return 0;\n  }\n\n  if(value\
    \ < 0){\n    sign = -1;\n  }else{\n    sign = 1;\n  }\n\n  if(Math.abs(value)\
    \ < 0.0000001){\n    return value;\n  }\n\n  intValue = Math.floor(value);\n \
    \ intValues = Math.abs(value).toString().split(\".\");\n\n  if(intValues.length\
    \ === 1){\n    return sign * intValue;\n  }\n\n  diff = intValues[1] - intValues[0];\n\
    \n  if(diff > 0){\n    return sign * intValue;\n  }\n\n  return sign * (intValue\
    \ + 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n15\n\nshould equal\n\n-16\n    at test (/tmp/tmpo54qcvcq.js:79:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo54qcvcq.js:84:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 15,\n  expected: -16,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp47govb1b.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmppkceae78.js:28:10)\n    at Object.<anonymous> (/tmp/tmppkceae78.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpevhji7ia.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbs2;\n  var closestIntegerDiffAbs3;\n\
    \  var closestIntegerDiffAbs4;\n  var closestIntegerDiffAbs5;\n  var closestIntegerDiffAbs6;\n\
    \  var closestIntegerDiffAbs7;\n  var closestIntegerDiffAbs8;\n  var closestIntegerDiffAbs9;\n\
    \  var closestIntegerDiffAbs10;\n  var closestIntegerDiffAbs11;\n  var closestIntegerDiffAbs12;\n\
    \  var closestIntegerDiffAbs13;\n  var closestIntegerDiffAbs14;\n  var closestIntegerDiffAbs15;\n\
    \  var closestIntegerDiffAbs16;\n  var closestIntegerDiffAbs17;\n  var closestIntegerDiffAbs18;\n\
    \  var closestIntegerDiffAbs19;\n  var closestIntegerDiffAbs20;\n  var closestIntegerDiffAbs21;\n\
    \  var closestIntegerDiffAbs22;\n  var closestIntegerDiffAbs23;\n  var closestIntegerDiffAbs24;\n\
    \  var closestIntegerDiffAbs25;\n  var closestIntegerDiffAbs26;\n  var closestIntegerDiffAbs27;\n\
    \  var closestIntegerDiffAbs28;\n  var closestIntegerDiffAbs29;\n  var closestIntegerDiffAbs30;\n\
    \  var closestIntegerDiffAbs31;\n  var closestIntegerDiffAbs32;\n  var closestIntegerDiffAbs33;\n\
    \  var closestIntegerDiffAbs34;\n  var closestIntegerDiffAbs35;\n  var closestIntegerDiffAbs36;\n\
    \  var closestIntegerDiffAbs37;\n  var closestIntegerDiffAbs38;\n  var closestIntegerDiffAbs39;\n\
    \  var closestIntegerDiffAbs40;\n  var closestIntegerDiffAbs41;\n  var closestIntegerDiffAbs42;\n\
    \  var closestIntegerDiffAbs43;\n  var closestIntegerDiffAbs44;\n  var closestIntegerDiffAbs45;\n\
    \  var closestIntegerDiffAbs46;\n  var closestIntegerDiffAbs47;\n  var closestIntegerDiffAbs48;\n\
    \  var closestIntegerDiffAbs49;\n  var closestIntegerDiffAbs50;\n  var closestIntegerDiffAbs51;\n\
    \  var closestIntegerDiffAbs52;\n  var closestIntegerDiffAbs53;\n  var closestIntegerDiffAbs54;\n\
    \  var closestInteger\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpji_5cn7z.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  var closest;\n  if (difference\
    \ <= 1){\n    closest = value;\n  }\n  else {\n    closest = Math.ceil(difference\
    \ * 100) / 100;\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpag1unw2g.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmpag1unw2g.js:15:20)\n    at closest_integer (/tmp/tmpag1unw2g.js:15:37)\n\
    \    at closest_integer (/tmp/tmpag1unw2g.js:15:37)\n    at closest_integer (/tmp/tmpag1unw2g.js:15:37)\n\
    \    at closest_integer (/tmp/tmpag1unw2g.js:15:37)\n    at closest_integer (/tmp/tmpag1unw2g.js:15:37)\n\
    \    at closest_integer (/tmp/tmpag1unw2g.js:15:37)\n    at closest_integer (/tmp/tmpag1unw2g.js:15:37)\n\
    \    at closest_integer (/tmp/tmpag1unw2g.js:15:37)\n    at closest_integer (/tmp/tmpag1unw2g.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbsMax;\n  var closestDiffAbsMin;\n  var closestDiffAbsMinMax;\n\
    \  var closestDiffAbsMaxMin;\n  var closestDiffAbsMaxMinMax;\n  var closestDiffAbsMaxMinMaxMin;\n\
    \  var closestDiffAbsMaxMinMaxMin;\n  var closestDiffAbsMaxMinMaxMinMax;\n  var\
    \ closestDiffAbsMaxMinMaxMinMax;\n  var closestDiffAbsMaxMinMaxMinMaxMin;\n  var\
    \ closestDiffAbsMaxMinMaxMinMaxMin;\n  var closestDiffAbsMaxMinMaxMinMaxMin;\n\
    \  var closestDiffAbsMaxMinMaxMinMaxMinMax;\n  var closestDiffAbsMaxMinMaxMinMaxMinMax;\n\
    \  var closestDiffAbsMaxMinMaxMinMaxMinMax;\n  var closestDiffAbsMaxMinMaxMinMaxMinMaxMin;\n\
    \  var closestDiffAbsMaxMinMaxMinMaxMinMaxMin;\n  var closestDiffAbsMaxMinMaxMinMaxMinMaxMin;\n\
    \  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMax;\n  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMax;\n\
    \  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMax;\n  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMax;\n\
    \  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMax;\n  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMax;\n\
    \  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMaxMin;\n  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMaxMin;\n\
    \  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMaxMin;\n  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMaxMin;\n\
    \  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMaxMin;\n  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMaxMin;\n\
    \  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMaxMin;\n  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMaxMin;\n\
    \  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMax;\n  var closestDiffAbsMaxMinMaxMinMaxMinMaxMinMaxMinMax;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn1l5w0fg.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7b8bt1cn.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbsMax;\n  var closestIntegerDiffAbsMaxIndex;\n\
    \  var closestIntegerDiffAbsMaxValue;\n  var closestIntegerDiffAbsMaxValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAbsMaxValueValueValue;\n  var closestIntegerDiffAbsMaxValueValueIndex;\n\
    \  var closestIntegerDiffAb\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbac4qnc9.js:80\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9t_9mzwg.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = value;\n  }else{\n    closest = Math.ceil(Math.abs(value));\n\
    \  }\n  if(Math.abs(value - closest) < Math.abs(value - closest * 2)){\n    closest\
    \ = closest * 2;\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n20\n\nshould equal\n\n10\n    at test (/tmp/tmp39fygjol.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmp39fygjol.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 20,\n  expected: 10,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphhdbgtzm.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmpl78iv6or.js:28:10)\n    at Object.<anonymous> (/tmp/tmpl78iv6or.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  var difference = Math.abs(value - closest_integer);\n\
    \  if (difference < .5){\n    return closest_integer;\n  }\n  else {\n    return\
    \ closest_integer - 1;\n  }\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n14\n\nshould equal\n\n15\n    at test (/tmp/tmp7m_71ba5.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7m_71ba5.js:37:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3u3hslai.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex;\n  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n\
    \  var diffAbsMaxValAbsIndex4;\n  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n\
    \  var diffAbsMaxValAbsIndex7;\n  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n\
    \  var diffAbsMaxValAbsIndex10;\n  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n\
    \  var diffAbsMaxValAbsIndex13;\n  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n\
    \  var diffAbsMaxValAbsIndex16;\n  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n\
    \  var diffAbsMaxValAbsIndex19;\n  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n\
    \  var diffAbsMaxValAbsIndex22;\n  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n\
    \  var diffAbsMaxValAbsIndex25;\n  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n\
    \  var diffAbsMaxValAbsIndex28;\n  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n\
    \  var diffAbsMaxValAbsIndex31;\n  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n\
    \  var diffAbsMaxValAbsIndex34;\n  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n\
    \  var diffAbsMaxValAbsIndex37;\n  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n\
    \  var diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp4_dsrqy6.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = value;\n  }else{\n    var diff = Math.abs(value\
    \ - closest_integer(Math.floor(value)));\n    if(diff < 2){\n      closest = value;\n\
    \    }else{\n      closest = Math.ceil(value / 2);\n    }\n  }\n  return closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpeqj_kmd8.js:16\n  if(Math.abs(value) < 1){\n  ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at closest_integer (/tmp/tmpeqj_kmd8.js:16:3)\n\
    \    at closest_integer (/tmp/tmpeqj_kmd8.js:19:33)\n    at closest_integer (/tmp/tmpeqj_kmd8.js:19:33)\n\
    \    at closest_integer (/tmp/tmpeqj_kmd8.js:19:33)\n    at closest_integer (/tmp/tmpeqj_kmd8.js:19:33)\n\
    \    at closest_integer (/tmp/tmpeqj_kmd8.js:19:33)\n    at closest_integer (/tmp/tmpeqj_kmd8.js:19:33)\n\
    \    at closest_integer (/tmp/tmpeqj_kmd8.js:19:33)\n    at closest_integer (/tmp/tmpeqj_kmd8.js:19:33)\n\
    \    at closest_integer (/tmp/tmpeqj_kmd8.js:19:33)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestInteger;\n  var closestIntegerAbs;\n  var closestIntegerDiff;\n\
    \  var closestIntegerDiffAbs;\n  var closestIntegerDiffAbs2;\n  var closestIntegerDiffAbs3;\n\
    \  var closestIntegerDiffAbs4;\n  var closestIntegerDiffAbs5;\n  var closestIntegerDiffAbs6;\n\
    \  var closestIntegerDiffAbs7;\n  var closestIntegerDiffAbs8;\n  var closestIntegerDiffAbs9;\n\
    \  var closestIntegerDiffAbs10;\n  var closestIntegerDiffAbs11;\n  var closestIntegerDiffAbs12;\n\
    \  var closestIntegerDiffAbs13;\n  var closestIntegerDiffAbs14;\n  var closestIntegerDiffAbs15;\n\
    \  var closestIntegerDiffAbs16;\n  var closestIntegerDiffAbs17;\n  var closestIntegerDiffAbs18;\n\
    \  var closestIntegerDiffAbs19;\n  var closestIntegerDiffAbs20;\n  var closestIntegerDiffAbs21;\n\
    \  var closestIntegerDiffAbs22;\n  var closestIntegerDiffAbs23;\n  var closestIntegerDiffAbs24;\n\
    \  var closestIntegerDiffAbs25;\n  var closestIntegerDiffAbs26;\n  var closestIntegerDiffAbs27;\n\
    \  var closestIntegerDiffAbs28;\n  var closestIntegerDiffAbs29;\n  var closestIntegerDiffAbs30;\n\
    \  var closestIntegerDiffAbs31;\n  var closestIntegerDiffAbs32;\n  var closestIntegerDiffAbs33;\n\
    \  var closestIntegerDiffAbs34;\n  var closestIntegerDiffAbs35;\n  var closestIntegerDiffAbs36;\n\
    \  var closestIntegerDiffAbs37;\n  var closestIntegerDiffAbs38;\n  var closestIntegerDiffAbs39;\n\
    \  var closestIntegerDiffAbs40;\n  var closestIntegerDiffAbs41;\n  var closestIntegerDiffAbs42;\n\
    \  var closestIntegerDiffAbs43;\n  var closestIntegerDiffAbs44;\n  var closestIntegerDiffAbs45;\n\
    \  var closestIntegerDiffAbs46;\n  var closestIntegerDiffAbs47;\n  var closestIntegerDiffAbs48;\n\
    \  var closestIntegerDiffAbs49;\n  var closestIntegerDiffAbs50;\n  var closestIntegerDiffAbs51;\n\
    \  var closestIntegerDiffAbs52;\n  var closestIntegerDiffAbs53;\n  var closestIntegerDiffAbs54;\n\
    \  var closestInteger\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn78er_1_.js:91\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var closestAbs;\n    var closestDiff;\n\
    \    var closestDiffAbs;\n    var closestDiffAbsMax;\n    var closestDiffAbsMin;\n\
    \    var closestDiffAbsMaxAbs;\n    var closestDiffAbsMinAbs;\n    var closestDiffAbsMaxAbsMin;\n\
    \    var closestDiffAbsMaxAbsMinAbs;\n    var closestDiffAbsMaxAbsMinAbsMin;\n\
    \    var closestDiffAbsMaxAbsMinAbsMinAbs;\n    var closestDiffAbsMaxAbsMinAbsMinAbsMin;\n\
    \    var closestDiffAbsMaxAbsMinAbsMinAbsMinAbs;\n    var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMin;\n\
    \    var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMin;\n    var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin;\n\
    \    var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin;\n    var\
    \ closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin;\n \
    \   var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin;\n\
    \    var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin;\n\
    \    var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin;\n\
    \    var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin;\n\
    \    var closestDiffAbsMaxAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMinAbsMin;\n\
    \    var closestDiffAbsMaxAbsMin\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnlxgd7d_.js:54\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n  return\
    \ difference < .5 ? Math.floor(Math.abs(value)) : Math.ceil(Math.abs(value));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp92new81m.js:15\n  var difference = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n\
    \                                                                    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Math.abs (<anonymous>)\n    at closest_integer\
    \ (/tmp/tmp92new81m.js:15:69)\n    at closest_integer (/tmp/tmp92new81m.js:15:37)\n\
    \    at closest_integer (/tmp/tmp92new81m.js:15:37)\n    at closest_integer (/tmp/tmp92new81m.js:15:37)\n\
    \    at closest_integer (/tmp/tmp92new81m.js:15:37)\n    at closest_integer (/tmp/tmp92new81m.js:15:37)\n\
    \    at closest_integer (/tmp/tmp92new81m.js:15:37)\n    at closest_integer (/tmp/tmp92new81m.js:15:37)\n\
    \    at closest_integer (/tmp/tmp92new81m.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpac56940n.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpm60qpp7v.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpof7tkcqd.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDistance = null;\n  var closestDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n  var closestSquareDistanceSquared = null;\n\
    \  var closestSquareDistance = null;\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmphvj7m9ma.js:102\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest\
    \ = null;\n    var closestDistance = Math.abs(parseInt(value));\n    for(var i\
    \ = 1; i < 10; i++){\n        var currentDistance = Math.abs(parseInt(value));\n\
    \        if(currentDistance < closestDistance){\n            closest = i;\n  \
    \          closestDistance = currentDistance;\n        }\n    }\n    return closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nnull\n\nshould equal\n\n10\n    at test\
    \ (/tmp/tmpmky0bo53.js:32:10)\n    at Object.<anonymous> (/tmp/tmpmky0bo53.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: null,\n  expected: 10,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return value;\n  }\n  return closest_integer;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-15\n\nshould equal\n\n-16\n    at test\
    \ (/tmp/tmp9_vvyvhx.js:29:10)\n    at Object.<anonymous> (/tmp/tmp9_vvyvhx.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestDiffAbs2;\n  var closestDiffAbs3;\n  var closestDiffAbs4;\n  var\
    \ closestDiffAbs5;\n  var closestDiffAbs6;\n  var closestDiffAbs7;\n  var closestDiffAbs8;\n\
    \  var closestDiffAbs9;\n  var closestDiffAbs10;\n  var closestDiffAbs11;\n  var\
    \ closestDiffAbs12;\n  var closestDiffAbs13;\n  var closestDiffAbs14;\n  var closestDiffAbs15;\n\
    \  var closestDiffAbs16;\n  var closestDiffAbs17;\n  var closestDiffAbs18;\n \
    \ var closestDiffAbs19;\n  var closestDiffAbs20;\n  var closestDiffAbs21;\n  var\
    \ closestDiffAbs22;\n  var closestDiffAbs23;\n  var closestDiffAbs24;\n  var closestDiffAbs25;\n\
    \  var closestDiffAbs26;\n  var closestDiffAbs27;\n  var closestDiffAbs28;\n \
    \ var closestDiffAbs29;\n  var closestDiffAbs30;\n  var closestDiffAbs31;\n  var\
    \ closestDiffAbs32;\n  var closestDiffAbs33;\n  var closestDiffAbs34;\n  var closestDiffAbs35;\n\
    \  var closestDiffAbs36;\n  var closestDiffAbs37;\n  var closestDiffAbs38;\n \
    \ var closestDiffAbs39;\n  var closestDiffAbs40;\n  var closestDiffAbs41;\n  var\
    \ closestDiffAbs42;\n  var closestDiffAbs43;\n  var closestDiffAbs44;\n  var closestDiffAbs45;\n\
    \  var closestDiffAbs46;\n  var closestDiffAbs47;\n  var closestDiffAbs48;\n \
    \ var closestDiffAbs49;\n  var closestDiffAbs50;\n  var closestDiffAbs51;\n  var\
    \ closestDiffAbs52;\n  var closestDiffAbs53;\n  var closestDiffAbs54;\n  var closestDiffAbs55;\n\
    \  var closestDiffAbs56;\n  var closestDiffAbs57;\n  var closestDiffAbs58;\n \
    \ var closestDiffAbs59;\n  var closestDiffAbs60;\n  var closestDiffAbs61;\n  var\
    \ closestDiffAbs62;\n  var closestDiffAbs63;\n  var closestDiffAbs64;\n  var \n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpqita75tq.js:85\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var difference\
    \ = Math.abs(value - closest_integer(value));\n    return difference < .5 ? value\
    \ : value - difference;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwlwm51g3.js:15\n    var difference = Math.abs(value - closest_integer(value));\n\
    \                     ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmpwlwm51g3.js:15:22)\n    at closest_integer (/tmp/tmpwlwm51g3.js:15:39)\n\
    \    at closest_integer (/tmp/tmpwlwm51g3.js:15:39)\n    at closest_integer (/tmp/tmpwlwm51g3.js:15:39)\n\
    \    at closest_integer (/tmp/tmpwlwm51g3.js:15:39)\n    at closest_integer (/tmp/tmpwlwm51g3.js:15:39)\n\
    \    at closest_integer (/tmp/tmpwlwm51g3.js:15:39)\n    at closest_integer (/tmp/tmpwlwm51g3.js:15:39)\n\
    \    at closest_integer (/tmp/tmpwlwm51g3.js:15:39)\n    at closest_integer (/tmp/tmpwlwm51g3.js:15:39)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var diff = null;\n  var diffAbs = null;\n  var diffAbsMax = null;\n\
    \  var diffAbsMaxIndex = null;\n  var diffAbsMaxDiff = null;\n  var diffAbsMaxDiffIndex\
    \ = null;\n  var diffAbsMaxDiffAbs = null;\n  var diffAbsMaxDiffAbsIndex = null;\n\
    \  var diffAbsMaxDiffAbsDiff = null;\n  var diffAbsMaxDiffAbsDiffIndex = null;\n\
    \  var diffAbsMaxDiffAbsDiffAbs = null;\n  var diffAbsMaxDiffAbsDiffAbsIndex =\
    \ null;\n  var diffAbsMaxDiffAbsDiffAbsDiff = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffIndex\
    \ = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbs = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbsIndex\
    \ = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiff = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffIndex\
    \ = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbs = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbsIndex\
    \ = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbsDiff = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbsDiffIndex\
    \ = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = null;\n  var\
    \ diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsIndex = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff\
    \ = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffIndex = null;\n\
    \  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsIndex\
    \ = null;\n  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiff = null;\n\
    \  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffIndex = null;\n\
    \  var diffAbsMaxDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbsDiffAbs = null;\n \
    \ var diff\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppt7rvajc.js:60\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var sign;\n  var intValue;\n  var intValue2;\n  var intValue3;\n\
    \  var intValue4;\n  var intValue5;\n  var intValue6;\n  var intValue7;\n  var\
    \ intValue8;\n  var intValue9;\n  var intValue10;\n  var intValue11;\n  var intValue12;\n\
    \  var intValue13;\n  var intValue14;\n  var intValue15;\n  var intValue16;\n\
    \  var intValue17;\n  var intValue18;\n  var intValue19;\n  var intValue20;\n\
    \  var intValue21;\n  var intValue22;\n  var intValue23;\n  var intValue24;\n\
    \  var intValue25;\n  var intValue26;\n  var intValue27;\n  var intValue28;\n\
    \  var intValue29;\n  var intValue30;\n  var intValue31;\n  var intValue32;\n\
    \  var intValue33;\n  var intValue34;\n  var intValue35;\n  var intValue36;\n\
    \  var intValue37;\n  var intValue38;\n  var intValue39;\n  var intValue40;\n\
    \  var intValue41;\n  var intValue42;\n  var intValue43;\n  var intValue44;\n\
    \  var intValue45;\n  var intValue46;\n  var intValue47;\n  var intValue48;\n\
    \  var intValue49;\n  var intValue50;\n  var intValue51;\n  var intValue52;\n\
    \  var intValue53;\n  var intValue54;\n  var intValue55;\n  var intValue56;\n\
    \  var intValue57;\n  var intValue58;\n  var intValue59;\n  var intValue60;\n\
    \  var intValue61;\n  var intValue62;\n  var intValue63;\n  var intValue64;\n\
    \  var intValue65;\n  var intValue66;\n  var intValue67;\n  var intValue68;\n\
    \  var intValue69;\n  var intValue70;\n  var intValue71;\n  var intValue72;\n\
    \  var intValue73;\n  var intValue74;\n  var intValue75;\n  var intValue76;\n\
    \  var intValue77;\n  var intValue78;\n  var intValue79;\n  var intValue80;\n\
    \  var intValue81;\n  var intValue82;\n  var intValue83;\n  var intValue84;\n\
    \  var intValue85;\n  var intValue86;\n  var intValue87;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmptaj1kb72.js:117\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9f00_2nd.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpv8wp9dko.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var diff = null;\n  var diffAbs = null;\n  var closestAbs = null;\n\
    \  var closestDiffAbs = null;\n  var closestDiff = null;\n  var closestDiffAbsSq\
    \ = null;\n  var closestDiffSq = null;\n  var closestDiffSqAbs = null;\n  var\
    \ closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq\
    \ = null;\n  var closestDiffSqAbsSq = null;\n  var closestDiffSqAbsSq = null;\n\
    \  var closestDiffSqAbsSq = null;\n  var closestDiff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpc2k9o5gh.js:88\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var abs;\n  var int;\n  var sign;\n  var intValue;\n  var intValues;\n\
    \  var i;\n\n  if(value === null || value === undefined){\n    return null;\n\
    \  }\n\n  if(typeof value === \"string\"){\n    value = parseFloat(value);\n \
    \ }\n\n  if(typeof value !== \"number\"){\n    return null;\n  }\n\n  if(isNaN(value)){\n\
    \    return null;\n  }\n\n  if(value === 0){\n    return 0;\n  }\n\n  if(value\
    \ % 1 !== 0){\n    return null;\n  }\n\n  if(value < 0){\n    value = -value;\n\
    \  }\n\n  if(value < 1){\n    return 1;\n  }\n\n  if(value % 1 === 0){\n    return\
    \ value;\n  }\n\n  if(value % 1 === 1){\n    return 1;\n  }\n\n  if(value % 1\
    \ === -1){\n    return -1;\n  }\n\n  diff = value - 1;\n  abs = Math.abs(diff);\n\
    \n  if(diff > 0){\n    closest = Math.ceil(abs);\n  }else{\n    closest = Math.floor(abs);\n\
    \  }\n\n  if(closest === 0){\n    return value;\n  }\n\n  if(closest === 1){\n\
    \    return 1;\n  }\n\n  if(closest === -1){\n    return -1;\n  }\n\n  sign =\
    \ diff < 0 ? -1 : 1;\n\n  if(closest < Math.abs(value - 1)){\n    closest = Math.abs(value\
    \ - 1);\n  }\n\n  if(closest === Math.abs(value - 1)){\n    return value;\n  }\n\
    \n  if(closest > Math.abs(value - 1)){\n    closest = Math.abs(value - 1);\n \
    \ }\n\n  if(closest === Math.abs(value - 1)){\n    return value;\n  }\n\n  if(closest\
    \ < Math.abs(value - 2)){\n    closest = Math.abs(value - 2);\n  }\n\n  if(closest\
    \ === Math.abs(value - 2)){\n    return value;\n  }\n\n  if(closest > Math.abs(value\
    \ - 2)){\n    closest = Math.abs(value - 2);\n  }\n\n  if(closest === Math.abs(value\
    \ - 2)){\n    return value;\n  }\n\n  if(closest < Math.abs(value - 3)){\n   \
    \ closest = Math.abs(value - 3);\n  }\n\n  if(closest === Math.abs(value - 3)){\n\
    \    return value;\n  }\n\n  if(closest > Math.abs(value - 3)){\n    closest =\
    \ Math.abs(value - 3);\n  }\n\n  if(closest === Math.abs(value - 3)){\n    return\
    \ value;\n  }\n\n  if(closest < Math.abs(value - 4)){\n    closest = Math.abs(value\
    \ - 4);\n  }\n\n  if(closest === Math.abs(value - 4)){\n    return value;\n  }\n\
    \n  if(closest > Math.abs(value - 4)){\n    closest = Math.abs(value - 4);\n \
    \ }\n\n  if(closest === Math.abs(value - 4)){\n    return value;\n  }\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp86ucv2gk.js:166\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  var diff = Math.abs(value - closest);\n  if (diff < .1)\
    \ {\n    return closest;\n  } else {\n    return closest + 1;\n  }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n16\n\nshould equal\n\n15\n    at test (/tmp/tmp4rhmbv5n.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4rhmbv5n.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDistance = Math.abs(parseInt(value));\n  var closestDistanceSquare\
    \ = Math.pow(closestDistance, 2);\n  for(var i = 0; i < this.values.length; i++){\n\
    \    var value = this.values[i];\n    var distance = Math.abs(parseInt(value));\n\
    \    var distanceSquare = Math.pow(distance, 2);\n    if(closestDistance > distanceSquare){\n\
    \      closestDistance = distanceSquare;\n      closest = value;\n    }\n  }\n\
    \  return closest;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpepsm1ygj.js:18\n  for(var i = 0; i < this.values.length; i++){\n\
    \                                 ^\n\nTypeError: Cannot read property 'length'\
    \ of undefined\n    at closest_integer (/tmp/tmpepsm1ygj.js:18:34)\n    at test\
    \ (/tmp/tmpepsm1ygj.js:35:20)\n    at Object.<anonymous> (/tmp/tmpepsm1ygj.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  if(difference === 0){\n    return\
    \ value;\n  }\n  if(difference < 1){\n    return Math.ceil(difference);\n  }\n\
    \  return Math.floor(difference);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpvd8ee8x3.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmpvd8ee8x3.js:15:20)\n    at closest_integer (/tmp/tmpvd8ee8x3.js:15:37)\n\
    \    at closest_integer (/tmp/tmpvd8ee8x3.js:15:37)\n    at closest_integer (/tmp/tmpvd8ee8x3.js:15:37)\n\
    \    at closest_integer (/tmp/tmpvd8ee8x3.js:15:37)\n    at closest_integer (/tmp/tmpvd8ee8x3.js:15:37)\n\
    \    at closest_integer (/tmp/tmpvd8ee8x3.js:15:37)\n    at closest_integer (/tmp/tmpvd8ee8x3.js:15:37)\n\
    \    at closest_integer (/tmp/tmpvd8ee8x3.js:15:37)\n    at closest_integer (/tmp/tmpvd8ee8x3.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (Math.abs(closest_integer - value) < 0.0000001) {\n\
    \    return closest_integer;\n  } else {\n    return value;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmpqwhx2m3s.js:29:10)\n    at Object.<anonymous> (/tmp/tmpqwhx2m3s.js:35:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.abs(value)));\n  return difference ===\
    \ 0? value : Math.ceil(difference);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpchbddcgl.js:15\n  var difference = Math.abs(value - closest_integer(Math.abs(value)));\n\
    \                                                         ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at Math.abs (<anonymous>)\n    at closest_integer\
    \ (/tmp/tmpchbddcgl.js:15:58)\n    at closest_integer (/tmp/tmpchbddcgl.js:15:37)\n\
    \    at closest_integer (/tmp/tmpchbddcgl.js:15:37)\n    at closest_integer (/tmp/tmpchbddcgl.js:15:37)\n\
    \    at closest_integer (/tmp/tmpchbddcgl.js:15:37)\n    at closest_integer (/tmp/tmpchbddcgl.js:15:37)\n\
    \    at closest_integer (/tmp/tmpchbddcgl.js:15:37)\n    at closest_integer (/tmp/tmpchbddcgl.js:15:37)\n\
    \    at closest_integer (/tmp/tmpchbddcgl.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp7leuv4jy.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffValueSumsIndex;\n \
    \ var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValueSumsIndex;\n\
    \  var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValueSumsIndex;\n\
    \  var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValueSumsIndex;\n\
    \  var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValueSumsIndex;\n\
    \  var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValueSumsIndex;\n\
    \  var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValueSumsIndex;\n\
    \  var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValueSumsIndex;\n\
    \  var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValueSumsIndex;\n\
    \  var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSumsValue;\n\
    \  var diffValueSumsIndex;\n  var diffValueSumsValue;\n  var diffValueSumsIndex;\n\
    \  var diffValueSumsValue;\n  var diffValueSumsIndex;\n  var diffValueSums\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp79_aggmi.js:104\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzqvj44yt.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmpt9z3sgr2.js:28:10)\n    at Object.<anonymous> (/tmp/tmpt9z3sgr2.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmppcjihv7z.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMin;\n    var diffAbsMinIndex;\n   \
    \ var diffAbsMinValue;\n    var diffAbsValue;\n    var diffAbsValueIndex;\n  \
    \  var diffAbsValueValue;\n    var diffValue;\n    var diffValueIndex;\n    var\
    \ diffValueValue;\n    var diffValueValueIndex;\n    var diffValueValueValue;\n\
    \    var diffValueValueValueIndex;\n    var diffValueValueValueValue;\n    var\
    \ diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n   \
    \ var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValueValueValue;\n\
    \    var diffValueValueValueValueIndex;\n    var diffValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjb990e0a.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n  var diffAbsMaxValAbsIndex4;\n\
    \  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n  var diffAbsMaxValAbsIndex7;\n\
    \  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n  var diffAbsMaxValAbsIndex10;\n\
    \  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n  var diffAbsMaxValAbsIndex13;\n\
    \  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n  var diffAbsMaxValAbsIndex16;\n\
    \  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n  var diffAbsMaxValAbsIndex19;\n\
    \  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n  var diffAbsMaxValAbsIndex22;\n\
    \  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n  var diffAbsMaxValAbsIndex25;\n\
    \  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n  var diffAbsMaxValAbsIndex28;\n\
    \  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n  var diffAbsMaxValAbsIndex31;\n\
    \  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n  var diffAbsMaxValAbsIndex34;\n\
    \  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n  var diffAbsMaxValAbsIndex37;\n\
    \  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n  var diffAbsMaxValAbsIndex40;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplkgzr4yg.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbz3t_kl7.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpn1q0ytga.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var closestDistance = Math.abs(value - closest_integer(value));\n    for(var\
    \ i = 0; i < integers.length; i++){\n        var currentDistance = Math.abs(value\
    \ - integers[i]);\n        if(currentDistance < closestDistance){\n          \
    \  closest = integers[i];\n            closestDistance = currentDistance;\n  \
    \      }\n    }\n    return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpt29g05f_.js:16\n    var closestDistance = Math.abs(value - closest_integer(value));\n\
    \                          ^\n\nRangeError: Maximum call stack size exceeded\n\
    \    at closest_integer (/tmp/tmpt29g05f_.js:16:27)\n    at closest_integer (/tmp/tmpt29g05f_.js:16:44)\n\
    \    at closest_integer (/tmp/tmpt29g05f_.js:16:44)\n    at closest_integer (/tmp/tmpt29g05f_.js:16:44)\n\
    \    at closest_integer (/tmp/tmpt29g05f_.js:16:44)\n    at closest_integer (/tmp/tmpt29g05f_.js:16:44)\n\
    \    at closest_integer (/tmp/tmpt29g05f_.js:16:44)\n    at closest_integer (/tmp/tmpt29g05f_.js:16:44)\n\
    \    at closest_integer (/tmp/tmpt29g05f_.js:16:44)\n    at closest_integer (/tmp/tmpt29g05f_.js:16:44)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpmqamu76e.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueAbs;\n\
    \  var diffValueAbsMax;\n  var diffValueAbsMaxIndex;\n  var diffValueAbsMaxValue;\n\
    \  var diffValueAbsMin;\n  var diffValueAbsMinIndex;\n  var diffValueAbsMinValue;\n\
    \  var diffValueAbsValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var\
    \ diffValueValueAbs;\n  var diffValueValueAbsMax;\n  var diffValueValueAbsMaxIndex;\n\
    \  var diffValueValueAbsMaxValue;\n  var diffValueValueAbsMin;\n  var diffValueValueAbsMinIndex;\n\
    \  var diffValueValueAbsMinValue;\n  var diffValueValueAbsValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueAbs;\n  var diffValueValueValueAbsMax;\n\
    \  var diffValueValueValueAbsMaxIndex;\n  var diffValueValueValueAbsMaxValue;\n\
    \  var diffValueValueValueAbsMin;\n  var diffValueValueValueAbsMinIndex;\n  var\
    \ diffValueValueValueAbsMinValue;\n  var diffValueValueValueAbsValue;\n  var diffValueValueValueIndex;\n\
    \  var diffValueValueValueValue;\n  var diffValueValueValueValueAbs;\n  var diffValueValueValueValueAbsMax;\n\
    \  var diffValueValueValueValueAbsMaxIndex;\n  var diffValueValueValueValueAbsMaxValue;\n\
    \  var diffValueValueValueValueAbsMin;\n  var diffValueValueValueValueAbsMinIndex;\n\
    \  var diffValueValueValueValueAbsMinValue;\n  var diffValueValueValueValueAbsValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueAbs;\n  var diffValueValueValueValueAbsMax;\n \
    \ var diffValueValueValueValueAbsMaxIndex;\n  var diffValueValueValueValueAbsMaxValue;\n\
    \  var diffValueValueValueValueAbsMin;\n  var diffValueValueValueValueAbsMinIndex;\n\
    \  var diffValueValueValueValueAbsMinValue;\n  var diffValueValueValueValueAbsValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpwenl3cem.js:89\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndex2;\n  var diffAbsMaxValAbsIndex3;\n  var diffAbsMaxValAbsIndex4;\n\
    \  var diffAbsMaxValAbsIndex5;\n  var diffAbsMaxValAbsIndex6;\n  var diffAbsMaxValAbsIndex7;\n\
    \  var diffAbsMaxValAbsIndex8;\n  var diffAbsMaxValAbsIndex9;\n  var diffAbsMaxValAbsIndex10;\n\
    \  var diffAbsMaxValAbsIndex11;\n  var diffAbsMaxValAbsIndex12;\n  var diffAbsMaxValAbsIndex13;\n\
    \  var diffAbsMaxValAbsIndex14;\n  var diffAbsMaxValAbsIndex15;\n  var diffAbsMaxValAbsIndex16;\n\
    \  var diffAbsMaxValAbsIndex17;\n  var diffAbsMaxValAbsIndex18;\n  var diffAbsMaxValAbsIndex19;\n\
    \  var diffAbsMaxValAbsIndex20;\n  var diffAbsMaxValAbsIndex21;\n  var diffAbsMaxValAbsIndex22;\n\
    \  var diffAbsMaxValAbsIndex23;\n  var diffAbsMaxValAbsIndex24;\n  var diffAbsMaxValAbsIndex25;\n\
    \  var diffAbsMaxValAbsIndex26;\n  var diffAbsMaxValAbsIndex27;\n  var diffAbsMaxValAbsIndex28;\n\
    \  var diffAbsMaxValAbsIndex29;\n  var diffAbsMaxValAbsIndex30;\n  var diffAbsMaxValAbsIndex31;\n\
    \  var diffAbsMaxValAbsIndex32;\n  var diffAbsMaxValAbsIndex33;\n  var diffAbsMaxValAbsIndex34;\n\
    \  var diffAbsMaxValAbsIndex35;\n  var diffAbsMaxValAbsIndex36;\n  var diffAbsMaxValAbsIndex37;\n\
    \  var diffAbsMaxValAbsIndex38;\n  var diffAbsMaxValAbsIndex39;\n  var diffAbsMaxValAbsIndex40;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpxv6vc8dg.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var num = parseFloat(value);\n\
    \  var closest;\n  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n\
    \  var diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n\
    \  var diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpzsg0kg4b.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest_integer\
    \ = Math.round(value);\n    var difference = Math.abs(value - closest_integer);\n\
    \    if (difference < .5){\n        return closest_integer;\n    } else {\n  \
    \      return closest_integer - 1;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n14\n\nshould equal\n\n15\n    at test (/tmp/tmpc1n0kqtr.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmpc1n0kqtr.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (closest_integer == value){\n    return value;\n\
    \  }\n  else {\n    return closest_integer;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-15\n\nshould equal\n\n-16\n    at test\
    \ (/tmp/tmpbfu2ypov.js:31:10)\n    at Object.<anonymous> (/tmp/tmpbfu2ypov.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    closest\
    \ = Math.round(Math.abs(value) - 1);\n  }\n  return closest;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n9\n\nshould equal\n\n10\n    at test (/tmp/tmpdulf88k0.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdulf88k0.js:36:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected: 10,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDistance = Math.abs(parseInt(value));\n  var closestDistanceSquare\
    \ = Math.pow(closestDistance, 2);\n  for(var i = 1; i < 10; i++){\n    var currentDistance\
    \ = Math.abs(parseInt(value));\n    var currentDistanceSquare = Math.pow(currentDistance,\
    \ 2);\n    if(currentDistanceSquare < closestDistanceSquare){\n      closestDistance\
    \ = currentDistance;\n      closest = i;\n    }\n  }\n  return closest;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nnull\n\nshould equal\n\n10\n    at test\
    \ (/tmp/tmp5b0t_o5c.js:34:10)\n    at Object.<anonymous> (/tmp/tmp5b0t_o5c.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: null,\n  expected: 10,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n  return\
    \ difference < .5 ? Math.floor(Math.abs(value)) : Math.ceil(Math.abs(value));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpo_k9bvsh.js:15\n  var difference = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n\
    \                                                                    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Math.abs (<anonymous>)\n    at closest_integer\
    \ (/tmp/tmpo_k9bvsh.js:15:69)\n    at closest_integer (/tmp/tmpo_k9bvsh.js:15:37)\n\
    \    at closest_integer (/tmp/tmpo_k9bvsh.js:15:37)\n    at closest_integer (/tmp/tmpo_k9bvsh.js:15:37)\n\
    \    at closest_integer (/tmp/tmpo_k9bvsh.js:15:37)\n    at closest_integer (/tmp/tmpo_k9bvsh.js:15:37)\n\
    \    at closest_integer (/tmp/tmpo_k9bvsh.js:15:37)\n    at closest_integer (/tmp/tmpo_k9bvsh.js:15:37)\n\
    \    at closest_integer (/tmp/tmpo_k9bvsh.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex2;\n  var\
    \ diffAbsMaxAbsIndex3;\n  var diffAbsMaxAbsIndex4;\n  var diffAbsMaxAbsIndex5;\n\
    \  var diffAbsMaxAbsIndex6;\n  var diffAbsMaxAbsIndex7;\n  var diffAbsMaxAbsIndex8;\n\
    \  var diffAbsMaxAbsIndex9;\n  var diffAbsMaxAbsIndex10;\n  var diffAbsMaxAbsIndex11;\n\
    \  var diffAbsMaxAbsIndex12;\n  var diffAbsMaxAbsIndex13;\n  var diffAbsMaxAbsIndex14;\n\
    \  var diffAbsMaxAbsIndex15;\n  var diffAbsMaxAbsIndex16;\n  var diffAbsMaxAbsIndex17;\n\
    \  var diffAbsMaxAbsIndex18;\n  var diffAbsMaxAbsIndex19;\n  var diffAbsMaxAbsIndex20;\n\
    \  var diffAbsMaxAbsIndex21;\n  var diffAbsMaxAbsIndex22;\n  var diffAbsMaxAbsIndex23;\n\
    \  var diffAbsMaxAbsIndex24;\n  var diffAbsMaxAbsIndex25;\n  var diffAbsMaxAbsIndex26;\n\
    \  var diffAbsMaxAbsIndex27;\n  var diffAbsMaxAbsIndex28;\n  var diffAbsMaxAbsIndex29;\n\
    \  var diffAbsMaxAbsIndex30;\n  var diffAbsMaxAbsIndex31;\n  var diffAbsMaxAbsIndex32;\n\
    \  var diffAbsMaxAbsIndex33;\n  var diffAbsMaxAbsIndex34;\n  var diffAbsMaxAbsIndex35;\n\
    \  var diffAbsMaxAbsIndex36;\n  var diffAbsMaxAbsIndex37;\n  var diffAbsMaxAbsIndex38;\n\
    \  var diffAbsMaxAbsIndex39;\n  var diffAbsMaxAbsIndex40;\n  var diffAbsMaxAbsIndex41;\n\
    \  var diffAbsMaxAbsIndex42;\n  var diffAbsMaxAbsIndex43;\n  var diffAbsMaxAbsIndex44;\n\
    \  var diffAbsMaxAbsIndex45;\n  var diff\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplgg3273i.js:79\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var\
    \ diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var\
    \ diffAbsValueValueValueValue;\n  var diffAbsValueValueValueIndex;\n  var diffAbsValueValueValueValue;\n\
    \  var diffAbsValueValueValue\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpbvv3o0vi.js:88\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxVal;\n  var diffAbsMaxValIndex;\n  var diffAbsMaxValAbs;\n  var diffAbsMaxValAbsIndex;\n\
    \  var diffAbsMaxValAbsIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndex;\n \
    \ var diffAbsMaxValAbsIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndexIndexIndex;\n\
    \  var diffAbsMaxValAbsIndexIndexIndexIndex;\n  var diffAbsMaxValAbsIndexIndex\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_xcc75ls.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffIndex;\n  var diffValue;\n  var diffValueIndex;\n\
    \  var diffValueValue;\n  var diffValues;\n  var diffValueSum;\n  var diffValueSumIndex;\n\
    \  var diffValueSumValue;\n  var diffValueSums;\n  var diffs;\n  var diffsAbs;\n\
    \  var diffsAbsMax;\n  var diffsAbsMaxIndex;\n  var diffsAbsMaxValue;\n  var diffsAbsMin;\n\
    \  var diffsAbsMinIndex;\n  var diffsAbsMinValue;\n  var diffsAbsValue;\n  var\
    \ diffsAbsValueIndex;\n  var diffsAbsValueValue;\n  var diffsAbsValues;\n  var\
    \ diffsAbsValueSum;\n  var diffsAbsValueSumIndex;\n  var diffsAbsValueSumValue;\n\
    \  var diffsAbsValueSums;\n  var diffsIndex;\n  var diffsValue;\n  var diffsValueIndex;\n\
    \  var diffsValueValue;\n  var diffsValues;\n  var diffsValueSum;\n  var diffsValueSumIndex;\n\
    \  var diffsValueSumValue;\n  var diffsValueSums;\n  var diffsSum;\n  var diffsSumIndex;\n\
    \  var diffsSumValue;\n  var diffsSums;\n  var diffsSumsAbs;\n  var diffsSumsAbsMax;\n\
    \  var diffsSumsAbsMaxIndex;\n  var diffsSumsAbsMaxValue;\n  var diffsSumsAbsMin;\n\
    \  var diffsSumsAbsMinIndex;\n  var diffsSumsAbsMinValue;\n  var diffsSumsAbsValue;\n\
    \  var diffsSumsAbsValueIndex;\n  var diffsSumsAbsValueValue;\n  var diffsSumsAbsValues;\n\
    \  var diffsSumsAbsValueSum;\n  var diffsSumsAbsValueSumIndex;\n  var diffsSumsAbsValueSumValue;\n\
    \  var diffsSumsAbsValueSums;\n  var diffsSumsIndex;\n  var diffsSumsValue;\n\
    \  var diffsSumsValueIndex;\n  var diffsSumsValueValue;\n  var diffsSumsValues;\n\
    \  var diffsSumsValueSum;\n  var \nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp9to88_c7.js:85\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  if(Math.abs(value) < 1){\n    closest = Math.round(value);\n  }else{\n    closest\
    \ = Math.round(value/Math.abs(value)) * Math.abs(value);\n  }\n  return closest;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n14.5\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmp7mwojnoy.js:30:10)\n    at Object.<anonymous> (/tmp/tmp7mwojnoy.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 14.5,\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if(Math.abs(closest_integer - value) < 0.0000001){\n\
    \    return closest_integer;\n  }\n  return value;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'14.5'\n\nshould equal\n\n15\n    at test\
    \ (/tmp/tmpzqu1embv.js:28:10)\n    at Object.<anonymous> (/tmp/tmpzqu1embv.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: '14.5',\n  expected: 15,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMin;\n    var diffAbsMinIndex;\n   \
    \ var diffAbsMinValue;\n    var diffAbsValue;\n    var diffAbsValueIndex;\n  \
    \  var diffAbsValueValue;\n    var diffAbsValueValueIndex;\n    var diffAbsValueValueValue;\n\
    \    var diffAbsValueValueValueIndex;\n    var diffAbsValueValueValueValue;\n\
    \    var diffAbsValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValue;\n\
    \    var diffAbsValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValue;\n\
    \    var diffAbsValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValue;\n    var diffAbsValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValue;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueValue;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueValue;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValueValueValueIndex;\n    var diffAbsValueValueValueValueValueValueIndex;\n\
    \    var diffAbsValueValueValueValue\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp8qj6wqv7.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if(closest == value){\n    return closest;\n  }\n  if(Math.abs(closest\
    \ - value) <= Math.abs(value - closest)){\n    return closest;\n  }\n  return\
    \ value;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-15\n\nshould equal\n\n-16\n    at test\
    \ (/tmp/tmpe2_nhzel.js:32:10)\n    at Object.<anonymous> (/tmp/tmpe2_nhzel.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueIndex;\n  var diffValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmph_dls20f.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffValue;\n  var diffValueIndex;\n  var diffValueValue;\n  var diffValueValueIndex;\n\
    \  var diffValueValueValue;\n  var diffValueValueValueIndex;\n  var diffValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValueValueValue;\n\
    \  var diffValueValueValueValueIndex;\n  var diffValueValueValue\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjs9cib_d.js:96\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp3sm1p14d.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n    var closest;\n\
    \    var diff;\n    var diffAbs;\n    var diffAbsMax;\n    var diffAbsMaxIndex;\n\
    \    var diffAbsMaxValue;\n    var diffAbsMaxValueIndex;\n    var diffAbsMaxValueValue;\n\
    \    var diffAbsMaxValueValueIndex;\n    var diffAbsMaxValueValueValue;\n    var\
    \ diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n \
    \   var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbsMaxValueValueValueIndex;\n    var diffAbsMaxValueValueValueValue;\n\
    \    var diffAbs\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_wbou4e7.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer\
    \ = Math.round(value);\n  if (closest_integer == value){\n    return value;\n\
    \  }\n  else {\n    return closest_integer;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-15\n\nshould equal\n\n-16\n    at test\
    \ (/tmp/tmpb5sxnqw_.js:31:10)\n    at Object.<anonymous> (/tmp/tmpb5sxnqw_.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ Math.round(value);\n  if(closest == value){\n    return closest;\n  }\n  if(Math.abs(closest\
    \ - value) <= Math.abs(value - closest)){\n    return closest;\n  }\n  return\
    \ value;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n-15\n\nshould equal\n\n-16\n    at test\
    \ (/tmp/tmpps8miip6.js:32:10)\n    at Object.<anonymous> (/tmp/tmpps8miip6.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected: -16,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMinValue;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueValue;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueIndex;\n  var diffAbsValueValueValueValue\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp60jw_b7u.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(value));\n  var roundTo = Math.floor(difference\
    \ / 2);\n  return roundTo === 0 ? value : value - roundTo;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpb284t40l.js:15\n  var difference = Math.abs(value - closest_integer(value));\n\
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ closest_integer (/tmp/tmpb284t40l.js:15:20)\n    at closest_integer (/tmp/tmpb284t40l.js:15:37)\n\
    \    at closest_integer (/tmp/tmpb284t40l.js:15:37)\n    at closest_integer (/tmp/tmpb284t40l.js:15:37)\n\
    \    at closest_integer (/tmp/tmpb284t40l.js:15:37)\n    at closest_integer (/tmp/tmpb284t40l.js:15:37)\n\
    \    at closest_integer (/tmp/tmpb284t40l.js:15:37)\n    at closest_integer (/tmp/tmpb284t40l.js:15:37)\n\
    \    at closest_integer (/tmp/tmpb284t40l.js:15:37)\n    at closest_integer (/tmp/tmpb284t40l.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpsslh_y5u.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var sign;\n  var intValue;\n  var intValues;\n  var i;\n\n  //\
    \ If value is an integer, then just return the value\n  if(parseInt(value) ==\
    \ value){\n    return parseInt(value);\n  }\n\n  // If value is a string, then\
    \ convert it to an integer\n  if(typeof value === \"string\"){\n    intValue =\
    \ parseInt(value);\n    if(isNaN(intValue)){\n      return undefined;\n    }\n\
    \    return intValue;\n  }\n\n  // If value is a number, then just return the\
    \ value\n  if(typeof value === \"number\"){\n    return value;\n  }\n\n  // If\
    \ value is a boolean, then return 0\n  if(typeof value === \"boolean\"){\n   \
    \ return 0;\n  }\n\n  // If value is a Date, then return 0\n  if(value instanceof\
    \ Date){\n    return 0;\n  }\n\n  // If value is a function, return 0\n  if(typeof\
    \ value === \"function\"){\n    return 0;\n  }\n\n  // If value is an object,\
    \ then return 0\n  if(typeof value === \"object\"){\n    return 0;\n  }\n\n  //\
    \ If value is an array, then return 0\n  if(value instanceof Array){\n    return\
    \ 0;\n  }\n\n  // If value is an object, then return 0\n  if(typeof value ===\
    \ \"object\"){\n    return 0;\n  }\n\n  // If value is an array, then return 0\n\
    \  if(value instanceof Array){\n    return 0;\n  }\n\n  // If value is an object,\
    \ then return 0\n  if(typeof value === \"object\"){\n    return 0;\n  }\n\n  //\
    \ If value is an array, then return 0\n  if(value instanceof Array){\n    return\
    \ 0;\n  }\n\n  // If value is an object, then return 0\n  if(typeof value ===\
    \ \"object\"){\n    return 0;\n  }\n\n  // If value is an array, then return 0\n\
    \  if(value instanceof Array){\n    return 0;\n  }\n\n  // If value is an object,\
    \ then return 0\n  if(typeof value === \"object\"){\n    return 0;\n  }\n\n  //\
    \ If value is an array, then return 0\n  if(value instanceof Array){\n    return\
    \ 0;\n  }\n\n  // If value is an object, then return 0\n  if(typeof value ===\
    \ \"object\"){\n    return 0;\n  }\n\n  // If value is an array, then return 0\n\
    \  if(value instanceof Array){\n    return 0;\n  }\n\n  // If value is an object,\
    \ then return 0\n  if(typeof value === \"object\"){\n    return 0;\n  }\n\n  //\
    \ If value is an array, then return 0\n  if(value instanceof Array){\n    return\
    \ 0;\n  }\n\n  // If value is an object, then return 0\n  if(typeof value ===\
    \ \"object\"){\n    return 0;\n  }\n\n  // If value is an array, then return 0\n\
    \  if(value instanceof Array){\n    return 0;\n  }\n\n  // If value is an object,\
    \ then return 0\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjdepzoo4.js:149\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxValue;\n  var diffAbsMaxValueIndex;\n  var diffAbsMaxValueValue;\n\
    \  var diffAbsMaxValueValueIndex;\n  var diffAbsMaxValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbsMaxValueValueValueIndex;\n\
    \  var diffAbsMaxValueValueValueValue;\n  var diffAbs\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjfr8ypst.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest_integer;\n\
    \  var closest_diff;\n  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n\
    \  var diffAbsMaxValue;\n  var diffAbsMin;\n  var diffAbsMinIndex;\n  var diffAbsMinValue;\n\
    \  var diffAbsValue;\n  var diffAbsValueIndex;\n  var diffAbsValueValue;\n  var\
    \ diffAbsValueValueIndex;\n  var diffAbsValueValueValue;\n  var diffAbsValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValue;\n  var diffAbsValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffAbsValueValueValueValueValueValueValueValueValueValue;\n  var diffAbsValueValueValueValueValueValueValueValueValueIndex;\n\
    \  var diffAbs\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpczv74aol.js:76\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var closestAbs;\n  var closestDiff;\n  var closestDiffAbs;\n\
    \  var closestAbsDiff;\n  var closestAbsDiffAbs;\n  var closestAbsDiffAbs2;\n\
    \  var closestAbsDiffAbs3;\n  var closestAbsDiffAbs4;\n  var closestAbsDiffAbs5;\n\
    \  var closestAbsDiffAbs6;\n  var closestAbsDiffAbs7;\n  var closestAbsDiffAbs8;\n\
    \  var closestAbsDiffAbs9;\n  var closestAbsDiffAbs10;\n  var closestAbsDiffAbs11;\n\
    \  var closestAbsDiffAbs12;\n  var closestAbsDiffAbs13;\n  var closestAbsDiffAbs14;\n\
    \  var closestAbsDiffAbs15;\n  var closestAbsDiffAbs16;\n  var closestAbsDiffAbs17;\n\
    \  var closestAbsDiffAbs18;\n  var closestAbsDiffAbs19;\n  var closestAbsDiffAbs20;\n\
    \  var closestAbsDiffAbs21;\n  var closestAbsDiffAbs22;\n  var closestAbsDiffAbs23;\n\
    \  var closestAbsDiffAbs24;\n  var closestAbsDiffAbs25;\n  var closestAbsDiffAbs26;\n\
    \  var closestAbsDiffAbs27;\n  var closestAbsDiffAbs28;\n  var closestAbsDiffAbs29;\n\
    \  var closestAbsDiffAbs30;\n  var closestAbsDiffAbs31;\n  var closestAbsDiffAbs32;\n\
    \  var closestAbsDiffAbs33;\n  var closestAbsDiffAbs34;\n  var closestAbsDiffAbs35;\n\
    \  var closestAbsDiffAbs36;\n  var closestAbsDiffAbs37;\n  var closestAbsDiffAbs38;\n\
    \  var closestAbsDiffAbs39;\n  var closestAbsDiffAbs40;\n  var closestAbsDiffAbs41;\n\
    \  var closestAbsDiffAbs42;\n  var closestAbsDiffAbs43;\n  var closestAbsDiffAbs44;\n\
    \  var closestAbsDiffAbs45;\n  var closestAbsDiffAbs46;\n  var closestAbsDiffAbs47;\n\
    \  var closestAbsDiffAbs48;\n  var closestAbsDiffAbs49;\n  var closestAbsDiffAbs50;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_6hi62n8.js:84\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var diffAbs;\n  var diffAbsMax;\n  var diffAbsMaxIndex;\n  var\
    \ diffAbsMaxAbs;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var\
    \ diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n  var diffAbsMaxAbsIndex;\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpjfaanevb.js:87\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var difference\
    \ = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n  return\
    \ difference < 0.000001 ? value : Math.floor(Math.abs(value));\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpcpdrjr2v.js:15\n  var difference = Math.abs(value - closest_integer(Math.floor(Math.abs(value))));\n\
    \                                                                    ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Math.abs (<anonymous>)\n    at closest_integer\
    \ (/tmp/tmpcpdrjr2v.js:15:69)\n    at closest_integer (/tmp/tmpcpdrjr2v.js:15:37)\n\
    \    at closest_integer (/tmp/tmpcpdrjr2v.js:15:37)\n    at closest_integer (/tmp/tmpcpdrjr2v.js:15:37)\n\
    \    at closest_integer (/tmp/tmpcpdrjr2v.js:15:37)\n    at closest_integer (/tmp/tmpcpdrjr2v.js:15:37)\n\
    \    at closest_integer (/tmp/tmpcpdrjr2v.js:15:37)\n    at closest_integer (/tmp/tmpcpdrjr2v.js:15:37)\n\
    \    at closest_integer (/tmp/tmpcpdrjr2v.js:15:37)\n"
  exit_code: 1
  status: Exception
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest =\
    \ null;\n  var closestDistance = Number.MAX_VALUE;\n  for(var i in this.integers){\n\
    \    var num = this.integers[i];\n    var distance = Math.abs(num - value);\n\
    \    if(distance < closestDistance){\n      closestDistance = distance;\n    \
    \  closest = num;\n    }\n  }\n  return closest;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nnull\n\nshould equal\n\n10\n    at test\
    \ (/tmp/tmpe9rk9vyi.js:33:10)\n    at Object.<anonymous> (/tmp/tmpe9rk9vyi.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: null,\n  expected: 10,\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value){\n  var closest;\n\
    \  var diff;\n  var sign;\n  var intValue;\n  var intValue2;\n  var intValue3;\n\
    \  var intValue4;\n  var intValue5;\n  var intValue6;\n  var intValue7;\n  var\
    \ intValue8;\n  var intValue9;\n  var intValue10;\n  var intValue11;\n  var intValue12;\n\
    \  var intValue13;\n  var intValue14;\n  var intValue15;\n  var intValue16;\n\
    \  var intValue17;\n  var intValue18;\n  var intValue19;\n  var intValue20;\n\
    \  var intValue21;\n  var intValue22;\n  var intValue23;\n  var intValue24;\n\
    \  var intValue25;\n  var intValue26;\n  var intValue27;\n  var intValue28;\n\
    \  var intValue29;\n  var intValue30;\n  var intValue31;\n  var intValue32;\n\
    \  var intValue33;\n  var intValue34;\n  var intValue35;\n  var intValue36;\n\
    \  var intValue37;\n  var intValue38;\n  var intValue39;\n  var intValue40;\n\
    \  var intValue41;\n  var intValue42;\n  var intValue43;\n  var intValue44;\n\
    \  var intValue45;\n  var intValue46;\n  var intValue47;\n  var intValue48;\n\
    \  var intValue49;\n  var intValue50;\n  var intValue51;\n  var intValue52;\n\
    \  var intValue53;\n  var intValue54;\n  var intValue55;\n  var intValue56;\n\
    \  var intValue57;\n  var intValue58;\n  var intValue59;\n  var intValue60;\n\
    \  var intValue61;\n  var intValue62;\n  var intValue63;\n  var intValue64;\n\
    \  var intValue65;\n  var intValue66;\n  var intValue67;\n  var intValue68;\n\
    \  var intValue69;\n  var intValue70;\n  var intValue71;\n  var intValue72;\n\
    \  var intValue73;\n  var intValue74;\n  var intValue75;\n  var intValue76;\n\
    \  var intValue77;\n  var intValue78;\n  var intValue79;\n  var intValue80;\n\
    \  var intValue81;\n  var intValue82;\n  var intValue83;\n  var intValue84;\n\
    \  var intValue85;\n  var intValue86;\n  var intValue87;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp2k9hnwx8.js:117\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: SyntaxError
